#ifndef _ACSDAEMON_IDL_
#define _ACSDAEMON_IDL_

/*******************************************************************************
*    ALMA - Atacama Large Millimiter Array
*
*    (c) European Southern Observatory, 2002
*    Copyright by ESO (in the framework of the ALMA collaboration)
*    and Cosylab 2002, All rights reserved
*
*    This library is free software; you can redistribute it and/or
*    modify it under the terms of the GNU Lesser General Public
*    License as published by the Free Software Foundation; either
*    version 2.1 of the License, or (at your option) any later version.
*
*    This library is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
*    Lesser General Public License for more details.
*
*    You should have received a copy of the GNU Lesser General Public
*    License along with this library; if not, write to the Free Software
*    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
*
* "@(#) $Id: acsdaemon.idl,v 1.8 2008/06/27 11:40:25 msekoran Exp $"
*
* who       when      what
* --------  --------  ----------------------------------------------
* msekoran 2006-06-21 created
*
* This file comes from module ACS/LGPL/CommonSoftware/acsdaemonidl
*/

#include <acscommon.idl>
#include <acscomponent.idl>
#include <ACSErrTypeCommon.idl>
#include <maciErrType.idl>
#include <acsdaemonErrType.idl>

#pragma prefix "alma"

/** @file acsdaemon.idl
 *  ACS Daemon's IDL File
 */

module acsdaemon 
{
	/** @interface Callback
	 *  Interface Callback is used to signal operation completions from the daemon processes
	 *  to the clients. 
	 * Note that this interface is very similar to the CBvoid interface defined in baci.idl. Here we currently define our own interface,
	 * mainly to avoid the unnecessary CBDescOut parameter in the callback methods, but also because the CBxxx interfaces
	 * are mainly associated with baci. This should perhaps be changed once ACS has more general callback interfaces.
	 */
	interface DaemonCallback : ACS::OffShoot
	{
		/**
		 * Report the result of the operation
		 */
		void done(in ACSErr::Completion comp);

		/**
		 * Report the progress of the operation
		 */
		void working(in ACSErr::Completion comp);
	};


	/** 
	 * This service name is used by acsdaemon clients (scripts, manager etc) to resolve the container daemon reference.
	 */
	const string containerDaemonServiceName = "ACSContainerDaemon";


	/** @interface ContainerDaemon
	 * Interface ContainerDaemon is used to (remotely) control the lifecycle of ACS containers.
	 * In the future we intend to add monitoring capabilities to the daemon, which should be exposed 
	 * to operator tools via this interface or some inherited management interface. 
	 */
	interface ContainerDaemon
	{
	/** 
	 *  Starts a container.
	 * 
	 *  @param type_modifiers See Container.xsd (DeployInfo.TypeModifiers) and http://jira.alma.cl/browse/COMP-1316 
	 *  @return void
	 *  @htmlonly
	 *  <br><hr>
	 *  @endhtmlonly
	 */
	void start_container(
			in string container_type, 
			in string container_name, 
			in short instance_number,
			in ACS::stringSeq type_modifiers,
			in string flags)
				raises (acsdaemonErrType::FailedToStartContainerEx, ACSErrTypeCommon::BadParameterEx);
	/** 
	 *  Stop a container.
	 *  @return void
	 *  @htmlonly
	 *  <br><hr>
	 *  @endhtmlonly
	 */
	void stop_container(in string container_name, 
			in short instance_number, 
			in string flags) 
				raises (acsdaemonErrType::FailedToStopContainerEx, ACSErrTypeCommon::BadParameterEx);
	/** 
	 * Shuts down the daemon.
	 * @return void
	 * @htmlonly
	 * <br><hr>
	 * @endhtmlonly
	 */
	void shutdown() raises (maciErrType::NoPermissionEx);
	};


	/** 
	 * This service name is used by acsdaemon clients (scripts, manager etc) to resolve the services daemon reference.
	 */
	const string servicesDaemonServiceName = "ACSServicesDaemon";


	interface ServicesDaemon
	{
	/**
	 * Starts ACS services. 
	 * Returns immediately. The client will be notified through the callback object 
	 * when the services are up, or if an error has occurred.
	 * @return void
	 * @htmlonly
	 * <br><hr>
	 * @endhtmlonly
	 */
	void start_acs( 
			in DaemonCallback callback,
			in short instance_number, 
			in string flags)
				raises (ACSErrTypeCommon::BadParameterEx);

	/** 
	 * Stops ACS services.
	 * Returns immediately. The client will be notified through the callback object 
	 * when the services are stopped, or if an error has occurred.
	 * @return void
	 * @htmlonly
	 * <br><hr>
	 * @endhtmlonly
	 */
	void stop_acs(
			in DaemonCallback callback,
			in short instance_number, 
			in string flags)
				raises (ACSErrTypeCommon::BadParameterEx);

	/** 
	 * Returns status of ACS (i.e. invokes acsStatus).
	 * @parm instance_number ACS instance number
	 * @return string Status of ACS.
	 * @htmlonly
	 * <br><hr>
	 * @endhtmlonly
	 * @tbd return a structure or similar instead string
	 */
	string status_acs(
			in short instance_number)
				raises (acsdaemonErrType::FailedToGetAcsStatusEx);

	/** 
	 * Shuts down the daemon.
	 * @return void
	 * @htmlonly
	 * <br><hr>
	 * @endhtmlonly
	 */
	void shutdown() raises (maciErrType::NoPermissionEx);
	};

};

#endif
