#ifndef _ACSDAEMON_IDL_
#define _ACSDAEMON_IDL_

/*******************************************************************************
*    ALMA - Atacama Large Millimiter Array
*
*    (c) European Southern Observatory, 2002
*    Copyright by ESO (in the framework of the ALMA collaboration)
*    and Cosylab 2002, All rights reserved
*
*    This library is free software; you can redistribute it and/or
*    modify it under the terms of the GNU Lesser General Public
*    License as published by the Free Software Foundation; either
*    version 2.1 of the License, or (at your option) any later version.
*
*    This library is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
*    Lesser General Public License for more details.
*
*    You should have received a copy of the GNU Lesser General Public
*    License along with this library; if not, write to the Free Software
*    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
*
* "@(#) $Id: acsdaemon.idl,v 1.3 2008/01/04 12:51:28 hsommer Exp $"
*
* who       when      what
* --------  --------  ----------------------------------------------
* msekoran 2006-06-21 created
*
* This file comes from module ACS/LGPL/CommonSoftware/acsdaemonidl
*/

#include <acscommon.idl>
#include <acsdaemonErrType.idl>
#include <ACSErrTypeCommon.idl>

#pragma prefix "alma"

/** @file acsdaemon.idl
 *  ACS Daemon's IDL File
 */

module acsdaemon 
{
    /** @interface ContainerDaemon
     * Interface ContainerDaemon is used to (remotely) control the lifecycle of ACS containers.
     * In the future we intend to add monitoring capabilities to the daemon, which should be exposed 
     * to operator tools via this interface or some inherited management interface. 
     */
    interface ContainerDaemon
	{
	/** 
	 *  Start a container.
	 *  @param type_modifiers To be added! See Container.xsd (DeployInfo.TypeModifiers) and http://jira.alma.cl/browse/COMP-1316 
	 *  @return void
	 *  @htmlonly
	 *  <br><hr>
	 *  @endhtmlonly
	 */
	void start_container(
			in string container_type, 
			in string container_name, 
			in short instance_number,
// @todo Uncomment this when backward incompatibility is allowed (e.g. ACS 8.0)		in ACS::stringSeq type_modifiers,   
			in string flags) 
				raises (acsdaemonErrType::FailedToStartContainerEx, ACSErrTypeCommon::BadParameterEx);
	/** 
	 *  Stop a container.
	 *  @return void
	 *  @htmlonly
	 *  <br><hr>
	 *  @endhtmlonly
	 */
	void stop_container(in string container_name, 
			in short instance_number, 
			in string flags) 
				raises (acsdaemonErrType::FailedToStopContainerEx, ACSErrTypeCommon::BadParameterEx);
	};


    interface ServicesDaemon
	{
	/** 
	 *  Start ACS services.
	 *  @return void
	 *  @htmlonly
	 *  <br><hr>
	 *  @endhtmlonly
	 */
	void start_acs(in short instance_number, in string flags) raises (acsdaemonErrType::FailedToStartAcsEx, ACSErrTypeCommon::BadParameterEx);
	/** 
	 *  Stop ACS services.
	 *  @return void
	 *  @htmlonly
	 *  <br><hr>
	 *  @endhtmlonly
	 */
	void stop_acs(in short instance_number, in string flags) raises (acsdaemonErrType::FailedToStopAcsEx, ACSErrTypeCommon::BadParameterEx);
       /** 
	 *  Returns status of ACS (i.e. invokes acsStatus).
         *  @parm instance_number ACS instance number
	 *  @return string Status of ACS.
	 *  @htmlonly
	 *  <br><hr>
	 *  @endhtmlonly
         * @tbd return a structure or similar instead string
	 */
	string status_acs(in short instance_number) raises (acsdaemonErrType::FailedToGetAcsStatusEx);
	};
};

#endif
