#ifndef _ACSNC_IDL_
#define _ACSNC_IDL_
/*******************************************************************************
 *    ALMA - Atacama Large Millimiter Array
 *    (c) Associated Universities Inc., 2002
 *    (c) European Southern Observatory, 2002
 *    Copyright by ESO (in the framework of the ALMA collaboration)
 *    and Cosylab 2002, All rights reserved
 * 
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 2.1 of the License, or (at your option) any later version.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
 *
 * who       when      what
 * --------  --------  ----------------------------------------------
 * david 2003-03-03 contains strings common to all implementation languages
 * david 2002-09-26 added more comments
 */
#include <CosNotification.idl>
#include <CosNotifyComm.idl>
#include <acscommon.idl>
#include <baci.idl>

#pragma prefix "alma"

/** @file acsnc.idl
 *  acsnc IDL File
 */
module acsnc
{
    /**
     *  The following structure defines the description of an event. Each
     *  structured event published onto a notification channel by the various
     *  ACS APIs have an instance of this structure packed into it (in the 
     *  remainder_of_body CORBA any field).
     */
    struct EventDescription
    {
	/**
	 *  Defines the name of the publisher of this specific event. It
	 *  could be the name of a component, subsystem, etc.
	 */
	string name;

	/**
	 *  Defines the epoch in time just before the event was sent across 
	 *  the network to a channel.  In the case of real-time suppliers this 
	 *  value is the time the event was stored in the queue.
	 */
	ACS::Time timestamp;

	/**
	 *  This value is the number of events of the current event type
	 *  that have been published by the supplier instance.  It's absolutely
	 *  vital to note this is not necessarily the total number of (current 
	 *  event type) events sent (e.g., what if there are more than one 
	 *  suppliers for this particular channel?).
	 */
	unsigned long long count;
    };


    /**
     * This is the sequence holding the Channel, Domain, and Type Names.
     * Not valid for all language mappings.
     */
    typedef sequence<string> NCSeq;


    ////////////////////////////////////////////////////////////////////////
    //The following definitions are used internally by all language mappings.
    ////////////////////////////////////////////////////////////////////////
    /**
     * FILTER_LANGUAGE_NAME is the default filtering language used by the addFilter
     * consumer (API) method.
     */
    const string FILTER_LANGUAGE_NAME = "ETCL";

    ////////////////////////////////////////////////////////////////////////
    /** @interface ACSEventAdmin
     *  A high-level interface designed to manipulate the CORBA notification
     *  service.  This includes channel creation, destruction, and monitoring
     *  of events among other things.  Exception handling for the various 
     *  methods has yet to be determined.
     */
    interface ACSEventAdmin : ACS::ACSComponent
	{
	/**
	 * Enables methods that change the internal state of the Notification
	 * Service (e.g., createChannel, destroyChannel, etc.).  Really this is 
	 * just a rudimentary security mechanism (to be replaced in some future
	 * version of ACS) to discourage meddling of the Notification Service
	 * from objexp.
	 *
	 * @param token A security token known only by the implementation of
	 * this IDL interface.
	 * @return true if the methods are enabled.
	 * @htmlonly
	 * <br><hr>
	 * @endhtmlonly
	 */
	boolean authenticate(in string token);


	/**
	 * Creates a channel.
	 *
	 * @param channelName The name of the channel (registered with the 
	 * CORBA Naming Service).
	 * @param initialQOS The initial quality of service properties defining
	 * the channel.  An empty QoSProperties sequence is valid.
	 * @param initialAdmin The initial administrative properties defining
	 * the channel. An empty AdminProperties sequence is valid.
	 * @htmlonly
	 * <br><hr>
	 * @endhtmlonly
	 */
	void createChannel(in string channelName,
			   in CosNotification::QoSProperties initialQOS,
			   in CosNotification::AdminProperties initialAdmin);

	/**
	 * Reconfigures the channel's properties after it has already been
	 * created.  Note that some properties cannot be changed after the channel
	 * has been instantiated.
	 *
	 * @param channelName The name of the channel (registered with the 
	 * CORBA Naming Service).
	 * @param newQOS The new quality of service properties defining
	 * the channel.  An empty QoSProperties sequence is valid.
	 * @param initialAdmin The new administrative properties defining
	 * the channel. An empty AdminProperties sequence is valid.
	 * @htmlonly
	 * <br><hr>
	 * @endhtmlonly
	 */
	void configChannelProperties(in string channelName,
				     in CosNotification::QoSProperties newQOS,
				     in CosNotification::AdminProperties newAdmin);
	
	/**
	 * Destroys a channel and unregisters it from the Naming Service.
	 * 
	 * @param channelName The name of the channel (registered with the 
	 * CORBA Naming Service).
	 * @htmlonly
	 * <br><hr>
	 * @endhtmlonly
	 */
	void destroyChannel(in string channelName);

	/**
	 * Returns various bits of useful information associated with a particular
	 * channel.
	 *
	 * @param channelName The name of the channel (registered with the 
	 * CORBA Naming Service).
	 * @param numSuppliers The total number of suppliers on the channel.
	 * @param numConsumers The total number of consumers on this channel.
	 * @param totalEvents The total number of events that have been sent on this channel.
	 * @param initialQOS The Quality of Service properties associated with this channel.
	 * @param initialAdmin The administrative properties associated with this channel.
	 * @param eventTypes The type events that have been receieved so far.
	 * @htmlonly
	 * <br><hr>
	 * @endhtmlonly
	 */
	void getChannelInfo(in string channelName, 
			    out unsigned short numSuppliers,
			    out unsigned short numConsumers,
			    out unsigned long long totalEvents,
			    out CosNotification::QoSProperties initialQOS,
			    out CosNotification::AdminProperties initialAdmin,
			    out NCSeq eventTypes);

	/**
	 * Returns a list of channel names created by the ACS event channel API.
	 *
	 * @return A string sequence of channel names that have been registered with
	 * the CORBA Naming Service.
	 * @htmlonly
	 * <br><hr>
	 * @endhtmlonly
	 */
	NCSeq getActiveChannels();

	/**
	 * Monitors all events from all channels via a single CBstring object.
	 * DWF-perhaps the BACI CB interface should be subclassed within this module
	 * and have a user-defined struct (defined by Exec or HLA) passed to the 
	 * working/done callback methods instead of a simple string...
	 *
	 * @param format The structure of the string the event will be formatted to.
	 * The various ways this can be done have yet to be determined.
	 * @param cb CBstring instance which will have the working method invoked 
	 * each time an event is received.
	 * @param desc Used to negotiate timeouts between client and server.
	 * @htmlonly
	 * <br><hr>
	 * @endhtmlonly
	 */
	void monitorEvents(in ACS::CBstring cb,
			   in ACS::CBDescIn desc);
	};
    
    /**
     * The only reason this interface is being defined is because the ACS Java implementation
     * has a limitation where only IDL interface implementations derived from ACS::OffShoots
     * can be activated by the ContainerServices.
     */
    interface OSPushSupplier : CosNotifyComm::StructuredPushSupplier, ACS::OffShoot {};

    /**
     * The only reason this interface is being defined is because the ACS Java implementation
     * has a limitation where only IDL interface implementations derived from ACS::OffShoots
     * can be activated by the ContainerServices.
     */
    interface OSPushConsumer : CosNotifyComm::StructuredPushConsumer, ACS::OffShoot {};
};
#endif
