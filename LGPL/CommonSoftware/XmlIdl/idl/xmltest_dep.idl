/*
 *    ALMA - Atacama Large Millimiter Array
 *    (c) European Southern Observatory, 2002
 *    Copyright by ESO (in the framework of the ALMA collaboration),
 *    All rights reserved
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 2.1 of the License, or (at your option) any later version.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA 02111-1307  USA
 */

#ifndef _XMLTEST_DEP_IDL_
#define _XMLTEST_DEP_IDL_

#include <acscommon.idl>
#include <acscomponent.idl>
#include <fakexmlentity.idl>

#pragma prefix "alma"

/**
 * This test module contains cyclic dependencies.
 */
module xmltest_dep
{
	typedef fakexmlentity::XmlEntityStruct ObsProposal;

	/////////////////////////////////////////////////////////////////////////////////
	// Mutual interface - struct dependency.
	// ACS forbids passing of component references in application IDLs, 
	// but offshoot references are allowed as struct members.
	/////////////////////////////////////////////////////////////////////////////////

	// No xml in offshoot nor struct 
	
	interface OffshootWithStruct;

	struct StructWithOffshoot {
		OffshootWithStruct myOffshoot;
	};
	
	interface OffshootWithStruct : ACS::OffShoot
	{
		void takeThatStruct(in StructWithOffshoot yourStruct);
	};


	// xml in offshoot but not in the struct 

	interface XmlOffshootWithStruct;

	struct StructWithXmlOffshoot {
		XmlOffshootWithStruct myOffshoot;
	};
	
	interface XmlOffshootWithStruct : ACS::OffShoot
	{
		void takeThatStruct(in StructWithXmlOffshoot yourStruct);
		ObsProposal getObsProposal();
	};


	// xml in the struct but not in the offshoot
	
	interface OffshootWithXmlStruct;

	struct XmlStructWithOffshoot {
		OffshootWithXmlStruct myOffshoot;
		ObsProposal oopsProposal;
	};
	
	interface OffshootWithXmlStruct : ACS::OffShoot
	{
		void takeThatStruct(in XmlStructWithOffshoot yourStruct);
	};

	
	/////////////////////////////////////////////////////////////////////////////////
	// Mutual interface - struct dependency as found in real-world IDL.
	// ACS forbids passing of component references in application IDLs, 
	// but CharacteristicComponentDesc as defined in baci.idl is exempt
	// because that struct is used only internally by ACS.
	/////////////////////////////////////////////////////////////////////////////////

	interface CharacteristicComponent;

	struct CharacteristicComponentDesc {
		CharacteristicComponent characteristic_component_ref;
	};

	interface CharacteristicComponent : ACS::ACSComponent {
		CharacteristicComponentDesc descriptor();
	};

};

#endif
