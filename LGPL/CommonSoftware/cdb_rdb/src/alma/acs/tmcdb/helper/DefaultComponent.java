package alma.acs.tmcdb;
// Generated Jun 5, 2017 7:15:51 PM by Hibernate Tools 4.3.1.Final


import alma.hibernate.util.HibernateXmlType;
import alma.hibernate.util.StringEnumUserType;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import org.hibernate.annotations.Parameter;
import org.hibernate.annotations.Type;
import org.hibernate.annotations.TypeDef;
import org.hibernate.annotations.TypeDefs;

/**
 * DefaultComponent generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@Table(name="`DEFAULTCOMPONENT`"
)
@TypeDefs({
@TypeDef(name="xmltype", typeClass=HibernateXmlType.class),
@TypeDef(name="ImplLangEnum", typeClass=StringEnumUserType.class,
   parameters={ @Parameter(name="enumClassName", value="alma.acs.tmcdb.ImplLangEnum") })
})
public class DefaultComponent extends alma.acs.tmcdb.translator.TmcdbObject implements java.io.Serializable {


     protected Integer defaultComponentId;
     protected ComponentType componentType;
     protected AssemblyType assemblyType;
     protected ImplLangEnum implLang;
     protected Boolean realTime;
     protected String code;
     protected String path;
     protected Boolean isAutostart;
     protected Boolean isDefault;
     protected Boolean isStandaloneDefined;
     protected Integer keepAliveTime;
     protected Byte minLogLevel;
     protected Byte minLogLevelLocal;
     protected String XMLDoc;
     private Set<DefaultBaciProperty> defaultBaciProperties = new HashSet<DefaultBaciProperty>(0);

    public DefaultComponent() {
    }
   
       @Id 

    
    @Column(name="`DEFAULTCOMPONENTID`", unique=true, nullable=false)
    public Integer getDefaultComponentId() {
        return this.defaultComponentId;
    }
    
    public void setDefaultComponentId(Integer defaultComponentId) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("defaultComponentId", this.defaultComponentId, this.defaultComponentId = defaultComponentId);
        else
            this.defaultComponentId = defaultComponentId;
    }


@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="`COMPONENTTYPEID`", nullable=false)
    public ComponentType getComponentType() {
        return this.componentType;
    }
    
    public void setComponentType(ComponentType componentType) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("componentType", this.componentType, this.componentType = componentType);
        else
            this.componentType = componentType;
    }


@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="`ASSEMBLYTYPENAME`", nullable=false)
    public AssemblyType getAssemblyType() {
        return this.assemblyType;
    }
    
    public void setAssemblyType(AssemblyType assemblyType) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("assemblyType", this.assemblyType, this.assemblyType = assemblyType);
        else
            this.assemblyType = assemblyType;
    }


    
    @Column(name="`IMPLLANG`", nullable=false, length=16777216)
	@Type(type="ImplLangEnum")
    public ImplLangEnum getImplLang() {
        return this.implLang;
    }
    
    public void setImplLang(ImplLangEnum implLang) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("implLang", this.implLang, this.implLang = implLang);
        else
            this.implLang = implLang;
    }


    
    @Column(name="`REALTIME`", nullable=false)
    public Boolean getRealTime() {
        return this.realTime;
    }
    
    public void setRealTime(Boolean realTime) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("realTime", this.realTime, this.realTime = realTime);
        else
            this.realTime = realTime;
    }


    
    @Column(name="`CODE`", nullable=false, length=256)
    public String getCode() {
        return this.code;
    }
    
    public void setCode(String code) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("code", this.code, this.code = code);
        else
            this.code = code;
    }


    
    @Column(name="`PATH`", nullable=false, length=256)
    public String getPath() {
        return this.path;
    }
    
    public void setPath(String path) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("path", this.path, this.path = path);
        else
            this.path = path;
    }


    
    @Column(name="`ISAUTOSTART`", nullable=false)
    public Boolean getIsAutostart() {
        return this.isAutostart;
    }
    
    public void setIsAutostart(Boolean isAutostart) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("isAutostart", this.isAutostart, this.isAutostart = isAutostart);
        else
            this.isAutostart = isAutostart;
    }


    
    @Column(name="`ISDEFAULT`", nullable=false)
    public Boolean getIsDefault() {
        return this.isDefault;
    }
    
    public void setIsDefault(Boolean isDefault) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("isDefault", this.isDefault, this.isDefault = isDefault);
        else
            this.isDefault = isDefault;
    }


    
    @Column(name="`ISSTANDALONEDEFINED`")
    public Boolean getIsStandaloneDefined() {
        return this.isStandaloneDefined;
    }
    
    public void setIsStandaloneDefined(Boolean isStandaloneDefined) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("isStandaloneDefined", this.isStandaloneDefined, this.isStandaloneDefined = isStandaloneDefined);
        else
            this.isStandaloneDefined = isStandaloneDefined;
    }


    
    @Column(name="`KEEPALIVETIME`", nullable=false)
    public Integer getKeepAliveTime() {
        return this.keepAliveTime;
    }
    
    public void setKeepAliveTime(Integer keepAliveTime) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("keepAliveTime", this.keepAliveTime, this.keepAliveTime = keepAliveTime);
        else
            this.keepAliveTime = keepAliveTime;
    }


    
    @Column(name="`MINLOGLEVEL`")
    public Byte getMinLogLevel() {
        return this.minLogLevel;
    }
    
    public void setMinLogLevel(Byte minLogLevel) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("minLogLevel", this.minLogLevel, this.minLogLevel = minLogLevel);
        else
            this.minLogLevel = minLogLevel;
    }


    
    @Column(name="`MINLOGLEVELLOCAL`")
    public Byte getMinLogLevelLocal() {
        return this.minLogLevelLocal;
    }
    
    public void setMinLogLevelLocal(Byte minLogLevelLocal) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("minLogLevelLocal", this.minLogLevelLocal, this.minLogLevelLocal = minLogLevelLocal);
        else
            this.minLogLevelLocal = minLogLevelLocal;
    }


    
    @Column(name="`XMLDOC`", length=16777216)
    @Type(type="xmltype")
    public String getXMLDoc() {
        return this.XMLDoc;
    }
    
    public void setXMLDoc(String XMLDoc) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("XMLDoc", this.XMLDoc, this.XMLDoc = XMLDoc);
        else
            this.XMLDoc = XMLDoc;
    }


@OneToMany(fetch=FetchType.LAZY, mappedBy="defaultComponent")
    public Set<DefaultBaciProperty> getDefaultBaciProperties() {
        return this.defaultBaciProperties;
    }
    
    public void setDefaultBaciProperties(Set<DefaultBaciProperty> defaultBaciProperties) {    
    	this.defaultBaciProperties = defaultBaciProperties;
    }

	public void addDefaultBaciProperties(Set<DefaultBaciProperty> elements) {
		if( this.defaultBaciProperties != null )
			for(Iterator<DefaultBaciProperty> it = elements.iterator(); it.hasNext(); )
				addDefaultBaciPropertyToDefaultBaciProperties((DefaultBaciProperty)it.next());
	}

	public void addDefaultBaciPropertyToDefaultBaciProperties(DefaultBaciProperty element) {
		if( !this.defaultBaciProperties.contains(element) ) {
			this.defaultBaciProperties.add(element);
		}
	}





}


