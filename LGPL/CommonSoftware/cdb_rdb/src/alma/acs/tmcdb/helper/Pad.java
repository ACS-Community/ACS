package alma.acs.tmcdb;
// Generated Jun 5, 2017 7:15:51 PM by Hibernate Tools 4.3.1.Final


import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

/**
 * Pad generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@Table(name="`PAD`"
)
public class Pad extends alma.acs.tmcdb.translator.TmcdbObject implements java.io.Serializable {


     protected Integer baseElementId;
     protected BaseElement baseElement;
     protected String padName;
     protected Long commissionDate;
     protected Double XPosition;
     protected Double YPosition;
     protected Double ZPosition;
     protected Double XPositionErr;
     protected Double YPositionErr;
     protected Double ZPositionErr;
     protected Long posObservationTime;
     protected String posExecBlockUID;
     protected Integer posScanNumber;
     protected Double delay;
     protected Double delayError;
     protected Long delObservationTime;
     protected String delExecBlockUID;
     protected Integer delScanNumber;
     protected Boolean locked;
     protected Boolean increaseVersion;
     protected Integer currentVersion;
     protected String who;
     protected String changeDesc;
     private Set<AntennaToPad> antennaToPads = new HashSet<AntennaToPad>(0);
     private Set<WeatherStationToPad> weatherStationToPads = new HashSet<WeatherStationToPad>(0);
     private Set<HolographyTowerToPad> holographyTowerToPads = new HashSet<HolographyTowerToPad>(0);

    public Pad() {
    }
   
       @GenericGenerator(name="generator", strategy="foreign", parameters=@Parameter(name="property", value="baseElement"))@Id @GeneratedValue(generator="generator")

    
    @Column(name="`BASEELEMENTID`", unique=true, nullable=false)
    public Integer getBaseElementId() {
        return this.baseElementId;
    }
    
    public void setBaseElementId(Integer baseElementId) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("baseElementId", this.baseElementId, this.baseElementId = baseElementId);
        else
            this.baseElementId = baseElementId;
    }


@OneToOne(fetch=FetchType.LAZY)@PrimaryKeyJoinColumn
    public BaseElement getBaseElement() {
        return this.baseElement;
    }
    
    public void setBaseElement(BaseElement baseElement) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("baseElement", this.baseElement, this.baseElement = baseElement);
        else
            this.baseElement = baseElement;
    }


    
    @Column(name="`PADNAME`", length=128)
    public String getPadName() {
        return this.padName;
    }
    
    public void setPadName(String padName) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("padName", this.padName, this.padName = padName);
        else
            this.padName = padName;
    }


    
    @Column(name="`COMMISSIONDATE`", nullable=false)
    public Long getCommissionDate() {
        return this.commissionDate;
    }
    
    public void setCommissionDate(Long commissionDate) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("commissionDate", this.commissionDate, this.commissionDate = commissionDate);
        else
            this.commissionDate = commissionDate;
    }


    
    @Column(name="`XPOSITION`", nullable=false, precision=64, scale=0)
    public Double getXPosition() {
        return this.XPosition;
    }
    
    public void setXPosition(Double XPosition) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("XPosition", this.XPosition, this.XPosition = XPosition);
        else
            this.XPosition = XPosition;
    }


    
    @Column(name="`YPOSITION`", nullable=false, precision=64, scale=0)
    public Double getYPosition() {
        return this.YPosition;
    }
    
    public void setYPosition(Double YPosition) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("YPosition", this.YPosition, this.YPosition = YPosition);
        else
            this.YPosition = YPosition;
    }


    
    @Column(name="`ZPOSITION`", nullable=false, precision=64, scale=0)
    public Double getZPosition() {
        return this.ZPosition;
    }
    
    public void setZPosition(Double ZPosition) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("ZPosition", this.ZPosition, this.ZPosition = ZPosition);
        else
            this.ZPosition = ZPosition;
    }


    
    @Column(name="`XPOSITIONERR`", precision=64, scale=0)
    public Double getXPositionErr() {
        return this.XPositionErr;
    }
    
    public void setXPositionErr(Double XPositionErr) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("XPositionErr", this.XPositionErr, this.XPositionErr = XPositionErr);
        else
            this.XPositionErr = XPositionErr;
    }


    
    @Column(name="`YPOSITIONERR`", precision=64, scale=0)
    public Double getYPositionErr() {
        return this.YPositionErr;
    }
    
    public void setYPositionErr(Double YPositionErr) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("YPositionErr", this.YPositionErr, this.YPositionErr = YPositionErr);
        else
            this.YPositionErr = YPositionErr;
    }


    
    @Column(name="`ZPOSITIONERR`", precision=64, scale=0)
    public Double getZPositionErr() {
        return this.ZPositionErr;
    }
    
    public void setZPositionErr(Double ZPositionErr) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("ZPositionErr", this.ZPositionErr, this.ZPositionErr = ZPositionErr);
        else
            this.ZPositionErr = ZPositionErr;
    }


    
    @Column(name="`POSOBSERVATIONTIME`")
    public Long getPosObservationTime() {
        return this.posObservationTime;
    }
    
    public void setPosObservationTime(Long posObservationTime) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("posObservationTime", this.posObservationTime, this.posObservationTime = posObservationTime);
        else
            this.posObservationTime = posObservationTime;
    }


    
    @Column(name="`POSEXECBLOCKUID`", length=100)
    public String getPosExecBlockUID() {
        return this.posExecBlockUID;
    }
    
    public void setPosExecBlockUID(String posExecBlockUID) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("posExecBlockUID", this.posExecBlockUID, this.posExecBlockUID = posExecBlockUID);
        else
            this.posExecBlockUID = posExecBlockUID;
    }


    
    @Column(name="`POSSCANNUMBER`")
    public Integer getPosScanNumber() {
        return this.posScanNumber;
    }
    
    public void setPosScanNumber(Integer posScanNumber) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("posScanNumber", this.posScanNumber, this.posScanNumber = posScanNumber);
        else
            this.posScanNumber = posScanNumber;
    }


    
    @Column(name="`DELAY`", nullable=false, precision=64, scale=0)
    public Double getDelay() {
        return this.delay;
    }
    
    public void setDelay(Double delay) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("delay", this.delay, this.delay = delay);
        else
            this.delay = delay;
    }


    
    @Column(name="`DELAYERROR`", precision=64, scale=0)
    public Double getDelayError() {
        return this.delayError;
    }
    
    public void setDelayError(Double delayError) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("delayError", this.delayError, this.delayError = delayError);
        else
            this.delayError = delayError;
    }


    
    @Column(name="`DELOBSERVATIONTIME`")
    public Long getDelObservationTime() {
        return this.delObservationTime;
    }
    
    public void setDelObservationTime(Long delObservationTime) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("delObservationTime", this.delObservationTime, this.delObservationTime = delObservationTime);
        else
            this.delObservationTime = delObservationTime;
    }


    
    @Column(name="`DELEXECBLOCKUID`", length=100)
    public String getDelExecBlockUID() {
        return this.delExecBlockUID;
    }
    
    public void setDelExecBlockUID(String delExecBlockUID) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("delExecBlockUID", this.delExecBlockUID, this.delExecBlockUID = delExecBlockUID);
        else
            this.delExecBlockUID = delExecBlockUID;
    }


    
    @Column(name="`DELSCANNUMBER`")
    public Integer getDelScanNumber() {
        return this.delScanNumber;
    }
    
    public void setDelScanNumber(Integer delScanNumber) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("delScanNumber", this.delScanNumber, this.delScanNumber = delScanNumber);
        else
            this.delScanNumber = delScanNumber;
    }


    
    @Column(name="`LOCKED`")
    public Boolean getLocked() {
        return this.locked;
    }
    
    public void setLocked(Boolean locked) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("locked", this.locked, this.locked = locked);
        else
            this.locked = locked;
    }


    
    @Column(name="`INCREASEVERSION`")
    public Boolean getIncreaseVersion() {
        return this.increaseVersion;
    }
    
    public void setIncreaseVersion(Boolean increaseVersion) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("increaseVersion", this.increaseVersion, this.increaseVersion = increaseVersion);
        else
            this.increaseVersion = increaseVersion;
    }


    
    @Column(name="`CURRENTVERSION`")
    public Integer getCurrentVersion() {
        return this.currentVersion;
    }
    
    public void setCurrentVersion(Integer currentVersion) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("currentVersion", this.currentVersion, this.currentVersion = currentVersion);
        else
            this.currentVersion = currentVersion;
    }


    
    @Column(name="`WHO`", length=128)
    public String getWho() {
        return this.who;
    }
    
    public void setWho(String who) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("who", this.who, this.who = who);
        else
            this.who = who;
    }


    
    @Column(name="`CHANGEDESC`", length=16777216)
    public String getChangeDesc() {
        return this.changeDesc;
    }
    
    public void setChangeDesc(String changeDesc) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("changeDesc", this.changeDesc, this.changeDesc = changeDesc);
        else
            this.changeDesc = changeDesc;
    }


@OneToMany(fetch=FetchType.LAZY, mappedBy="pad")
    public Set<AntennaToPad> getAntennaToPads() {
        return this.antennaToPads;
    }
    
    public void setAntennaToPads(Set<AntennaToPad> antennaToPads) {    
    	this.antennaToPads = antennaToPads;
    }

	public void addAntennaToPads(Set<AntennaToPad> elements) {
		if( this.antennaToPads != null )
			for(Iterator<AntennaToPad> it = elements.iterator(); it.hasNext(); )
				addAntennaToPadToAntennaToPads((AntennaToPad)it.next());
	}

	public void addAntennaToPadToAntennaToPads(AntennaToPad element) {
		if( !this.antennaToPads.contains(element) ) {
			this.antennaToPads.add(element);
		}
	}


@OneToMany(fetch=FetchType.LAZY, mappedBy="pad")
    public Set<WeatherStationToPad> getWeatherStationToPads() {
        return this.weatherStationToPads;
    }
    
    public void setWeatherStationToPads(Set<WeatherStationToPad> weatherStationToPads) {    
    	this.weatherStationToPads = weatherStationToPads;
    }

	public void addWeatherStationToPads(Set<WeatherStationToPad> elements) {
		if( this.weatherStationToPads != null )
			for(Iterator<WeatherStationToPad> it = elements.iterator(); it.hasNext(); )
				addWeatherStationToPadToWeatherStationToPads((WeatherStationToPad)it.next());
	}

	public void addWeatherStationToPadToWeatherStationToPads(WeatherStationToPad element) {
		if( !this.weatherStationToPads.contains(element) ) {
			this.weatherStationToPads.add(element);
		}
	}


@OneToMany(fetch=FetchType.LAZY, mappedBy="pad")
    public Set<HolographyTowerToPad> getHolographyTowerToPads() {
        return this.holographyTowerToPads;
    }
    
    public void setHolographyTowerToPads(Set<HolographyTowerToPad> holographyTowerToPads) {    
    	this.holographyTowerToPads = holographyTowerToPads;
    }

	public void addHolographyTowerToPads(Set<HolographyTowerToPad> elements) {
		if( this.holographyTowerToPads != null )
			for(Iterator<HolographyTowerToPad> it = elements.iterator(); it.hasNext(); )
				addHolographyTowerToPadToHolographyTowerToPads((HolographyTowerToPad)it.next());
	}

	public void addHolographyTowerToPadToHolographyTowerToPads(HolographyTowerToPad element) {
		if( !this.holographyTowerToPads.contains(element) ) {
			this.holographyTowerToPads.add(element);
		}
	}





}


