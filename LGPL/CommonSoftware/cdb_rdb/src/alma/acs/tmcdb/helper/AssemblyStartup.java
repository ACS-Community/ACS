package alma.acs.tmcdb;
// Generated Jun 5, 2017 7:15:51 PM by Hibernate Tools 4.3.1.Final


import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

/**
 * AssemblyStartup generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@Table(name="`ASSEMBLYSTARTUP`"
    , uniqueConstraints =  @UniqueConstraint(columnNames={"`BASEELEMENTSTARTUPID`", "`ROLENAME`"})
)
public class AssemblyStartup extends alma.acs.tmcdb.translator.TmcdbObject implements java.io.Serializable {


     protected Integer assemblyStartupId;
     protected AssemblyRole assemblyRole;
     protected BaseElementStartup baseElementStartup;
     protected Boolean simulated;

    public AssemblyStartup() {
    }
   
    @Id @GeneratedValue(generator="generator")
    @GenericGenerator(name="generator", strategy="native",
       parameters = {@Parameter(name="sequence", value="AssembS_seq")}
	)

    
    @Column(name="`ASSEMBLYSTARTUPID`", unique=true, nullable=false)
    public Integer getAssemblyStartupId() {
        return this.assemblyStartupId;
    }
    
    public void setAssemblyStartupId(Integer assemblyStartupId) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("assemblyStartupId", this.assemblyStartupId, this.assemblyStartupId = assemblyStartupId);
        else
            this.assemblyStartupId = assemblyStartupId;
    }


@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="`ROLENAME`", nullable=false)
    public AssemblyRole getAssemblyRole() {
        return this.assemblyRole;
    }
    
    public void setAssemblyRole(AssemblyRole assemblyRole) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("assemblyRole", this.assemblyRole, this.assemblyRole = assemblyRole);
        else
            this.assemblyRole = assemblyRole;
    }


@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="`BASEELEMENTSTARTUPID`", nullable=false)
    public BaseElementStartup getBaseElementStartup() {
        return this.baseElementStartup;
    }
    
    public void setBaseElementStartup(BaseElementStartup baseElementStartup) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("baseElementStartup", this.baseElementStartup, this.baseElementStartup = baseElementStartup);
        else
            this.baseElementStartup = baseElementStartup;
    }


    
    @Column(name="`SIMULATED`", nullable=false)
    public Boolean getSimulated() {
        return this.simulated;
    }
    
    public void setSimulated(Boolean simulated) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("simulated", this.simulated, this.simulated = simulated);
        else
            this.simulated = simulated;
    }



   public boolean equalsContent(Object other) {
         if ( (this == other ) ) return true;
		 if ( (other == null ) ) return false;
		 if ( !(other instanceof AssemblyStartup) ) return false;
		 AssemblyStartup castOther = ( AssemblyStartup ) other;

		 return ( (this.getAssemblyRole()==castOther.getAssemblyRole()) || ( this.getAssemblyRole()!=null && castOther.getAssemblyRole()!=null && this.getAssemblyRole().equals(castOther.getAssemblyRole()) ) )
 && ( (this.getBaseElementStartup()==castOther.getBaseElementStartup()) || ( this.getBaseElementStartup()!=null && castOther.getBaseElementStartup()!=null && this.getBaseElementStartup().equals(castOther.getBaseElementStartup()) ) );
   }

   public int hashCodeContent() {
         int result = 17;

         
         result = 37 * result + ( getAssemblyRole() == null ? 0 : this.getAssemblyRole().hashCode() );
         result = 37 * result + ( getBaseElementStartup() == null ? 0 : this.getBaseElementStartup().hashCode() );
         
         return result;
   }


}


