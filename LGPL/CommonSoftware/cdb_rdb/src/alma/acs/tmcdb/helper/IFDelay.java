package alma.acs.tmcdb;
// Generated Jun 5, 2017 7:15:51 PM by Hibernate Tools 4.3.1.Final


import alma.hibernate.util.StringEnumUserType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;
import org.hibernate.annotations.Type;
import org.hibernate.annotations.TypeDef;
import org.hibernate.annotations.TypeDefs;

/**
 * IFDelay generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@Table(name="`IFDELAY`"
    , uniqueConstraints =  @UniqueConstraint(columnNames={"`ANTENNAID`", "`BASEBAND`", "`POLARIZATION`", "`IFSWITCH`"})
)
@TypeDefs({
@TypeDef(name="IFDelIFSwitchEnum", typeClass=StringEnumUserType.class,
   parameters={ @Parameter(name="enumClassName", value="alma.acs.tmcdb.IFDelIFSwitchEnum") }),
@TypeDef(name="IFDelPolEnum", typeClass=StringEnumUserType.class,
   parameters={ @Parameter(name="enumClassName", value="alma.acs.tmcdb.IFDelPolEnum") }),
@TypeDef(name="IFDelBaseBandEnum", typeClass=StringEnumUserType.class,
   parameters={ @Parameter(name="enumClassName", value="alma.acs.tmcdb.IFDelBaseBandEnum") })
})
public class IFDelay extends alma.acs.tmcdb.translator.TmcdbObject implements java.io.Serializable {


     protected Integer IFDelayId;
     protected Antenna antenna;
     protected IFDelBaseBandEnum baseBand;
     protected IFDelPolEnum polarization;
     protected IFDelIFSwitchEnum IFSwitch;
     protected Double delay;
     protected Double delayError;
     protected Long observationTime;
     protected String execBlockUID;
     protected Integer scanNumber;

    public IFDelay() {
    }
   
    @Id @GeneratedValue(generator="generator")
    @GenericGenerator(name="generator", strategy="native",
       parameters = {@Parameter(name="sequence", value="IFDelay_seq")}
	)

    
    @Column(name="`IFDELAYID`", unique=true, nullable=false)
    public Integer getIFDelayId() {
        return this.IFDelayId;
    }
    
    public void setIFDelayId(Integer IFDelayId) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("IFDelayId", this.IFDelayId, this.IFDelayId = IFDelayId);
        else
            this.IFDelayId = IFDelayId;
    }


@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="`ANTENNAID`", nullable=false)
    public Antenna getAntenna() {
        return this.antenna;
    }
    
    public void setAntenna(Antenna antenna) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("antenna", this.antenna, this.antenna = antenna);
        else
            this.antenna = antenna;
    }


    
    @Column(name="`BASEBAND`", nullable=false, length=128)
	@Type(type="IFDelBaseBandEnum")
    public IFDelBaseBandEnum getBaseBand() {
        return this.baseBand;
    }
    
    public void setBaseBand(IFDelBaseBandEnum baseBand) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("baseBand", this.baseBand, this.baseBand = baseBand);
        else
            this.baseBand = baseBand;
    }


    
    @Column(name="`POLARIZATION`", nullable=false, length=128)
	@Type(type="IFDelPolEnum")
    public IFDelPolEnum getPolarization() {
        return this.polarization;
    }
    
    public void setPolarization(IFDelPolEnum polarization) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("polarization", this.polarization, this.polarization = polarization);
        else
            this.polarization = polarization;
    }


    
    @Column(name="`IFSWITCH`", nullable=false, length=128)
	@Type(type="IFDelIFSwitchEnum")
    public IFDelIFSwitchEnum getIFSwitch() {
        return this.IFSwitch;
    }
    
    public void setIFSwitch(IFDelIFSwitchEnum IFSwitch) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("IFSwitch", this.IFSwitch, this.IFSwitch = IFSwitch);
        else
            this.IFSwitch = IFSwitch;
    }


    
    @Column(name="`DELAY`", nullable=false, precision=64, scale=0)
    public Double getDelay() {
        return this.delay;
    }
    
    public void setDelay(Double delay) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("delay", this.delay, this.delay = delay);
        else
            this.delay = delay;
    }


    
    @Column(name="`DELAYERROR`", precision=64, scale=0)
    public Double getDelayError() {
        return this.delayError;
    }
    
    public void setDelayError(Double delayError) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("delayError", this.delayError, this.delayError = delayError);
        else
            this.delayError = delayError;
    }


    
    @Column(name="`OBSERVATIONTIME`")
    public Long getObservationTime() {
        return this.observationTime;
    }
    
    public void setObservationTime(Long observationTime) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("observationTime", this.observationTime, this.observationTime = observationTime);
        else
            this.observationTime = observationTime;
    }


    
    @Column(name="`EXECBLOCKUID`", length=100)
    public String getExecBlockUID() {
        return this.execBlockUID;
    }
    
    public void setExecBlockUID(String execBlockUID) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("execBlockUID", this.execBlockUID, this.execBlockUID = execBlockUID);
        else
            this.execBlockUID = execBlockUID;
    }


    
    @Column(name="`SCANNUMBER`")
    public Integer getScanNumber() {
        return this.scanNumber;
    }
    
    public void setScanNumber(Integer scanNumber) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("scanNumber", this.scanNumber, this.scanNumber = scanNumber);
        else
            this.scanNumber = scanNumber;
    }



   public boolean equalsContent(Object other) {
         if ( (this == other ) ) return true;
		 if ( (other == null ) ) return false;
		 if ( !(other instanceof IFDelay) ) return false;
		 IFDelay castOther = ( IFDelay ) other;

		 return ( (this.getAntenna()==castOther.getAntenna()) || ( this.getAntenna()!=null && castOther.getAntenna()!=null && this.getAntenna().equals(castOther.getAntenna()) ) )
 && ( (this.getBaseBand()==castOther.getBaseBand()) || ( this.getBaseBand()!=null && castOther.getBaseBand()!=null && this.getBaseBand().equals(castOther.getBaseBand()) ) )
 && ( (this.getPolarization()==castOther.getPolarization()) || ( this.getPolarization()!=null && castOther.getPolarization()!=null && this.getPolarization().equals(castOther.getPolarization()) ) )
 && ( (this.getIFSwitch()==castOther.getIFSwitch()) || ( this.getIFSwitch()!=null && castOther.getIFSwitch()!=null && this.getIFSwitch().equals(castOther.getIFSwitch()) ) );
   }

   public int hashCodeContent() {
         int result = 17;

         
         result = 37 * result + ( getAntenna() == null ? 0 : this.getAntenna().hashCode() );
         result = 37 * result + ( getBaseBand() == null ? 0 : this.getBaseBand().hashCode() );
         result = 37 * result + ( getPolarization() == null ? 0 : this.getPolarization().hashCode() );
         result = 37 * result + ( getIFSwitch() == null ? 0 : this.getIFSwitch().hashCode() );
         
         
         
         
         
         return result;
   }


}


