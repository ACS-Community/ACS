package alma.acs.tmcdb;
// Generated Jun 5, 2017 7:15:51 PM by Hibernate Tools 4.3.1.Final


import alma.hibernate.util.StringEnumUserType;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;
import org.hibernate.annotations.Type;
import org.hibernate.annotations.TypeDef;

/**
 * BaseElement generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@Table(name="`BASEELEMENT`"
    , uniqueConstraints =  @UniqueConstraint(columnNames={"`BASEELEMENTNAME`", "`BASETYPE`", "`CONFIGURATIONID`"})
)
@TypeDef(name="BEType", typeClass=StringEnumUserType.class,
   parameters={ @Parameter(name="enumClassName", value="alma.acs.tmcdb.BEType") })
public class BaseElement extends alma.acs.tmcdb.translator.TmcdbObject implements java.io.Serializable {


     protected Integer baseElementId;
     protected HWConfiguration HWConfiguration;
     protected BEType baseType;
     protected String baseElementName;
     protected WeatherStationController weatherStationController;
     protected PhotonicReference photonicReference;
     protected AcaCorrSet acaCorrSet;
     protected HolographyTower holographyTower;
     protected Antenna antenna;
     protected Pad pad;
     private Set<BaseElementOnline> baseElementOnlines = new HashSet<BaseElementOnline>(0);
     protected CorrQuadrant corrQuadrant;
     protected CorrQuadrantRack corrQuadrantRack;
     protected FrontEnd frontEnd;
     protected AOSTiming AOSTiming;
     private Set<BaseElementStartup> baseElementStartups = new HashSet<BaseElementStartup>(0);
     protected CorrStationBin corrStationBin;
     protected CentralLO centralLO;
     private Set<Array> arrays = new HashSet<Array>(0);
     protected CorrelatorBin correlatorBin;

    public BaseElement() {
    }
   
    @Id @GeneratedValue(generator="generator")
    @GenericGenerator(name="generator", strategy="native",
       parameters = {@Parameter(name="sequence", value="BaseElement_seq")}
	)

    
    @Column(name="`BASEELEMENTID`", unique=true, nullable=false)
    public Integer getBaseElementId() {
        return this.baseElementId;
    }
    
    public void setBaseElementId(Integer baseElementId) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("baseElementId", this.baseElementId, this.baseElementId = baseElementId);
        else
            this.baseElementId = baseElementId;
    }


@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="`CONFIGURATIONID`", nullable=false)
    public HWConfiguration getHWConfiguration() {
        return this.HWConfiguration;
    }
    
    public void setHWConfiguration(HWConfiguration HWConfiguration) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("HWConfiguration", this.HWConfiguration, this.HWConfiguration = HWConfiguration);
        else
            this.HWConfiguration = HWConfiguration;
    }


    
    @Column(name="`BASETYPE`", nullable=false, length=16777216)
	@Type(type="BEType")
    public BEType getBaseType() {
        return this.baseType;
    }
    
    public void setBaseType(BEType baseType) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("baseType", this.baseType, this.baseType = baseType);
        else
            this.baseType = baseType;
    }


    
    @Column(name="`BASEELEMENTNAME`", nullable=false, length=16777216)
    public String getBaseElementName() {
        return this.baseElementName;
    }
    
    public void setBaseElementName(String baseElementName) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("baseElementName", this.baseElementName, this.baseElementName = baseElementName);
        else
            this.baseElementName = baseElementName;
    }


@OneToOne(fetch=FetchType.LAZY, mappedBy="baseElement")
    public WeatherStationController getWeatherStationController() {
        return this.weatherStationController;
    }
    
    public void setWeatherStationController(WeatherStationController weatherStationController) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("weatherStationController", this.weatherStationController, this.weatherStationController = weatherStationController);
        else
            this.weatherStationController = weatherStationController;
    }


@OneToOne(fetch=FetchType.LAZY, mappedBy="baseElement")
    public PhotonicReference getPhotonicReference() {
        return this.photonicReference;
    }
    
    public void setPhotonicReference(PhotonicReference photonicReference) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("photonicReference", this.photonicReference, this.photonicReference = photonicReference);
        else
            this.photonicReference = photonicReference;
    }


@OneToOne(fetch=FetchType.LAZY, mappedBy="baseElement")
    public AcaCorrSet getAcaCorrSet() {
        return this.acaCorrSet;
    }
    
    public void setAcaCorrSet(AcaCorrSet acaCorrSet) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("acaCorrSet", this.acaCorrSet, this.acaCorrSet = acaCorrSet);
        else
            this.acaCorrSet = acaCorrSet;
    }


@OneToOne(fetch=FetchType.LAZY, mappedBy="baseElement")
    public HolographyTower getHolographyTower() {
        return this.holographyTower;
    }
    
    public void setHolographyTower(HolographyTower holographyTower) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("holographyTower", this.holographyTower, this.holographyTower = holographyTower);
        else
            this.holographyTower = holographyTower;
    }


@OneToOne(fetch=FetchType.LAZY, mappedBy="baseElement")
    public Antenna getAntenna() {
        return this.antenna;
    }
    
    public void setAntenna(Antenna antenna) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("antenna", this.antenna, this.antenna = antenna);
        else
            this.antenna = antenna;
    }


@OneToOne(fetch=FetchType.LAZY, mappedBy="baseElement")
    public Pad getPad() {
        return this.pad;
    }
    
    public void setPad(Pad pad) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("pad", this.pad, this.pad = pad);
        else
            this.pad = pad;
    }


@OneToMany(fetch=FetchType.LAZY, mappedBy="baseElement")
    public Set<BaseElementOnline> getBaseElementOnlines() {
        return this.baseElementOnlines;
    }
    
    public void setBaseElementOnlines(Set<BaseElementOnline> baseElementOnlines) {    
    	this.baseElementOnlines = baseElementOnlines;
    }

	public void addBaseElementOnlines(Set<BaseElementOnline> elements) {
		if( this.baseElementOnlines != null )
			for(Iterator<BaseElementOnline> it = elements.iterator(); it.hasNext(); )
				addBaseElementOnlineToBaseElementOnlines((BaseElementOnline)it.next());
	}

	public void addBaseElementOnlineToBaseElementOnlines(BaseElementOnline element) {
		if( !this.baseElementOnlines.contains(element) ) {
			this.baseElementOnlines.add(element);
		}
	}


@OneToOne(fetch=FetchType.LAZY, mappedBy="baseElement")
    public CorrQuadrant getCorrQuadrant() {
        return this.corrQuadrant;
    }
    
    public void setCorrQuadrant(CorrQuadrant corrQuadrant) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("corrQuadrant", this.corrQuadrant, this.corrQuadrant = corrQuadrant);
        else
            this.corrQuadrant = corrQuadrant;
    }


@OneToOne(fetch=FetchType.LAZY, mappedBy="baseElement")
    public CorrQuadrantRack getCorrQuadrantRack() {
        return this.corrQuadrantRack;
    }
    
    public void setCorrQuadrantRack(CorrQuadrantRack corrQuadrantRack) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("corrQuadrantRack", this.corrQuadrantRack, this.corrQuadrantRack = corrQuadrantRack);
        else
            this.corrQuadrantRack = corrQuadrantRack;
    }


@OneToOne(fetch=FetchType.LAZY, mappedBy="baseElement")
    public FrontEnd getFrontEnd() {
        return this.frontEnd;
    }
    
    public void setFrontEnd(FrontEnd frontEnd) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("frontEnd", this.frontEnd, this.frontEnd = frontEnd);
        else
            this.frontEnd = frontEnd;
    }


@OneToOne(fetch=FetchType.LAZY, mappedBy="baseElement")
    public AOSTiming getAOSTiming() {
        return this.AOSTiming;
    }
    
    public void setAOSTiming(AOSTiming AOSTiming) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("AOSTiming", this.AOSTiming, this.AOSTiming = AOSTiming);
        else
            this.AOSTiming = AOSTiming;
    }


@OneToMany(fetch=FetchType.LAZY, mappedBy="baseElement")
    public Set<BaseElementStartup> getBaseElementStartups() {
        return this.baseElementStartups;
    }
    
    public void setBaseElementStartups(Set<BaseElementStartup> baseElementStartups) {    
    	this.baseElementStartups = baseElementStartups;
    }

	public void addBaseElementStartups(Set<BaseElementStartup> elements) {
		if( this.baseElementStartups != null )
			for(Iterator<BaseElementStartup> it = elements.iterator(); it.hasNext(); )
				addBaseElementStartupToBaseElementStartups((BaseElementStartup)it.next());
	}

	public void addBaseElementStartupToBaseElementStartups(BaseElementStartup element) {
		if( !this.baseElementStartups.contains(element) ) {
			this.baseElementStartups.add(element);
		}
	}


@OneToOne(fetch=FetchType.LAZY, mappedBy="baseElement")
    public CorrStationBin getCorrStationBin() {
        return this.corrStationBin;
    }
    
    public void setCorrStationBin(CorrStationBin corrStationBin) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("corrStationBin", this.corrStationBin, this.corrStationBin = corrStationBin);
        else
            this.corrStationBin = corrStationBin;
    }


@OneToOne(fetch=FetchType.LAZY, mappedBy="baseElement")
    public CentralLO getCentralLO() {
        return this.centralLO;
    }
    
    public void setCentralLO(CentralLO centralLO) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("centralLO", this.centralLO, this.centralLO = centralLO);
        else
            this.centralLO = centralLO;
    }


@OneToMany(fetch=FetchType.LAZY, mappedBy="baseElement")
    public Set<Array> getArrays() {
        return this.arrays;
    }
    
    public void setArrays(Set<Array> arrays) {    
    	this.arrays = arrays;
    }

	public void addArrays(Set<Array> elements) {
		if( this.arrays != null )
			for(Iterator<Array> it = elements.iterator(); it.hasNext(); )
				addArrayToArrays((Array)it.next());
	}

	public void addArrayToArrays(Array element) {
		if( !this.arrays.contains(element) ) {
			this.arrays.add(element);
		}
	}


@OneToOne(fetch=FetchType.LAZY, mappedBy="baseElement")
    public CorrelatorBin getCorrelatorBin() {
        return this.correlatorBin;
    }
    
    public void setCorrelatorBin(CorrelatorBin correlatorBin) {    
        if( propertyChangeSupport != null )
            propertyChangeSupport.firePropertyChange("correlatorBin", this.correlatorBin, this.correlatorBin = correlatorBin);
        else
            this.correlatorBin = correlatorBin;
    }



   public boolean equalsContent(Object other) {
         if ( (this == other ) ) return true;
		 if ( (other == null ) ) return false;
		 if ( !(other instanceof BaseElement) ) return false;
		 BaseElement castOther = ( BaseElement ) other;

		 return ( (this.getHWConfiguration()==castOther.getHWConfiguration()) || ( this.getHWConfiguration()!=null && castOther.getHWConfiguration()!=null && this.getHWConfiguration().equals(castOther.getHWConfiguration()) ) )
 && ( (this.getBaseType()==castOther.getBaseType()) || ( this.getBaseType()!=null && castOther.getBaseType()!=null && this.getBaseType().equals(castOther.getBaseType()) ) )
 && ( (this.getBaseElementName()==castOther.getBaseElementName()) || ( this.getBaseElementName()!=null && castOther.getBaseElementName()!=null && this.getBaseElementName().equals(castOther.getBaseElementName()) ) );
   }

   public int hashCodeContent() {
         int result = 17;

         
         result = 37 * result + ( getHWConfiguration() == null ? 0 : this.getHWConfiguration().hashCode() );
         result = 37 * result + ( getBaseType() == null ? 0 : this.getBaseType().hashCode() );
         result = 37 * result + ( getBaseElementName() == null ? 0 : this.getBaseElementName().hashCode() );
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         return result;
   }


}


