/*
 *    ALMA - Atacama Large Millimiter Array
 *    (c) European Southern Observatory, 2002
 *    Copyright by ESO (in the framework of the ALMA collaboration)
 *    and Cosylab 2002, All rights reserved
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 2.1 of the License, or (at your option) any later version.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
 *    MA 02111-1307  USA
 */ 
#ifndef _LOGGING_IDL
#define _LOGGING_IDL

#include <DsLogAdmin.idl>

#pragma prefix "alma"



/**
 * The log levels (numbers and names) defined here are used both to create log messages
 * as well as to set filtering thresholds for log messages.
 * <p>
 * Note that the ACS logging architecture document defines "priorities" for log messages
 * which have the meaning of the levels here, while the actual ACS levels ("Log entry type")
 * follow the 2^n numbering scheme from $(ACE_ROOT)/ace/Log_Priority.h but don't seem
 * to be used anywhere outside of the C++ container's internal log classes...
 * <p>
 * The constant values and strings defined here should be used to define enum classes in the 
 * various languages. That way we have one central definition, but convenient classes 
 * to work with that are guaranteed to use the correct numbers.
 *
 * Note that these values are redundantly defined in an XML schema (LoggingConfig.xsd in module maciidl)
 * because we cannot reuse the IDL definition in the xsd. 
 * ANY CHANGES TO THE LOG LEVELS HERE MUST BE SYNC'D WITH THE XSD! 
 */
module AcsLogLevels {

	typedef short logLevelValue;
	
	// In the past we used the value 0 for UNKNOWN or ALL without formal definition. 
	// Now we try without the 0 until we need it.
	 
	const logLevelValue TRACE_VAL = 2;
	const string TRACE_NAME = "Trace";

	const logLevelValue DEBUG_VAL = 3;
	const string DEBUG_NAME = "Debug";

	const logLevelValue INFO_VAL = 4;
	const string INFO_NAME = "Info";

	const logLevelValue NOTICE_VAL = 5;
	const string NOTICE_NAME = "Notice";

	const logLevelValue WARNING_VAL = 6;
	const string WARNING_NAME = "Warning";
	
	// anomaly: value 7 is not defined! 

	const logLevelValue ERROR_VAL = 8;
	const string ERROR_NAME = "Error";
	
	const logLevelValue CRITICAL_VAL = 9;
	const string CRITICAL_NAME = "Critical";
	
	const logLevelValue ALERT_VAL = 10;
	const string ALERT_NAME = "Alert";
	
	const logLevelValue EMERGENCY_VAL = 11;
	const string EMERGENCY_NAME = "Emergency";
	
	// The proposed value 99 is more human friendly. Technically it would make more sense
	// to define OFF_VAL as the maximum allowed value (2^15 - 1).
	const logLevelValue OFF_VAL = 99;
	const string OFF_NAME = "Off";
};


/**
 * @TODO: consider renaming this module to something like "AcsLogging".
 */
module ACSLoggingLog {

    struct NameValue {
	string name;
	string value; // any ? -> use than Property from Property Service
    };

    typedef sequence<NameValue> NameValueSeq;

    /**
     * @TODO: revisit the use of these enum values, with the general IDL enum issues in mind.
     * Probably LogBinaryRecord should use instead a logLevelValue from LogLevels,
     * and this definition should be removed.
     */
    /*
    enum LogType {
	Unknown,
	Shutdown,
	Trace,
 	Debug,
 	Info,
	Notice,
	Warning,
	Startup,
	Error,
	Critical,
	Alert,
	Emergency,
	Archive
    };
    */
/*
Header,
 	Description,
	History,
	Meta,
	Data,
	Alarm,
*/

    /**
     *
     */
    struct LogBinaryRecord {
	AcsLogLevels::logLevelValue type;
	string TimeStamp;
	string File;
	unsigned long Line;
	string Routine;
	string SourceObject;
	string Host;
	string Process;
	string LogContext;
	string Thread;
	string StackId;
	long StackLevel;
    string LogId;
	long Priority;
	string Uri;
    string Audience;
    string Array;
    string Antenna;
	string MsgData;
	
	/**
	 *  container for pair(s) name-value
	 */
    NameValueSeq attributes;
	NameValueSeq log_data;

    };

};


module Logging
{
	struct XmlLogRecord{
		string xml;
		AcsLogLevels::logLevelValue logLevel;
	};

	typedef sequence<XmlLogRecord> XmlLogRecordSeq;


	interface AcsLogService : DsLogAdmin::BasicLog
	{
		/**
		 * Write a record as XML string format
		 */
		void writeRecord(in XmlLogRecordSeq xmlLogRecords);
	};

	interface ACSLogFactory : DsLogAdmin::BasicLogFactory
	{
	};
};


#endif
