/*
 *    ALMA - Atacama Large Millimiter Array
 *    (c) European Southern Observatory, 2002
 *    Copyright by ESO (in the framework of the ALMA collaboration),
 *    All rights reserved
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 2.1 of the License, or (at your option) any later version.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
 *    MA 02111-1307  USA
 */
 
#ifndef MONITOR_ARCHIVER_IDL_
#define MONITOR_ARCHIVER_IDL_

#include <acscomponent.idl>
#include <CollectorListStatus.idl>
#include "MonitorErr.idl"

#pragma prefix "alma"


module MonitorArchiver
{
	/**
	 * This interface is intended to be used by the Controller only.
	 * If you use it directly you are on your own and don't come crying.
	 */
	interface Blobber : ACS::ACSComponent
	{
		CollectorListStatus addCollector(in string inComponentName);
		CollectorListStatus containsCollector(in string inComponentName);
		CollectorListStatus removeCollector(in string inComponentName);
	};

	/**
	 * The monitor controller brings together the collector and blobber components.
	 */
	interface Controller : ACS::ACSComponent
	{
		/**
		 * A monitor collector registers itself using this method, 
		 * so that the controller can assign a blobber to fetch data from that collector.
		 *
		 * @throws CollectorRegistrationFailedEx if the collector could not be registered with any of the available blobbers.
		 *         The collector should raise an alarm but also try again later, because more blobbers may be available then.
		 */
		void registerCollector(in string collectorCompName) 
			raises (MonitorErr::CollectorRegistrationFailedEx);

		/**
		 * Monitor collector deregisters here.
		 */
		void deregisterCollector(in string collectorCompName);

		/**
		 * Re-registers all previously registered collectors to their blobbers.
		 * <p>
		 * If a blobber was shut down while collectors were still assigned to the blobber, 
		 * upon restart the blobber can request via this method to get the same known collectors assigned again, 
		 * which will result in calls to Blobber.addCollector.
		 * <p>
		 * This call will be ignored by the controller if no collectors are assigned to the blobber, 
		 * so that it is safe for the blobber to call this method just in case.
		 * <p>
		 * Once ACS will support persistence of component state data across component instantiations, 
		 * we will have to decide whether the list of collectors assigned to a blobber should be stored
		 * for recovery only by the blobber (using the new component state persistence feature), 
		 * or should still be obtained from the controller.
		 */
		void registerKnownCollectors(in string blobberCompName);
	};
};

#endif
