import tmcdbTables;

extension alma::acs::tmcdb::grammardef::util;

// TODO: Add the following constraints:
//  * Default values depend on the type of the column (strings and numbers)
//  * CHECK values depend on the type of the column

context Table#name ERROR "Duplicated table: " + this.name:
 	this.getModel().allTables().select(e|e.name == this.name).size == 1;

context Key#columns ERROR "Duplicated column in definition of key":
	columns.name.forAll(e| columns.name.select(f|f == e).size == 1 );

context Key#pieces ERROR "Duplicated column in definition of key generation":
	pieces.name.forAll(e| pieces.name.select(f|f == e).size == 1 );

context Key ERROR "Key column cannot be part of its generation":
	columns.name.forAll(e| pieces.name.select(f| f == e).size == 0 );

context Column ERROR "Duplicated column name '" + this.name + "'":
	this.getTable().getColumns().select(e| e.name == this.name).size == 1;

context DefaultSpecifier ERROR "Invalid default value for boolean type":
	BooleanType.isInstance(this.getColumn().type) implies DefaultBooleanValue.isInstance(this.defaultValue);

context DefaultSpecifier ERROR "Invalid default value for numeric type":
	IntTypes.isInstance(this.getColumn().type) implies DefaultIntValue.isInstance(this.defaultValue);

context DefaultSpecifier ERROR "Invalid default value for string type":
	(LengthDefinedTypes.isInstance(this.getColumn().type) || TextTypes.isInstance(this.getColumn().type))
	implies DefaultStringValue.isInstance(this.defaultValue);

context CheckConstraint ERROR "Invalid possible values for column " + column.name:
	(StringPossibleValues.isInstance(possibleValues) implies ( LengthDefinedTypes.isInstance(column.type) || TextTypes.isInstance(column.type) ) )
&&  (IntegerPossibleValues.isInstance(possibleValues) implies ( IntTypes.isInstance(column.type) ) );