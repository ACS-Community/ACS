<?xml version="1.0" encoding="UTF-8"?>
<!--
   - Configuration Database Schema for a Simulated Component
   -
   - Author: David Fugate
   -
   - History:
   -   2003-12-16  DF  Created  
  -->
<xs:schema xmlns="urn:schemas-cosylab-com:SimulatedComponent:1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="urn:schemas-cosylab-com:SimulatedComponent:1.0">
	<xs:complexType mixed="true" name="imports">
		<xs:annotation>
			<xs:documentation>
			This end-user nicety allows developers to declare Python import statements
			which will then automatically be imported into the simulator framework.
			For example, this element could contain:
			
from time import sleep
import sys
import FRIDGE
			
			It must be noted that these lines must not be preceded by white space and are limited
			to simple import/from statements.
			</xs:documentation>
		</xs:annotation>
	</xs:complexType>
	<!--#####################################################################-->
	<xs:complexType mixed="true" name="event">
		<xs:annotation>
			<xs:documentation>
			The event type is an XML element describing ALMA events and channels. 
			What this element does is tell the simulator framework that a given event type on a 
			given channel should be sent out using:
			1. A block of Python code existing within this element where the last line 
			corresponds to an event. An example could be something similar to:

joe = FRIDGE.temperatureDataEvent(7L)
joe

			2. A random instance of the event type generated by the simulator framework.
			
			Event also allows end-users to send events on a given frequency. Finally,
			an attribute exists which allows setting the probability that the event will not be 
			sent at all.
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Channel" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>
				Name of the channel we will send events to.
				For example, "SCHEDULING_CHANNEL".
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="EventId" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>
				The IDL id of the ALMA event we will send an event to.
				For example, "IDL:alma/FRIDGE/temperatureDataEvent:1.0".
				
				If the event element contains some text, the simulator framework
				will not create a random instance of this event but will instead evaluate
				the element's text to produce the event.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute default="0" name="Frequency" use="optional">
			<xs:annotation>
				<xs:documentation>
				The floating point number of seconds the simulator framework should wait
				before sending an event after the previous event. The default value of 0 implies 
				the framework should only send one event and then stop.
				</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:float">
					<xs:minInclusive value="0"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute default="0" name="SkippedEventProbability" use="optional">
			<xs:annotation>
				<xs:documentation>
				The probability that any given event will be skipped. The default value of 0 means
				the event will definitely be sent and a value of 0.99 (more or less) guarantees
				the event will not be sent. 
				</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:float">
					<xs:minInclusive value="0"/>
					<xs:maxExclusive value="1"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:complexType>
	<!--#########################################################################-->
	<xs:complexType mixed="true" name="eventResponse">
		<xs:annotation>
			<xs:documentation>
			The eventResponse type is an XML element describing ALMA events and channels. 
			What this element does is tell the simulator framework that a given event type on a 
			given channel name should be subscribed to and when an event of the correct type
			is received:
			1. A block of Python code existing within this element should be executed and/or
			2. Another event should be sent out as a response.
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="IncomingChannel" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>
				Name of the channel we will subscribe to.
				For example, "CONTROL_CHANNEL".
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="IncomingEventId" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>
				The IDL id of the ALMA event we are subscribing to.
				For example, "IDL:alma/FRIDGE/temperatureDataEvent:1.0".
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute default="" name="OutgoingChannel" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>
				Name of the channel we will send an event to as a response to an incoming event.
				For example, "SCHEDULING_CHANNEL".
				This attribute is not used unless the OutgoingEventId attribute is modified from the
				default value.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute default="" name="OutgoingEventId" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>
				The IDL id of the ALMA event we will send out as a response to an incoming event.
				For example, "IDL:alma/FRIDGE/temperatureDataEvent:1.0".
				
				If the OutgoingChannel attribute is not modified from the default value, the event will
				be sent to the IncomingChannel.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute default="1" name="Timeout" type="xs:float" use="optional">
			<xs:annotation>
				<xs:documentation>
					The floating point number of seconds the simulator framework should wait
					before sending an event in response to receiving an event of IncomingEventId
					type. This attribute is ignored if OutgoingEventId has not been changed from its default
					value.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<!--#########################################################################-->
	<xs:complexType mixed="true" name="corbaAttribute">
		<xs:annotation>
			<xs:documentation>
			Type which defines CORBA attributes such as BACI properties.
			This XML element should contain a block of Python code with the last line being the return value.
			It could be something similar to:
return "this string value for the following IDL - readonly attribute string stuff;"
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Name" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>
				Name of the CORBA attribute.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute default="1" name="Timeout" type="xs:float" use="optional">
			<xs:annotation>
				<xs:documentation>
				Amount of time in floating point seconds that must pass before the simulator framework returns
				control to the caller.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<!--#########################################################################-->
	<xs:complexType mixed="true" name="nativeMethod">
		<xs:annotation>
			<xs:documentation>
			Type which defines a non-CORBA, component method.
			This XML element should contain a block of Python code with the last line being the return value:
if 1:
	x = 1
else:
	x = 0
x
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Name" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>
				Name of the native method. For example, "myMethodName".
				Must not be reserved by the simulator framework!
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
    <xs:complexType mixed="true" name="lifeCycleMethod"/>
    
	<!--#########################################################################-->
	<xs:complexType mixed="true" name="corbaMethod">
		<xs:annotation>
			<xs:documentation>
			Type which defines a CORBA component method.
			This XML element should contain a block of Python code with the last line being the return value.
			If the CORBA method is void, the final line should return None:
print "beginning"
while 1:
	#do some stuff

None
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="Name" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>
				Name of the CORBA method. For example, "on".
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute default="5" name="Timeout" type="xs:double" use="optional">
			<xs:annotation>
				<xs:documentation>
				Amount of time in floating point seconds that must pass before the simulator framework returns
				control to the caller.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute default="false" name="Random" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>
				Unused at the moment.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<!--#########################################################################-->
	<xs:element name="SimulatedComponent">
		<xs:annotation>
			<xs:documentation>
			CDB XMLs located in the $ACS_CDB/alma/simulated/* section of the CDB must validate against this schema.
			SimulatedComponent defines the behavior of components using the generic IDL simulator framework.
			</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element maxOccurs="1" minOccurs="0" name="pythonImports" type="imports"/>
				<xs:element maxOccurs="1" minOccurs="0" name="initialize" type="lifeCycleMethod"/>
				<xs:element maxOccurs="1" minOccurs="0" name="cleanUp" type="lifeCycleMethod"/>
				<xs:element maxOccurs="unbounded" minOccurs="0" name="_nativeMethod" type="nativeMethod"/>
				<xs:element maxOccurs="unbounded" minOccurs="0" name="_corbaMethod" type="corbaMethod"/>
				<xs:element maxOccurs="unbounded" minOccurs="0" name="_corbaAttribute" type="corbaAttribute"/>
				<xs:element maxOccurs="unbounded" minOccurs="0" name="_almaEvent" type="event"/>
				<xs:element maxOccurs="unbounded" minOccurs="0" name="_almaEventResponse" type="eventResponse"/>
			</xs:sequence>
			<xs:attribute default="true" name="AllowInheritance" type="xs:boolean" use="optional">
				<xs:annotation>
					<xs:documentation>
					This attribute is used by the simulator framework to determine if it's OK to look at superclasses
					of the component also residing within the $ACS_CDB/alma/simulated/* section of the CDB.
					Change it to 'false' and the simulator will only use the current XML.
					</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<!--#########################################################################-->
</xs:schema>
