<?xml version="1.0" encoding="ISO-8859-1"?>
<!--Sample XML file generated by XMLSPY v2004 rel. 2 U (http://www.xmlspy.com)-->
<SimulatedComponent xmlns="urn:schemas-cosylab-com:SimulatedComponent:1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <pythonImports>
import FRIDGE
        </pythonImports>
	<_corbaMethod Name="sayHello" Timeout="1">
'''
This particular simulated method shows many diverse uses of the 
IDL simulator framework:
 1. How to get/set global data between simulated components
 2. How to publish simulated w/o worrying about supplier instances
 3. How to obtain access to other components that are not 
    necessarily simulated
'''
#name of a global FRIDGE.temperatureDataBlockEvent accessible
#to any simulated component running within this container
global_event_name = "hellodemo_event"

#first we try to get access to a global instance of a 
#FRIDGE temperatureDataBlockEvent...
if getGlobalData(global_event_name) == None:
    #the event has not been created yet so we must create it
    #ourselves
    fridge_event = FRIDGE.temperatureDataBlockEvent(1.2345,
                                                    FRIDGE.ATREF)
    #now we use another API function to set it
    setGlobalData(global_event_name, fridge_event)
else:
    #good, all that's needed to get the previously registered
    #object
    fridge_event = getGlobalData(global_event_name)

#supply the event using another API method
supplyEventByInstance("HELLODEMO1",
                      "fridge",
                      fridge_event)

#here we use a trick to get at the container services object
#for ourself
myself = getComponent("HELLODEMO1")

#next we get a reference to the power supply component
ps = myself.getComponent("TEST_PS_1")

#our return value will be based on the value of the power 
#supply's readback property
ret_val = ps._get_readback().get_sync()[0]

#change the return value to something meaningful
ret_val = "PowerSupply's readback property was: " + str(ret_val)

return ret_val
    </_corbaMethod>
</SimulatedComponent>

