<!-- edited with XMLSPY v5 rel. 2 U (http://www.xmlspy.com) by Bogdan Jeram (E.S.O.) -->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
	<xsl:output method="text" version="1.0" encoding="ASCII"/>
	<xsl:template match="/Type">
<xsl:text>#ifndef  _</xsl:text>
<xsl:value-of select="@name"/>
<xsl:text>_IDL_</xsl:text>
<xsl:text>
#define  _</xsl:text>
<xsl:value-of select="@name"/>
<xsl:text>_IDL_
	
/*******************************************************************************
* ALMA - Atacama Large Millimiter Array
* (c) European Southern Observatory, 2003 
*
*This library is free software; you can redistribute it and/or
*modify it under the terms of the GNU Lesser General Public
*License as published by the Free Software Foundation; either
*version 2.1 of the License, or (at your option) any later version.
*
*This library is distributed in the hope that it will be useful,
*but WITHOUT ANY WARRANTY; without even the implied warranty of
*MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
*Lesser General Public License for more details.
*
*You should have received a copy of the GNU Lesser General Public
*License along with this library; if not, write to the Free Software
*Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
*
* "@(#) $Id: AES2IDL.xslt,v 1.6 2006/04/24 22:53:42 dfugate Exp $"
*************  THIS FILE IS AUTOMATICALLY GENERATED !!!!!!
*/

#include &lt;acserr.idl&gt;

#pragma prefix "</xsl:text>
<xsl:value-of select="@_prefix"/>
<xsl:text>"
 	
module ACSErr 
{
	// type
	const ACSErr::ACSErrType </xsl:text>
	<xsl:value-of select="@name"/> 
	<xsl:text> = </xsl:text>	
	<xsl:value-of select="@type"/>
	<xsl:text>;
}; // module ACSErr
</xsl:text>
<xsl:text>
module </xsl:text>
<xsl:value-of select="@name"/> 
<xsl:text>
{
</xsl:text>
<xsl:if test="count(//Code) > 0">
        <xsl:text>
	/**
	 * The following are completion codes intended 
	 * only to be used when there is no problem handling
	 * an asynchronous request. They are used only within 
	 * the "code" field of ACSErr::Completions.
         */ 
	</xsl:text>
	<xsl:for-each select="Code">
	<xsl:text> const ACSErr::ErrorCode </xsl:text>
			<xsl:value-of select="@name"/>
			<xsl:text> = </xsl:text>
			<xsl:number value="position()-1"/>
			<xsl:text>;
	</xsl:text>
	</xsl:for-each>
</xsl:if>
<xsl:if test="count(//ErrorCode) > 0">
	<xsl:text>
	/**
	 * The following are error codes which should be used
	 * only for erroneous conditions. They are used in conjunction
	 * with the ACSErr::ErrorTrace field of ACS Error System
         * based IDL exceptions (the "errorCode" field) and the 
	 * "code" field of Completions.
         */
	</xsl:text>
	<xsl:for-each select="ErrorCode">
	<xsl:text> const ACSErr::ErrorCode </xsl:text>
			<xsl:value-of select="@name"/>
			<xsl:text> = </xsl:text>
			<xsl:number value="position()-1"/>
			<xsl:text>;
	</xsl:text>
	</xsl:for-each>
</xsl:if>

	<xsl:text>
	/**
	 * An exception generated for the </xsl:text><xsl:value-of select="@name"/><xsl:text> Error Type. 
	 *
	 * As IDL does not support inheritance among exceptions, ACS 
         * provides a single error type exception for all error codes defined 
         * within this </xsl:text><xsl:value-of select="@name"/><xsl:text> IDL module. This is in addition to the 
	 * individual exceptions defined for each error type/code pair.
	 *
	 * To be used when you want your IDL method to be able to throw an 
	 * exception with any error code defined within this IDL module. The 
	 * helper exception classes then generated in C++/Java/Python provide an 
         * </xsl:text><xsl:value-of select="@name"/><xsl:text>::</xsl:text><xsl:value-of select="@name"/><xsl:text>Ex get</xsl:text><xsl:value-of select="@name"/><xsl:text>Ex() 
         * method to be called when you choose to throw the CORBA 
         * exception. Of course this method returns an exception where the 
	 * ACSErr::ErrorTrace member is identical to the originating error type/code
         * exception's ErrorTrace member.
	 *
	 * In essence, this exception is provided so that developers do not end up 
         * having to declare that their IDL method throws N unique exceptions of type 
	 * </xsl:text><xsl:value-of select="@name"/><xsl:text> with a unique code (where N is the total
         * number of error codes defined for this module). Instead, just define that your IDL method throws the 
         * the pseudo-base </xsl:text><xsl:value-of select="@name"/><xsl:text>Ex exception. From there, the ACS infrastructure
         * in the various languages allows developers to easily convert their unique
         * exception into an instance of </xsl:text><xsl:value-of select="@name"/><xsl:text>Ex to be thrown.
	 */
	</xsl:text>
	
	<xsl:text>exception </xsl:text>
			<xsl:value-of select="@name"/>
		<xsl:text>Ex {
		ACSErr::ErrorTrace errorTrace;	
	};
	</xsl:text>
<xsl:if test="count(//ErrorCode[not(@_suppressExceptionGeneration)]) > 0">
	<xsl:text>
	// excptions for codes:
	</xsl:text>

	<xsl:for-each select="ErrorCode[not(@_suppressExceptionGeneration)]">
<xsl:text>exception </xsl:text>
			<xsl:value-of select="@name"/>
		<xsl:text>Ex {
		ACSErr::ErrorTrace errorTrace;	
	};
	
	</xsl:text>
	</xsl:for-each>
</xsl:if>	
	<xsl:text>
}; // module </xsl:text>
<xsl:value-of select="@name"/>

<xsl:text>

#endif

</xsl:text>
</xsl:template>
</xsl:stylesheet>
