
/*
* SampPanel.java
*
* Created on January 26, 2004, 4:11 PM
*/

/**
*
* @author  oat
*/
package alma.acssampGUI;

import java.util.ArrayList;
import java.util.List;

import javax.swing.JApplet;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;

import com.cosylab.abeans.AbeansEngine;
import com.cosylab.abeans.AbeansLaunchable;
import com.cosylab.abeans.plugins.AbeansStandardActionsPlugIn;
import com.cosylab.abeans.plugins.AbeansSystemMenuPlugIn;
import com.cosylab.abeans.plugins.AboutPlugIn;
import com.cosylab.gui.components.spikechart.DefaultChartDecorator;
import com.cosylab.gui.components.spikechart.FancyTimeTrendFlavor;
import com.cosylab.gui.components.spikechart.TrendDataModel;
import com.cosylab.gui.framework.Desktop;
import com.cosylab.gui.framework.Launcher;
import com.cosylab.gui.framework.LauncherEnvironment;
import com.cosylab.gui.plugins.CosyStandardActionsPlugIn;
import com.cosylab.gui.plugins.VitragePlugIn;

import abeans.pluggable.acs.ACSAbeansEngine;
import abeans.pluggable.acs.maci.settings.ACSPlugSettingsPlugIn;

import alma.acs.component.client.ComponentClient;
import alma.acssamp.abeans.SampObj;

/**
* Template for ACS Visual Abeans Applications.
*/
public class acssampPanel extends AbeansLaunchable {
   
   
   private SampObj obj;
   /**
    * ACS Abeans engined used by this application.
    */
   private ACSAbeansEngine engine;
   private acssampGUIConsumer ncObj;
   
   private TrendDataModel model;
   private List<String> listSampObj;
   
  /**
   * ACS Java client needed to configured ACS ORB.
   */
   private ComponentClient myClient = null;


   /**
    * Creates a new instance of this class. The default no-arg constructor
    * may be used only by visual builders to instantiate an instance of
    * launchable panel. During run-time spcific constructor must be used.
    * @see com.cosylab.abeans.AbeansLaunchable
    */
   public acssampPanel() {
       super();
   }
   
   /**
    * Creates a new instance of this class that will reside in a <code>JFrame</code> container.
    * @see com.cosylab.abeans.AbeansLaunchable
    */
   public acssampPanel(Launcher launcher, LauncherEnvironment env, JFrame owner) {
       super(launcher, env, owner);

 //      java.awt.Component [] prova = getComponents();
      
   }
   
   /**
    * Creates a new instance of this class that will reside inside a <code>JInternalFrame</code>.
    * @see com.cosylab.abeans.AbeansLaunchable
    */
   public acssampPanel(Launcher launcher, LauncherEnvironment env, Desktop desk, JInternalFrame owner) {
       super(launcher, env, desk, owner);
   }
   
   /**
    * Creates a new instance of this class that will reside inside an applet in a web browser.
    * @see com.cosylab.abeans.AbeansLaunchable
    */
   public acssampPanel(Launcher launcher, LauncherEnvironment env, JApplet owner) {
       super(launcher, env, owner);
      }
   
   /**
    * @see com.cosylab.abeans.AbeansLaunchable#getAbeansEngine()
    */
   public AbeansEngine getAbeansEngine() {
       if (engine == null)
           engine = new ACSAbeansEngine(getClass().getName());
       return engine;
   }

    /**
     * Configures the simple client.
     */
    public void configACSClient() {
	try 
	    {
	    //Setup an ACS Java client. This has little to do with the NC API
	    String managerLoc = System.getProperty("ACS.manager");
	    if (managerLoc == null) 
		{
		System.out.println("Java property 'ACS.manager' must be set to the corbaloc of the ACS manager!");
		System.exit(-1);
		}
	    String clientName = "ACSSampPanelClient";
	    myClient = new ComponentClient(null, managerLoc, clientName);
	   }
	catch(Exception e)
	    {
	    e.printStackTrace();
	    }
    }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        samp1 = new alma.acssamp.abeans.Samp();
        textComponent = new javax.swing.JTextField();
        textFrequency = new javax.swing.JTextField();
        textProperty = new javax.swing.JTextField();
        textRate = new javax.swing.JTextField();
        buttonSample = new javax.swing.JButton();
        buttonPause = new javax.swing.JButton();
        buttonContinue = new javax.swing.JButton();
        buttonStop = new javax.swing.JButton();
        labelComponent = new javax.swing.JLabel();
        labelProperty = new javax.swing.JLabel();
        labelFrequency = new javax.swing.JLabel();
        labelRate = new javax.swing.JLabel();
        spike1 = new com.cosylab.gui.components.spikechart.DecoratedChart();

        try {
            samp1.setRemoteName("SAMP1");
        } catch (abeans.pluggable.PlugException e1) {
            e1.printStackTrace();
        } catch (abeans.core.InitializationException e2) {
            e2.printStackTrace();
        }

        setLayout(new java.awt.GridBagLayout());

        setMinimumSize(new java.awt.Dimension(500, 437));
        setPreferredSize(new java.awt.Dimension(450, 600));
        textComponent.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        textComponent.setText("LAMP1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        add(textComponent, gridBagConstraints);

        textFrequency.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        textFrequency.setText("10");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.7;
        add(textFrequency, gridBagConstraints);

        textProperty.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        textProperty.setText("brightness");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(textProperty, gridBagConstraints);

        textRate.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        textRate.setText("1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(textRate, gridBagConstraints);

        buttonSample.setText("SAMPLE");
        buttonSample.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSampleActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        add(buttonSample, gridBagConstraints);

        buttonPause.setText("PAUSE");
        buttonPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPauseActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(buttonPause, gridBagConstraints);

        buttonContinue.setText("CONTINUE");
        buttonContinue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonContinueActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(buttonContinue, gridBagConstraints);

        buttonStop.setText("STOP");
        buttonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStopActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(buttonStop, gridBagConstraints);

        labelComponent.setText("Component: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        add(labelComponent, gridBagConstraints);

        labelProperty.setText("Property: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(labelProperty, gridBagConstraints);

        labelFrequency.setText("Frequency (Hz): ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        add(labelFrequency, gridBagConstraints);

        labelRate.setText("Report Rate (s): ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(labelRate, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(spike1, gridBagConstraints);

    }//GEN-END:initComponents

   private void buttonPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPauseActionPerformed
       // Add your handling code here:
   try {
       obj.suspend();        
       } catch (Exception ex) {
           ex.printStackTrace();
       }
   }//GEN-LAST:event_buttonPauseActionPerformed

   private void buttonContinueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonContinueActionPerformed
   // Add your handling code here:
   try {
       obj.resume();        
       } catch (Exception ex) {
           ex.printStackTrace();
       }


   }//GEN-LAST:event_buttonContinueActionPerformed

   private void buttonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStopActionPerformed
       // Add your handling code here:
   try {
       obj.stop();     
       obj.destroy();
       ncObj.ncDisconnect();
       myClient.tearDown();
       } catch (Exception ex) {
           ex.printStackTrace();
       }
   }//GEN-LAST:event_buttonStopActionPerformed
   

    private void buttonSampleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSampleActionPerformed
	// Add your handling code here:
	try {
	    String strComponent = textComponent.getText();
	    System.out.println(strComponent);           
	    String strProperty = textProperty.getText();
	    System.out.println(strProperty);
	    String strFrequency = textFrequency.getText();
	    System.out.println(strFrequency);
	    String strRate = textRate.getText();
	    System.out.println(strRate); 
                       
	    long lFreq = (long) ( (1 / Double.parseDouble(textFrequency.getText())) * 10000000);;
	    long lRate = Long.parseLong(textRate.getText()) * 10000000;
	    System.out.println(lFreq); 
	    System.out.println(lRate); 
           
	    obj = samp1.initSampObj(strComponent, strProperty, lFreq, lRate);
	    obj.start();
           
	    // sleep to allow NC creation
	    Thread.sleep(5000);
           
	    String ncChannel=obj.getChannelName();
           
         
      
	    if(!listSampObj.contains(ncChannel))
		{
		    model= new TrendDataModel();
              
		    spike1.getChartArea().addDataSource(model);
		}
	    configACSClient();
	    ncObj = new acssampGUIConsumer(ncChannel,model, myClient.getContainerServices());
	    listSampObj.add(ncChannel);
               
	    try
		{
		    //After consumerReady() is invoked, push_structured_event(...) is invoked
		    //by the notification channel.  That is, we have no control over when
		    //that method is called.
		    ncObj.consumerReady();
		    System.out.println("Waiting for events...");
		}
	    catch(Exception e)
		{
		    System.err.println(e);
		    ncObj.ncDisconnect();
		}
              
           
	} catch (Exception ex) {
	    ex.printStackTrace();
	}
    }//GEN-LAST:event_buttonSampleActionPerformed
   
   /**
    * This method is called by the Abeans framework at initialization.
    */
   public void userInitializeGUI() {
       initComponents();
       getSystemPane().setPreferredSize(getPreferredSize());
       
       // setup chart
       DefaultChartDecorator dec = new DefaultChartDecorator();
       dec.applyFlavor(spike1, new FancyTimeTrendFlavor());
       
       //spike1.getViewManager().setYScale(new Interval(0.0,30.0,false));
               
       listSampObj = new ArrayList<String>();
   }
   
   
   /**
    * The main entry point for every Java application.
    */
   public static void main(String args[]) {
       AbeansLaunchable.launch(acssampPanel.class, args);
    }
   
   /**
    * This method initializes the standard Abeans plugins.
    */
   public void userInitializePlugIns() {
		try {
			installPlugIn(AbeansSystemMenuPlugIn.class);
			installPlugIn(CosyStandardActionsPlugIn.class);
			installPlugIn(AboutPlugIn.class);
			installPlugIn(AbeansStandardActionsPlugIn.class);
			installPlugIn(VitragePlugIn.class);
			installPlugIn(ACSPlugSettingsPlugIn.class);

			// uncomment following line(s) to get plugin(s) installed at startup
			// installPlugIn(AbeansExceptionPanelPlugIn.class);
			// installPlugIn(TreeBrowserPlugIn.class);
			// installPlugIn(LoggingPlugIn.class);
			// installPlugIn(ReportAreaPlugIn.class);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonContinue;
    private javax.swing.JButton buttonPause;
    private javax.swing.JButton buttonSample;
    private javax.swing.JButton buttonStop;
    private javax.swing.JLabel labelComponent;
    private javax.swing.JLabel labelFrequency;
    private javax.swing.JLabel labelProperty;
    private javax.swing.JLabel labelRate;
    private alma.acssamp.abeans.Samp samp1;
    private com.cosylab.gui.components.spikechart.DecoratedChart spike1;
    private javax.swing.JTextField textComponent;
    private javax.swing.JTextField textFrequency;
    private javax.swing.JTextField textProperty;
    private javax.swing.JTextField textRate;
    // End of variables declaration//GEN-END:variables
}
