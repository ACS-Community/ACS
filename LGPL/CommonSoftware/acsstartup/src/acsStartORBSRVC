#! /bin/bash
. acsstartupAcsPorts
. acsstartupAcsInstance
. acsstartupLogging.sh
. acsstartupConstants
#*******************************************************************************
# E.S.O. - VLT project
#
# "@(#) $Id: acsStartORBSRVC,v 1.54 2006/02/27 23:14:47 dfugate Exp $"
#
# who       when      what
# --------  --------  ----------------------------------------------
# sharring 2004-06-23 restructured for performance
# mschilli 2004-04-16 added proper command line parsing
# gchiozzi 2003-06-04 Fixed usage of ORBOPTS="-ORBDottedDecimalAddresses 1"
# david 2003-05-14 changed to bash for tat tests
# gchiozzi 2003-04-02 Replaced nsadd in $PATH with standard $ACE_ROOT one
# gchiozzi 2002-11-22 Added starting CDB
# gchiozzi 2002-09-30 Removed CDB Server. Not needed any more.
# bjeram 2002-04-10 added -silent options for acsLogSvc
# bjeram 2002-04-10 added acslogsvc
# almamgr 2001-11-23 Changed handling of IOR file for IR
# gchiozzi 2001-11-16 Added acsIrfeed
# almamgr 2001-09-20 Remove export. Did not work on Sun
# gchiozzi 2001-09-20 Added loading of ACS IDLs in interface repository
# gchiozzi 2001-09-19 created
#

#************************************************************************
#   NAME
# 
#   SYNOPSIS
# 
#   DESCRIPTION
#
#   FILES
#
#   ENVIRONMENT
#
#   RETURN VALUES
#
#   CAUTIONS
#
#   EXAMPLES
#
#   SEE ALSO
#
#   BUGS     
#
#------------------------------------------------------------------------
#

PID=$$
export HOST=`getIP`

###
### ----------- Command Line Parsing ---------------------

#
# These will contain the parsing results (CL_XXX, CL = command line)
#
CL_BASEPORT=
CL_HELP=

#
# These options can be recognized (longopts comma-separated. colon means argument is required)
#
LONGOPTS=help,baseport:,timeout:
SHORTOPTS=hb:t:

#
# Usage info. Be nice and keep this up-to-date!
#
function printUsage {
   echo "Starts Orb services for Acs; note that acsStart is an alternative for this"
   echo ""
	echo "Usage: `basename $0` [OPTIONS]  "
	echo "Options: "
	echo "   -b | -baseport INSTANCE        the acs instance (0-9) you want to use"
	echo "   -t | -timeout MULTIPLIER       the maximum timeout can be increased by specifying an integer value greater than 1"
	echo "   -h | -help                     prints this help and exits"
}

#
# Run getopt (posixly_correct needed). We run twice:
# First run is simply to check the commandline for correctness
# Second run is the real deal which replaces the command line args with getopt's output
export POSIXLY_CORRECT=1

getopt -n `basename $0` -Q -u -a -l $LONGOPTS $SHORTOPTS "$@" || {
   printUsage
	exit $EC_BADARGS;
}

set -- `getopt -u -a -l $LONGOPTS $SHORTOPTS "$@"`

#
# Iterate over getopt's output and set CL_XXX variables accordingly
#
while : 
do
	case "$1" in
	--baseport)         CL_BASEPORT=$2 ; shift ;;
	-b)                 CL_BASEPORT=$2 ; shift ;;
	--timeout)          export ACS_STARTUP_TIMEOUT_MULTIPLIER=$2 ; shift ;;
	-t)                 export ACS_STARTUP_TIMEOUT_MULTIPLIER=$2 ; shift ;;
	--help)             CL_HELP=true ;; 
	-h)                 CL_HELP=true ;; 
	--) break ;;
	esac
	shift
done
shift

# restore 
export POSIXLY_CORRECT=
unset POSIXLY_CORRECT


if [ "$CL_HELP" ] ; then
   printUsage
   exit $EC_OK
fi


#
# (Note: Rest of command line now in $@ )
#
### ---------- End of Command Line Parsing -------------


################################
#Port numbers
################################

#Check command-line args for baseport option
if [ "$CL_BASEPORT" ]
then
    export ACS_INSTANCE="$CL_BASEPORT"
fi

#Makes shure there is an initial value
if [ X"$ACS_STARTUP_TIMEOUT_MULTIPLIER" = X ]
 then
   ACS_STARTUP_TIMEOUT_MULTIPLIER=5
fi

MAX_TIMEOUT=$(( 10 * $ACS_STARTUP_TIMEOUT_MULTIPLIER ))
export STD_SLEEP=3

#a sanity check to ensure user does not run acsStartORBSRVC twice in a row
#using the same baseport
if [ -e `getInstanceDirName $ACS_INSTANCE`/ACS_NAMING_SERVICE_PID ]
then
    ACS_LOG_ERROR "It appears as if you're trying to run the `basename $0` command twice"
    ACS_LOG_ERROR "    in a row using the same ACS_INSTANCE ($ACS_INSTANCE). This is not possible."
    exit $EC_FAILURE
fi

#
# Makes sure that the directory for temporary 
# ACS_INSTANCE files exists.
#
if ! createInstanceDirectory $ACS_INSTANCE
  then
     ACS_LOG_ERROR "Cannot create `getInstanceDirName $ACS_INSTANCE`"
     exit $EC_CANNOTCREATE
  fi
ACS_INSTANCE_DIR=`getInstanceDirName $ACS_INSTANCE`

ACS_NAMING_SERVICE_PORT=`getNamingServicePort`
ACS_NOTIFY_SERVICE_PORT=`getNotifyServicePort`
ACS_LOGGING_NOTIFY_SERVICE_PORT=`getLoggingNotifyServicePort`
ACS_ARCHIVE_NOTIFY_SERVICE_PORT=`getArchiveNotifyServicePort`
ACS_LOGGING_SERVICE_PORT=`getLoggingServicePort`
ACS_IR_PORT=`getIRPort`
ACS_LOG_SERVICE_PORT=`getLogPort`
ACS_CDB_PORT=`getCDBPort`

#ensure the port numbers are actually free
if ! checkTCPPort $ACS_NAMING_SERVICE_PORT
then
    ACS_LOG_ERROR "Naming service port is being used by another process. Cannot continue!"
    exit $EC_NOPORT

elif ! checkTCPPort $ACS_NOTIFY_SERVICE_PORT
then
    ACS_LOG_ERROR "Notify service port is being used by another process. Cannot continue!"
    exit $EC_NOPORT

elif ! checkTCPPort $ACS_LOGGING_NOTIFY_SERVICE_PORT
then
    ACS_LOG_ERROR "Logging notify service port is being used by another process. Cannot continue!"
    exit $EC_NOPORT

elif ! checkTCPPort $ACS_ARCHIVE_NOTIFY_SERVICE_PORT
then
    ACS_LOG_ERROR "Archive notify service port is being used by another process. Cannot continue!"
    exit $EC_NOPORT

elif ! checkTCPPort $ACS_LOGGING_SERVICE_PORT
then
    ACS_LOG_ERROR "Logging service port is being used by another process. Cannot continue!"
    exit $EC_NOPORT

elif ! checkTCPPort $ACS_IR_PORT
then
    ACS_LOG_ERROR "Interface repository port is being used by another process. Cannot continue!"
    exit $EC_NOPORT

elif ! checkTCPPort $ACS_LOG_SERVICE_PORT
then
    ACS_LOG_ERROR "Log service port is being used by another process. Cannot continue!"
    exit $EC_NOPORT

elif ! checkTCPPort $ACS_CDB_PORT
then
    ACS_LOG_ERROR "CDB port is being used by another process. Cannot continue!"
    exit $EC_NOPORT
fi

################################
#IOR locations
################################
NAME_IOR=$ACS_INSTANCE_DIR/NameServiceIOR
NOTIFY_IOR=$ACS_INSTANCE_DIR/NotifyServiceIOR
LOGGING_NOTIFY_IOR=$ACS_INSTANCE_DIR/LoggingNotifyServiceIOR
ARCHIVE_NOTIFY_IOR=$ACS_INSTANCE_DIR/ArchiveNotifyServiceIOR
IR_IOR=$ACS_INSTANCE_DIR/InterfaceRepositoryIOR

# Always use -ORBDottedDecimalAddresses=1
ORBOPTS="-ORBDottedDecimalAddresses 1"

################################
#Abnormal termination function
################################
function timeoutExit
{
    if [ "X" != "X$ACS_NAMING_SERVICE_PID" ]
    then
	acsKillProc $ACS_NAMING_SERVICE_PID 2> /dev/null || ACS_LOG_ERROR "Cannot kill the naming service"
    fi 

    if [ "X" != "X$ACS_NOTIFY_SERVICE_PID" ]
    then
	acsKillProc $ACS_NOTIFY_SERVICE_PID 2> /dev/null || ACS_LOG_ERROR "Cannot kill the notification service"
    fi 

    if [ "X" != "X$ACS_LOGGING_NOTIFY_SERVICE_PID" ]
    then
	acsKillProc $ACS_LOGGING_NOTIFY_SERVICE_PID 2> /dev/null || ACS_LOG_ERROR "Cannot kill the logging notification service"
    fi 

    if [ "X" != "X$ACS_ARCHIVE_NOTIFY_SERVICE_PID" ]
    then
	acsKillProc $ACS_ARCHIVE_NOTIFY_SERVICE_PID 2> /dev/null || ACS_LOG_ERROR "Cannot kill the archive notification service"
    fi 

    if [ "X" != "X$ACS_LOGGING_SERVICE_PID" ]
    then
	acsKillProc $ACS_LOGGING_SERVICE_PID 2> /dev/null || ACS_LOG_ERROR "Cannot kill the ACS logging service"
    fi 

    if [ "X" != "X$ACS_IR_PID" ]
    then
	acsKillProc $ACS_IR_PID 2> /dev/null || ACS_LOG_ERROR "Cannot kill the interface repository"
    fi 

    if [ "X" != "X$ACS_LOG_SERVICE_PID" ]
    then
	acsKillProc $ACS_LOG_SERVICE_PID 2> /dev/null || ACS_LOG_ERROR "Cannot kill the ACS log service"
    fi 

    if [ "X" != "X$ACS_CDB_PORT" ]
    then
	cdbjDALShutdown -k corbaloc::$HOST:$ACS_CDB_PORT/CDB &> /dev/null || ACS_LOG_ERROR "Cannot kill the CDB"
    fi

    rm -rf $ACS_INSTANCE_DIR || ACS_LOG_ERROR "Cannot delete $ACS_INSTANCE_DIR"
    exit $EC_TIMEOUT
}

ACS_LOG_INFO "Starting CORBA Services"
ACS_LOG_INFO "    Orb options:  $ORBOPTS"

################################
# Interface Repository
################################
# The IOR is saved in $IR_IOR
#
# Note: this is started first, so that we can do the acsIrfeed (which depends on IR being started)
#       immediately afterwards. acsIrfeed is a long-running process, so we want to start it ASAP.
#
ACS_LOG_INFO "Starting Interface Repository"

# This is TAO Interface Repository
# $ACE_ROOT/TAO/orbsvcs/IFR_Service/IFR_Service -ORBEndpoint iiop://$HOST:$ACS_IR_PORT  -o $IR_IOR $ORBOPTS &

#This is MICO Interface Repository
LD_LIBRARY_PATH=$MICO_HOME/lib:$LD_LIBRARY_PATH
$MICO_HOME/bin/ird -ORBNoResolve -ORBIIOPAddr inet:$HOST:$ACS_IR_PORT --ior $IR_IOR &

ACS_IR_PID=$!
echo $ACS_IR_PID > $ACS_INSTANCE_DIR/ACS_IR_PID


#block until the IOR shows up in the the correct file
if ! acsutilBlock -t $MAX_TIMEOUT -f $IR_IOR -b "IOR:"
then
    ACS_LOG_ERROR "Unable to start the Interface Repository!"
    ACS_LOG_ERROR "Try increasing the value of \$ACS_STARTUP_TIMEOUT_MULTIPLIER"
    timeoutExit
fi

# Now that the Interface Repository is running, 
# it is safe to load the Interface Repository with acsIrfeed.
#
# Loading ACS IDL Interfaces in Interface Repository, as a background job, so processing can continue in parallel.
acsIrfeed  -IRcorbaloc corbaloc::$HOST:$ACS_IR_PORT/InterfaceRepository &

################################
# Naming Service
################################
ACS_LOG_INFO "Starting Naming Service"
$ACE_ROOT/TAO/orbsvcs/Naming_Service/Naming_Service -ORBEndpoint iiop://$HOST:$ACS_NAMING_SERVICE_PORT -o $NAME_IOR $ORBOPTS &

ACS_NAMING_SERVICE_PID=$!
echo $ACS_NAMING_SERVICE_PID  > $ACS_INSTANCE_DIR/ACS_NAMING_SERVICE_PID

#block until the IOR shows up in the the correct file
if ! acsutilBlock -t $MAX_TIMEOUT -f $NAME_IOR -b "IOR:"
then
    ACS_LOG_ERROR "Unable to start the Naming Service!"
    ACS_LOG_ERROR "Try increasing the value of \$ACS_STARTUP_TIMEOUT_MULTIPLIER"
    timeoutExit
fi

######################################
#   ACS Configuration Database
#   No recovery is attempted
#
#   Note: this is started immediately after the naming service 
#         (which is its only dependency) in the background, 
#         for performance reasons. The code which
#         checks to make sure cdbjDAL has started properly
#         has been moved to the end of this file to improve
#         performance.
#######################################

ACS_LOG_INFO "Starting ACS Configuration Database"
ACS_LOG_INFO "    CDB data is in:  $ACS_CDB"
CDB_OUT=$ACS_INSTANCE_DIR/cdb.out
cdbjDAL -OAport $ACS_CDB_PORT -n 2>&1 | tee $CDB_OUT &
#copy tee's PID
echo $! >> $ACS_INSTANCE_DIR/ACS_PIDS

# Now that the Naming Service and Interface Repository are both running, 
# the Interface Repository is added to the Name Service
# using the temporary file, that is afterwards deleted.
$ACE_ROOT/TAO/utils/nslist/nsadd --name InterfaceRepository --ior `cat $IR_IOR` -ORBInitRef NameService=corbaloc::$HOST:$ACS_NAMING_SERVICE_PORT/NameService $ORBOPTS &

#------------------------------------------------------------------------------------------
################################
# Notify Service
################################
# Note - this must be started after the naming service is running.

ACS_LOG_INFO "Starting Notify Service"

# I need to cd to $ACE_ROOT/TAO/orbsvcs/Notify_Service
# in order to get the correct svc.conf service configuration file.
STARTUP_DIR=$PWD
cd $ACE_ROOT/TAO/orbsvcs/Notify_Service
$ACE_ROOT/TAO/orbsvcs/Notify_Service/Notify_Service -ORBEndpoint iiop://$HOST:$ACS_NOTIFY_SERVICE_PORT -ORBInitRef NameService=corbaloc::$HOST:$ACS_NAMING_SERVICE_PORT/NameService -IORoutput $NOTIFY_IOR $ORBOPTS &> $ACS_INSTANCE_DIR/$ACS_NOTIFY_OUT &
cd $STARTUP_DIR

ACS_NOTIFY_SERVICE_PID=$!
echo $ACS_NOTIFY_SERVICE_PID  > $ACS_INSTANCE_DIR/ACS_NOTIFY_SERVICE_PID

#block until the IOR shows up in the the correct file
if ! acsutilBlock -t $MAX_TIMEOUT -f $NOTIFY_IOR -b "IOR:"
then
    ACS_LOG_ERROR "The IOR of the notify service was never emitted!"
    ACS_LOG_ERROR "Try increasing the value of \$ACS_STARTUP_TIMEOUT_MULTIPLIER"
    timeoutExit
fi

#------------------------------------------------------------------------------------------
################################
# Logging Notify Service
################################
# Note - this must be started after the naming service is running.

ACS_LOG_INFO "Starting Logging Notify Service"

# I need to cd to $ACE_ROOT/TAO/orbsvcs/Notify_Service
# in order to get the correct svc.conf service configuration file.
STARTUP_DIR=$PWD
cd $ACE_ROOT/TAO/orbsvcs/Notify_Service
$ACE_ROOT/TAO/orbsvcs/Notify_Service/Notify_Service -ORBEndpoint iiop://$HOST:$ACS_LOGGING_NOTIFY_SERVICE_PORT -ORBInitRef NameService=corbaloc::$HOST:$ACS_NAMING_SERVICE_PORT/NameService -IORoutput $LOGGING_NOTIFY_IOR $ORBOPTS -Factory LoggingNotifyEventChannelFactory &> $ACS_INSTANCE_DIR/$ACS_LOG_NOTIFY_OUT &
cd $STARTUP_DIR

ACS_LOGGING_NOTIFY_SERVICE_PID=$!
echo $ACS_LOGGING_NOTIFY_SERVICE_PID  > $ACS_INSTANCE_DIR/ACS_LOGGING_NOTIFY_SERVICE_PID

#block until the IOR shows up in the the correct file
if ! acsutilBlock -t $MAX_TIMEOUT -f $LOGGING_NOTIFY_IOR -b "IOR:"
then
    ACS_LOG_ERROR "The IOR of the logging notify service was never emitted!"
    ACS_LOG_ERROR "Try increasing the value of \$ACS_STARTUP_TIMEOUT_MULTIPLIER"
    timeoutExit
fi

#------------------------------------------------------------------------------------------
################################
# Archive Notify Service
################################
# Note - this must be started after the naming service is running.

ACS_LOG_INFO "Starting Archive Notify Service"

# I need to cd to $ACE_ROOT/TAO/orbsvcs/Notify_Service
# in order to get the correct svc.conf service configuration file.
STARTUP_DIR=$PWD
cd $ACE_ROOT/TAO/orbsvcs/Notify_Service
$ACE_ROOT/TAO/orbsvcs/Notify_Service/Notify_Service -ORBEndpoint iiop://$HOST:$ACS_ARCHIVE_NOTIFY_SERVICE_PORT -ORBInitRef NameService=corbaloc::$HOST:$ACS_NAMING_SERVICE_PORT/NameService -IORoutput $ARCHIVE_NOTIFY_IOR $ORBOPTS -Factory ArchiveNotifyEventChannelFactory -Channel -ChannelName ArchivingChannel &> $ACS_INSTANCE_DIR/$ACS_ARCHIVE_NOTIFY_OUT &
cd $STARTUP_DIR

ACS_ARCHIVE_NOTIFY_SERVICE_PID=$!
echo $ACS_ARCHIVE_NOTIFY_SERVICE_PID  > $ACS_INSTANCE_DIR/ACS_ARCHIVE_NOTIFY_SERVICE_PID

#block until the IOR shows up in the the correct file
if ! acsutilBlock -t $MAX_TIMEOUT -f $ARCHIVE_NOTIFY_IOR -b "IOR:"
then
    ACS_LOG_ERROR "The IOR of the archive notify service was never emitted!"
    ACS_LOG_ERROR "Try increasing the value of \$ACS_STARTUP_TIMEOUT_MULTIPLIER"
    timeoutExit
fi


################################
# Logging Service
################################
# NOTE - this must be started after the Notify Service (and Naming Service) are running.

ACS_LOG_INFO "Starting Logging Service"

LOGGING_OUT=$ACS_INSTANCE_DIR/logging.out

loggingService  -ORBEndpoint iiop://$HOST:$ACS_LOGGING_SERVICE_PORT -ORBInitRef NameService=corbaloc::$HOST:$ACS_NAMING_SERVICE_PORT/NameService -ORBInitRef LoggingNotifyEventChannelFactory=corbaloc::$HOST:$ACS_LOGGING_NOTIFY_SERVICE_PORT/LoggingNotifyEventChannelFactory $ORBOPTS &> $LOGGING_OUT &

ACS_LOGGING_SERVICE_PID=$!
echo $ACS_LOGGING_SERVICE_PID > $ACS_INSTANCE_DIR/ACS_LOGGING_SERVICE_PID

#block until the IOR shows up in the the correct file
if ! acsutilBlock -t $MAX_TIMEOUT -f $LOGGING_OUT -b "ACS Centralized Logger is running"
then
    ACS_LOG_ERROR "Unable to start the Logging Service!"
    ACS_LOG_ERROR "Try increasing the value of \$ACS_STARTUP_TIMEOUT_MULTIPLIER"
    timeoutExit
fi

######################################
#   ACS Log  service
#######################################
# NOTE - this must be started after the Loggging Service is running.

ACS_LOG_INFO "Starting ACS Log service"
acsLogSvc -silent -ORBEndpoint iiop://$HOST:$ACS_LOG_SERVICE_PORT -ORBInitRef NameService=corbaloc::$HOST:$ACS_NAMING_SERVICE_PORT/NameService $ORBOPTS &> $ACS_INSTANCE_DIR/$ACS_LOG_SERVICE_OUT &

ACS_LOG_SERVICE_PID=$!
echo $ACS_LOG_SERVICE_PID > $ACS_INSTANCE_DIR/ACS_LOG_SERVICE_PID

########################################
# Make sure the CDB, which was started at the beginning of 
# this script, was successfully started.
########################################
#
# Check to see that the DAL actually got started (w/in the timeout). 
# if not, clean up and exit.


#block until the IOR shows up in the the correct file
if ! acsutilBlock -t $MAX_TIMEOUT -f $CDB_OUT -b "JDAL is ready and waiting"
then
    ACS_LOG_ERROR "Unable to start the ACS CDB!"
    ACS_LOG_ERROR "Try increasing the value of \$ACS_STARTUP_TIMEOUT_MULTIPLIER"
    timeoutExit
fi

ACS_LOG_FORCED "INFO - For this ACS session, please do an 'export ACS_INSTANCE=$ACS_INSTANCE' on all terminals running ACS clients."
ACS_LOG_FORCED "INFO - The acsStartORBSRVC script has now completed!"

#
# ___oOo___
