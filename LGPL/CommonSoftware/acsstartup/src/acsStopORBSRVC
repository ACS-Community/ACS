#! /bin/bash
. acsstartupAcsPorts
. acsstartupLogging.sh
. acsstartupConstants
. acsstartupAcsInstance
. acsstartupPids
#*******************************************************************************
# E.S.O. - VLT project
#
# "@(#) $Id: acsStopORBSRVC,v 1.39 2008/04/10 05:24:41 cparedes Exp $"
#
# who       when      what
# --------  --------  ----------------------------------------------
# mschilli 2004-04-16 added proper command line parsing
# david 2003-05-14 changed to bash for tat tests
# gchiozzi 2002-12-12 acsLogSvc was missing for SunOS
# gchiozzi 2002-11-22 Added stopping CDB
# gchiozzi 2002-09-30 Removed CDB Server. Not needed any more.
# bjeram 2002-04-10 added kill acslogsvc
# psivera  2002-03-18 ported to SUN Solaris
# gchiozzi 2001-09-19 created
#

#************************************************************************
#   NAME
# 
#   SYNOPSIS
# 
#   DESCRIPTION
#
#   FILES
#
#   ENVIRONMENT
#
#   RETURN VALUES
#
#   CAUTIONS
#
#   EXAMPLES
#
#   SEE ALSO
#
#   BUGS     
#
#------------------------------------------------------------------------
#

ACS_LOG_COMMAND $@

###
### ----------- Command Line Parsing ---------------------

#
# These will contain the parsing results (CL_XXX, CL = command line)
#
CL_BASEPORT=
CL_HELP=

#
# These options can be recognized (longopts comma-separated. colon means argument is required)
#
LONGOPTS=help,baseport:
SHORTOPTS=hb:

#
# Usage info. Be nice and keep this up-to-date!
#
function printUsage {
   echo "Stops the Orb services for Acs; note that acsStop is an alternative for this"
   echo ""
	echo "Usage: `basename $0` [OPTIONS]  "
	echo "Options: "
	echo "   -b | -baseport INSTANCE        the acs instance (0-9) you want to use"
   echo "   -h | -help                     prints this help and exits"
}

#
# Run getopt (posixly_correct needed). We run twice:
# First run is simply to check the commandline for correctness
# Second run is the real deal which replaces the command line args with getopt's output
export POSIXLY_CORRECT=1

getopt -n `basename $0` -Q -u -a -l $LONGOPTS $SHORTOPTS "$@" || {
   printUsage
	exit $EC_BADARGS;
}

set -- `getopt -u -a -l $LONGOPTS $SHORTOPTS "$@"`

#
# Iterate over getopt's output and set CL_XXX variables accordingly
#
while : 
do
	case "$1" in
	--baseport)         CL_BASEPORT=$2 ; shift ;;
	-b)                 CL_BASEPORT=$2 ; shift ;;
	--help)             CL_HELP=true ;; 
	-h)                 CL_HELP=true ;; 
	--) break ;;
	esac
	shift
done
shift

# restore 
export POSIXLY_CORRECT=
unset POSIXLY_CORRECT

if [ "$CL_HELP" ] ; then
   printUsage
   exit $EC_OK
fi

#
# (Note: Rest of command line now in $@ )
#
### ---------- End of Command Line Parsing -------------


export HOST=`getIP`


#Check command-line args for baseport option
if [ "$CL_BASEPORT" ]
then
    export ACS_INSTANCE="$CL_BASEPORT"
fi

export INSTANCE_DIR=`getInstanceDirName $ACS_INSTANCE`

########################################################################
#SANITY CHECKS-------------------------------------------------------

if [ ! -d $INSTANCE_DIR ]
then
    ACS_LOG_DEBUG "acsStopORBSRVC" "Lock directory '$INSTANCE_DIR' does not exist!"

elif [ ! -w $INSTANCE_DIR ]
then
    ACS_LOG_ERROR "acsStopORBSRVC" "Lock directory '$INSTANCE_DIR' is not owned by '$USER'!"
    exit $EC_CANNOTUSE
fi

ACS_LOG_INFO "acsStopORBSRVC" "Stopping the ORB Services and CDB using 'ACS_INSTANCE=$ACS_INSTANCE'"


########################################################################
#SHUTDOWN CDB-----------------------------------------------------------
#Since the CDB is just a Java process, it must be treated a little differently
ACS_LOG_INFO "acsStopORBSRVC" "Stopping the CDB"
ACS_CDB_PORT=`getCDBPort`

#Try the "correct" way of shutting down the CDB
if ! acsutilBlock -t 15 -k cdbjDALShutdown -d corbaloc::$HOST:$ACS_CDB_PORT/CDB &> /dev/null
then
    PID=`getCDBPid`
    acsKillProc $PID 2> /dev/null || (ACS_LOG_ERROR "acsStopORBSRVC" "Cannot kill the CDB")
fi

########################################################################
#SHUTDOWN ORB SERVICES--------------------------------------------------

#kill the processes one at a time

ACS_LOG_INFO "acsStopORBSRVC" "Stopping the CORBA Naming Service"
if PID=`getNamingServicePid`
then
    acsKillProc $PID 2> /dev/null || (ACS_LOG_ERROR "acsStopORBSRVC" "Cannot kill the naming service")
fi

ACS_LOG_INFO "acsStopORBSRVC" "Stopping the CORBA Notification Service"
if PID=`getNotifyServicePid`
then
    acsKillProc $PID 2> /dev/null || (ACS_LOG_ERROR "acsStopORBSRVC" "Cannot kill the notification service")
fi

ACS_LOG_INFO "acsStopORBSRVC" "Stopping the CORBA Logging Notification Service"
if PID=`getLoggingNotifyServicePid`
then
    acsKillProc $PID 2> /dev/null || (ACS_LOG_ERROR "acsStopORBSRVC" "Cannot kill the logging notification service")
fi

ACS_LOG_INFO "acsStopORBSRVC" "Stopping the CORBA Archive Notification Service"
if PID=`getArchiveNotifyServicePid`
then
    acsKillProc $PID 2> /dev/null || (ACS_LOG_ERROR "acsStopORBSRVC" "Cannot kill the archive notification service")
fi

ACS_LOG_INFO "acsStopORBSRVC" "Stopping the CORBA Alarm Notification Service"
if PID=`getAlarmNotifyServicePid`
then
    acsKillProc $PID 2> /dev/null || (ACS_LOG_ERROR "acsStopORBSRVC" "Cannot kill the alarm notification service")
fi

ACS_LOG_INFO "acsStopORBSRVC" "Stopping the CORBA Logging Service"
if PID=`getLoggingServicePid`
then
    acsKillProc $PID 2> /dev/null || (ACS_LOG_ERROR "acsStopORBSRVC" "Cannot kill the logging service")
fi

ACS_LOG_INFO "acsStopORBSRVC" "Stopping the CORBA Interface Repository"
if PID=`getIRPid`
then
    acsKillProc $PID 2> /dev/null || (ACS_LOG_ERROR "acsStopORBSRVC" "Cannot kill the interface repository")
fi

ACS_LOG_INFO "acsStopORBSRVC" "Stopping the ACS Logging Service"
if PID=`getLogPid`
then
    acsKillProc $PID 2> /dev/null || (ACS_LOG_ERROR "acsStopORBSRVC" "Cannot kill the ACS logging service")
fi

########################################################################
#FINAL CLEANUP----------------------------------------------------------
PIDSFILE=$INSTANCE_DIR/$ACS_PIDSFILE
if [ -e $PIDSFILE ]
then
    file=`cat $PIDSFILE`
    
    ACS_LOG_INFO "acsStopORBSRVC" "Killing any rogue ACS processes..."
    for line in $file
    do
      acsKillProc $line &> /dev/null
    done
fi

ACS_LOG_INFO "acsStopORBSRVC" "Freeing $INSTANCE_DIR"
rm -rf $INSTANCE_DIR &> /dev/null || (ACS_LOG_ERROR "acsStopORBSRVC" "Cannot remove $INSTANCE_DIR")


#
# ___oOo___
