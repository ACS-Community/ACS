. acsstartupConstants
. acsstartupLogging.sh
#############################################################
function getInstanceDirName
{
local ACS_INSTANCE

ACS_INSTANCE=$1

echo "$ACS_INSTANCES_DIR/ACS_INSTANCE.$ACS_INSTANCE"
}

export getInstanceDirName

#------------------------------------------------------------------------------------
#--Checks the base port which should be from zero to nine.
#--The base port is the sole parameter to this script.
#--If the baseport is valid, the return value is EC_OK.
#--If the baseport is invalid, the return value is EC_BADARGS.
#---------------------
function checkBasePort
{
local ACS_INSTANCE
local compressedAI

ACS_INSTANCE=$1

#sanity check to ensure the $ACS_INSTANCE is between 0-9
compressedAI=`echo $ACS_INSTANCE | sed -e 's/[^[:digit:]]//g'`

#first check for non-integers
if [ "X$ACS_INSTANCE" != "X$compressedAI" ]
then
	ACS_SILENT_LOG "ERROR The ACS_INSTANCE to use, '$ACS_INSTANCE', is not between 0-9!"
	return $EC_BADARGS

#next check for values out of range
elif [ $ACS_INSTANCE -gt 9 ]
then
	ACS_SILENT_LOG "ERROR The ACS_INSTANCE to use, '$ACS_INSTANCE', is greater than 9!"
	return $EC_BADARGS

elif [ $ACS_INSTANCE -lt 0 ]
then
	ACS_SILENT_LOG "ERROR The ACS_INSTANCE to use, '$ACS_INSTANCE', is less than 0!"
	return $EC_BADARGS

#it's OK
else
	return $EC_OK
fi
}
#---------------------
function checkTCPPort
{
local TCP_PORT
local compressedAI
local item
local t_item

TCP_PORT=$1

#compressed AI contains a list where each element contains some TCP info
compressedAI=`netstat -l -t --numeric-ports | grep ":$TCP_PORT " | awk '{print $4}'| sed 's/:/ /g' | awk '{print $2}' 2> /dev/null`

if [ "$compressedAI" = "" ] 
then
  return $EC_OK

elif [ "$compressedAI" = "$TCP_PORT" ] 
then
  ACS_LOG_ERROR "The TCP_PORT to use, '$TCP_PORT', is taken already!"
  ACS_LOG_ERROR "`netstat -t -p -e -e -l | grep $TCP_PORT | awk '{printf("%s %s %s", $4, $7, $9)}'`"
  return $EC_BADARGS
fi

return $EC_OK
}

export checkTCPPort

#------------------------------------------------------------------------------------
#--Gets a base port (0-9) for the ACS_INSTANCE 
#--If no baseport is provided to this script as the sole parameter, we're free to 
#--choose whatever we want that has not been taken already.
#--If it is provided, we'll use what the developer wants.
#--Assumes $ACSDATA/tmp exists and is writeable
#--If a baseport can be found and used, the return value is EC_OK and the baseport
#--is printed so stdout.
#--If a baseport cannot be found, the return value is something other than EC_OK.
#--------------------
function getBasePort
{
local i
local ACS_INSTANCE

ACS_INSTANCE=$1


#sanity check. if they've defined it, we need to verify it's actually useable.
if [ "X$ACS_INSTANCE" != "X" ]
then

	#if the number is not valid, bail
	if ! checkBasePort $ACS_INSTANCE
	then
		#bad situation, but possibly recoverable
		ACS_LOG_ERROR "The ACS_INSTANCE to use, $ACS_INSTANCE, is not from 0-9!"
		return $EC_BADARGS

	#the directory has already been created, but is not writeable by this user
	elif [ -d `getInstanceDirName $ACS_INSTANCE` ] && [ ! -w `getInstanceDirName $ACS_INSTANCE` ]
	then
		#another bad situation, but recoverable as well.
		#the ACS_INSTANCE directory is not writeable by this user.
		#warn them and unset the instance
		ACS_LOG_ERROR "The ACS_INSTANCE to use, $ACS_INSTANCE, cannot be used by $USER!"
		ACS_LOG_ERROR "        Check the permissions on `getInstanceDirName $ACS_INSTANCE` next time."
		return $EC_CANNOTUSE

	#the directory has already been created and is writeable by this user	
	elif [ -d `getInstanceDirName $ACS_INSTANCE` ] && [ -w `getInstanceDirName $ACS_INSTANCE` ]
	then
		#good, nothing else to do from our end
		echo $ACS_INSTANCE
		return $EC_OK

	#the directory has not been created	
	elif [ ! -d `getInstanceDirName $ACS_INSTANCE` ] 
	then
		#good, nothing else to do from our end
		echo $ACS_INSTANCE
		return $EC_OK
	fi

fi



#iterate through the ten possible choices
i=0

while [ $i -lt 10 ] 
do

	#if the directory has not already been created.
	if [ ! -e `getInstanceDirName $i` ]
	then
		#we've found a free one and we're done
		echo $i
		return $EC_OK
	fi

	i=$(( $i + 1 ))
done

#getting this far is very bad - no ports available
return $EC_NOPORT
}

export getBasePort

#------------------------------------------------------------------------------------
#--Creates an ACS INSTANCE directory.
#--Sole parameter is 0-9 corresponding to the ACS_INSTANCE to use.
#--If the instance has already been created, this script prints warning messages
#--but will not bail.

function createInstanceDirectory
{

local ACS_INSTANCE
local ACS_INSTANCE_DIR
local PORTS_FILENAME

ACS_INSTANCE=$1
ACS_INSTANCE_DIR=`getInstanceDirName $ACS_INSTANCE`
PORTS_FILENAME=$ACS_INSTANCE_DIR/USED_CONTAINER_PORTS

#sanity check to make sure we were given a port to work with
if [ "X$ACS_INSTANCE" == "X" ]
then
	ACS_SILENT_LOG "ERROR The ACS_INSTANCE directory to use was not passed to this script!"
	ACS_SILENT_LOG "      Must be from 0-9"
	return $EC_BADARGS
fi

#sanity check to ensure the baseport is OK
if ! checkBasePort $ACS_INSTANCE
then
	return $EC_BADARGS
fi

#sanity check to make sure $ACSDATA is defined
if [ "X$ACSDATA" == "X" ]
then
	ACS_SILENT_LOG "ERROR ACSDATA environment variable is not defined!"
	return $EC_FAILURE
fi

#sanity check to make sure $ACS_INSTANCES_DIR has been created.
if [ ! -d $ACS_INSTANCES_DIR ]
then
	ACS_SILENT_LOG "ERROR $ACS_INSTANCES_DIR does not exist!"
	return $EC_FAILURE
fi

#sanity check to make sure $ACS_INSTANCES_DIR is writeable.
if [ ! -w $ACS_INSTANCES_DIR ]
then
	ACS_SILENT_LOG "ERROR $ACS_INSTANCES_DIR is not writeable by '$USER'!"
	return $EC_CANNOTUSE
fi

#sanity check to make sure the instance directory has not already been created
if [ -d $ACS_INSTANCE_DIR ]
then
	ACS_SILENT_LOG "WARNING $ACS_INSTANCE_DIR already exists!"

#OK to create the ACS INSTANCE directory
else
	mkdir -p $ACS_INSTANCE_DIR
	chmod 774 $ACS_INSTANCE_DIR
fi

#now create USED_CONTAINER_PORTS
if [ -e $PORTS_FILENAME ]
then
	ACS_SILENT_LOG "WARNING $PORTS_FILENAME already exists!"

elif [ ! -w $ACS_INSTANCE_DIR ]
then
	ACS_SILENT_LOG "WARNING cannot create $PORTS_FILENAME because $ACS_INSTANCE_DIR is not writeable by $USER!"

else
	touch $PORTS_FILENAME
	chmod 774 $PORTS_FILENAME
fi

}

export createInstanceDirectory

#------------------------------------------------------------------------------------
#--Picks a baseport to use, takes care of creating the ACS_INSTANCE.$ACS_INSTANCE
#--directory, etc.
#--If no baseport is provided to this script as the sole parameter, we're free to 
#--choose whatever we want that has not been taken already.
#--If it is provided, we'll use what the developer wants.
#--Assumes $ACSDATA/tmp exists and is writeable
#--If a baseport can be found and used, the return value is EC_OK and the baseport
#--is printed so stdout.
#--If a baseport cannot be found, the return value is something other than EC_OK.
#--------------------
function pickBasePort
{
local ACS_INSTANCE
local temp

ACS_INSTANCE=$1

#get a free port
if ! temp=`getBasePort $ACS_INSTANCE`
then
	return $EC_NOPORT
fi

#create the ACS instance directory
if ! createInstanceDirectory $temp
then 
	return $EC_CANNOTCREATE
fi

echo $temp

return $EC_OK

}

export pickBasePort
#------------------------------------------------------------
function checkDeadInstance
{
local ACS_INSTANCE
local temp

ACS_INSTANCE=$1



#Check manager's port


#Check naming service port

#Check notify service port

#Check logging service port

#Check IFR port

#Check log port

#Check CDB port

}

export checkInstanceDir
