#! /bin/bash
. acsstartupAcsPorts
. acsstartupAcsInstance
. acsstartupLogging.sh
. acsstartupConstants
. acsstartupPids
#*******************************************************************************
# E.S.O. - VLT project
#
# "@(#) $Id: acsNamingService,v 1.4 2012/05/31 15:03:11 acaproni Exp $"
#
# who       when      what
# --------  --------  ----------------------------------------------
# azagar   2008-08-06 Extracted from acsStartORBSRVC and acsStopORBSRVC
#

#************************************************************************
#   NAME
# 
#   SYNOPSIS
# 
#   DESCRIPTION
#
#   FILES
#
#   ENVIRONMENT
#
#   RETURN VALUES
#
#   CAUTIONS
#
#   EXAMPLES
#
#   SEE ALSO
#
#   BUGS     
#
#------------------------------------------------------------------------
#

PID=$$
export HOST=`getIP`
COMMAND=`basename $0`
#LOGPOSTFIX=" using 'ACS_INSTANCE=$ACS_INSTANCE'"
LOGPOSTFIX=

###
### ----------- Command Line Parsing ---------------------

#
# These will contain the parsing results (CL_XXX, CL = command line)
#
CL_START=false
CL_STOP=false
CL_WAIT=false
CL_BASEPORT=
CL_HELP=

#
# These options can be recognized (longopts comma-separated. colon means argument is required)
# Intentionally includes all options supported by acsStartORBSRVC
#
LONGOPTS=help,start,kill,wait,noloadIFR,recoverClientConnections,baseport:,timeout:,nameService:
SHORTOPTS=hskwrb:t:x:

#
# Usage info. Be nice and keep this up-to-date!
#
function printUsage {
  cat << EOF
Starts or stops Naming Service for Acs

Usage: $COMMAND [OPTIONS]
Options:
   -s | --start                      start service
   -k | --kill                       stop service
   -w | --wait                       wait for service to get started
   -b | --baseport INSTANCE          the acs instance (0-9) you want to use
   -t | --timeout MULTIPLIER         the maximum timeout can be increased by specifying an integer value greater than 1
   -h | --help                       prints this help and exits
EOF
}

#
# Run getopt (posixly_correct needed). We run twice:
# First run is simply to check the commandline for correctness
# Second run is the real deal which replaces the command line args with getopt's output
export POSIXLY_CORRECT=1

getopt -n $COMMAND -Q -u -a -l $LONGOPTS $SHORTOPTS "$@" || {
  printUsage
  exit $EC_BADARGS;
}

set -- `getopt -u -a -l $LONGOPTS $SHORTOPTS "$@"`

#
# Iterate over getopt's output and set CL_XXX variables accordingly
#
while : 
do
  case "$1" in
    --baseport)                   CL_BASEPORT=$2 ; shift ;;
    -b)                           CL_BASEPORT=$2 ; shift ;;
    --timeout)                    export ACS_STARTUP_TIMEOUT_MULTIPLIER=$2 ; shift ;;
    -t)                           export ACS_STARTUP_TIMEOUT_MULTIPLIER=$2 ; shift ;;
    --help)                       CL_HELP=true ;; 
    -h)                           CL_HELP=true ;; 
    --start)                      CL_START=true ;; 
    -s)                           CL_START=true ;; 
    --kill)                       CL_STOP=true ;; 
    -k)                           CL_STOP=true ;; 
    --wait)                       CL_WAIT=true ;; 
    -w)                           CL_WAIT=true ;; 
    --nameService)                shift ;;
    -x)                           shift ;;
    --) break ;;
  esac
  shift
done
shift

# restore 
export POSIXLY_CORRECT=
unset POSIXLY_CORRECT


if [ "$CL_HELP" ] ; then
  printUsage
  exit $EC_OK
fi


#
# (Note: Rest of command line now in $@ )
#
### ---------- End of Command Line Parsing -------------


################################
#Set variables
################################

#Check command-line args for baseport option
if [ "$CL_BASEPORT" ]
then
  export ACS_INSTANCE="$CL_BASEPORT"
fi

ACS_LOG_COMMAND $@

#Makes shure there is an initial value
if [ X"$ACS_STARTUP_TIMEOUT_MULTIPLIER" = X ]
then
  ACS_STARTUP_TIMEOUT_MULTIPLIER=5
fi

#maximum timeout for any given process to complete
MAX_TIMEOUT=$(( 10 * $ACS_STARTUP_TIMEOUT_MULTIPLIER ))

export STD_SLEEP=3

export INSTANCE_DIR=`getInstanceDirName $ACS_INSTANCE`

#use the instance directory to get the complete names of the 
#files where process IDs are stored in.
NAMING_SERVICE_PIDFILE=$INSTANCE_DIR/$ACS_NAMING_SERVICE_PIDFILE

#persistence filename 
NAMING_SERVICE_PERSISTENCE_FILE=$INSTANCE_DIR/naming_persistence.data

#IOR locations
NAME_IOR=$INSTANCE_DIR/$ACS_NAMING_SERVICE_IORFILE

#determine the TCP ports to be used
NAMING_SERVICE_PORT=`getNamingServicePort`

# Always use -ORBDottedDecimalAddresses=1
if [ "X$ORBOPTS" = "X" ]
then
  ORBOPTS="-ORBDottedDecimalAddresses 1"
fi




################################
# Naming Service
################################

if [ "$CL_STOP" = "true" ]
then
  # SANITY CHECKS
  # --------------------------------------------------------------------------
  if [ ! -d $INSTANCE_DIR ]
  then
    ACS_LOG_DEBUG "$COMMAND" "Lock directory '$INSTANCE_DIR' does not exist!"
  elif [ ! -w $INSTANCE_DIR ]
  then
    ACS_LOG_ERROR "$COMMAND" "Lock directory '$INSTANCE_DIR' is not owned by '$USER'!"
    exit $EC_CANNOTUSE
  fi

  # SERVICE SHUTDOWN
  # --------------------------------------------------------------------------
  ACS_LOG_INFO "$COMMAND" "Stopping the CORBA Naming Service${LOGPOSTFIX}"
  if NAMING_SERVICE_PID=`getNamingServicePid`
  then
    acsKillProc $NAMING_SERVICE_PID 2> /dev/null && rm -f $NAMING_SERVICE_PIDFILE || ACS_LOG_ERROR "$COMMAND" "Cannot kill the Naming Service"
  fi
fi

if [ "$CL_START" = "true" ]
then
  # SANITY CHECKS
  # --------------------------------------------------------------------------
  # Prevent from having the service started more than once on the same baseport
  if [ -e $NAMING_SERVICE_PIDFILE ]
  then
    ACS_LOG_ERROR "$COMMAND" "It appears as if you're trying to run the `basename $0` command twice"
    ACS_LOG_ERROR "$COMMAND" "    in a row using the same ACS_INSTANCE ($ACS_INSTANCE). This is not possible."
    exit $EC_FAILURE
  fi

  # Make sure that the directory for temporary ACS_INSTANCE files exists.
  if ! createInstanceDirectory $ACS_INSTANCE
  then
     ACS_LOG_ERROR "$COMMAND" "Cannot create $INSTANCE_DIR"
     exit $EC_CANNOTCREATE
  fi
  mkdir -p $INSTANCE_DIR/$ACS_PID_DIR
  mkdir -p $INSTANCE_DIR/$ACS_OUT_DIR
  mkdir -p $INSTANCE_DIR/$ACS_IOR_DIR
  mkdir -p $INSTANCE_DIR/$ACS_CNF_DIR

  # Ensure the port numbers are actually free
  if ! checkTCPPort $NAMING_SERVICE_PORT
  then
    ACS_LOG_ERROR "$COMMAND" "Naming Service port is being used by another process. Cannot continue!"
    exit $EC_NOPORT
  fi

  # PERSISTRNCE OPTIONS
  # --------------------------------------------------------------------------
  PERSISTENCE_OPTS="-f $NAMING_SERVICE_PERSISTENCE_FILE"
  
  DISABLE_PERSISTENCE=`echo ${ACS_DISABLE_NS_PERSISTENCE:-"false"} | tr "[:upper:]" "[:lower:]"`
  if [ $DISABLE_PERSISTENCE = "true" ] || [ $DISABLE_PERSISTENCE = "y" ] || [ $DISABLE_PERSISTENCE = "1" ]
  then
    PERSISTENCE_OPTS=""
    ACS_LOG_INFO "$COMMAND" "Naming Service persistence disabled."
  fi
  
  # SERVICE STARTUP
  # --------------------------------------------------------------------------
  ACS_LOG_INFO "$COMMAND" "Starting Naming Service${LOGPOSTFIX}"
  $ACE_ROOT/TAO/orbsvcs/Naming_Service/Naming_Service -ORBEndpoint iiop://$HOST:$NAMING_SERVICE_PORT -o $NAME_IOR $PERSISTENCE_OPTS $ORBOPTS &

  NAMING_SERVICE_PID=$!
  echo $NAMING_SERVICE_PID  > $NAMING_SERVICE_PIDFILE
fi

if [ -e $NAMING_SERVICE_PIDFILE -a "$CL_WAIT" = "true" ]
then
  # Block until the IOR shows up in the the correct file
  if ! acsutilBlock -t $MAX_TIMEOUT -f $NAME_IOR -b "IOR:"
  then
    ACS_LOG_ERROR "$COMMAND" "Unable to start the Naming Service!"
    ACS_LOG_ERROR "$COMMAND" "Try increasing the value of \$ACS_STARTUP_TIMEOUT_MULTIPLIER"
    exit $EC_TIMEOUT
  fi
fi

#
# ___oOo___
