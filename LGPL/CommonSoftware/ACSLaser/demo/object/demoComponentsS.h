// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v1.8.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:511

#ifndef _TAO_IDL__TMP__DEMOCOMPONENTSS_H_
#define _TAO_IDL__TMP__DEMOCOMPONENTSS_H_


#include "demoComponentsC.h"
#include "acscomponentS.h"
#include "CosPropertyS.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/Collocation_Proxy_Broker.h"
#include "tao/PortableServer/PortableServer.h"
#include "tao/PortableServer/Servant_Base.h"

// TAO_IDL - Generated from
// be/be_visitor_module/module_sh.cpp:41

namespace POA_alarmsystemdemo
{
  
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:78
  
  class PS;
  typedef PS *PS_ptr;
  
  class  PS
    : public virtual POA_ACS::ACSComponent
  {
  protected:
    PS (void);
  
  public:
    // Useful for template programming.
    typedef ::alarmsystemdemo::PS _stub_type;
    typedef ::alarmsystemdemo::PS_ptr _stub_ptr_type;
    typedef ::alarmsystemdemo::PS_var _stub_var_type;
    
    PS (const PS& rhs);
    virtual ~PS (void);
    
    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
    
    static void _is_a_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _non_existent_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _interface_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _component_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _repository_id_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    virtual void _dispatch (
        TAO_ServerRequest & req,
        void * servant_upcall);
    
    ::alarmsystemdemo::PS *_this (void);
    
    virtual const char* _interface_repository_id (void) const;
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:41
    
    virtual void faultPS (void) = 0;
    
    static void faultPS_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:41
    
    virtual void terminate_faultPS (void) = 0;
    
    static void terminate_faultPS_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);
    
    static void
    _get_name_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);
    
    static void
    _get_componentState_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);
  };
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:78
  
  class Mount;
  typedef Mount *Mount_ptr;
  
  class  Mount
    : public virtual POA_ACS::ACSComponent
  {
  protected:
    Mount (void);
  
  public:
    // Useful for template programming.
    typedef ::alarmsystemdemo::Mount _stub_type;
    typedef ::alarmsystemdemo::Mount_ptr _stub_ptr_type;
    typedef ::alarmsystemdemo::Mount_var _stub_var_type;
    
    Mount (const Mount& rhs);
    virtual ~Mount (void);
    
    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
    
    static void _is_a_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _non_existent_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _interface_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _component_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _repository_id_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    virtual void _dispatch (
        TAO_ServerRequest & req,
        void * servant_upcall);
    
    ::alarmsystemdemo::Mount *_this (void);
    
    virtual const char* _interface_repository_id (void) const;
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:41
    
    virtual void faultMount (void) = 0;
    
    static void faultMount_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:41
    
    virtual void terminate_faultMount (void) = 0;
    
    static void terminate_faultMount_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);
    
    static void
    _get_name_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);
    
    static void
    _get_componentState_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);
  };
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:78
  
  class Antenna;
  typedef Antenna *Antenna_ptr;
  
  class  Antenna
    : public virtual POA_ACS::ACSComponent
  {
  protected:
    Antenna (void);
  
  public:
    // Useful for template programming.
    typedef ::alarmsystemdemo::Antenna _stub_type;
    typedef ::alarmsystemdemo::Antenna_ptr _stub_ptr_type;
    typedef ::alarmsystemdemo::Antenna_var _stub_var_type;
    
    Antenna (const Antenna& rhs);
    virtual ~Antenna (void);
    
    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
    
    static void _is_a_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _non_existent_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _interface_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _component_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _repository_id_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    virtual void _dispatch (
        TAO_ServerRequest & req,
        void * servant_upcall);
    
    ::alarmsystemdemo::Antenna *_this (void);
    
    virtual const char* _interface_repository_id (void) const;
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:41
    
    virtual void faultAntenna (void) = 0;
    
    static void faultAntenna_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:41
    
    virtual void terminate_faultAntenna (void) = 0;
    
    static void terminate_faultAntenna_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);
    
    static void
    _get_name_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);
    
    static void
    _get_componentState_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);
  };
  
  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:78
  
  class MF;
  typedef MF *MF_ptr;
  
  class  MF
    : public virtual POA_ACS::ACSComponent
  {
  protected:
    MF (void);
  
  public:
    // Useful for template programming.
    typedef ::alarmsystemdemo::MF _stub_type;
    typedef ::alarmsystemdemo::MF_ptr _stub_ptr_type;
    typedef ::alarmsystemdemo::MF_var _stub_var_type;
    
    MF (const MF& rhs);
    virtual ~MF (void);
    
    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
    
    static void _is_a_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _non_existent_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _interface_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _component_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    static void _repository_id_skel (
        TAO_ServerRequest & req,
        void * servant_upcall,
        void * servant);
    
    virtual void _dispatch (
        TAO_ServerRequest & req,
        void * servant_upcall);
    
    ::alarmsystemdemo::MF *_this (void);
    
    virtual const char* _interface_repository_id (void) const;
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:41
    
    virtual void multiFault (void) = 0;
    
    static void multiFault_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);
    
    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:41
    
    virtual void terminate_multiFault (void) = 0;
    
    static void terminate_multiFault_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);
    
    static void
    _get_name_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);
    
    static void
    _get_componentState_skel (
        TAO_ServerRequest & server_request,
        void * servant_upcall,
        void * servant);
  };

// TAO_IDL - Generated from
// be/be_visitor_module/module_sh.cpp:72

} // module alarmsystemdemo
#if defined (__ACE_INLINE__)
#include "demoComponentsS.inl"
#endif /* defined INLINE */

#endif /* ifndef */

