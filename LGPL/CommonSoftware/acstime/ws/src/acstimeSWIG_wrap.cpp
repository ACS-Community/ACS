/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.21
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};                                                    
#endif


#include "Python.h"

/*************************************************************** -*- c -*-
 * python/precommon.swg
 *
 * Rename all exported symbols from common.swg, to avoid symbol
 * clashes if multiple interpreters are included
 *
 ************************************************************************/

#define SWIG_TypeRegister    SWIG_Python_TypeRegister
#define SWIG_TypeCheck       SWIG_Python_TypeCheck
#define SWIG_TypeCast        SWIG_Python_TypeCast
#define SWIG_TypeDynamicCast SWIG_Python_TypeDynamicCast
#define SWIG_TypeName        SWIG_Python_TypeName
#define SWIG_TypeQuery       SWIG_Python_TypeQuery
#define SWIG_TypeClientData  SWIG_Python_TypeClientData
#define SWIG_PackData        SWIG_Python_PackData 
#define SWIG_UnpackData      SWIG_Python_UnpackData 


/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  if defined(_MSC_VER) || defined(__GNUC__)
#    if defined(STATIC_LINKED)
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) extern a
#    else
#      define SWIGEXPORT(a) __declspec(dllexport) a
#      define SWIGIMPORT(a) extern a
#    endif
#  else
#    if defined(__BORLANDC__)
#      define SWIGEXPORT(a) a _export
#      define SWIGIMPORT(a) a _export
#    else
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) a
#    endif
#  endif
#else
#  define SWIGEXPORT(a) a
#  define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#  define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#  define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(const char *)     SWIG_TypeName(const swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);
SWIGIMPORT(char *)           SWIG_PackData(char *, void *, int);
SWIGIMPORT(char *)           SWIG_UnpackData(char *, void *, int);

#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti) {
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      if (tc->clientdata) ti->clientdata = tc->clientdata;
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
  l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty) {
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
        s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) {
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/* Return the name associated with this type */
SWIGRUNTIME(const char *)
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata == clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = swig_type_list;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0))
          SWIG_TypeClientData(tc,clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* Pack binary data into a string */
SWIGRUNTIME(char *)
SWIG_PackData(char *c, void *ptr, int sz) {
  static char hex[17] = "0123456789abcdef";
  int i;
  unsigned char *u = (unsigned char *) ptr;
  register unsigned char uu;
  for (i = 0; i < sz; i++,u++) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
SWIGRUNTIME(char *)
SWIG_UnpackData(char *c, void *ptr, int sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  int i;
  for (i = 0; i < sz; i++, u++) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

#endif

#ifdef __cplusplus
}
#endif

/***********************************************************************
 * python.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

#include "Python.h"

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Flags for pointer conversion */

#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

/* Exception handling in wrappers */
#define SWIG_fail   goto fail

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags) \
  SWIG_Python_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags) \
  SWIG_Python_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags) \
  SWIG_Python_MustGetPtr(p, type, argnum, flags)

/* Python-specific SWIG API */
#define SWIG_newvarlink() \
  SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr) \
  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags) \
  SWIG_Python_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type) \
  SWIG_Python_NewPackedObj(ptr, sz, type)
#define SWIG_InstallConstants(d, constants) \
  SWIG_Python_InstallConstants(d, constants)

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(int)               SWIG_Python_ConvertPtr(PyObject *, void **, swig_type_info *, int);
SWIGIMPORT(PyObject *)        SWIG_Python_NewPointerObj(void *, swig_type_info *,int own);
SWIGIMPORT(void *)            SWIG_Python_MustGetPtr(PyObject *, swig_type_info *, int, int);
SWIGIMPORT(PyObject *)        SWIG_Python_newvarlink(void);
SWIGIMPORT(void)              SWIG_Python_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
SWIGIMPORT(int)               SWIG_Python_ConvertPacked(PyObject *, void *, int sz, swig_type_info *, int);
SWIGIMPORT(PyObject *)        SWIG_Python_NewPackedObj(void *, int sz, swig_type_info *);
SWIGIMPORT(void)              SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]);

#else

/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */

typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

static PyObject *
swig_varlink_repr(swig_varlinkobject *v) {
  v = v;
  return PyString_FromString("<Global variables>");
}

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
  swig_globalvar  *var;
  flags = flags;
  fprintf(fp,"Global variables { ");
  for (var = v->vars; var; var=var->next) {
    fprintf(fp,"%s", var->name);
    if (var->next) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->get_attr)();
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return NULL;
}

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->set_attr)(p);
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return 1;
}

statichere PyTypeObject varlinktype = {
  PyObject_HEAD_INIT(0)              
  0,
  (char *)"swigvarlink",              /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */
SWIGRUNTIME(PyObject *)
SWIG_Python_newvarlink(void) {
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  result->vars = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGRUNTIME(void)
SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v;
  swig_globalvar *gv;
  v= (swig_varlinkobject *) p;
  gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  gv->name = (char *) malloc(strlen(name)+1);
  strcpy(gv->name,name);
  gv->get_attr = get_attr;
  gv->set_attr = set_attr;
  gv->next = v->vars;
  v->vars = gv;
}

/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_Python_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c = 0;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;

  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }
#ifdef SWIG_COBJECT_TYPES
  if (!(PyCObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyCObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  *ptr = PyCObject_AsVoidPtr(obj);
  c = (char *) PyCObject_GetDesc(obj);
  if (newref) Py_DECREF(obj);
  goto cobject;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) {
      if (newref) { Py_DECREF(obj); }
      return 0;
    } else {
      if (newref) { Py_DECREF(obj); }
      goto type_error;
    }
  }
  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (newref) { Py_DECREF(obj); }
#endif

#ifdef SWIG_COBJECT_TYPES
cobject:
#endif

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,(void*) *ptr);
  }

  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
    PyObject *zero = PyInt_FromLong(0);
    PyObject_SetAttrString(pyobj,(char*)"thisown",zero);
    Py_DECREF(zero);
  }
  return 0;

type_error:
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty && c) {
      char *temp = (char *) malloc(64+strlen(ty->name)+strlen(c));
      sprintf(temp,"Type error. Got %s, expected %s", c, ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME(void *)
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  SWIG_Python_ConvertPtr(obj, &result, ty, flags | SWIG_POINTER_EXCEPTION);
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME(int)
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c = 0;

  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:

  if (flags) {
    if (ty && c) {
      char *temp = (char *) malloc(64+strlen(ty->name)+strlen(c));
      sprintf(temp,"Type error. Got %s, expected %s", c, ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Create a new pointer object */
SWIGRUNTIME(PyObject *)
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PyCObject_FromVoidPtrAndDesc((void *) ptr, (char *) type->name, NULL);
#else
  {
    char result[1024];
    char *r = result;
    *(r++) = '_';
    r = SWIG_PackData(r,&ptr,sizeof(void *));
    strcpy(r,type->name);
    robj = PyString_FromString(result);
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
        PyObject *n = PyInt_FromLong(1);
        PyObject_SetAttrString(inst,(char*)"thisown",n);
        Py_DECREF(n);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME(PyObject *)
SWIG_Python_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return PyString_FromString(result);
}

/* Install Constants */
SWIGRUNTIME(void)
SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
  int i;
  PyObject *obj;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_PY_INT:
      obj = PyInt_FromLong(constants[i].lvalue);
      break;
    case SWIG_PY_FLOAT:
      obj = PyFloat_FromDouble(constants[i].dvalue);
      break;
    case SWIG_PY_STRING:
      obj = PyString_FromString((char *) constants[i].pvalue);
      break;
    case SWIG_PY_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
      break;
    case SWIG_PY_BINARY:
      obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      PyDict_SetItemString(d,constants[i].name,obj);
      Py_DECREF(obj);
    }
  }
}

#endif

/* Contract support */

#define SWIG_contract_assert(expr, msg) if (!(expr)) { PyErr_SetString(PyExc_RuntimeError, (char *) msg ); goto fail; } else

#ifdef __cplusplus
}
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_TimeUtil swig_types[0] 
#define  SWIGTYPE_p_acstime__Duration swig_types[1] 
#define  SWIGTYPE_p_acstime__Epoch swig_types[2] 
#define  SWIGTYPE_p_DurationHelper swig_types[3] 
#define  SWIGTYPE_p_EpochHelper swig_types[4] 
static swig_type_info *swig_types[6];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _acstimeSWIG.so
  ------------------------------------------------*/
#define SWIG_init    init_acstimeSWIG

#define SWIG_name    "_acstimeSWIG"

#include "acstimeC.h"
#include "ACSTimeError.h"
#include "acstimeTimeUtil.h"
#include "acstimeDurationHelper.h"
#include "acstimeEpochHelper.h"

#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_Duration_value_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    acstime::Duration *arg1 = (acstime::Duration *) 0 ;
    ACS::TimeInterval arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Duration_value_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_acstime__Duration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (ACS::TimeInterval) PyLong_AsLongLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->value = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Duration_value_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    acstime::Duration *arg1 = (acstime::Duration *) 0 ;
    ACS::TimeInterval result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Duration_value_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_acstime__Duration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (ACS::TimeInterval) ((arg1)->value);
    
    resultobj = PyLong_FromLongLong(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Duration(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    acstime::Duration *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Duration")) goto fail;
    result = (acstime::Duration *)new acstime::Duration();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_acstime__Duration, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Duration(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    acstime::Duration *arg1 = (acstime::Duration *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Duration",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_acstime__Duration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Duration_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_acstime__Duration, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Epoch_value_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    acstime::Epoch *arg1 = (acstime::Epoch *) 0 ;
    ACS::Time arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Epoch_value_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_acstime__Epoch,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (ACS::Time) PyLong_AsUnsignedLongLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->value = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Epoch_value_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    acstime::Epoch *arg1 = (acstime::Epoch *) 0 ;
    ACS::Time result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Epoch_value_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_acstime__Epoch,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (ACS::Time) ((arg1)->value);
    
    resultobj = PyLong_FromUnsignedLongLong(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Epoch(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    acstime::Epoch *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Epoch")) goto fail;
    result = (acstime::Epoch *)new acstime::Epoch();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_acstime__Epoch, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Epoch(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    acstime::Epoch *arg1 = (acstime::Epoch *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Epoch",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_acstime__Epoch,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Epoch_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_acstime__Epoch, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_TimeUtil(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TimeUtil *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_TimeUtil")) goto fail;
    result = (TimeUtil *)new TimeUtil();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_TimeUtil, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_TimeUtil(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TimeUtil *arg1 = (TimeUtil *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_TimeUtil",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TimeUtil,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * TimeUtil_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TimeUtil, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_DurationHelper__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    acstime::Duration *arg1 = 0 ;
    DurationHelper *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_DurationHelper",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_acstime__Duration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (DurationHelper *)new DurationHelper((acstime::Duration const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_DurationHelper, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DurationHelper__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DurationHelper *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_DurationHelper")) goto fail;
    result = (DurationHelper *)new DurationHelper();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_DurationHelper, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DurationHelper(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_DurationHelper__SWIG_1(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_acstime__Duration, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_DurationHelper__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_DurationHelper'");
    return NULL;
}


static PyObject *_wrap_delete_DurationHelper(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DurationHelper *arg1 = (DurationHelper *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_DurationHelper",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DurationHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DurationHelper_value__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DurationHelper *arg1 = (DurationHelper *) 0 ;
    acstime::Duration result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DurationHelper_value",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DurationHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->value();
    
    {
        acstime::Duration * resultptr;
        resultptr = new acstime::Duration((acstime::Duration &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_acstime__Duration, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DurationHelper_value__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DurationHelper *arg1 = (DurationHelper *) 0 ;
    acstime::Duration *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DurationHelper_value",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DurationHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_acstime__Duration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->value((acstime::Duration const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DurationHelper_value(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DurationHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_DurationHelper_value__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DurationHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_acstime__Duration, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_DurationHelper_value__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'DurationHelper_value'");
    return NULL;
}


static PyObject *_wrap_DurationHelper_positive__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DurationHelper *arg1 = (DurationHelper *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DurationHelper_positive",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DurationHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->positive();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DurationHelper_positive__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DurationHelper *arg1 = (DurationHelper *) 0 ;
    bool *arg2 = 0 ;
    bool temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DurationHelper_positive",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DurationHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    temp2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = &temp2;
    (arg1)->positive((bool const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DurationHelper_positive(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DurationHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_DurationHelper_positive__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DurationHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_DurationHelper_positive__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'DurationHelper_positive'");
    return NULL;
}


static PyObject *_wrap_DurationHelper_day__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DurationHelper *arg1 = (DurationHelper *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DurationHelper_day",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DurationHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (long)(arg1)->day();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DurationHelper_day__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DurationHelper *arg1 = (DurationHelper *) 0 ;
    long *arg2 = 0 ;
    long temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DurationHelper_day",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DurationHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    temp2 = (long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = &temp2;
    (arg1)->day((long const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DurationHelper_day(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DurationHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_DurationHelper_day__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DurationHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_DurationHelper_day__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'DurationHelper_day'");
    return NULL;
}


static PyObject *_wrap_DurationHelper_hour__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DurationHelper *arg1 = (DurationHelper *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DurationHelper_hour",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DurationHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (long)(arg1)->hour();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DurationHelper_hour__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DurationHelper *arg1 = (DurationHelper *) 0 ;
    long *arg2 = 0 ;
    long temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DurationHelper_hour",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DurationHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    temp2 = (long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = &temp2;
    (arg1)->hour((long const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DurationHelper_hour(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DurationHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_DurationHelper_hour__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DurationHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_DurationHelper_hour__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'DurationHelper_hour'");
    return NULL;
}


static PyObject *_wrap_DurationHelper_minute__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DurationHelper *arg1 = (DurationHelper *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DurationHelper_minute",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DurationHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (long)(arg1)->minute();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DurationHelper_minute__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DurationHelper *arg1 = (DurationHelper *) 0 ;
    long *arg2 = 0 ;
    long temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DurationHelper_minute",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DurationHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    temp2 = (long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = &temp2;
    (arg1)->minute((long const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DurationHelper_minute(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DurationHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_DurationHelper_minute__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DurationHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_DurationHelper_minute__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'DurationHelper_minute'");
    return NULL;
}


static PyObject *_wrap_DurationHelper_second__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DurationHelper *arg1 = (DurationHelper *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DurationHelper_second",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DurationHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (long)(arg1)->second();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DurationHelper_second__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DurationHelper *arg1 = (DurationHelper *) 0 ;
    long *arg2 = 0 ;
    long temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DurationHelper_second",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DurationHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    temp2 = (long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = &temp2;
    (arg1)->second((long const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DurationHelper_second(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DurationHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_DurationHelper_second__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DurationHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_DurationHelper_second__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'DurationHelper_second'");
    return NULL;
}


static PyObject *_wrap_DurationHelper_microSecond__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DurationHelper *arg1 = (DurationHelper *) 0 ;
    unsigned long long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DurationHelper_microSecond",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DurationHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned long long)(arg1)->microSecond();
    
    resultobj = PyLong_FromUnsignedLongLong(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DurationHelper_microSecond__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DurationHelper *arg1 = (DurationHelper *) 0 ;
    unsigned long long *arg2 = 0 ;
    unsigned long long temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DurationHelper_microSecond",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DurationHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    temp2 = (unsigned long long) PyLong_AsUnsignedLongLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = &temp2;
    (arg1)->microSecond((unsigned long long const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DurationHelper_microSecond(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DurationHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_DurationHelper_microSecond__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DurationHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_DurationHelper_microSecond__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'DurationHelper_microSecond'");
    return NULL;
}


static PyObject *_wrap_DurationHelper_normalize__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DurationHelper *arg1 = (DurationHelper *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DurationHelper_normalize",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DurationHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->normalize();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DurationHelper_normalize__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DurationHelper *arg1 = (DurationHelper *) 0 ;
    bool *arg2 = 0 ;
    bool temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DurationHelper_normalize",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DurationHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    temp2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = &temp2;
    (arg1)->normalize((bool const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DurationHelper_normalize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DurationHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_DurationHelper_normalize__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_DurationHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_DurationHelper_normalize__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'DurationHelper_normalize'");
    return NULL;
}


static PyObject *_wrap_DurationHelper_reset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DurationHelper *arg1 = (DurationHelper *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DurationHelper_reset",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DurationHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->reset();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DurationHelper_compare(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DurationHelper *arg1 = (DurationHelper *) 0 ;
    acstime::Duration *arg2 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DurationHelper_compare",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DurationHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_acstime__Duration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (int)(arg1)->compare((acstime::Duration const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DurationHelper_add(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DurationHelper *arg1 = (DurationHelper *) 0 ;
    acstime::Duration *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DurationHelper_add",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DurationHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_acstime__Duration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    try {
        (arg1)->add((acstime::Duration const &)*arg2);
        
    }
    catch(OverflowOrUnderflowExImpl &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"OverflowOrUnderflowExImpl");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DurationHelper___iadd__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DurationHelper *arg1 = (DurationHelper *) 0 ;
    acstime::Duration *arg2 = 0 ;
    DurationHelper *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DurationHelper___iadd__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DurationHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_acstime__Duration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        DurationHelper &_result_ref = (arg1)->operator +=((acstime::Duration const &)*arg2);
        result = (DurationHelper *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_DurationHelper, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DurationHelper_subtract(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DurationHelper *arg1 = (DurationHelper *) 0 ;
    acstime::Duration *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DurationHelper_subtract",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DurationHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_acstime__Duration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    try {
        (arg1)->subtract((acstime::Duration const &)*arg2);
        
    }
    catch(OverflowOrUnderflowExImpl &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"OverflowOrUnderflowExImpl");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DurationHelper___isub__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DurationHelper *arg1 = (DurationHelper *) 0 ;
    acstime::Duration *arg2 = 0 ;
    DurationHelper *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DurationHelper___isub__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DurationHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_acstime__Duration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        DurationHelper &_result_ref = (arg1)->operator -=((acstime::Duration const &)*arg2);
        result = (DurationHelper *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_DurationHelper, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DurationHelper_modulo(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DurationHelper *arg1 = (DurationHelper *) 0 ;
    acstime::Duration *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DurationHelper_modulo",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DurationHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_acstime__Duration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->modulo((acstime::Duration const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DurationHelper___imod__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DurationHelper *arg1 = (DurationHelper *) 0 ;
    acstime::Duration *arg2 = 0 ;
    DurationHelper *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DurationHelper___imod__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DurationHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_acstime__Duration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        DurationHelper &_result_ref = (arg1)->operator %=((acstime::Duration const &)*arg2);
        result = (DurationHelper *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_DurationHelper, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DurationHelper_multiply(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DurationHelper *arg1 = (DurationHelper *) 0 ;
    unsigned long long *arg2 = 0 ;
    unsigned long long temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DurationHelper_multiply",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DurationHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    temp2 = (unsigned long long) PyLong_AsUnsignedLongLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = &temp2;
    try {
        (arg1)->multiply((unsigned long long const &)*arg2);
        
    }
    catch(OverflowOrUnderflowExImpl &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"OverflowOrUnderflowExImpl");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DurationHelper___imul__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DurationHelper *arg1 = (DurationHelper *) 0 ;
    unsigned long long *arg2 = 0 ;
    DurationHelper *result;
    unsigned long long temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DurationHelper___imul__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DurationHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    temp2 = (unsigned long long) PyLong_AsUnsignedLongLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = &temp2;
    {
        DurationHelper &_result_ref = (arg1)->operator *=((unsigned long long const &)*arg2);
        result = (DurationHelper *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_DurationHelper, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DurationHelper_divide(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DurationHelper *arg1 = (DurationHelper *) 0 ;
    unsigned long long *arg2 = 0 ;
    unsigned long long temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DurationHelper_divide",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DurationHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    temp2 = (unsigned long long) PyLong_AsUnsignedLongLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = &temp2;
    (arg1)->divide((unsigned long long const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DurationHelper___idiv__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DurationHelper *arg1 = (DurationHelper *) 0 ;
    unsigned long long *arg2 = 0 ;
    DurationHelper *result;
    unsigned long long temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DurationHelper___idiv__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DurationHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    temp2 = (unsigned long long) PyLong_AsUnsignedLongLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = &temp2;
    {
        DurationHelper &_result_ref = (arg1)->operator /=((unsigned long long const &)*arg2);
        result = (DurationHelper *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_DurationHelper, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DurationHelper_toString(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DurationHelper *arg1 = (DurationHelper *) 0 ;
    char *arg2 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:DurationHelper_toString",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DurationHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    try {
        result = (char *)(arg1->toString((char const *)arg2)).c_str();
        
    }
    catch(ArgErrorExImpl &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"ArgErrorExImpl");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DurationHelper_fromString(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DurationHelper *arg1 = (DurationHelper *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:DurationHelper_fromString",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DurationHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    try {
        (arg1)->fromString((char const *)arg2);
        
    }
    catch(ArgErrorExImpl &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"ArgErrorExImpl");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DurationHelper_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_DurationHelper, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_EpochHelper__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    acstime::Epoch *arg1 = 0 ;
    EpochHelper *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_EpochHelper",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_acstime__Epoch,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (EpochHelper *)new EpochHelper((acstime::Epoch const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_EpochHelper, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_EpochHelper__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    EpochHelper *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_EpochHelper")) goto fail;
    result = (EpochHelper *)new EpochHelper();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_EpochHelper, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_EpochHelper(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_EpochHelper__SWIG_1(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_acstime__Epoch, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_EpochHelper__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_EpochHelper'");
    return NULL;
}


static PyObject *_wrap_delete_EpochHelper(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    EpochHelper *arg1 = (EpochHelper *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_EpochHelper",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_EpochHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EpochHelper_value__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    EpochHelper *arg1 = (EpochHelper *) 0 ;
    acstime::Epoch result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EpochHelper_value",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_EpochHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->value();
    
    {
        acstime::Epoch * resultptr;
        resultptr = new acstime::Epoch((acstime::Epoch &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_acstime__Epoch, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EpochHelper_value__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    EpochHelper *arg1 = (EpochHelper *) 0 ;
    acstime::Epoch *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EpochHelper_value",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_EpochHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_acstime__Epoch,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->value((acstime::Epoch const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EpochHelper_value(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_EpochHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_EpochHelper_value__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_EpochHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_acstime__Epoch, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_EpochHelper_value__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'EpochHelper_value'");
    return NULL;
}


static PyObject *_wrap_EpochHelper_year__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    EpochHelper *arg1 = (EpochHelper *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EpochHelper_year",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_EpochHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned long)(arg1)->year();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EpochHelper_year__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    EpochHelper *arg1 = (EpochHelper *) 0 ;
    unsigned long *arg2 = 0 ;
    unsigned long temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EpochHelper_year",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_EpochHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    temp2 = (unsigned long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = &temp2;
    (arg1)->year((unsigned long const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EpochHelper_year(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_EpochHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_EpochHelper_year__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_EpochHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_EpochHelper_year__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'EpochHelper_year'");
    return NULL;
}


static PyObject *_wrap_EpochHelper_month__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    EpochHelper *arg1 = (EpochHelper *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EpochHelper_month",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_EpochHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (long)(arg1)->month();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EpochHelper_month__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    EpochHelper *arg1 = (EpochHelper *) 0 ;
    long *arg2 = 0 ;
    long temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EpochHelper_month",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_EpochHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    temp2 = (long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = &temp2;
    (arg1)->month((long const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EpochHelper_month(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_EpochHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_EpochHelper_month__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_EpochHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_EpochHelper_month__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'EpochHelper_month'");
    return NULL;
}


static PyObject *_wrap_EpochHelper_day__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    EpochHelper *arg1 = (EpochHelper *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EpochHelper_day",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_EpochHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (long)(arg1)->day();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EpochHelper_day__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    EpochHelper *arg1 = (EpochHelper *) 0 ;
    long *arg2 = 0 ;
    long temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EpochHelper_day",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_EpochHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    temp2 = (long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = &temp2;
    (arg1)->day((long const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EpochHelper_day(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_EpochHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_EpochHelper_day__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_EpochHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_EpochHelper_day__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'EpochHelper_day'");
    return NULL;
}


static PyObject *_wrap_EpochHelper_dayOfYear__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    EpochHelper *arg1 = (EpochHelper *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EpochHelper_dayOfYear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_EpochHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (long)(arg1)->dayOfYear();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EpochHelper_dayOfYear__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    EpochHelper *arg1 = (EpochHelper *) 0 ;
    long *arg2 = 0 ;
    long temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EpochHelper_dayOfYear",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_EpochHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    temp2 = (long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = &temp2;
    (arg1)->dayOfYear((long const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EpochHelper_dayOfYear(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_EpochHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_EpochHelper_dayOfYear__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_EpochHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_EpochHelper_dayOfYear__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'EpochHelper_dayOfYear'");
    return NULL;
}


static PyObject *_wrap_EpochHelper_dayOfWeek(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    EpochHelper *arg1 = (EpochHelper *) 0 ;
    unsigned long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EpochHelper_dayOfWeek",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_EpochHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned long)(arg1)->dayOfWeek();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EpochHelper_hour__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    EpochHelper *arg1 = (EpochHelper *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EpochHelper_hour",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_EpochHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (long)(arg1)->hour();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EpochHelper_hour__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    EpochHelper *arg1 = (EpochHelper *) 0 ;
    long *arg2 = 0 ;
    long temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EpochHelper_hour",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_EpochHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    temp2 = (long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = &temp2;
    (arg1)->hour((long const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EpochHelper_hour(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_EpochHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_EpochHelper_hour__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_EpochHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_EpochHelper_hour__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'EpochHelper_hour'");
    return NULL;
}


static PyObject *_wrap_EpochHelper_minute__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    EpochHelper *arg1 = (EpochHelper *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EpochHelper_minute",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_EpochHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (long)(arg1)->minute();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EpochHelper_minute__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    EpochHelper *arg1 = (EpochHelper *) 0 ;
    long *arg2 = 0 ;
    long temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EpochHelper_minute",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_EpochHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    temp2 = (long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = &temp2;
    (arg1)->minute((long const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EpochHelper_minute(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_EpochHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_EpochHelper_minute__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_EpochHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_EpochHelper_minute__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'EpochHelper_minute'");
    return NULL;
}


static PyObject *_wrap_EpochHelper_second__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    EpochHelper *arg1 = (EpochHelper *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EpochHelper_second",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_EpochHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (long)(arg1)->second();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EpochHelper_second__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    EpochHelper *arg1 = (EpochHelper *) 0 ;
    long *arg2 = 0 ;
    long temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EpochHelper_second",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_EpochHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    temp2 = (long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = &temp2;
    (arg1)->second((long const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EpochHelper_second(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_EpochHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_EpochHelper_second__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_EpochHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_EpochHelper_second__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'EpochHelper_second'");
    return NULL;
}


static PyObject *_wrap_EpochHelper_microSecond__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    EpochHelper *arg1 = (EpochHelper *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EpochHelper_microSecond",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_EpochHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (long)(arg1)->microSecond();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EpochHelper_microSecond__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    EpochHelper *arg1 = (EpochHelper *) 0 ;
    long *arg2 = 0 ;
    long temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EpochHelper_microSecond",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_EpochHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    temp2 = (long) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = &temp2;
    (arg1)->microSecond((long const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EpochHelper_microSecond(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_EpochHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_EpochHelper_microSecond__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_EpochHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_EpochHelper_microSecond__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'EpochHelper_microSecond'");
    return NULL;
}


static PyObject *_wrap_EpochHelper_normalize__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    EpochHelper *arg1 = (EpochHelper *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EpochHelper_normalize",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_EpochHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->normalize();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EpochHelper_normalize__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    EpochHelper *arg1 = (EpochHelper *) 0 ;
    bool *arg2 = 0 ;
    bool temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EpochHelper_normalize",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_EpochHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    temp2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = &temp2;
    (arg1)->normalize((bool const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EpochHelper_normalize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_EpochHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_EpochHelper_normalize__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_EpochHelper, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_EpochHelper_normalize__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'EpochHelper_normalize'");
    return NULL;
}


static PyObject *_wrap_EpochHelper_reset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    EpochHelper *arg1 = (EpochHelper *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EpochHelper_reset",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_EpochHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->reset();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EpochHelper_compare(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    EpochHelper *arg1 = (EpochHelper *) 0 ;
    acstime::Epoch *arg2 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EpochHelper_compare",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_EpochHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_acstime__Epoch,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (int)(arg1)->compare((acstime::Epoch const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EpochHelper_add(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    EpochHelper *arg1 = (EpochHelper *) 0 ;
    acstime::Duration *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EpochHelper_add",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_EpochHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_acstime__Duration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    try {
        (arg1)->add((acstime::Duration const &)*arg2);
        
    }
    catch(OverflowOrUnderflowExImpl &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"OverflowOrUnderflowExImpl");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EpochHelper_subtract(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    EpochHelper *arg1 = (EpochHelper *) 0 ;
    acstime::Duration *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EpochHelper_subtract",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_EpochHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_acstime__Duration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    try {
        (arg1)->subtract((acstime::Duration const &)*arg2);
        
    }
    catch(OverflowOrUnderflowExImpl &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"OverflowOrUnderflowExImpl");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EpochHelper_difference(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    EpochHelper *arg1 = (EpochHelper *) 0 ;
    acstime::Epoch *arg2 = 0 ;
    acstime::Duration result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:EpochHelper_difference",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_EpochHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_acstime__Epoch,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (arg1)->difference((acstime::Epoch const &)*arg2);
    
    {
        acstime::Duration * resultptr;
        resultptr = new acstime::Duration((acstime::Duration &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_acstime__Duration, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EpochHelper_toUTCdate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    EpochHelper *arg1 = (EpochHelper *) 0 ;
    long arg2 ;
    long arg3 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oll:EpochHelper_toUTCdate",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_EpochHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double)(arg1)->toUTCdate(arg2,arg3);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EpochHelper_toJulianYear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    EpochHelper *arg1 = (EpochHelper *) 0 ;
    long arg2 ;
    long arg3 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oll:EpochHelper_toJulianYear",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_EpochHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double)(arg1)->toJulianYear(arg2,arg3);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EpochHelper_toString(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    EpochHelper *arg1 = (EpochHelper *) 0 ;
    int arg2 ;
    char *arg3 ;
    long arg4 ;
    long arg5 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oisll:EpochHelper_toString",&obj0,&arg2,&arg3,&arg4,&arg5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_EpochHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    try {
        result = (char *)(arg1->toString((acstime::TimeSystem )arg2,(char const *)arg3,arg4,arg5).c_str());
        
    }
    catch(ArgErrorExImpl &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"ArgErrorExImpl");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EpochHelper_fromString(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    EpochHelper *arg1 = (EpochHelper *) 0 ;
    int arg2 ;
    char *arg3 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Ois:EpochHelper_fromString",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_EpochHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    try {
        (arg1)->fromString((acstime::TimeSystem )arg2,(char const *)arg3);
        
    }
    catch(ArgErrorExImpl &_e) {
        {
            PyErr_SetString(PyExc_RuntimeError,"ArgErrorExImpl");
            SWIG_fail;
        }
    }
    catch(...) {
        throw; 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * EpochHelper_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_EpochHelper, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyMethodDef SwigMethods[] = {
	 { (char *)"Duration_value_set", _wrap_Duration_value_set, METH_VARARGS },
	 { (char *)"Duration_value_get", _wrap_Duration_value_get, METH_VARARGS },
	 { (char *)"new_Duration", _wrap_new_Duration, METH_VARARGS },
	 { (char *)"delete_Duration", _wrap_delete_Duration, METH_VARARGS },
	 { (char *)"Duration_swigregister", Duration_swigregister, METH_VARARGS },
	 { (char *)"Epoch_value_set", _wrap_Epoch_value_set, METH_VARARGS },
	 { (char *)"Epoch_value_get", _wrap_Epoch_value_get, METH_VARARGS },
	 { (char *)"new_Epoch", _wrap_new_Epoch, METH_VARARGS },
	 { (char *)"delete_Epoch", _wrap_delete_Epoch, METH_VARARGS },
	 { (char *)"Epoch_swigregister", Epoch_swigregister, METH_VARARGS },
	 { (char *)"new_TimeUtil", _wrap_new_TimeUtil, METH_VARARGS },
	 { (char *)"delete_TimeUtil", _wrap_delete_TimeUtil, METH_VARARGS },
	 { (char *)"TimeUtil_swigregister", TimeUtil_swigregister, METH_VARARGS },
	 { (char *)"new_DurationHelper", _wrap_new_DurationHelper, METH_VARARGS },
	 { (char *)"delete_DurationHelper", _wrap_delete_DurationHelper, METH_VARARGS },
	 { (char *)"DurationHelper_value", _wrap_DurationHelper_value, METH_VARARGS },
	 { (char *)"DurationHelper_positive", _wrap_DurationHelper_positive, METH_VARARGS },
	 { (char *)"DurationHelper_day", _wrap_DurationHelper_day, METH_VARARGS },
	 { (char *)"DurationHelper_hour", _wrap_DurationHelper_hour, METH_VARARGS },
	 { (char *)"DurationHelper_minute", _wrap_DurationHelper_minute, METH_VARARGS },
	 { (char *)"DurationHelper_second", _wrap_DurationHelper_second, METH_VARARGS },
	 { (char *)"DurationHelper_microSecond", _wrap_DurationHelper_microSecond, METH_VARARGS },
	 { (char *)"DurationHelper_normalize", _wrap_DurationHelper_normalize, METH_VARARGS },
	 { (char *)"DurationHelper_reset", _wrap_DurationHelper_reset, METH_VARARGS },
	 { (char *)"DurationHelper_compare", _wrap_DurationHelper_compare, METH_VARARGS },
	 { (char *)"DurationHelper_add", _wrap_DurationHelper_add, METH_VARARGS },
	 { (char *)"DurationHelper___iadd__", _wrap_DurationHelper___iadd__, METH_VARARGS },
	 { (char *)"DurationHelper_subtract", _wrap_DurationHelper_subtract, METH_VARARGS },
	 { (char *)"DurationHelper___isub__", _wrap_DurationHelper___isub__, METH_VARARGS },
	 { (char *)"DurationHelper_modulo", _wrap_DurationHelper_modulo, METH_VARARGS },
	 { (char *)"DurationHelper___imod__", _wrap_DurationHelper___imod__, METH_VARARGS },
	 { (char *)"DurationHelper_multiply", _wrap_DurationHelper_multiply, METH_VARARGS },
	 { (char *)"DurationHelper___imul__", _wrap_DurationHelper___imul__, METH_VARARGS },
	 { (char *)"DurationHelper_divide", _wrap_DurationHelper_divide, METH_VARARGS },
	 { (char *)"DurationHelper___idiv__", _wrap_DurationHelper___idiv__, METH_VARARGS },
	 { (char *)"DurationHelper_toString", _wrap_DurationHelper_toString, METH_VARARGS },
	 { (char *)"DurationHelper_fromString", _wrap_DurationHelper_fromString, METH_VARARGS },
	 { (char *)"DurationHelper_swigregister", DurationHelper_swigregister, METH_VARARGS },
	 { (char *)"new_EpochHelper", _wrap_new_EpochHelper, METH_VARARGS },
	 { (char *)"delete_EpochHelper", _wrap_delete_EpochHelper, METH_VARARGS },
	 { (char *)"EpochHelper_value", _wrap_EpochHelper_value, METH_VARARGS },
	 { (char *)"EpochHelper_year", _wrap_EpochHelper_year, METH_VARARGS },
	 { (char *)"EpochHelper_month", _wrap_EpochHelper_month, METH_VARARGS },
	 { (char *)"EpochHelper_day", _wrap_EpochHelper_day, METH_VARARGS },
	 { (char *)"EpochHelper_dayOfYear", _wrap_EpochHelper_dayOfYear, METH_VARARGS },
	 { (char *)"EpochHelper_dayOfWeek", _wrap_EpochHelper_dayOfWeek, METH_VARARGS },
	 { (char *)"EpochHelper_hour", _wrap_EpochHelper_hour, METH_VARARGS },
	 { (char *)"EpochHelper_minute", _wrap_EpochHelper_minute, METH_VARARGS },
	 { (char *)"EpochHelper_second", _wrap_EpochHelper_second, METH_VARARGS },
	 { (char *)"EpochHelper_microSecond", _wrap_EpochHelper_microSecond, METH_VARARGS },
	 { (char *)"EpochHelper_normalize", _wrap_EpochHelper_normalize, METH_VARARGS },
	 { (char *)"EpochHelper_reset", _wrap_EpochHelper_reset, METH_VARARGS },
	 { (char *)"EpochHelper_compare", _wrap_EpochHelper_compare, METH_VARARGS },
	 { (char *)"EpochHelper_add", _wrap_EpochHelper_add, METH_VARARGS },
	 { (char *)"EpochHelper_subtract", _wrap_EpochHelper_subtract, METH_VARARGS },
	 { (char *)"EpochHelper_difference", _wrap_EpochHelper_difference, METH_VARARGS },
	 { (char *)"EpochHelper_toUTCdate", _wrap_EpochHelper_toUTCdate, METH_VARARGS },
	 { (char *)"EpochHelper_toJulianYear", _wrap_EpochHelper_toJulianYear, METH_VARARGS },
	 { (char *)"EpochHelper_toString", _wrap_EpochHelper_toString, METH_VARARGS },
	 { (char *)"EpochHelper_fromString", _wrap_EpochHelper_fromString, METH_VARARGS },
	 { (char *)"EpochHelper_swigregister", EpochHelper_swigregister, METH_VARARGS },
	 { NULL, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_TimeUtil[] = {{"_p_TimeUtil", 0, "TimeUtil *", 0},{"_p_TimeUtil"},{0}};
static swig_type_info _swigt__p_acstime__Duration[] = {{"_p_acstime__Duration", 0, "acstime::Duration *", 0},{"_p_acstime__Duration"},{0}};
static swig_type_info _swigt__p_acstime__Epoch[] = {{"_p_acstime__Epoch", 0, "acstime::Epoch *", 0},{"_p_acstime__Epoch"},{0}};
static swig_type_info _swigt__p_DurationHelper[] = {{"_p_DurationHelper", 0, "DurationHelper *", 0},{"_p_DurationHelper"},{0}};
static swig_type_info _swigt__p_EpochHelper[] = {{"_p_EpochHelper", 0, "EpochHelper *", 0},{"_p_EpochHelper"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_TimeUtil, 
_swigt__p_acstime__Duration, 
_swigt__p_acstime__Epoch, 
_swigt__p_DurationHelper, 
_swigt__p_EpochHelper, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{ SWIG_PY_INT,     (char *)"TCEqualTo", (long) acstime::TCEqualTo, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"TCLessThan", (long) acstime::TCLessThan, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"TCGreaterThan", (long) acstime::TCGreaterThan, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"TCIndeterminate", (long) acstime::TCIndeterminate, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"TSArray", (long) acstime::TSArray, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"TSTAI", (long) acstime::TSTAI, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"TSUTC", (long) acstime::TSUTC, 0, 0, 0},
{0}};

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    static int       typeinit = 0;
    PyObject *m, *d;
    int       i;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    if (!typeinit) {
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        typeinit = 1;
    }
    SWIG_InstallConstants(d,swig_const_table);
    
}

