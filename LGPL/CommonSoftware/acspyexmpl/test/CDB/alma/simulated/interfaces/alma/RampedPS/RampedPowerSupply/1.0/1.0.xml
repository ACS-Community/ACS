<?xml version="1.0" encoding="UTF-8"?>
<!-- This XML file provides the partial implementation -->
<!-- of the IDL:alma/RampedPS/RampedPowerSupply:1.0    -->
<!-- interface.                                        -->
<!-- Because of this XML's location within the ACS CDB -->
<!-- (i.e., $ACS_CDB/CDB/alma/simulated/interfaces/*), -->
<!-- this simulated behavior description is generic    -->
<!-- and does not tie into any specific component.     -->
<!-- This makes it useful for defining the behavior of -->
<!-- simulated dynamic components. Also, it is very    -->
<!-- useful when one wants to define a component's     -->
<!-- method only once for all occurences of the        -->
<!-- component's type.                                 -->
<!--                                                   -->
<!-- There are several things to take note of here:    -->
<!--   1. Everything defined within XML elements       -->
<!--      consists of Python code. You must obey the   -->
<!--      whitespace rules of Python within these      -->
<!--      elements.                                    -->
<!--   2. Not all methods and BACI properties defined  -->
<!--      in IDL for this component are defined here.  -->
<!--      This is unnecessary as the simulator         -->
<!--      framework will dynamically generate methods  -->
<!--      and properties that have not been defined by -->
<!--      some means available to the end-user.        -->
<!--   3. Implementations of inherited methods defined -->
<!--      in other parts of the CDB will be used where -->
<!--      applicable. In this specific case, see       -->
<!--      $ACS_CDB/CDB/alma/simulated/interfaces/alma/ -->
<!--      PS/PowerSupply/1.0                           -->

<!-- All simulated components should be derived from   -->
<!-- the SimulatedComponent XML element                -->
<SimulatedComponent xmlns="urn:schemas-cosylab-com:SimulatedComponent:1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    
        <pythonImports>
import ACSErr
import ACS
        </pythonImports>
        
<!-- Here we override a lifecycle method. This is being-->
<!-- done so that we only have to create a Completion  -->
<!-- and Callback descriptor a single time rather than -->
<!-- with each invocation of the startRamping method   -->
<!-- to invoke the "done" method of the Callback param -->
		<initialize>
#the lifecycle and component methods defined within IDL
#are not actual instance methods of the simulated component.
#instead, they are actually proxy functions which get indirectly
#called by the simulated component. because of this, the 
#simulator framework provides a reference to the raw component
#as the final param within the parameters list. using this 
#gives us access to the container services!!!
logger = parameters[0].getLogger()
logger.logInfo("logging directly from XML using a nice trick!!!")

#create both of the objects
compl = ACSErr.Completion(0L, 0L, 0L, ())
cbdo  = ACS.CBDescOut(0L, 0L)

#now use some special API functions to store these local
#objects globally
setGlobalData("compl", compl)
setGlobalData("cbdo", cbdo)
        </initialize>

	<_corbaMethod Name="startRamping" Timeout="0">
print "Simulated startRamping (alma/simulated/interfaces CDB section):"
print "    simply invoking the callback's 'done' method."
parameters[1].done(getGlobalData("compl"), 
                   getGlobalData("cbdo"))
print
return
        </_corbaMethod>
</SimulatedComponent>
