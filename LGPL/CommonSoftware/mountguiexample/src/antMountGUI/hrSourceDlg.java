/*
 * hrSourceDlg.java
 *
 * Created on January 27, 2004, 5:11 PM
 */

package antMountGUI;


import alma.MOUNT_ACS.abeans.Mount;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JOptionPane;

/**
 * @author  acaproni
 * 
 * @version 1.0
 */
public class hrSourceDlg extends javax.swing.JDialog implements ActionListener {
	
	// The mount object
	alma.MOUNT_ACS.abeans.Mount mount;
    
    /** Creates new form hrSourceDlg */
    public hrSourceDlg(java.awt.Frame parent, boolean modal, Mount mountObj) {
    	super(parent, modal);
    	this.mount=mountObj;
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        gridPanel = new javax.swing.JPanel();
        azLabel = new javax.swing.JLabel();
        azTF = new javax.swing.JTextField();
        elLabel = new javax.swing.JLabel();
        elTF = new javax.swing.JTextField();
        buttonPanel = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        applyB = new javax.swing.JButton();
        doneB = new javax.swing.JButton();

        setTitle("Horizontal Source");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        /** @assert gridPanel!=null */
        gridPanel.setLayout(new java.awt.GridLayout(2, 2));

        /** @assert azLabel!=null */
        azLabel.setText("Az (ddmmss.d)");
        gridPanel.add(azLabel);

        /** @assert azTF!=null */
        azTF.setText("000000.0");
        azTF.setName("azTF");
        gridPanel.add(azTF);

        /** @assert elLabel!=null */
        elLabel.setText("El (ddmmss.d)");
        gridPanel.add(elLabel);

        /** @assert elTF!=null */
        elTF.setText("000000.0");
        elTF.setName("elTF");
        gridPanel.add(elTF);

        getContentPane().add(gridPanel, java.awt.BorderLayout.CENTER);

        /** @assert buttonPanel!=null */
        buttonPanel.setLayout(new java.awt.BorderLayout(0, 5));

        buttonPanel.add(jSeparator1, java.awt.BorderLayout.CENTER);

        /** @assert applyB!=null */
        applyB.setText("Apply");
        
        /** @assert jPanel1!=null */
        jPanel1.add(applyB);
        applyB.addActionListener(this);

        /** @assert doneB!=null */
        doneB.setText("Done");
        doneB.addActionListener(this);

        jPanel1.add(doneB);

        buttonPanel.add(jPanel1, java.awt.BorderLayout.SOUTH);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        setBounds(50, 50, 50, 50);
        pack();
    }//GEN-END:initComponents

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new hrSourceDlg(new javax.swing.JFrame(), true,null).show();
    }
    
    /** Receive and process the action events
     * 
     * @param evt The action event received
     * 
     * @pre evt!=null && evt.getActionCommand()!=null
     */
    public void actionPerformed(ActionEvent evt) {
    	if (evt.getActionCommand().compareToIgnoreCase("DONE")==0) {
    		setVisible(false);
    		dispose();
    	} else if (evt.getActionCommand().compareToIgnoreCase("APPLY")==0) {
    		double az,el;
    		// Get AZ and EL from the text field
    		try {
    			az=Double.parseDouble(azTF.getText());
    			el=Double.parseDouble(elTF.getText());
    			enableWidgets(false);
    			mount.objfix(az,el);
    			enableWidgets(true);
    		} catch (Exception e) {
    			// Error reading the position
    			// Show an error dialog and exit
    			System.err.println("Format error in azimuth and elevation");
    			JOptionPane.showInternalMessageDialog(
    					null,
						"Check Azimuth and Elevation format",
						"Error",
						JOptionPane.ERROR_MESSAGE,
						null);
    			enableWidgets(true);
    			return;
    		}
    	} else {
    		// Unrecognized command
    		System.err.println("Unrecognized command: "+evt.getActionCommand());
    	}
    }
    
    /** Enable or disable the wigets in the dialog
     * 
     * @param b If true the widgets are enabled
     */
    private void enableWidgets(boolean b) {
    	doneB.setEnabled(b);
    	applyB.setEnabled(b);
    	elTF.setEnabled(b);
    	azTF.setEnabled(b);
    	azLabel.setEnabled(b);
    	elLabel.setEnabled(b);
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JPanel gridPanel;
    private javax.swing.JButton applyB;
    private javax.swing.JButton doneB;
    private javax.swing.JLabel azLabel;
    private javax.swing.JLabel elLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField azTF;
    private javax.swing.JTextField elTF;
}
