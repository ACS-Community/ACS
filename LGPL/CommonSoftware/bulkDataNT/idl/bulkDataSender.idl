#ifndef _BULKDATA_SENDER_IDL_
#define _BULKDATA_SENDER_IDL_

/*******************************************************************************
*    ALMA - Atacama Large Millimiter Array
*
*    (c) European Southern Observatory, 2002
*    Copyright by ESO (in the framework of the ALMA collaboration)
*    and Cosylab 2002, All rights reserved
*
*    This library is free software; you can redistribute it and/or
*    modify it under the terms of the GNU Lesser General Public
*    License as published by the Free Software Foundation; either
*    version 2.1 of the License, or (at your option) any later version.
*
*    This library is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
*    Lesser General Public License for more details.
*
*    You should have received a copy of the GNU Lesser General Public
*    License along with this library; if not, write to the Free Software
*    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
*
*
* "@(#)"
*
* who       when      what
* --------  --------  ----------------------------------------------
* oat       28/01/05  created
*/

#include <baci.idl>
#include <ACSBulkDataError.idl>
#include <AVStreams.idl>
#include <bulkData.idl>
#include <bulkDataReceiver.idl>

#pragma prefix "alma"

/** @file bulkDataSender.idl
 *  Bulk Data Sender's IDL File (Sender Component).
 */

module bulkdata
{
    
    /** @interface BulkDataSender
     *  Defines the interface for the Bulk Data Sender Component.
     */
    interface BulkDataSender : ACS::CharacteristicComponent
	{
	/** 
	 *  Initializes the TAO A/V, and creates the Sender Stream End Point
	 *  and Flow End Point. It retrieves the Receiver Stream End Point and binds
	 *  the two streams.
	 *  @param receiver reference of the Receiver Component.
	 *  @return void
	 *  @htmlonly
	 <br><hr>
	 @endhtmlonly
	*/
	void connect(in BulkDataReceiver receiver)
	    raises (ACSBulkDataError::AVConnectErrorEx);

	/*******************************
    void connect(in BulkDataReceiver receiver, in FepCfgSeq senderFepsInfo)
      raises (ACSBulkDataError::AVConnectError);
	********************************/

	/**
	 *  Disconnect // TBD
	 *  @return void
	 *  @htmlonly
	 <br><hr>
	 @endhtmlonly
	*/
	void disconnect()
	    raises (ACSBulkDataError::AVDisconnectErrorEx);

	/** 
	 *  Calls the Receiver handle_start() method once the connection is established.
	 *  @return void
	 *  @htmlonly
	 <br><hr>
	 @endhtmlonly
	*/
	void startSend()
	    raises (ACSBulkDataError::AVStartSendErrorEx);


	/** 
	 *  Sends data to the Receiver calling the receive_frame() method on the Receiver side.
	 *  This method must be overriden by the user to send his own data.
	 *  @param size buffer size of the sent data.
	 *  @return void
	 *  @htmlonly
	 <br><hr>
	 @endhtmlonly
	*/
	void paceData()
	    raises (ACSBulkDataError::AVPaceDataErrorEx);

	/** 
	 *  Calls the Receiver handle_stop() method.
	 *  @return void
	 *  @htmlonly
	 <br><hr>
	 @endhtmlonly
	*/
	void stopSend()
	    raises (ACSBulkDataError::AVStopSendErrorEx);

	/** 
	 *  Calls the Receiver handle_reset() method.
	 *  @return void
	 *  @htmlonly
	 <br><hr>
	 @endhtmlonly
	*/
	void resetSend()
	    raises (ACSBulkDataError::AVResetSendErrorEx);

	/** 
	 *  Resets the sender streams and flows.
	 *  @return void
	 *  @htmlonly
	 <br><hr>
	 @endhtmlonly
	*/
	void resetSender();
	};
  
};

#endif
