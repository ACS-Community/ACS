#ifndef _BULKDATA_RECEIVER_IDL_
#define _BULKDATA_RECEIVER_IDL_

/*******************************************************************************
 *    ALMA - Atacama Large Millimiter Array
 *
 *    (c) European Southern Observatory, 2002
 *    Copyright by ESO (in the framework of the ALMA collaboration)
 *    and Cosylab 2002, All rights reserved
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 2.1 of the License, or (at your option) any later version.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
 *
 *
 * "@(#)"
 *
 * who       when      what
 * --------  --------  ----------------------------------------------
 * oat       27/01/05  created
 */

#include <baci.idl>
#include "ACSBulkDataError.idl"
#include "ACSBulkDataStatus.idl"
#include <AVStreams.idl>
#include <bulkData.idl>

#pragma prefix "alma"

/** @file bulkDataReceiver.idl
 *  Bulk Data Receiver IDL File (Receiver Component).
 */

module bulkdata
{
    
    /** @interface BulkDataReceiver
     *  Defines the interface for the Bulk Data Receiver Component
     */
    interface BulkDataReceiver : ACS::CharacteristicComponent
	{
	
	/**
	 *  Opens connection creating an out-of-bound channel using TAO A/V services.
	 *  It creates the Receiver Stream End Point and Flow End Point for the
	 *  connection with the Sender. The Receiver Stream End Point can be retrieved
	 *  as an attribute. 
	 *  @return void
	 *  @htmlonly
	 <br><hr>
	 @endhtmlonly
	*/
	void openReceiver()
	    raises (ACSBulkDataError::AVOpenReceiverErrorEx);
	    
	void openReceiverStream(in string stream_name)
        raises (ACSBulkDataError::AVOpenReceiverErrorEx);
	    

	/** This property is the Receiver Steam End Point.
	 */
	BulkDataReceiverConfig getReceiverConfig()
	    raises (ACSBulkDataError::AVReceiverConfigErrorEx);

	/**
	 *  Closes connection.......
	 *  @return void
	 *  @htmlonly
	 <br><hr>
	 @endhtmlonly
	*/
	void closeReceiver()
	    raises (ACSBulkDataError::AVCloseReceiverErrorEx);

    void closeReceiverStream(in string stream_name)
        raises (ACSBulkDataError::AVCloseReceiverErrorEx);

	/**
	 *  Get callback status
	 *  @return ACSErr::Completion
	 *  @htmlonly
	 <br><hr>
	 @endhtmlonly
	*/
	ACSErr::Completion getCbStatus(in unsigned long flowNumber)
	    raises (ACSBulkDataError::AVInvalidFlowNumberEx, ACSBulkDataError::AVFlowEndpointErrorEx);

	/**
	 *  Set receiver timeout
	 *  @return void
	 *  @htmlonly
	 <br><hr>
	 @endhtmlonly
	*/
	void setTimeout(in unsigned long flowNumber, in unsigned long timeout)
	    raises (ACSBulkDataError::AVInvalidFlowNumberEx, ACSBulkDataError::AVFlowEndpointErrorEx);

	/**
	 *  Set receiver name in receiver callback
	 *  @param recName receiver name.
	 *  @return void
	 *  @htmlonly
	 <br><hr>
	 @endhtmlonly
	*/
	void setRecvName(in string recvName)
	    raises (ACSBulkDataError::AVSetReceiverNameErrorEx);

	/**
	 *  Subscribe to the Notification Mechanism
	 *  @param notifCb receiver name.
	 *  @return void
	 *  @htmlonly
	 <br><hr>
	 @endhtmlonly
	*/
	void subscribeNotification(in ACS::CBvoid notifCb)
	    raises (ACSBulkDataError::AVNotificationMechanismErrorEx);
	    
	 /**
	 *  Enable or disable that data are sent/forwarded to the user's CB.
	 *  By default this is enable.
	 *  This operation has to be use with caution for debugging purposes only!!!
	 *  The operation has effect only if it is ivoked after the connection with the receiver 
	 *  has been established i.e. the callback object has been created !!
	 *  @param enable true -> data will be sent to the user's CB,
	 *                false -> data will *not* be sent to the user's CB,
	 *  @return void
	 *  @htmlonly
	 <br><hr>
	 @endhtmlonly
	*/
	void fwdData2UserCB(in boolean enable);

	};

    /** @interface BulkDataReceiverDistr
     *  Defines the interface for the Bulk Data Receiver Distr Component
     */
    interface BulkDataReceiverDistr : BulkDataReceiver
	{

	/**
	 *  Set the reference of the Distributer implementation
	 *  inside the Distributer callback.
	 *  @return void
	 *  @param Receiver configuration 
	 *  @htmlonly
	 <br><hr>
	 @endhtmlonly
	*/
	void setReceiver(in BulkDataReceiverConfig receiverConfig)
	    raises (ACSBulkDataError::AVSetReceiverErrorEx);
	};

};

#endif
