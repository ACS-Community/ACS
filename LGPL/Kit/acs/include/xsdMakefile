#*******************************************************************************
# E.S.O. - ALMA  project
#
# "@(#) $Id: xsdMakefile,v 1.75 2010/07/09 12:48:42 alopatin Exp $"
#
# who       when      what
# --------  --------  ----------------------------------------------
# mzampare  22012003  created
#************************************************************************
#   NAME
#   xsdMakefile - xsd specific Makefile for processing of 
#   XML schema definition.
#
#   DESCRIPTION
#
#   XSD schemas shall for the time being be hosted on the idl directory,
#   since they have a similar processing. The makefile will contain a
#   XSDBIND variable which specifies an existing XML file which
#   serves as a configuration for the ALMA XMLJBIND schema to java
#   compiler The name of the config file will also provide the name for
#   the jarfile where the compiled java files will go into.
#   
#   The generated java files will be compiled, the resulting class files
#   put into the jarfile, (with or without source according to DEBUG), and
#   they will be removed from src.  The resulting jarfile will be
#   installed by the 'install' target.
#   
#   XSD files can have inclusion relatioship. At this stage it is
#   envisioned that only the ALMA file entity.xsd will have to be included
#   by all XSD files. It will be therefore initially be treated as a
#   special case, and put into a reference location ($ACSROOT/config).
#   Its location will be passed as a command line argument to the castor
#   compile command.
#   
#   
#
#   FILES
#
#   ENVIRONMENT
#
#   RETURN VALUES
#
#   CAUTIONS
#
#   EXAMPLES
#
#   SEE ALSO
#
#   BUGS
#
#------------------------------------------------------------------------
#

SHELL=/bin/bash

# Last dir in INTLIST
ifdef INTLIST
   DIRLIST = $(subst :, , $(INTLIST))
   INSTALL_ROOT_LAST = $(word $(words $(DIRLIST)), $(DIRLIST))
endif

# phony section
######################################
.PHONY : install_xsd
.PHONY : do_xsd


######################################
# variables settings
######################################
CASTOR = alma.tools.entitybuilder.CastorBuilder

# java alma.tools.entitybuilder.CastorBuilder . .

# set search path for idl files

#vpath %.xsdl $(MK_IDL_PATH_LIST)
vpath %.xsd ../idl

######################################
# incrementing tasks
######################################

ifeq ($(call mustBuild,Java),true)
ifneq ($(strip $(XSDBIND)),)
    CLEAN_TARGET := $(CLEAN_TARGET) clean_xsd
endif

ifneq ($(strip $(XSDBIND)),)
    INSTALL_TARGET := $(INSTALL_TARGET) install_xsd
endif

ifneq ($(strip $(XSDBIND)),)
#    ALL_TARGET := do_xsd $(ALL_TARGET) 
XSDDEPLIST = java -cp $(ACSROOT)/lib/xalan.jar:$(ACSROOT)/lib/xalan_serializer.jar org.apache.xalan.xslt.Process -XSL $(MAKEDIR)/../config/XSDIncludeDependencies.xml  -IN ../idl/$(XSDBIND).xml  |  egrep -v '^\ *\$$' | tr '\n' ' '
XSDBIND_FILES = $(shell $(XSDDEPLIST))

endif
endif

######################################
# targets specification
######################################

## clean
##
clean_xsd:
	-$(AT)$(RM) ../lib/$(XSDBIND).jar
	-$(AT)$(RM) ../lib/python/site-packages/$(XSDBIND)
	-$(AT)$(RM) ../lib/python/site-packages/$(XSDBIND).wxs
	-@$(ECHO) " .\c"

## install
##
install_xsd:
	-@$(ECHO) "install_xsd: xsd_begin $(VLTTOP)/idl/$(XSDBIND).xml  $(VLTTOP)/lib/$(XSDBIND).jar $(VLTTOP)/lib/python/site-packages/$(XSDBIND).wxs $(VLTTOP)/lib/python/site-packages/$(XSDBIND) " >>$(FILE)
	-@$(ECHO) "xsd_begin:" >>$(FILE)
	-@$(ECHO) "	-@echo \"\"; $(ECHO) \"......XML schemas:\"" >>$(FILE)
	-@$(ECHO) "$(VLTTOP)/idl/$(XSDBIND).xml: ../idl/$(XSDBIND).xml" >>$(FILE);
	-@$(ECHO) "	-\$$(AT)echo \"\t$(XSDBIND).xml\";" >>$(FILE);
	-@$(ECHO) "	-$(AT) cp ../idl/$(XSDBIND).xml $(VLTTOP)/idl/   " >>$(FILE);
	-@$(ECHO) "	-$(AT) cp ../idl/*.xsd $(VLTTOP)/idl/   " >>$(FILE);
	-@$(ECHO) "	-$(AT) chmod $(P755) $(VLTTOP)/idl/$(XSDBIND).xml" >>$(FILE);
	-@$(ECHO) "$(VLTTOP)/lib/$(XSDBIND).jar: ../lib/$(XSDBIND).jar" >>$(FILE);
	-@$(ECHO) "	-\$$(AT)echo \"\t$(XSDBIND).jar\";" >>$(FILE);
	-@$(ECHO) "	-$(AT)cp ../lib/$(XSDBIND).jar $(VLTTOP)/lib/   " >>$(FILE);
	-@$(ECHO) "	-$(AT)chmod $(P755) $(VLTTOP)/lib/$(XSDBIND).jar" >>$(FILE);
	-@$(ECHO) "$(VLTTOP)/lib/python/site-packages/$(XSDBIND).wxs: ../lib/python/site-packages/$(XSDBIND).wxs" >>$(FILE);
	-@$(ECHO) "	-\$$(AT)echo \"\t$(XSDBIND).wxs\";" >>$(FILE);
	-@$(ECHO) "	-$(AT)cp ../lib/python/site-packages/$(XSDBIND).wxs $(VLTTOP)/lib/python/site-packages   " >>$(FILE);
	-@$(ECHO) "	-$(AT)chmod $(P644) $(VLTTOP)/lib/python/site-packages/$(XSDBIND).wxs" >>$(FILE);
	-@$(ECHO) "$(VLTTOP)/lib/python/site-packages/$(XSDBIND): ../lib/python/site-packages/$(XSDBIND)" >>$(FILE);
	-@$(ECHO) "	-\$$(AT)echo \"\tlib/python/site-packages/$(XSDBIND)\";" >>$(FILE);
	-@$(ECHO) "	-$(AT)cp -pr ../lib/python/site-packages/$(XSDBIND) $(VLTTOP)/lib/python/site-packages   " >>$(FILE);
##
#########################################
## ALL
##
#########################################
../lib/$(XSDBIND).jar: TMPSRC=../object/$(XSDBIND)/src
../lib/$(XSDBIND).jar: ../idl/$(XSDBIND).xml $(XSDBIND_FILES)
	- @echo "== XSD Compiling with Castor (Java): $(<F)"
# calling castor
# what if the file is not there?, we should check that.
	$(AT) mkdir -p $(TMPSRC)

ifdef ACSROOT
	$(AT) CLASSPATH=`vltMakeJavaClasspath`:$(ACSROOT)/lib/endorsed/xercesImpl.jar;  export CLASSPATH; java -DACS.schemaconfigfiles="$(XSDBIND_INCLUDE)" $(CASTOR)  ../idl/$(XSDBIND).xml $(TMPSRC) $(MK_IDL_PATH)
else
	$(AT) CLASSPATH=`vltMakeJavaClasspath`:$(INSTALL_ROOT_LAST)/lib/endorsed/xercesImpl.jar;  export CLASSPATH; java -DACS.schemaconfigfiles="$(XSDBIND_INCLUDE)" $(CASTOR)  ../idl/$(XSDBIND).xml $(TMPSRC) $(MK_IDL_PATH)	
endif #ACSROOT

# compiling the generated classes
	$(AT) CLASSPATH=`vltMakeJavaClasspath`; export CLASSPATH; FILES=`find $(TMPSRC) -name \*.java`; export FILES;  if [ "$$FILES" != "" ] ; then javac $(javaCompilerOptions) -d $(TMPSRC) $$FILES; fi;
# putting them into a jarfile

ifeq ($(strip $(DEBUG)),on)
# first put the class files
	$(AT) cd $(TMPSRC); FILES=`find . -name \*.class `; export FILES;  if [ "$$FILES" != "" ] ; then jar cf ../../../lib/$(basename $(<F)).jar $$FILES ; fi
# then, carefully, the java files prefixed with 'src'.
	$(AT) cd ../object/$(XSDBIND);  FILES=`find src -name \*.java`; export FILES;  if [ "$$FILES" != "" ] ; then jar uf ../../lib/$(basename $(<F)).jar $$FILES ; fi; 
else
	$(AT) cd $(TMPSRC); CLASSES=`find . -name \*.class`; export CLASSES;  if [ "$$CLASSES" != "" ] ; then jar cf ../../../lib/$(basename $(<F)).jar $$CLASSES ; fi
endif # DEBUG
	$(AT) $(RM) $(TMPSRC)
###################  CASTOR END  ####################################

../lib/python/site-packages/$(XSDBIND): ../idl/$(XSDBIND).xml
	- @echo "== XSD Compiling with pyxbgen (Python): $(<F)"
	- $(AT)generateXsdPythonBinding $(XSDBIND)
	- $(AT)(cd ../lib/python/site-packages && python $(PYTHON_ROOT)/lib/python$(PYTHON_VERS)/compileall.py $(XSDBIND))

#####################################################################

ifdef XSDBIND
ifeq ($(call mustBuild,Java),true)
do_xsd: ../lib/$(XSDBIND).jar ../lib/python/site-packages/$(XSDBIND)
else 
do_xsd:
endif
else
do_xsd: 
endif

#
#___oOo___


