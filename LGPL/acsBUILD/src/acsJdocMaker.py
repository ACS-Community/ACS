#! /usr/bin/env python
#*******************************************************************************
# ALMA - Atacama Large Millimiter Array
# Copyright (c) European Southern Observatory, 2015 
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
#
#
# who       when      what
# --------  --------  ----------------------------------------------
# acaproni  2015-02-16  created
#
import os
import subprocess
import tempfile
import optparse
from AcsJavadoc.MakefileHelper import MakefileHelper
from AcsJavadoc.JavadocGenerator import JavadocGenerator

def printHelp():
    '''
    Print the help
    Normally the help is automatically generated by optparse
    '''
    print '''USAGE: [-r|--recursive] [-t|--test] [-h|--help] [-b|--baseDir] [o|--outFolder]
      -r: recursively looks for Makefile
      -t: include 'test' folders (test is excluded by default)
      -h: print this help and exit
      -b: the folder to look for the Makefile (default is the current folder)
      -o: to folder to write javadocs
    '''
    print "Looks for 'Makefile' to get the list of packages and build the javadoc\n"
    
def acsMakefileFinder(folder, recursive, includeTest):
    '''
    Look for ACS Makefile from the passed folder.
    
    @param folder: the folder to look for Makefile
    @param recursive: if True looks for ACS Makefile recursively
    @param includeTest: if True accepts Makefile from test folders
    @return: A list of MakefileHelper's
    ''' 
    if folder is None or folder is "":
        raise Exception("Invalid folder")
    f=os.path.abspath(folder)
    if not f.endswith(os.path.sep):
        f=f+os.path.sep
    if not os.path.isdir(f) or not os.access(f, os.R_OK):
        raise Exception("Unreadable folder "+f)
    # If the scan is not recursive then there is one file
    # to include from the passed folder (if it exists)
    if not recursive:
        temp=f+"Makefile"
        if os.path.exists(temp) and os.access(temp,os.R_OK):
            helper = MakefileHelper(temp)
            if helper.getJarsNumber()>0:
                return [ helper ]
            else:
                return []
        else:
            return []
    
    # Looks for Makefile's recursively
    ret=[]
    for root, dirs, files in os.walk(f):
        if "Makefile" in files:
            if not root.endswith(os.path.sep):
                root=root+os.path.sep
            if root.endswith("test"+os.path.sep) and not includeTest:
                continue
            temp=root+"Makefile"
            if os.access(temp,os.R_OK):
                helper = MakefileHelper(temp)
                if helper.getJarsNumber()>0:
                    ret.append(helper)
            else:
                print "WARNING:",temp,"is unreadable: skipped!"
    return ret
            
def generateDocs(javapkgs, sourceFolders, outFolder, classpath):
    '''
    Invokes javadoc to write the output in the passed folder
    
    @param javapkgs: java packages to build the javadoc
    @param sourceFolders: the folders of the packages
    @param outFolder: the folder to write javadoc into
    @param classpath: classpath for referenced classes
    '''
    if not os.path.isdir(outFolder):
        raise Exception(outFolder+" is not a folder")
    if not os.access(outFolder, os.W_OK):
        raise Exception("Can't write "+outFolder+" folder")
    
    # Build the command
    cmd = [ 'javadoc' ]
    cmd.append('-verbose')
    cmd.append('-d')
    cmd.append(outFolder)
    cmd.append('-sourcepath')
    cmd.append(sourceFolders)
    cmd.extend(javapkgs)
    print "\n===>",cmd,"\n"
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    comm=proc.communicate(input=None)

if __name__=="__main__":
    try:
        ACSROOT = os.environ['ACSROOT']
        print "ACSROOT: ",ACSROOT
    except Exception as ex:
        print "ACSROOT undefined!"
        sys.exit(-1)
    # Get the version of ACS
    strs =ACSROOT.split('/')
    ACSVERSION=strs[2]
    print "ACS version:",ACSVERSION
    
    # Check if javadoc exists and is executable
    cmd = [ 'which', 'javadoc' ]
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    javadoc = proc.stdout.read().strip()
    if not os.access(javadoc, os.X_OK):
        print "Can't run javadoc. Is it installed?"
        sys.exit(-1)
    
    
    # acsGetAllJars will be used to get the list jars linked by the sources
    cmd = [ 'which', 'acsGetAllJars' ]
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    acsGetAllJars = proc.stdout.read().strip()
    # Check if the file exists and is executable
    # THis should never occur to a command got with which..
    if not os.access(acsGetAllJars, os.X_OK):
        print "Can't run",acsGetAllJars
        sys.exit(-1)
        
    # Get all the jars with acsGetAllJars
    #
    # The list of jar returned by acsGetAllJars is stored in 
    # the tmpFile temporary file
    cmd = [ 'acsGetAllJars' ,':',ACSROOT+"/lib"]
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    comm=proc.communicate(input=None)
    jarsInACSROOT=comm[0]
    print "Got",len(jarsInACSROOT.split(":")),'jars from',ACSROOT+"/lib"
    
    # Parse command line
    parser = optparse.OptionParser()
    parser.add_option("-r", "--recursive", help="Scan recursively", default=False,
                      action="store_true", dest="recursive")
    parser.add_option("-t", "--test", help="Scan 'test' folder", default=False,
                      action="store_true", dest="scanTest")
    parser.add_option("-b", "--baseDir", help="The folder to scan for Makefile", default=".",
                      action="store", type="string", dest="baseDir")
    parser.add_option("-o", "--outFolder", help="The folder to write javadocs", default=".",
                      action="store", type="string", dest="outFolder")
    (options, args) = parser.parse_args()
    
    if options.recursive:
        print "Recursive scan enabled."
    if options.scanTest:
        print "Test folders included in javadoc generation"
    print "Javadocs generation base folder:",options.baseDir
    print "javadocs will be written in",options.outFolder
    
    acsMakefiles = acsMakefileFinder(options.baseDir,options.recursive, options.scanTest)
    print len(acsMakefiles),"Makefile's to scan for java packages"
    
    sourceFolders = None
    javapkgs = []
    for makefile in acsMakefiles:
        if makefile.getJarsNumber()>0:
            gen=JavadocGenerator(makefile)
            temp = gen.getJavaPackages()
            for pkg in temp:
                if javapkgs.count(pkg)==0:
                    javapkgs.append(pkg)
            if sourceFolders is None:
                sourceFolders=makefile.get_folder()
            else:
                sourceFolders=sourceFolders+";"+makefile.get_folder()
            
    print "Packages:\n",javapkgs
    print "Folders:\n",sourceFolders
    
    generateDocs(javapkgs, sourceFolders, options.outFolder, jarsInACSROOT)
    