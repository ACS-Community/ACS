#-*-Tcl-*-
#******************************************************************************
# E.S.O. - VLT project
#
# "@(#) $Id: compat.TclTk8.config,v 1.23 2001/06/20 11:14:29 vltsccm Exp $"
#
# who       when        what
# --------  ----------  ----------------------------------------------
# eallaert  1997-05-05  created (MAY97)
# eallaert  1999-02-17  added LABEL and VERBOSE keys, fitted to Tcl/Tk 8.0
# eallaert  1999-06-09  added if-comment incompatibility
#

#************************************************************************
#   NAME
#   compat.TclTk8.config - Configuration file to check for incompatibilies of
#        Tcl 7.6 / Tk 4.2 with Tcl/Tk 8.0
#
#   DESCRIPTION
#   See compat(7).
#------------------------------------------------------------------------

#   ***************
#   *             *
#   *  Tcl/Tk 8.0 *
#   *             *
#   ***************
#
{
{TYPE {filename}}
{PATTERN {tclIndex}}
{LEVEL {SEVERE}}
{HELP {needs to be rebuilt with itclsh 3.0}}
{VERBOSE {The comment-header of the tclIndex file was slightly changed.
Although this does not affect the further contents of the file, the
auto_load mechanism tests this header, and if it is not according to what
it expects, an error will be flagged.
Remark also that the array-indices in tclIndex files built with itclsh 2.2
contain leading double-colons for globally accessible procedures; this
is not the case for tclIndex files built with Tcl/Tk 8.0 (although this 
should not be incompatible).
Bottom line: an application's tclIndex file needs to be rebuilt with 
itclsh 3.0 before it can run under Tcl/Tk 8.0}}
}

# The sub-pattern in front of 'namespace' is to avoid overlap with the
# 'info namespace' command, which is dealt with by another entry.
{
{TYPE {content}}
{LABEL {namespace}}
{PATTERN {[^o]([		
])+(\
)*namespace[ 	\]}}
{LEVEL {SEVERE}}
{HELP {use 'namespace <option> <args>'}}
{VERBOSE {The namespace command as used in itcl 2.2 has its syntax changed in
itcl 3.0 (as part of Tcl/Tk 8.0). The 'namespace' command has now a series
of options, like secondary commands. In particular, a 2.2 version piece of
code like
    namespace foo {....} 
needs to be modified into
    namespace eval foo {....} 
in order to be compatible with Tcl/Tk 8.0. See the namespace(n) manpage.}}
}

{
{TYPE {content}}
{LABEL {import add}}
{PATTERN {(import[ 	]*)(\
)*(add[ 	\])}}
{LEVEL {SEVERE}}
{HELP {use 'namespace export/import -force <args>'}}
{VERBOSE {The itcl version 2.2 command 'import add' needs to be replaced
by two commands:
1. 'namespace export ...' in the application which wants to export some
   of the commands in its namespace
2. 'namespace import -force ...' in the application which wants to use
   these commands.
See also the namespace(n) manpage.}}
}

{
{TYPE {content}}
{LABEL {@scope}}
{PATTERN {@scope[ 	\]}}
{LEVEL {SEVERE}}
{HELP {use 'namespace eval' or 'namespace inscope'}}
{VERBOSE {The '@scope' command, which normally was generated via a '[code ...]'
command, is no longer valid. In Tcl/Tk 8.0 you should use 
'namespace eval ...' or 'namespace inscope ...' commands instead.
See also the namespace(n) manpage.}}
}

{
{TYPE {content}}
{LABEL {info context}}
{PATTERN {(info[ 	]*)(\
)*context}}
{LEVEL {SEVERE}}
{HELP {use 'namespace current' - watch out for '::'}}
{VERBOSE {Part of the patches that itcl 2.2 applied on the Tcl/Tk core was
an extension to the global 'info' command, adding several secondary
command like 'context' to its standard list. This has been suppressed.
Instead of 'info context', you should use 'namespace current'. 
Watch out however for the global namespace: 'info context' used to
return in this case an empty string, while 'namespace current' will
return '::'. As an example of version-independent code, you could have:
    if {$tcl_version >= 8.0} { 
	set namespaceCurrent [namespace current]
	# Check if we're in the global namespace; if so, reset the value
	# so it gives the same result as for 'info context' in itcl 2.2
	switch -- $namespaceCurrent :: {set namespaceCurrent {}} 
    } else { 
	set namespaceCurrent [info context]
    } 
See also the namespace(n) manpage.}}
}

{
{TYPE {content}}
{LABEL {info object}}
{PATTERN {(info[ 	]*)(\
)*object}}
{LEVEL {SEVERE}}
{HELP {use 'itcl::find objects'}}
{VERBOSE {Part of the patches that itcl 2.2 applied on the Tcl/Tk core was
an extension to the global 'info' command, adding several secondary
commands like 'objects' to info's standard list (whereby only the first
four characters were relevant). This has been suppressed.
Instead of 'info objects', you should use 'itcl::find objects'. 
See also the manpage on find(n).}}
}

{
{TYPE {content}}
{LABEL {info class}}
{PATTERN {(info[ 	]*)(\
)*class}}
{LEVEL {SEVERE}}
{HELP {you may have to use 'itcl::find classes'}}
{VERBOSE {Part of the patches that itcl 2.2 applied on the Tcl/Tk core was
an extension to the global 'info' command, adding several secondary
commands like 'classes' to info's standard list (whereby only the first
four characters were relevant). This has been suppressed.
Instead of 'info classes', you should use 'itcl::find classes'. 
See also the manpage on find(n).
Remark however that itcl-objects have also an internal 'info' method,
whereby 'info class' will tell the object to which class it belongs. If
the 'info class' command was detected in such a context, it should NOT
be modified. See the manpage on class(n).}}
}

{
{TYPE {content}}
{LABEL {info namespace}}
{PATTERN {(info[ 	]*)(\
)*namespace}}
{LEVEL {SEVERE}}
{HELP {remove the leading 'info'}}
{VERBOSE {Part of the patches that itcl 2.2 applied on the Tcl/Tk core was
an extension to the global 'info' command, adding several secondary
commands like 'namespace' to info's standard list (whereby only the first
four characters were relevant). This has been suppressed in Tcl/Tk 8.0.
Instead of 'info namespace <option> <args>', you should use 'namespace 
<option> <args>'. See also the manpage on namespace(n).}}
}

# The word 'global' must be in a proc, enclosed within a 'namespace' command.
# Although the corresponding variable will be within that namespace
# defined with a 'variable' statement, this definition could have been taken
# place in a different file; so do not look for 'variable' as well. 
{
{TYPE {content}}
{LABEL {global}}
{PATTERN {namespace[ 	\]+.*proc[ 	\]+.*global[ 	\]+[^:]}}
{LEVEL {WARNING}}
{HELP {you may have to use 'variable' instead}}
{VERBOSE {In itcl 2.2, the 'global' command was also used to access
within a procecure variables which were declared in the namespace of 
this procedure; e.g.
    namespace foo {
        variable x 0
        proc example {} {
             global x;    # <--- must be 'variable x' for itcl 3.0
             ....
        } 
    } 
So if 'global' is used in this context, it must be replaced by 'variable'.
The 'global' command can still be used within namespaces to access
variables which are really global (i.e. in the global namespace).}}
}

{
{TYPE {content}}
{LABEL {translit}}
{PATTERN {translit[ 	\]}}
{LEVEL {WARNING}}
{HELP {'outrange' needs to be as long as 'inrange'}}
{VERBOSE {There was a bug introduced in the newer versions of TclX, whereby
code like 
    translit {01} {} 0101011211100
will return an error, instead of a normal reply (as in previous releases).
I have informed the author of TclX in October 1998 already, and he confirmed
this as a bug. In the meantime, make sure the second and third argument
('inrange' resp. 'outrange') have equal lengths, or use 'regsub'.}}
}

{
{TYPE {content}}
{LABEL {if-comment}}
{PATTERN {\}[ 	]+\#}}
{LEVEL {SEVERE}}
{HELP {comments after an 'if' need semi-colon}}
{VERBOSE {Previous versions of Tcl permitted comments after if-statements like
    if {$a == 15} {
        ....
    } # This is the end of the if-statement
As from Tcl/Tk 8.0 onwards, the interpreter will complain about this, 
giving actually a somewhat misleading message ("wrong # args: extra words
after "else" clause in "if" command). The reason is of course that this
syntax is wrong: after the first closing brace of the if-statement, there
can as a continuation of the "if" command either be an "else", an 
"elseif" or "endif". The new Tcl/Tk is less forgiving (due to its bytecode
compiler), and requires that you follow these syntax rules strictly. So in
this case, you need to finish off the if-statement before you can add 
comments:
    if {$a == 15} {
        ....
    }; # This is the end of the if-statement
     ^
     |_____ remark this semi-colon.}}
}

#   ***************
#   *             *
#   *   BLT 2.4h  *
#   *             *
#   ***************
#
{
{TYPE {content}}
{LABEL {barchart}}
{PATTERN {configure[ 	\\
]+-mapped[ 	\\
]+}}
{LEVEL {SEVERE}}
{HELP {barchart does no longer have -mapped config option}}
{VERBOSE {Previous versions of BLT allowed to control the display ("mapping")
of certain elements of a barchart widget via the "-mapped" configuration
option, e.g.
    .chart legend configure -mapped no
would turn off the display of the legend.
This feature is replaced by the "-hide" configuration option (as the word 
"map" can mean several things, and the author of BLT thought things became
too confusing). So the above code should become:
    .chart legend configure -hide yes}}
}

#___oOo___
