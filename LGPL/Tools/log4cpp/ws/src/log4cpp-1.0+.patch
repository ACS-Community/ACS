diff -Naur log4cpp-1.0/configure log4cpp-1.0+/configure
--- log4cpp-1.0/configure	2007-08-29 09:33:57.000000000 +0000
+++ log4cpp-1.0+/configure	2011-01-27 13:08:11.830697000 +0000
@@ -21253,7 +21253,17 @@
 ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
 ac_compiler_gnu=$ac_cv_c_compiler_gnu
 
-acx_pthread_ok=no
+if test "$cross_compiling" = no; then
+	acx_pthread_ok=no
+else
+	acx_pthread_ok=yes
+    { echo "$as_me:$LINENO: WARNING: On cross compiling without remote execution, the pthreads capability probe application
+    	cannot be executed. For now fake success of HAVE_PTHREAD, HAVE_THREADING, USE_PTHREADS
+    	and assume no pthreads specific PTHREAD_LIBS and PTHREAD_CFLAGS" >&5
+    echo "$as_me: WARNING: On cross compiling without remote execution, the pthreads capability probe application
+    	cannot be executed. For now fake success of HAVE_PTHREAD, HAVE_THREADING, USE_PTHREADS
+    	and assume no pthreads specific PTHREAD_LIBS and PTHREAD_CFLAGS" >&2;}
+fi	
 
 # We used to check for pthread.h first, but this fails if pthread.h
 # requires special compiler flags (e.g. on True64 or Sequent).
diff -Naur log4cpp-1.0/doc/Doxyfile.in log4cpp-1.0+/doc/Doxyfile.in
--- log4cpp-1.0/doc/Doxyfile.in	2007-09-03 09:53:14.000000000 +0000
+++ log4cpp-1.0+/doc/Doxyfile.in	2011-01-27 13:07:44.093066000 +0000
@@ -62,7 +62,9 @@
 INCLUDE_GRAPH        = YES
 INCLUDED_BY_GRAPH    = YES
 GRAPHICAL_HIERARCHY  = YES
-MAX_DOT_GRAPH_WIDTH    = 1024
-MAX_DOT_GRAPH_HEIGHT   = 1024
+#Warning: Tag `MAX_DOT_GRAPH_xxx' at line 65 of file Doxyfile has become obsolete.
+#To avoid this warning please update your configuration file using "doxygen -u"
+#MAX_DOT_GRAPH_WIDTH    = 1024
+#MAX_DOT_GRAPH_HEIGHT   = 1024
 GENERATE_LEGEND        = YES
 DOT_IMAGE_FORMAT = gif
diff -Naur log4cpp-1.0/include/log4cpp/config-vxworks.h log4cpp-1.0+/include/log4cpp/config-vxworks.h
--- log4cpp-1.0/include/log4cpp/config-vxworks.h	1970-01-01 00:00:00.000000000 +0000
+++ log4cpp-1.0+/include/log4cpp/config-vxworks.h	2011-01-27 14:03:51.096126000 +0000
@@ -0,0 +1,297 @@
+#ifndef _INCLUDE_LOG4CPP_CONFIG_VXWORKS_H
+#define _INCLUDE_LOG4CPP_CONFIG_VXWORKS_H 1
+
+/* manually edited from include/log4cpp/config.h */
+
+/* Other fixes for building for VxWorks and other compiler/script warnings
+
+* include/log4cpp/config-vxworks.h: Added for custom forcing settings
+*
+* include/log4cpp/PatternLayout.hh: doxygen syntax
+* include/log4cpp/Portability.hh: use config-vxworks.h on VxWorks. Note: Portability.hh for use in *.hh files; In *.cpp use PortabilityImpl.hh with added inlines.
+* include/log4cpp/Priority.hh: enum syntax (trailing comma)
+* src/Category.cpp: Superflous Scope specification
+* src/FileAppender.cpp: conflicting write() declaration
+* src/Localtime.cpp: use string.h not memory.h
+* src/Priority.cpp: log entry type keyword strings
+* tests/Clock.hh: sys/times.h not sys/time.h for struct timeval in Vxworks kernel. Portability.hh missing.
+* include/log4cpp/RemoteSyslogAppender.hh: enum syntax (trailing comma)
+* src/RemoteSyslogAppender.cpp: need hostLib.h for e.g. gethostbyname(0
+* src/RemoteSyslogAppender.cpp: #include <sockLib.h> for e.g. socket(), sendto() etc
+* src/BasicConfigurator.cpp: # include <ioLib.h>  For dup() __RTP__: Also unistd.h
+* src/SimpleConfigurator.cpp: # include <ioLib.h>  For dup() __RTP__: Also unistd.h
+* tests/Clock.cpp: in Kernel sys/times.h instead of Linux and __RTP__ sys/time.h for struct timeval; clock_gettime(CLOCK_REALTIME) not gettimeofday() PortabilityImpl.hh missing.
+* 
+* log4cpp.spec: removed, generated by configure
+*
+* configure for pthreads, see below, optional
+* bcb5/log4cpp/Makefile.in - by mistake? 
+* 	"INSTALL_c_PROGRAM = @INSTALL_STRIP_PROGRAM@" instead of "INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@"
+*
+* doc/Doxyfile.in: doxygen warning, obsolete parameter
+* 
+ */
+
+/* Add  appropriate #include in Portability.h:
+ * #if defined (_MSC_VER) || defined(__BORLANDC__)
+ * ...
+#elif defined(__vxworks)
+#else
+#        include <log4cpp/config-vxworks.h>
+#endif
+ * Predefined Macros for powerpc-wrs-vxworks see: touch foo.h; cppppc -dM foo.h; rm foo.h
+ * Check both GNU 2.96 for VxWorks 5.x and GNU 3.x or 4.x for VxWorks 6.x to prefer version independent Macros.
+ * __vxworks
+ * For VxWorks 6.x see also _WRS_KERNEL and __RTP__ to differentiate between kernel space and application process space
+ * See also _ARCH_PPC, __BIG_ENDIAN__
+ */
+
+#if 0
+/* include/log4cpp/config.h. Generated automatically at end of configure. */
+/* include/config.h.  Generated from config.h.in by configure.  */
+/* include/config.h.in.  Generated from configure.in by autoheader.  */
+#endif
+
+/* Define to 1 if you have the <dlfcn.h> header file. */
+/* Only in VxWorks application processes! */
+/* #undef LOG4CPP_HAVE_DLFCN_H */
+#ifndef LOG4CPP_HAVE_DLFCN_H
+#ifdef __RTP__
+#define LOG4CPP_HAVE_DLFCN_H 1
+#endif
+#endif
+
+/* Define to 1 if you have the `ftime' function. */
+/* #undef LOG4CPP_HAVE_FTIME */
+
+/* Define to 1 if you have the `gettimeofday' function. */
+/* Used despite the exclusion in Clock.cpp */
+/* Anyway timezones undefined and not used, therefore clock_gettime(CLOCK_REALTIME) is as good as well.
+ * Note conversion from nsec to usec, see timeval vs. timespec, note time.h not sys/time.h
+ */
+/* VxWorks __RTP__ : declared in sys/time.h but still not available */
+/* VxWorks _WRS_KERNEL : not available */
+/* #undef LOG4CPP_HAVE_GETTIMEOFDAY */
+
+/* define if the compiler has int64_t */
+/* #undef LOG4CPP_HAVE_INT64_T */
+#ifndef LOG4CPP_HAVE_INT64_T
+#define LOG4CPP_HAVE_INT64_T 1
+#endif
+
+/* Define to 1 if you have the <inttypes.h> header file. */
+/* Only in application processes!!!!! */
+/* #undef LOG4CPP_HAVE_INTTYPES_H */
+#ifndef LOG4CPP_HAVE_INTTYPES_H
+#ifdef __RTP__
+#define LOG4CPP_HAVE_INTTYPES_H 1
+#endif
+#endif
+
+/* Define to 1 if you have the <io.h> header file. */
+/* #undef LOG4CPP_HAVE_IO_H */
+
+/* Define to 1 if you have the `idsa' library (-lidsa). */
+/* #undef LOG4CPP_HAVE_LIBIDSA */
+
+/* Wrong by autoconfigure! */
+/* Define to 1 if you have the `localtime_r' function. */
+/* #undef LOG4CPP_HAVE_LOCALTIME_R */
+#ifndef LOG4CPP_HAVE_LOCALTIME_R
+#define LOG4CPP_HAVE_LOCALTIME_R 1
+#endif
+
+/* Wrong by autoconfigure! define to get around problems with ERROR in vxWorks.h */
+#ifndef LOG4CPP_FIX_ERROR_COLLISION
+#define LOG4CPP_FIX_ERROR_COLLISION 1
+#endif
+
+/* Define to 1 if you have the <memory.h> header file. */
+/* Note: With VxWorks corresponding functions are in string.h instead
+ * either create a forwarding memory.h in the application or handle at memory.h usage.
+ * Anyway with log4cpp the only occurence in Localtime.cpp is not used because of available localtime_r
+ * Alternatively: #include string.h or other memcpy declaration right here, to get by with skipping memory.h at usage locations.
+ */
+/* #undef LOG4CPP_HAVE_MEMORY_H */
+
+/* define if the compiler implements namespaces */
+#ifndef LOG4CPP_HAVE_NAMESPACES 
+#define LOG4CPP_HAVE_NAMESPACES   
+#endif
+
+/* src/m4/ACX_PTHREAD.m4 is one of the templates which together are making up the configure script
+ * Near beginning of configure script see acx_pthread_ok=no
+ * This activates the tests further below for pthread availability, compiler options and capability.
+ * Alternate executable pthread-config to return necessary compiler options not present and fails.
+ * With VxWorks it is unnecessary to set special compiler/linker options for pthread.  
+ * Further tests in configure fail, because on the fly building and executing a pthread executable
+ *   which does not work without access to target.
+ * This will show misleading pthread off in ../configure.log, config.log and other config.h* 
+ * Note: config.log with #define HAVE_PTHREAD refers to non existing confdefs.h, similar to auto-generated
+ *   include/config.h with template include/config.h.in
+ *   include/log4cpp/config.h is the template of include/log4cpp/config-vxworks.h
+ * Are other config* settings effective, or is always config-vxworks.h taking precedence after the other settings?
+ *  See Portability.hh - on platform specific config*.h, plain config.h completely ignored!
+ *  On *.hh #include Portability.hh, on *.cpp #include PortabilityImpl.hh with added inline functions!
+ * Success of the configure test can be forced by setting acx_pthread_ok=yes at beginning of pthread tests in configure.
+ * But this will affect both ws and lcu side.
+ * 
+ * However forcing the pthreads availability in config-vxworks.h is not sufficient, because on original configure
+ * behaviour on cross compiling the configure fails with:
+ * 
+ * configure: error: unable to find pthreads, currently this is required
+ * 
+ * This error is triggered by the log4cpp specific configure.in at ACX_PTHREAD,
+ * which by autoconfigure gets converted to the configure script,
+ * which involves inclusion of the *.m4 tests.
+ * Since log4cpp seem to depends on pthreads, no point in removing this test.
+ * Also for now it is not desired to regenerate so much of the build mechanism in the log4cpp package.
+ * So patch configure and ACX_PTHREAD.m4 consistently to fake success on cross compiling.
+ * But on the linux side the behaviour must be unchanged.
+ * Therefore replace initial 'acx_pthread_ok=no' in ACX_PTHREAD.m4 and configure by the following:
+ * 
+ * if test "$cross_compiling" != no; then
+ * 	acx_pthread_ok=no
+ * else
+ * 	acx_pthread_ok=yes
+ *     AC_MSG_WARN([On cross compiling without remote execution, the pthreads capability probe application \
+ *     	cannot be executed. For now fake success of HAVE_PTHREAD, HAVE_THREADING, USE_PTHREADS \
+ *     	and assume no pthreads specific PTHREAD_LIBS and PTHREAD_CFLAGS ])
+ * fi
+ * 
+ * In configure replace multi line
+ * AC_MSG_WARN([...\
+ * ...])
+ * by
+ * { echo "$as_me:$LINENO: WARNING: ...
+ * ..." >&5
+ * echo "$as_me: WARNING: ...
+ * ..." >&2;}
+ * 
+ */
+
+/* Define if you have POSIX threads libraries and header files. */
+#ifndef LOG4CPP_HAVE_PTHREAD 
+#define LOG4CPP_HAVE_PTHREAD  1 
+#endif
+
+/* define if the C library has snprintf */
+/* Wrong by autoconf! */
+/* #undef LOG4CPP_HAVE_SNPRINTF */
+#ifndef LOG4CPP_HAVE_SNPRINTF 
+#define LOG4CPP_HAVE_SNPRINTF  1 
+#endif
+
+/* define if the compiler has stringstream */
+#ifndef LOG4CPP_HAVE_SSTREAM 
+#define LOG4CPP_HAVE_SSTREAM   
+#endif
+
+/* define if you have the <stdint.h> header file. */
+/* Only in application processes!!!!! */
+/* #undef LOG4CPP_HAVE_STDINT_H */
+#ifndef LOG4CPP_HAVE_STDINT_H 
+#ifdef __RTP__
+#define LOG4CPP_HAVE_STDINT_H
+#endif
+#endif
+
+/* Define to 1 if you have the <stdlib.h> header file. */
+#ifndef LOG4CPP_HAVE_STDLIB_H 
+#define LOG4CPP_HAVE_STDLIB_H  1 
+#endif
+
+/* Define to 1 if you have the <strings.h> header file. */
+#ifndef LOG4CPP_HAVE_STRINGS_H 
+#define LOG4CPP_HAVE_STRINGS_H  1 
+#endif
+
+/* Define to 1 if you have the <string.h> header file. */
+#ifndef LOG4CPP_HAVE_STRING_H 
+#define LOG4CPP_HAVE_STRING_H  1 
+#endif
+
+/* Define to 1 if you have the `syslog' function. */
+/* #undef LOG4CPP_HAVE_SYSLOG */
+
+/* Define to 1 if you have the <sys/stat.h> header file. */
+#ifndef LOG4CPP_HAVE_SYS_STAT_H 
+#define LOG4CPP_HAVE_SYS_STAT_H  1 
+#endif
+
+/* Define to 1 if you have the <sys/types.h> header file. */
+#ifndef LOG4CPP_HAVE_SYS_TYPES_H 
+#define LOG4CPP_HAVE_SYS_TYPES_H  1 
+#endif
+
+/* define if threading is enabled */
+#ifndef LOG4CPP_HAVE_THREADING 
+#define LOG4CPP_HAVE_THREADING  1 
+#endif
+
+/* Define to 1 if you have the <unistd.h> header file. */
+/* Most is also in ioLib.h but with slightly different prototype.
+ * Linux unistd.h: extern ssize_t write (int __fd, __const void *__buf, size_t __n) __wur;
+ * VxWorks6.7 unistd.h: extern int 		write (int fd, char *buffer, size_t nbytes);
+ * VxWorks 6.7 ioLib.h: extern ssize_t	write (int, const void *, size_t);
+ * All Vxworks variants result in a const or propagation violation in FileAppender.cpp
+ * Instead of including unistd.h here and #define write temporarily to something else and providing the correct declaration,
+ * So far workaround at occurence of unistd.h for FileAppender.cpp FileAppender::_append
+ */
+#ifndef LOG4CPP_HAVE_UNISTD_H 
+#define LOG4CPP_HAVE_UNISTD_H  1 
+#endif
+
+/* Name of package */
+#ifndef LOG4CPP_PACKAGE 
+#define LOG4CPP_PACKAGE  "log4cpp" 
+#endif
+
+/* Define to the address where bug reports for this package should be sent. */
+#ifndef LOG4CPP_PACKAGE_BUGREPORT 
+#define LOG4CPP_PACKAGE_BUGREPORT  "" 
+#endif
+
+/* Define to the full name of this package. */
+#ifndef LOG4CPP_PACKAGE_NAME 
+#define LOG4CPP_PACKAGE_NAME  "log4cpp" 
+#endif
+
+/* Define to the full name and version of this package. */
+#ifndef LOG4CPP_PACKAGE_STRING 
+#define LOG4CPP_PACKAGE_STRING  "log4cpp 1.0" 
+#endif
+
+/* Define to the one symbol short name of this package. */
+#ifndef LOG4CPP_PACKAGE_TARNAME 
+#define LOG4CPP_PACKAGE_TARNAME  "log4cpp" 
+#endif
+
+/* Define to the version of this package. */
+#ifndef LOG4CPP_PACKAGE_VERSION 
+#define LOG4CPP_PACKAGE_VERSION  "1.0" 
+#endif
+
+/* Define to necessary symbol if this constant uses a non-standard name on
+   your system. */
+#ifndef LOG4CPP_PTHREAD_CREATE_JOINABLE 
+#define LOG4CPP_PTHREAD_CREATE_JOINABLE  unknown 
+#endif
+
+/* Define to 1 if you have the ANSI C header files. */
+#ifndef LOG4CPP_STDC_HEADERS 
+#define LOG4CPP_STDC_HEADERS  1 
+#endif
+
+/* define if pthread library is available */
+#ifndef LOG4CPP_USE_PTHREADS 
+#define LOG4CPP_USE_PTHREADS  1 
+#endif
+
+/* Version number of package */
+#ifndef LOG4CPP_VERSION 
+#define LOG4CPP_VERSION  "1.0" 
+#endif
+ 
+/* _INCLUDE_LOG4CPP_CONFIG_VXWORKS_H */
+#endif
diff -Naur log4cpp-1.0/include/log4cpp/PatternLayout.hh log4cpp-1.0+/include/log4cpp/PatternLayout.hh
--- log4cpp-1.0/include/log4cpp/PatternLayout.hh	2003-03-10 09:01:16.000000000 +0000
+++ log4cpp-1.0+/include/log4cpp/PatternLayout.hh	2011-01-27 13:07:44.110070000 +0000
@@ -62,6 +62,7 @@
          * Sets the format of log lines handled by this
          * PatternLayout. By default, set to "%%m%%n".<br>
          * Format characters are as follows:<br>
+         * <ul>
          * <li><b>%%</b> - a single percent sign</li>
          * <li><b>%%c</b> - the category</li>
          * <li><b>%%d</b> - the date\n
@@ -78,6 +79,7 @@
          * <li><b>%%R</b> - seconds since Jan 1, 1970</li>
          * <li><b>%%u</b> - clock ticks since process start</li>
          * <li><b>%%x</b> - the NDC</li>
+         * </ul>
          * @param conversionPattern the conversion pattern
          * @exception ConfigureFailure if the pattern is invalid
          **/
diff -Naur log4cpp-1.0/include/log4cpp/Portability.hh log4cpp-1.0+/include/log4cpp/Portability.hh
--- log4cpp-1.0/include/log4cpp/Portability.hh	2007-07-03 17:19:36.000000000 +0000
+++ log4cpp-1.0+/include/log4cpp/Portability.hh	2011-01-27 13:07:44.112072000 +0000
@@ -16,6 +16,8 @@
 #    else
 #        include <log4cpp/config-win32.h>
 #    endif
+#elif defined(__vxworks)
+#        include <log4cpp/config-vxworks.h>
 #else
 #if defined(__OPENVMS__)
 #    include <log4cpp/config-openvms.h>
diff -Naur log4cpp-1.0/include/log4cpp/Priority.hh log4cpp-1.0+/include/log4cpp/Priority.hh
--- log4cpp-1.0/include/log4cpp/Priority.hh	2005-10-17 08:03:16.000000000 +0000
+++ log4cpp-1.0+/include/log4cpp/Priority.hh	2011-01-27 13:07:44.114068000 +0000
@@ -69,14 +69,19 @@
          **/
         typedef enum {EMERG  = 0, 
 		      FATAL  = 0,
+              EMERGENCY = 0,
                       ALERT  = 100,
                       CRIT   = 200,
+                      CRITICAL = 200,
                       ERROR  = 300, 
                       WARN   = 400,
+                      WARNING = 400,
                       NOTICE = 500,
                       INFO   = 600,
                       DEBUG  = 700,
-                      NOTSET = 800
+                      DELOUSE = 800,
+                      TRACE = 900,
+                      NOTSET = 1000
         } PriorityLevel;
 
         /**
diff -Naur log4cpp-1.0/include/log4cpp/RemoteSyslogAppender.hh log4cpp-1.0+/include/log4cpp/RemoteSyslogAppender.hh
--- log4cpp-1.0/include/log4cpp/RemoteSyslogAppender.hh	2005-04-12 17:57:14.000000000 +0000
+++ log4cpp-1.0+/include/log4cpp/RemoteSyslogAppender.hh	2011-01-27 13:07:44.116068000 +0000
@@ -33,7 +33,7 @@
     LOG_WARNING = 4,       ///< warning conditions
     LOG_NOTICE  = 5,       ///< normal but significant condition
     LOG_INFO    = 6,       ///< informational
-    LOG_DEBUG   = 7,       ///< debug-level messages
+    LOG_DEBUG   = 7/*,*/       ///< debug-level messages
 } SyslogLevel;
 
 typedef enum {
@@ -58,7 +58,7 @@
     LOG_LOCAL4   = (20<<3), ///< reserved for local use
     LOG_LOCAL5   = (21<<3), ///< reserved for local use
     LOG_LOCAL6   = (22<<3), ///< reserved for local use
-    LOG_LOCAL7   = (23<<3), ///< reserved for local use
+    LOG_LOCAL7   = (23<<3)/*,*/ ///< reserved for local use
 } SyslogFacility;
 #endif
 
diff -Naur log4cpp-1.0/log4cpp.spec log4cpp-1.0+/log4cpp.spec
--- log4cpp-1.0/log4cpp.spec	2007-09-03 09:54:04.000000000 +0000
+++ log4cpp-1.0+/log4cpp.spec	1970-01-01 00:00:00.000000000 +0000
@@ -1,97 +0,0 @@
-%define  RELEASE 4
-%define  rel     %{?CUSTOM_RELEASE} %{!?CUSTOM_RELEASE:%RELEASE}
-
-%define lib_name log4cpp
-%define manualdir       /var/www/html/manual/%{name}
-
-Name: log4cpp
-Version: 1.0
-Release: %rel
-
-Summary: Log for C++
-License: LGPL
-Group: Development/Libraries
-Vendor:  Bastiaan Bakker <bastiaan.bakker@lifeline.nl>
-Packager: Cedric Le Goater <cedric@legoater.com>
-Url: http://log4cpp.sourceforge.net/
-
-Source: ftp://download.sourceforge.net/pub/sourceforge/log4cpp/%name-%version.tar.gz
-
-Prefix: %_prefix
-BuildRoot: %_tmppath/%name-%version-root
-
-%description
-Log for C++ is a library of classes for flexible logging to files, syslog,
-and other destinations. It is modeled after the Log for Java library and
-stays as close to its API as is reasonable.
-
-%package devel
-Summary: development tools for Log for C++
-Group: Development/Libraries
-Requires: %name = %version
-
-%description devel
-The %name-devel package contains the static libraries and header files
-needed for development with %name.
-
-%package doc
-Summary: HTML formatted API documention for Log for C++
-Group: Development/Libraries
-#can't set doc package to noarch without setting the others as well.
-#BuildArch: noarch
-%{!?_without_doxygenrpm:BuildRequires: doxygen}
-
-%description doc
-The %name-doc package contains HTML formatted API documention generated by
-the popular doxygen documentation generation tool.
-
-%prep
-%{__rm} -rf $RPM_BUILD_ROOT
-
-%setup
-CC=%{__cc} CXX=%{__cxx} ./configure --prefix=%{prefix} --enable-doxygen 
-
-%build
-%{__make}
-
-%install
-%{__rm} -rf $RPM_BUILD_ROOT
-
-%{__make} prefix=$RPM_BUILD_ROOT%{prefix}docdir=$RPM_BUILD_ROOT/%{manualdir} install
-%clean
-%{__rm} -rf $RPM_BUILD_ROOT
-
-%ifnos solaris2.8 solaris2.9 solaris2.10
-%post -p /sbin/ldconfig
-%endif
-
-%post devel
-if test "x$RPM_INSTALL_PREFIX0" != "x" ; then
-    %{__perl} -pi -e"s|^libdir='[^\']*'|libdir='$RPM_INSTALL_PREFIX0/lib'|" $RPM_INSTALL_PREFIX0/lib/liblog4cpp.la
-    %{__perl} -pi -e"s|^prefix=\"[^\"]*\"|prefix=\"$RPM_INSTALL_PREFIX0\"|" $RPM_INSTALL_PREFIX0/bin/log4cpp-config
-fi
-
-%ifnos solaris2.8 solaris2.9 solaris2.10 
-%postun -p /sbin/ldconfig
-%endif
-
-%files
-%defattr(-,root,root,755)
-%attr(755,root,root) %prefix/lib/lib*.so.*
-%doc AUTHORS COPYING INSTALL NEWS README THANKS ChangeLog
-
-%files devel
-%defattr(-,root,root,755)
-%prefix/include/*
-%prefix/man/*
-%attr(755,root,root) %prefix/bin/log4cpp-config
-%attr(755,root,root) %prefix/lib/lib*.so
-%attr(644,root,root) %prefix/lib/*.*a
-%attr(644,root,root) %prefix/lib/pkgconfig/log4cpp.pc
-%attr(644,root,root) %prefix/share/aclocal/*.m4
-
-%files doc
-%defattr(-,root,root)
-%doc %{manualdir}
-
-
diff -Naur log4cpp-1.0/m4/ACX_PTHREAD.m4 log4cpp-1.0+/m4/ACX_PTHREAD.m4
--- log4cpp-1.0/m4/ACX_PTHREAD.m4	2007-08-24 05:51:58.000000000 +0000
+++ log4cpp-1.0+/m4/ACX_PTHREAD.m4	2011-01-27 13:07:44.119067000 +0000
@@ -87,7 +87,15 @@
 AC_REQUIRE([AC_CANONICAL_HOST])
 AC_LANG_SAVE
 AC_LANG_C
-acx_pthread_ok=no
+
+if test "$cross_compiling" != no; then
+	acx_pthread_ok=no
+else
+	acx_pthread_ok=yes
+    AC_MSG_WARN([On cross compiling without remote execution, the pthreads capability probe application \
+    	cannot be executed. For now fake success of HAVE_PTHREAD, HAVE_THREADING, USE_PTHREADS \
+    	and assume no pthreads specific PTHREAD_LIBS and PTHREAD_CFLAGS])
+fi	
 
 # We used to check for pthread.h first, but this fails if pthread.h
 # requires special compiler flags (e.g. on True64 or Sequent).
diff -Naur log4cpp-1.0/src/BasicConfigurator.cpp log4cpp-1.0+/src/BasicConfigurator.cpp
--- log4cpp-1.0/src/BasicConfigurator.cpp	2002-10-26 18:30:55.000000000 +0000
+++ log4cpp-1.0+/src/BasicConfigurator.cpp	2011-01-27 13:07:44.122069000 +0000
@@ -13,6 +13,9 @@
 #ifdef LOG4CPP_HAVE_UNISTD_H
 #    include <unistd.h>
 #endif
+#if defined(__vxworks) && !defined(__RTP__)
+ # include <ioLib.h>  /* For dup(), otherwise in unistd.h */
+#endif
 
 #include <cstdio>
 #include <log4cpp/BasicConfigurator.hh>
diff -Naur log4cpp-1.0/src/Category.cpp log4cpp-1.0+/src/Category.cpp
--- log4cpp-1.0/src/Category.cpp	2002-10-27 01:38:15.000000000 +0000
+++ log4cpp-1.0+/src/Category.cpp	2011-01-27 13:07:44.125068000 +0000
@@ -200,8 +200,13 @@
     }
 
     /* assume lock is held */
+    /* bool Category::ownsAppender(Appender* appender, 
+                                Category::OwnsAppenderMap::iterator& i2) throw() { }
+     * typedef OwnsAppenderMap declared in Category. Over-specify produces
+     * Warning: no uniquely matching class member found for ... Possible candidates: ...
+     */
     bool Category::ownsAppender(Appender* appender, 
-                                Category::OwnsAppenderMap::iterator& i2) throw() {
+                                OwnsAppenderMap::iterator& i2) throw() {
         bool owned = false;
 
         if (NULL != appender) {
diff -Naur log4cpp-1.0/src/FileAppender.cpp log4cpp-1.0+/src/FileAppender.cpp
--- log4cpp-1.0/src/FileAppender.cpp	2006-09-30 06:03:20.000000000 +0000
+++ log4cpp-1.0+/src/FileAppender.cpp	2011-01-27 13:07:44.128064000 +0000
@@ -12,7 +12,14 @@
 #    include <io.h>
 #endif
 #ifdef LOG4CPP_HAVE_UNISTD_H
+#ifdef __vxworks
+#  define write write_vx_unistd_unused
 #    include <unistd.h>
+#  undef write
+extern ssize_t write (int fd, const char *buffer, size_t nbytes);
+#else
+#    include <unistd.h>
+#endif
 #endif
 
 #include <memory>
diff -Naur log4cpp-1.0/src/Localtime.cpp log4cpp-1.0+/src/Localtime.cpp
--- log4cpp-1.0/src/Localtime.cpp	2007-08-19 10:20:18.000000000 +0000
+++ log4cpp-1.0+/src/Localtime.cpp	2011-01-27 13:07:44.131062000 +0000
@@ -1,7 +1,6 @@
 #include <log4cpp/Portability.hh>
 #include "Localtime.hh"
 #include <time.h>
-#include <memory.h>
 
 namespace log4cpp         
 {
@@ -21,6 +20,13 @@
 #endif
 
 #if !defined(LOG4CPP_HAVE_LOCALTIME_R)
+  #ifdef LOG4CPP_HAVE_MEMORY_H   
+    #include <memory.h>
+#elif defined(__vxworks) 
+    #include <string.h> /* Not reached because VxWorks has LOG4CPP_HAVE_LOCALTIME_R */
+#else
+    /* memcpy undeclared or non existing */ 
+#endif   
    void localtime(const ::time_t* time, ::tm* t)
    {
       ::tm* tmp = ::localtime(time);
diff -Naur log4cpp-1.0/src/Priority.cpp log4cpp-1.0+/src/Priority.cpp
--- log4cpp-1.0/src/Priority.cpp	2005-10-17 08:03:16.000000000 +0000
+++ log4cpp-1.0+/src/Priority.cpp	2011-01-27 13:07:44.133064000 +0000
@@ -14,28 +14,30 @@
 namespace log4cpp {
 
     namespace {
-        const std::string names[10] = {
-            "FATAL",
+        const std::string names[12] = {
+            "EMERGENCY",
 			"ALERT",
-			"CRIT",
+			"CRITICAL",
 			"ERROR",
-			"WARN",
+			"WARNING",
             "NOTICE",
 			"INFO",
 			"DEBUG",
+            "DELOUSE",
+            "TRACE",
 			"NOTSET",
 			"UNKNOWN" 
         };
     }    
 
-    const int log4cpp::Priority::MESSAGE_SIZE = 8;
+    const int log4cpp::Priority::MESSAGE_SIZE = 10;
     
 
     const std::string& Priority::getPriorityName(int priority) throw() {
          
         priority++;
         priority /= 100;
-        return names[((priority < 0) || (priority > 8)) ? 8 : priority];
+        return names[((priority < 0) || (priority > 10)) ? 10 : priority];
     }
 
     Priority::Value Priority::getPriorityValue(const std::string& priorityName) 
diff -Naur log4cpp-1.0/src/RemoteSyslogAppender.cpp log4cpp-1.0+/src/RemoteSyslogAppender.cpp
--- log4cpp-1.0/src/RemoteSyslogAppender.cpp	2007-07-03 09:17:27.000000000 +0000
+++ log4cpp-1.0+/src/RemoteSyslogAppender.cpp	2011-01-27 13:07:44.136063000 +0000
@@ -29,6 +29,10 @@
 #include <sys/socket.h>
 #include <netinet/in.h>
 #include <arpa/inet.h>
+#ifdef __vxworks
+#include <hostLib.h> /* for e.g. gethostbyname() */
+#include <sockLib.h> /* for e.g. socket(), sendto() etc */
+#endif
 #endif
 
 namespace log4cpp {
diff -Naur log4cpp-1.0/src/SimpleConfigurator.cpp log4cpp-1.0+/src/SimpleConfigurator.cpp
--- log4cpp-1.0/src/SimpleConfigurator.cpp	2007-07-03 09:17:28.000000000 +0000
+++ log4cpp-1.0+/src/SimpleConfigurator.cpp	2011-01-27 13:07:44.139062000 +0000
@@ -13,6 +13,9 @@
 #ifdef LOG4CPP_HAVE_IO_H
 #    include <io.h>
 #endif
+#if defined(__vxworks) && !defined(__RTP__)
+ # include <ioLib.h>  /* For dup(), otherwise in unistd.h */
+#endif
 
 #include <stdio.h>
 #include <iostream>
diff -Naur log4cpp-1.0/tests/Clock.cpp log4cpp-1.0+/tests/Clock.cpp
--- log4cpp-1.0/tests/Clock.cpp	2002-09-15 22:40:50.000000000 +0000
+++ log4cpp-1.0+/tests/Clock.cpp	2011-01-27 13:51:45.536751000 +0000
@@ -4,8 +4,17 @@
  * See the COPYING file for the terms of usage and distribution.
  */
 
+#include <PortabilityImpl.hh>
+
 #include <cstdlib>
+#ifndef LOG4CPP_HAVE_GETTIMEOFDAY
+#include <time.h> //For clock_gettime
+#endif
+#if defined(__vxworks) && !defined(__RTP__)
+#include <sys/times.h>			// for struct timeval
+#else
 #include <sys/time.h>			// for struct timeval
+#endif
 #ifdef __osf__
 #    include <machine/builtins.h>       // for __RPCC()
 #elif __linux__ && __i386__
@@ -51,10 +60,24 @@
 	}
 #endif	
     } else {
-	struct timeval tv;
-	
-	gettimeofday(&tv, NULL);	
-	return (usec_t) (tv.tv_sec * UsecPerSec + tv.tv_usec);
+#ifdef LOG4CPP_HAVE_GETTIMEOFDAY
+    	struct timeval tv;
+    	
+    	gettimeofday(&tv, NULL);
+    	return (usec_t) (tv.tv_sec * UsecPerSec + tv.tv_usec);
+#else
+		/* Anyway timezones are undefined by POSIX gettimeofday and not used above.
+		 * Use Posix clock_gettime(CLOCK_REALTIME,struct timespec *) instead.
+		 * gettimeofday timeval: tv_usec Microseconds
+		 * clock_gettime timespec: tv_nsec Nanoseconds. Scale down!
+		 * UsecPerSec propagates to 64Bit, so no overflow ...+ (ts.tv_nsec * UsecPerSec)/1000000000
+		 * But anyway hardcoded immediately above ...+ts.tv_nsec/1000
+		 */
+		struct timespec ts;
+		
+		clock_gettime(CLOCK_REALTIME,&ts);
+		return (usec_t) (ts.tv_sec * UsecPerSec + ts.tv_nsec / 1000 );
+#endif		
     }
 }
 
diff -Naur log4cpp-1.0/tests/Clock.hh log4cpp-1.0+/tests/Clock.hh
--- log4cpp-1.0/tests/Clock.hh	2002-09-15 22:40:50.000000000 +0000
+++ log4cpp-1.0+/tests/Clock.hh	2011-01-27 13:35:41.318641000 +0000
@@ -6,6 +6,8 @@
 #ifndef __CLOCK_H
 #define __CLOCK_H
 
+#include <log4cpp/Portability.hh>
+
 #ifdef LOG4CPP_HAVE_STDINT_H
 #include <stdint.h>
 #endif // LOG4CPP_HAVE_STDINT_H
@@ -13,6 +15,16 @@
 #ifdef __osf__
     typedef long usec_t;    /* number of microseconds since 1970/01/01 */
 #   define INT64_CONSTANT(val)  (val##L)
+#elif defined(__GNUC__)
+    /* __extension__ should avoid GNU -pedantic warning: use of C99 long long integer constant
+     * Not working, see http://gcc.gnu.org/bugzilla/show_bug.cgi?id=7263
+     * Also suggested workaround of using unsigned with "ULL" does not work with e.g. GNU 4.1.2
+     * #   define INT64_CONSTANT(val)  ((int64_t)(uint64_t)(__extension__ val##LLU))
+     * Instead, typecast of unspecified scalar literal, with GNU will expand automaticall to
+     * 64Bit without warning on big number.
+     */
+    typedef int64_t usec_t;
+#   define INT64_CONSTANT(val)  ((int64_t)val)
 #else
     typedef int64_t usec_t;
 #   define INT64_CONSTANT(val)  (val##LL)
