diff -Naur tmp_unpack/doxygen-1.3.8.orig/src/classdef.cpp doxygen-1.3.8/src/classdef.cpp
--- tmp_unpack/doxygen-1.3.8.orig/src/classdef.cpp	2004-06-16 19:18:22.000000000 +0000
+++ doxygen-1.3.8/src/classdef.cpp	2007-07-26 07:30:15.000000000 +0000
@@ -1004,6 +1004,7 @@
       ol.startTypewriter();
       bool isIDLorJava = nm.right(4)==".idl" || 
                          nm.right(5)==".pidl" || 
+                         nm.right(5)==".midl" || 
                          nm.right(5)==".java";
       if (isIDLorJava)
       {
diff -Naur tmp_unpack/doxygen-1.3.8.orig/src/classdef.cpp.orig doxygen-1.3.8/src/classdef.cpp.orig
--- tmp_unpack/doxygen-1.3.8.orig/src/classdef.cpp.orig	1970-01-01 00:00:00.000000000 +0000
+++ doxygen-1.3.8/src/classdef.cpp.orig	2004-06-16 19:18:22.000000000 +0000
@@ -0,0 +1,2873 @@
+/******************************************************************************
+ *
+ * $Id: doxygen.patch,v 1.2 2007/12/12 14:03:17 mpasquat Exp $
+ *
+ * Copyright (C) 1997-2004 by Dimitri van Heesch.
+ *
+ * Permission to use, copy, modify, and distribute this software and its
+ * documentation under the terms of the GNU General Public License is hereby 
+ * granted. No representations are made about the suitability of this software 
+ * for any purpose. It is provided "as is" without express or implied warranty.
+ * See the GNU General Public License for more details.
+ *
+ * Documents produced by Doxygen are derivative works derived from the
+ * input used in their production; they are not affected by this license.
+ *
+ */
+
+#include <stdio.h>
+#include <qfile.h>
+#include <qregexp.h>
+#include "classdef.h"
+#include "classlist.h"
+#include "entry.h"
+#include "doxygen.h"
+#include "membername.h"
+#include "message.h"
+#include "config.h"
+#include "util.h"
+#include "diagram.h"
+#include "language.h"
+#include "htmlhelp.h"
+#include "example.h"
+#include "outputlist.h"
+#include "dot.h"
+#include "defargs.h"
+#include "debug.h"
+#include "docparser.h"
+#include "searchindex.h"
+
+
+// constructs a new class definition
+ClassDef::ClassDef(
+    const char *defFileName,int defLine,
+    const char *nm,CompoundType ct,
+    const char *lref,const char *fName,
+    bool isSymbol) 
+ : Definition(defFileName,defLine,removeRedundantWhiteSpace(nm),0,0,isSymbol) 
+{
+  m_compType=ct;
+  QCString compoundName=compoundTypeString();
+  if (fName)
+  {
+    m_fileName=stripExtension(fName);
+  }
+  else
+  {
+    m_fileName=compoundName+m_name;
+  }
+  if (lref) 
+  {
+    m_exampleSDict = 0;
+  }
+  else
+  {
+    m_exampleSDict = new ExampleSDict(17);
+  }
+  m_memListFileName=convertNameToFile(compoundName+m_name+"-members");
+  m_inherits      = new BaseClassList;
+  m_inherits->setAutoDelete(TRUE);
+  m_inheritedBy   = new BaseClassList;
+  m_inheritedBy->setAutoDelete(TRUE);
+  m_allMemberNameInfoSDict = new MemberNameInfoSDict(257);
+  m_allMemberNameInfoSDict->setAutoDelete(TRUE);
+  visited=FALSE;
+  setReference(lref);
+  m_incInfo=0;
+  m_tempArgs=0;
+  m_prot=Public;
+  m_nspace=0;
+  m_fileDef=0;
+  m_usesImplClassDict=0;
+  m_usedByImplClassDict=0;
+  m_usesIntfClassDict=0;
+  memberGroupSDict = new MemberGroupSDict;
+  memberGroupSDict->setAutoDelete(TRUE);
+  m_innerClasses = new ClassSDict(17);
+  m_subGrouping=Config_getBool("SUBGROUPING");
+  m_templateInstances = 0;
+  m_variableInstances = 0;
+  m_templateMaster =0;
+  m_templBaseClassNames = 0;
+  m_artificial = FALSE;
+  m_isAbstract = FALSE;
+  m_isStatic = FALSE;
+  m_isObjC = FALSE;
+  m_membersMerged = FALSE;
+  m_categoryOf = 0;
+  QCString ns;
+  extractNamespaceName(m_name,m_className,ns);
+  //printf("m_name=%s m_className=%s ns=%s\n",m_name.data(),m_className.data(),ns.data());
+
+  if (((QCString)defFileName).right(5)!=".java" && 
+      guessSection(defFileName)==Entry::SOURCE_SEC)
+  {
+    m_isLocal=TRUE;
+  }
+  else
+  {
+    m_isLocal=FALSE;
+  }
+}
+
+// destroy the class definition
+ClassDef::~ClassDef()
+{
+  delete m_inherits;
+  delete m_inheritedBy;
+  delete m_allMemberNameInfoSDict;
+  delete m_exampleSDict;
+  delete m_usesImplClassDict;
+  delete m_usedByImplClassDict;
+  delete m_usesIntfClassDict;
+  delete m_incInfo;
+  delete memberGroupSDict;
+  delete m_innerClasses;
+  delete m_templateInstances;
+  delete m_variableInstances;
+  delete m_templBaseClassNames;
+  delete m_tempArgs;
+}
+
+QCString ClassDef::displayName() const
+{
+  static bool hideScopeNames = Config_getBool("HIDE_SCOPE_NAMES");
+  static bool optimizeOutputForJava = Config_getBool("OPTIMIZE_OUTPUT_JAVA");
+  QCString n;
+  if (hideScopeNames)
+  {
+    n=m_className;
+  }
+  else
+  {
+    n=qualifiedNameWithTemplateParameters();
+  }
+  if (optimizeOutputForJava)
+  {
+    n=substitute(n,"::",".");
+  }
+  if (m_compType==ClassDef::Protocol && n.right(2)=="-p")
+  {
+    n="< "+n.left(n.length()-2)+" >";
+  }
+  return n;
+}
+
+// inserts a base class in the inheritance list
+void ClassDef::insertBaseClass(ClassDef *cd,const char *n,Protection p,
+                               Specifier s,const char *t)
+{
+  //printf("*** insert base class %s into %s\n",cd->name().data(),name().data());
+  //inherits->inSort(new BaseClassDef(cd,p,s,t));
+  m_inherits->append(new BaseClassDef(cd,n,p,s,t));
+}
+
+// inserts a sub class in the inherited list
+void ClassDef::insertSubClass(ClassDef *cd,Protection p,
+                                Specifier s,const char *t)
+{
+  //printf("*** insert sub class %s into %s\n",cd->name().data(),name().data());
+  m_inheritedBy->inSort(new BaseClassDef(cd,0,p,s,t));
+}
+
+void ClassDef::addMembersToMemberGroup()
+{
+  ::addMembersToMemberGroup(&pubTypes,memberGroupSDict,this);
+  ::addMembersToMemberGroup(&pubMethods,memberGroupSDict,this);
+  ::addMembersToMemberGroup(&pubAttribs,memberGroupSDict,this);
+  ::addMembersToMemberGroup(&pubSlots,memberGroupSDict,this);
+  ::addMembersToMemberGroup(&signals,memberGroupSDict,this);
+  ::addMembersToMemberGroup(&dcopMethods,memberGroupSDict,this);
+  ::addMembersToMemberGroup(&pubStaticMethods,memberGroupSDict,this);
+  ::addMembersToMemberGroup(&pubStaticAttribs,memberGroupSDict,this);
+  ::addMembersToMemberGroup(&pacTypes,memberGroupSDict,this);
+  ::addMembersToMemberGroup(&pacMethods,memberGroupSDict,this);
+  ::addMembersToMemberGroup(&pacAttribs,memberGroupSDict,this);
+  ::addMembersToMemberGroup(&pacStaticMethods,memberGroupSDict,this);
+  ::addMembersToMemberGroup(&pacStaticAttribs,memberGroupSDict,this);
+  ::addMembersToMemberGroup(&proTypes,memberGroupSDict,this);
+  ::addMembersToMemberGroup(&proMethods,memberGroupSDict,this);
+  ::addMembersToMemberGroup(&proAttribs,memberGroupSDict,this);
+  ::addMembersToMemberGroup(&proSlots,memberGroupSDict,this);
+  ::addMembersToMemberGroup(&proStaticMethods,memberGroupSDict,this);
+  ::addMembersToMemberGroup(&proStaticAttribs,memberGroupSDict,this);
+  ::addMembersToMemberGroup(&priTypes,memberGroupSDict,this);
+  ::addMembersToMemberGroup(&priMethods,memberGroupSDict,this);
+  ::addMembersToMemberGroup(&priAttribs,memberGroupSDict,this);
+  ::addMembersToMemberGroup(&priSlots,memberGroupSDict,this);
+  ::addMembersToMemberGroup(&priStaticMethods,memberGroupSDict,this);
+  ::addMembersToMemberGroup(&priStaticAttribs,memberGroupSDict,this);
+  ::addMembersToMemberGroup(&friends,memberGroupSDict,this);
+  ::addMembersToMemberGroup(&related,memberGroupSDict,this);
+  ::addMembersToMemberGroup(&properties,memberGroupSDict,this);
+  ::addMembersToMemberGroup(&events,memberGroupSDict,this);
+
+  // add members inside sections to their groups
+  MemberGroupSDict::Iterator mgli(*memberGroupSDict);
+  MemberGroup *mg;
+  for (;(mg=mgli.current());++mgli)
+  {
+    if (mg->allMembersInSameSection() && m_subGrouping) 
+    {
+      //printf("addToDeclarationSection(%s)\n",mg->header().data());
+      mg->addToDeclarationSection();
+    }
+  }
+}
+
+// adds new member definition to the class
+void ClassDef::internalInsertMember(MemberDef *md,
+                                    Protection prot,
+                                    bool addToAllList
+                                   )
+{
+  //printf("adding %s::%s\n",name().data(),md->name().data());
+  if (!isReference())
+  {
+    /********************************************/
+    /* insert member in the declaration section */
+    /********************************************/
+    if (md->isRelated() && 
+        (Config_getBool("EXTRACT_PRIVATE") || prot!=Private))
+    {
+      if (Config_getBool("SORT_BRIEF_DOCS"))
+        related.inSort(md);
+      else
+        related.append(md);
+      md->setSectionList(this,&related);
+    }
+    else if (md->isFriend())
+    {
+      if (Config_getBool("SORT_BRIEF_DOCS"))
+        friends.inSort(md);
+      else
+        friends.append(md);
+      md->setSectionList(this,&friends);
+    }
+    else
+    {
+      switch (md->memberType())
+      {
+        case MemberDef::Signal: // Qt specific
+          if (Config_getBool("SORT_BRIEF_DOCS"))
+            signals.inSort(md);
+          else
+            signals.append(md);
+          md->setSectionList(this,&signals);
+          break;
+        case MemberDef::DCOP:   // KDE2 specific
+          if (Config_getBool("SORT_BRIEF_DOCS"))
+            dcopMethods.inSort(md);
+          else
+            dcopMethods.append(md);
+          md->setSectionList(this,&dcopMethods);
+          break;
+        case MemberDef::Property:
+          if (Config_getBool("SORT_BRIEF_DOCS"))
+            properties.inSort(md);
+          else
+            properties.append(md);
+          md->setSectionList(this,&properties);
+          break;
+        case MemberDef::Event:
+          if (Config_getBool("SORT_BRIEF_DOCS"))
+            events.inSort(md);
+          else
+            events.append(md);
+          md->setSectionList(this,&events);
+          break;
+        case MemberDef::Slot:   // Qt specific
+          switch (prot)
+          {
+            case Protected: 
+            case Package: // slots in packages are not possible!
+              if (Config_getBool("SORT_BRIEF_DOCS"))
+                proSlots.inSort(md);
+              else
+                proSlots.append(md); 
+              md->setSectionList(this,&proSlots);
+              break;
+              break;
+            case Public:    
+              if (Config_getBool("SORT_BRIEF_DOCS"))
+                pubSlots.inSort(md);
+              else
+                pubSlots.append(md); 
+              md->setSectionList(this,&pubSlots);
+              break;
+            case Private:   
+              if (Config_getBool("SORT_BRIEF_DOCS"))
+                priSlots.inSort(md);
+              else
+                priSlots.append(md);
+              md->setSectionList(this,&priSlots);
+              break;
+          }
+          break;
+        default: // any of the other members
+          if (md->isStatic())
+          {
+            if (md->isVariable())
+            {
+              switch (prot)
+              {
+                case Protected: 
+                  if (Config_getBool("SORT_BRIEF_DOCS"))
+                    proStaticAttribs.inSort(md);
+                  else
+                    proStaticAttribs.append(md); 
+                  md->setSectionList(this,&proStaticAttribs);
+                  break;
+                case Package: 
+                  if (Config_getBool("SORT_BRIEF_DOCS"))
+                    pacStaticAttribs.inSort(md);
+                  else
+                    pacStaticAttribs.append(md); 
+                  md->setSectionList(this,&pacStaticAttribs);
+                  break;
+                case Public:    
+                  if (Config_getBool("SORT_BRIEF_DOCS"))
+                    pubStaticAttribs.inSort(md);
+                  else
+                    pubStaticAttribs.append(md); 
+                  md->setSectionList(this,&pubStaticAttribs);
+                  break;
+                case Private:   
+                  if (Config_getBool("SORT_BRIEF_DOCS"))
+                    priStaticAttribs.inSort(md);
+                  else
+                    priStaticAttribs.append(md); 
+                  md->setSectionList(this,&priStaticAttribs);
+                  break;
+              }
+            }
+            else // function
+            {
+              switch (prot)
+              {
+                case Protected: 
+                  if (Config_getBool("SORT_BRIEF_DOCS"))
+                    proStaticMethods.inSort(md);
+                  else
+                    proStaticMethods.append(md); 
+                  md->setSectionList(this,&proStaticMethods);
+                  break;
+                case Package: 
+                  if (Config_getBool("SORT_BRIEF_DOCS"))
+                    pacStaticMethods.inSort(md);
+                  else
+                    pacStaticMethods.append(md); 
+                  md->setSectionList(this,&pacStaticMethods);
+                  break;
+                case Public:    
+                  if (Config_getBool("SORT_BRIEF_DOCS"))
+                    pubStaticMethods.inSort(md);
+                  else
+                    pubStaticMethods.append(md); 
+                  md->setSectionList(this,&pubStaticMethods);
+                  break;
+                case Private:   
+                  if (Config_getBool("SORT_BRIEF_DOCS"))
+                    priStaticMethods.inSort(md);
+                  else
+                    priStaticMethods.append(md); 
+                  md->setSectionList(this,&priStaticMethods);
+                  break;
+              }
+            }
+          }
+          else // not static
+          {
+            if (md->isVariable())
+            {
+              switch (prot)
+              {
+                case Protected: 
+                  if (Config_getBool("SORT_BRIEF_DOCS"))
+                    proAttribs.inSort(md);
+                  else
+                    proAttribs.append(md); 
+                  md->setSectionList(this,&proAttribs);
+                  break;
+                case Package:
+                  if (Config_getBool("SORT_BRIEF_DOCS"))
+                    pacAttribs.inSort(md);
+                  else
+                    pacAttribs.append(md);
+                  md->setSectionList(this,&pacAttribs);
+                  break;
+                case Public:    
+                  if (Config_getBool("SORT_BRIEF_DOCS"))
+                    pubAttribs.inSort(md);
+                  else
+                    pubAttribs.append(md); 
+                  md->setSectionList(this,&pubAttribs);
+                  break;
+                case Private:   
+                  if (Config_getBool("SORT_BRIEF_DOCS"))
+                    priAttribs.inSort(md);
+                  else
+                    priAttribs.append(md); 
+                  md->setSectionList(this,&priAttribs);
+                  break;
+              }
+            }
+            else if (md->isTypedef() || md->isEnumerate() || md->isEnumValue())
+            {
+              switch (prot)
+              {
+                case Protected: 
+                  if (Config_getBool("SORT_BRIEF_DOCS"))
+                    proTypes.inSort(md);
+                  else
+                    proTypes.append(md); 
+                  md->setSectionList(this,&proTypes); 
+                  break;
+                case Package: 
+                  if (Config_getBool("SORT_BRIEF_DOCS"))
+                    pacTypes.inSort(md);
+                  else
+                    pacTypes.append(md); 
+                  md->setSectionList(this,&pacTypes); 
+                  break;
+                case Public:    
+                  if (Config_getBool("SORT_BRIEF_DOCS"))
+                    pubTypes.inSort(md);
+                  else
+                    pubTypes.append(md); 
+                  md->setSectionList(this,&pubTypes); 
+                  break;
+                case Private:   
+                  if (Config_getBool("SORT_BRIEF_DOCS"))
+                    priTypes.inSort(md);
+                  else
+                    priTypes.append(md); 
+                  md->setSectionList(this,&priTypes); 
+                  break;
+              }
+            }
+            else // member function
+            {
+              switch (prot)
+              {
+                case Protected: 
+                  if (Config_getBool("SORT_BRIEF_DOCS"))
+                    proMethods.inSort(md);
+                  else
+                    proMethods.append(md); 
+                  md->setSectionList(this,&proMethods); 
+                  break;
+                case Package: 
+                  if (Config_getBool("SORT_BRIEF_DOCS"))
+                    pacMethods.inSort(md);
+                  else
+                    pacMethods.append(md); 
+                  md->setSectionList(this,&pacMethods); 
+                  break;
+                case Public:    
+                  if (Config_getBool("SORT_BRIEF_DOCS"))
+                    pubMethods.inSort(md);
+                  else
+                    pubMethods.append(md); 
+                  md->setSectionList(this,&pubMethods); 
+                  break;
+                case Private:   
+                  if (Config_getBool("SORT_BRIEF_DOCS"))
+                    priMethods.inSort(md);
+                  else
+                    priMethods.append(md); 
+                  md->setSectionList(this,&priMethods); 
+                  break;
+              }
+            }
+          }
+          break; 
+      }
+    }
+
+    /*******************************************************/
+    /* insert member in the detailed documentation section */
+    /*******************************************************/
+    if ((md->isRelated() && 
+          (Config_getBool("EXTRACT_PRIVATE") || prot!=Private)
+        ) || md->isFriend()
+       )
+    {
+      if (Config_getBool("SORT_MEMBER_DOCS"))
+        relatedMembers.inSort(md);
+      else
+        relatedMembers.append(md);
+    }
+    else
+    {
+      switch (md->memberType())
+      {
+        case MemberDef::Property:
+          if (Config_getBool("SORT_MEMBER_DOCS"))
+            propertyMembers.inSort(md);
+          else
+            propertyMembers.append(md);
+          break;
+        case MemberDef::Event:
+          if (Config_getBool("SORT_MEMBER_DOCS"))
+            eventMembers.inSort(md);
+          else
+            eventMembers.append(md);
+          break;
+        case MemberDef::Signal: // fall through
+        case MemberDef::DCOP:
+          if (Config_getBool("SORT_MEMBER_DOCS"))
+            functionMembers.inSort(md);
+          else
+            functionMembers.append(md);
+          break;
+        case MemberDef::Slot:
+          switch (prot)
+          {
+            case Protected: 
+            case Package: 
+            case Public:    
+              if (Config_getBool("SORT_MEMBER_DOCS"))
+                functionMembers.inSort(md); 
+              else
+                functionMembers.append(md);
+              break;
+            case Private:   
+              if (Config_getBool("EXTRACT_PRIVATE"))
+              {
+                if (Config_getBool("SORT_MEMBER_DOCS"))
+                  functionMembers.inSort(md); 
+                else
+                  functionMembers.append(md);
+              }
+              break;
+          }
+          break;
+        default: // any of the other members
+          if (prot!=Private || Config_getBool("EXTRACT_PRIVATE"))
+          {
+            switch (md->memberType())
+            {
+              case MemberDef::Typedef:
+                if (Config_getBool("SORT_MEMBER_DOCS"))
+                  typedefMembers.inSort(md);
+                else
+                  typedefMembers.append(md);
+                break;
+              case MemberDef::Enumeration:
+                if (Config_getBool("SORT_MEMBER_DOCS"))
+                  enumMembers.inSort(md);
+                else
+                  enumMembers.append(md);
+                break;
+              case MemberDef::EnumValue:
+                if (Config_getBool("SORT_MEMBER_DOCS"))
+                  enumValMembers.inSort(md);
+                else
+                  enumValMembers.append(md);
+                break;
+              case MemberDef::Function:
+                if (md->isConstructor() || md->isDestructor())
+                {
+                  constructors.append(md);
+                }
+                else
+                {
+                  if (Config_getBool("SORT_MEMBER_DOCS"))
+                    functionMembers.inSort(md);
+                  else
+                    functionMembers.append(md);
+                }
+                break;
+              case MemberDef::Variable:
+                if (Config_getBool("SORT_MEMBER_DOCS"))
+                  variableMembers.inSort(md);
+                else
+                  variableMembers.append(md);
+                break;
+              default:
+                err("Unexpected member type %d found!\n",md->memberType());
+            }
+          }
+          break; 
+      }
+    }
+
+    /*************************************************/
+    /* insert member in the appropriate member group */
+    /*************************************************/
+    // Note: this must be done AFTER inserting the member in the 
+    // regular groups
+    //addMemberToGroup(md,groupId);
+    
+  }
+
+  if (md->virtualness()==Pure)
+  {
+    m_isAbstract=TRUE;
+  }
+
+  if (addToAllList && 
+      !(Config_getBool("HIDE_FRIEND_COMPOUNDS") &&
+        md->isFriend() &&
+        (QCString(md->typeString())=="friend class" || 
+         QCString(md->typeString())=="friend struct" ||
+         QCString(md->typeString())=="friend union")))
+  {
+    //printf("=======> adding member %s to class %s\n",md->name().data(),name().data());
+    MemberInfo *mi = new MemberInfo((MemberDef *)md,
+                                     prot,md->virtualness(),FALSE);
+    MemberNameInfo *mni=0;
+    if ((mni=m_allMemberNameInfoSDict->find(md->name())))
+    {
+      mni->append(mi);
+    }
+    else
+    {
+      mni = new MemberNameInfo(md->name());
+      mni->append(mi);
+      m_allMemberNameInfoSDict->append(mni->memberName(),mni);
+    }
+  }
+}
+
+void ClassDef::insertMember(MemberDef *md)
+{
+  internalInsertMember(md,md->protection(),TRUE);
+}
+
+// compute the anchors for all members
+void ClassDef::computeAnchors()
+{
+  ClassDef *context = Config_getBool("INLINE_INHERITED_MEMB") ? this : 0;
+  setAnchors(context,'a',&pubMethods);
+  setAnchors(context,'b',&proMethods);
+  setAnchors(context,'c',&pacMethods);
+  setAnchors(context,'d',&priMethods);
+  setAnchors(context,'e',&pubStaticMethods);
+  setAnchors(context,'f',&proStaticMethods);
+  setAnchors(context,'g',&pacStaticMethods);
+  setAnchors(context,'h',&priStaticMethods);
+  setAnchors(context,'i',&pubSlots);
+  setAnchors(context,'j',&proSlots);
+  setAnchors(context,'k',&priSlots);
+  setAnchors(context,'l',&signals);
+  setAnchors(context,'m',&related);
+  setAnchors(context,'n',&friends);
+  setAnchors(context,'o',&pubAttribs);
+  setAnchors(context,'p',&proAttribs);
+  setAnchors(context,'q',&pacAttribs);
+  setAnchors(context,'r',&priAttribs);
+  setAnchors(context,'s',&pubStaticAttribs);
+  setAnchors(context,'t',&proStaticAttribs);
+  setAnchors(context,'u',&pacStaticAttribs);
+  setAnchors(context,'v',&priStaticAttribs);
+  setAnchors(context,'w',&pubTypes);
+  setAnchors(context,'x',&proTypes);
+  setAnchors(context,'y',&priTypes);
+  setAnchors(context,'z',&dcopMethods);
+  setAnchors(context,'0',&properties);
+  setAnchors(context,'1',&events);
+  MemberGroupSDict::Iterator mgli(*memberGroupSDict);
+  MemberGroup *mg;
+  for (;(mg=mgli.current());++mgli)
+  {
+    mg->setAnchors(context);
+  }
+}
+
+void ClassDef::distributeMemberGroupDocumentation()
+{
+  MemberGroupSDict::Iterator mgli(*memberGroupSDict);
+  MemberGroup *mg;
+  for (;(mg=mgli.current());++mgli)
+  {
+    mg->distributeMemberGroupDocumentation();
+  }
+}
+
+void ClassDef::findSectionsInDocumentation()
+{
+  docFindSections(documentation(),this,0,docFile());
+  MemberGroupSDict::Iterator mgli(*memberGroupSDict);
+  MemberGroup *mg;
+  for (;(mg=mgli.current());++mgli)
+  {
+    mg->findSectionsInDocumentation();
+  }
+  pubTypes.findSectionsInDocumentation();
+  pubMethods.findSectionsInDocumentation();
+  pubAttribs.findSectionsInDocumentation();
+  pubSlots.findSectionsInDocumentation();
+  signals.findSectionsInDocumentation();
+  dcopMethods.findSectionsInDocumentation();
+  pubStaticMethods.findSectionsInDocumentation();
+  pubStaticAttribs.findSectionsInDocumentation();
+  pacTypes.findSectionsInDocumentation();
+  pacMethods.findSectionsInDocumentation();
+  pacAttribs.findSectionsInDocumentation();
+  pacStaticMethods.findSectionsInDocumentation();
+  pacStaticAttribs.findSectionsInDocumentation();
+  proTypes.findSectionsInDocumentation();
+  proMethods.findSectionsInDocumentation();
+  proAttribs.findSectionsInDocumentation();
+  proSlots.findSectionsInDocumentation();
+  proStaticMethods.findSectionsInDocumentation();
+  proStaticAttribs.findSectionsInDocumentation();
+  priTypes.findSectionsInDocumentation();
+  priMethods.findSectionsInDocumentation();
+  priAttribs.findSectionsInDocumentation();
+  priSlots.findSectionsInDocumentation();
+  priStaticMethods.findSectionsInDocumentation();
+  priStaticAttribs.findSectionsInDocumentation();
+  friends.findSectionsInDocumentation();
+  related.findSectionsInDocumentation();
+  properties.findSectionsInDocumentation();
+  events.findSectionsInDocumentation();
+}
+
+
+// add a file name to the used files set
+void ClassDef::insertUsedFile(const char *f)
+{
+  if (m_files.find(f)==-1) m_files.append(f);
+  if (m_templateInstances)
+  {
+    QDictIterator<ClassDef> qdi(*m_templateInstances);
+    ClassDef *cd;
+    for (qdi.toFirst();(cd=qdi.current());++qdi)
+    {
+      cd->insertUsedFile(f);
+    }
+  }
+}
+
+static void writeInheritanceSpecifier(OutputList &ol,BaseClassDef *bcd)
+{
+  if (bcd->prot!=Public || bcd->virt!=Normal)
+  {
+    ol.startTypewriter();
+    ol.docify(" [");
+    QStrList sl;
+    if (bcd->prot==Protected)    sl.append("protected");
+    else if (bcd->prot==Private) sl.append("private");
+    if (bcd->virt==Virtual)      sl.append("virtual");
+    const char *s=sl.first();
+    while (s)
+    {
+      ol.docify(s);
+      s=sl.next();
+      if (s) ol.docify(", ");
+    }
+    ol.docify("]");
+    ol.endTypewriter();
+  }
+}
+
+void ClassDef::setIncludeFile(FileDef *fd,
+             const char *includeName,bool local, bool force)
+{
+  //printf("ClassDef::setIncludeFile(%p,%s,%d,%d)\n",fd,includeName,local,force);
+  if (!m_incInfo) m_incInfo=new IncludeInfo;
+  if ((includeName && m_incInfo->includeName.isEmpty()) ||
+      (fd!=0 && m_incInfo->fileDef==0)
+     )
+  {
+    //printf("Setting file info\n");
+    m_incInfo->fileDef     = fd;
+    m_incInfo->includeName = includeName;
+    m_incInfo->local       = local;
+  }
+  if (force && includeName) m_incInfo->includeName = includeName;
+}
+
+// TODO: fix this: a nested template class can have multiple outer templates
+//ArgumentList *ClassDef::outerTemplateArguments() const
+//{
+//  int ti;
+//  ClassDef *pcd=0;
+//  int pi=0;
+//  if (m_tempArgs) return m_tempArgs;
+//  // find the outer most class scope
+//  while ((ti=name().find("::",pi))!=-1 && 
+//      (pcd=getClass(name().left(ti)))==0
+//        ) pi=ti+2;
+//  if (pcd)
+//  {
+//    return pcd->templateArguments();
+//  }
+//  return 0;
+//}
+
+static void searchTemplateSpecs(/*in*/  Definition *d,
+                                /*out*/ QList<ArgumentList> &result,
+                                /*out*/ QCString &name)
+{
+  if (d->definitionType()==Definition::TypeClass)
+  {
+    if (d->getOuterScope())
+    {
+      searchTemplateSpecs(d->getOuterScope(),result,name);
+    }
+    ClassDef *cd=(ClassDef *)d;
+    if (!name.isEmpty()) name+="::";
+    name+=d->localName();
+    bool isSpecialization = d->localName().find('<')!=-1;
+    if (cd->templateArguments()) 
+    {
+      result.append(cd->templateArguments());
+      if (!isSpecialization)
+      {
+        name+=tempArgListToString(cd->templateArguments());
+      }
+    }
+  }
+  else
+  {
+    name+=d->qualifiedName();
+  }
+}
+
+static void writeTemplateSpec(OutputList &ol,Definition *d,
+            const QCString &type)
+{
+  QList<ArgumentList> specs;
+  QCString name;
+  searchTemplateSpecs(d,specs,name);
+  if (specs.count()>0) // class has template scope specifiers
+  {
+    ol.startSubsubsection(); 
+    QListIterator<ArgumentList> spi(specs);
+    ArgumentList *al;
+    for (spi.toFirst();(al=spi.current());++spi)
+    {
+      ol.docify("template<");
+      Argument *a=al->first();
+      while (a)
+      {
+        ol.docify(a->type);
+        if (!a->name.isEmpty())
+        {
+          ol.docify(" ");
+          ol.docify(a->name);
+        }
+        if (a->defval.length()!=0)
+        {
+          ol.docify(" = ");
+          ol.docify(a->defval);
+        } 
+        a=al->next();
+        if (a) ol.docify(", ");
+      }
+      ol.docify(">");
+      ol.pushGeneratorState();
+      ol.disableAllBut(OutputGenerator::Html);
+      ol.lineBreak();
+      ol.popGeneratorState();
+    }
+    ol.docify(type.lower()+" "+name);
+    ol.endSubsubsection();
+    ol.writeString("\n");
+  }
+}
+
+// write the detailed description for this class
+void ClassDef::writeDetailedDescription(OutputList &ol, const QCString &pageType, bool exampleFlag)
+{
+  if ((!briefDescription().isEmpty() && Config_getBool("REPEAT_BRIEF")) || 
+      !documentation().isEmpty() || 
+      /*(Config_getBool("SOURCE_BROWSER") && startBodyLine!=-1 && bodyDef) ||*/
+      exampleFlag)
+  {
+    ol.writeRuler();
+    ol.pushGeneratorState();
+      ol.disable(OutputGenerator::Latex);
+      ol.disable(OutputGenerator::RTF);
+      ol.writeAnchor(0,"_details");
+    ol.popGeneratorState();
+    ol.startGroupHeader();
+    ol.parseText(theTranslator->trDetailedDescription());
+    ol.endGroupHeader();
+    ol.startTextBlock();
+    
+    writeTemplateSpec(ol,this,pageType);
+    
+    // repeat brief description
+    if (!briefDescription().isEmpty() && Config_getBool("REPEAT_BRIEF"))
+    {
+      ol.parseDoc(briefFile(),briefLine(),this,0,briefDescription(),FALSE,FALSE);
+    }
+    if (!briefDescription().isEmpty() && Config_getBool("REPEAT_BRIEF") &&
+        !documentation().isEmpty())
+    {
+      ol.pushGeneratorState();
+        ol.disable(OutputGenerator::Man);
+        ol.newParagraph();
+        ol.enableAll();
+        ol.disableAllBut(OutputGenerator::Man);
+        ol.writeString("\n\n");
+      ol.popGeneratorState();
+    }
+    // write documentation
+    if (!documentation().isEmpty())
+    {
+      ol.pushGeneratorState();
+        ol.disableAllBut(OutputGenerator::RTF);
+        ol.newParagraph();
+      ol.popGeneratorState();
+      ol.parseDoc(docFile(),docLine(),this,0,documentation()+"\n",TRUE,FALSE);
+    }
+    // write examples
+    if (exampleFlag)
+    {
+      ol.startSimpleSect(BaseOutputDocInterface::Examples,0,0,theTranslator->trExamples()+": ");
+      ol.writeDescItem();
+      ol.newParagraph();
+      writeExample(ol,m_exampleSDict);
+      ol.endSimpleSect();
+    }
+    ol.newParagraph();
+    writeSourceDef(ol,name());
+    ol.endTextBlock();
+  }
+  else
+  {
+    writeTemplateSpec(ol,this,pageType);
+  }
+}
+    
+// write all documentation for this class
+void ClassDef::writeDocumentation(OutputList &ol)
+{
+  QCString pageType = " ";
+  pageType += compoundTypeString();
+  toupper(pageType.at(1));
+  QCString pageTitle = theTranslator->trCompoundReference(displayName(),
+              m_compType == Interface && m_isObjC ? Class : m_compType,
+              m_tempArgs != 0);
+  
+  startFile(ol,getOutputFileBase(),name(),pageTitle);  
+  startTitle(ol,getOutputFileBase());
+  ol.parseText(pageTitle);
+  addGroupListToTitle(ol,this);
+  endTitle(ol,getOutputFileBase(),name());
+
+  if (Config_getBool("SEARCHENGINE"))
+  {
+    Doxygen::searchIndex->setCurrentDoc(pageTitle,getOutputFileBase());
+    Doxygen::searchIndex->addWord(localName().lower());
+  }
+
+  ol.startTextBlock();
+  
+  //printf("Class %s brief=`%s' doc=`%s'\n",name().data(),briefDescription().data(),documentation().data());
+  
+  bool exampleFlag=hasExamples();
+  // write brief description
+  if (!briefDescription().isEmpty())
+  {
+    if (!Config_getBool("DETAILS_AT_TOP")) 
+    {
+      ol.parseDoc(briefFile(),briefLine(),this,0,briefDescription(),TRUE,FALSE);
+      ol.writeString(" \n");
+      ol.pushGeneratorState();
+      ol.disableAllBut(OutputGenerator::Html);
+      ol.startTextLink(0,"_details");
+    
+      if (Config_getBool("REPEAT_BRIEF") || 
+          !documentation().isEmpty() || 
+          exampleFlag
+         )
+      {
+        ol.parseText(theTranslator->trMore());
+      }
+      ol.endTextLink();
+      ol.popGeneratorState();
+
+      ol.pushGeneratorState();
+      ol.disable(OutputGenerator::RTF);
+      ol.newParagraph();
+      ol.popGeneratorState();
+    }
+  }
+  ol.writeSynopsis();
+  
+  if (m_incInfo && Config_getBool("SHOW_INCLUDE_FILES"))
+  {
+    QCString nm=m_incInfo->includeName.isEmpty() ? 
+      (m_incInfo->fileDef ?
+       m_incInfo->fileDef->docName().data() : "" 
+      ) :
+      m_incInfo->includeName.data();
+    if (!nm.isEmpty())
+    {
+      ol.startTypewriter();
+      bool isIDLorJava = nm.right(4)==".idl" || 
+                         nm.right(5)==".pidl" || 
+                         nm.right(5)==".java";
+      if (isIDLorJava)
+      {
+        ol.docify("import ");
+      }
+      else if (isObjectiveC())
+      {
+        ol.docify("#import ");
+      }
+      else
+      {
+        ol.docify("#include ");
+      }
+      if (m_incInfo->local || isIDLorJava)
+        ol.docify("\"");
+      else
+        ol.docify("<");
+      ol.pushGeneratorState();
+      ol.disable(OutputGenerator::Html);
+      ol.docify(nm);
+      ol.disableAllBut(OutputGenerator::Html);
+      ol.enable(OutputGenerator::Html);
+      if (m_incInfo->fileDef)
+      {
+        ol.writeObjectLink(0,m_incInfo->fileDef->includeName(),0,nm);
+      }
+      else
+      {
+        ol.docify(nm);
+      }
+      ol.popGeneratorState();
+      if (m_incInfo->local || isIDLorJava)
+        ol.docify("\"");
+      else
+        ol.docify(">");
+      if (isIDLorJava) 
+        ol.docify(";");
+      ol.endTypewriter();
+      ol.newParagraph();
+    }
+  }
+
+
+  if (!Config_getString("GENERATE_TAGFILE").isEmpty()) 
+  {
+    Doxygen::tagFile << "  <compound kind=\"" << compoundTypeString();
+    Doxygen::tagFile << "\"";
+    if (isObjectiveC()) { Doxygen::tagFile << " objc=\"yes\""; }
+    Doxygen::tagFile << ">" << endl;
+    Doxygen::tagFile << "    <name>" << convertToXML(name()) << "</name>" << endl;
+    Doxygen::tagFile << "    <filename>" << convertToXML(getOutputFileBase()) << Doxygen::htmlFileExtension << "</filename>" << endl;
+    if (m_tempArgs)
+    {
+      ArgumentListIterator ali(*m_tempArgs);
+      Argument *a;
+      for (;(a=ali.current());++ali)
+      {
+        Doxygen::tagFile << "    <templarg>" << convertToXML(a->name) << "</templarg>" << endl;
+      }
+    }
+  }
+
+  
+  if (Config_getBool("CLASS_DIAGRAMS")) ol.disableAllBut(OutputGenerator::Man);
+
+  
+  // write super classes
+  int count;
+  if ((count=m_inherits->count())>0)
+  {
+    //parseText(ol,theTranslator->trInherits()+" ");
+
+    QCString inheritLine = theTranslator->trInheritsList(m_inherits->count());
+    QRegExp marker("@[0-9]+");
+    int index=0,newIndex,matchLen;
+    // now replace all markers in inheritLine with links to the classes
+    while ((newIndex=marker.match(inheritLine,index,&matchLen))!=-1)
+    {
+      ol.parseText(inheritLine.mid(index,newIndex-index));
+      bool ok;
+      uint entryIndex = inheritLine.mid(newIndex+1,matchLen-1).toUInt(&ok);
+      BaseClassDef *bcd=m_inherits->at(entryIndex);
+      if (ok && bcd)
+      {
+        ClassDef *cd=bcd->classDef;
+        if (cd->isLinkable())
+        {
+          if (!Config_getString("GENERATE_TAGFILE").isEmpty()) 
+          {
+            Doxygen::tagFile << "    <base";
+            if (bcd->prot==Protected)
+            {
+              Doxygen::tagFile << " protection=\"protected\"";
+            }
+            else if (bcd->prot==Private)
+            {
+              Doxygen::tagFile << " protection=\"private\"";
+            }
+            if (bcd->virt==Virtual)
+            {
+              Doxygen::tagFile << " virtualness=\"virtual\"";
+            }
+            Doxygen::tagFile << ">" << convertToXML(cd->name()) << "</base>" << endl;
+          }
+          ol.writeObjectLink(cd->getReference(),cd->getOutputFileBase(),0,cd->displayName()+bcd->templSpecifiers);
+        }
+        else
+        {
+          ol.docify(cd->displayName());
+        }
+      }
+      else
+      {
+        err("Error: invalid marker %d in inherits list!\n",entryIndex);
+      }
+      index=newIndex+matchLen;
+    } 
+    ol.parseText(inheritLine.right(inheritLine.length()-index));
+    ol.newParagraph();
+  }
+
+  // write subclasses
+  if ((count=m_inheritedBy->count())>0)
+  {
+    QCString inheritLine = theTranslator->trInheritedByList(m_inheritedBy->count());
+    QRegExp marker("@[0-9]+");
+    int index=0,newIndex,matchLen;
+    // now replace all markers in inheritLine with links to the classes
+    while ((newIndex=marker.match(inheritLine,index,&matchLen))!=-1)
+    {
+      ol.parseText(inheritLine.mid(index,newIndex-index));
+      bool ok;
+      uint entryIndex = inheritLine.mid(newIndex+1,matchLen-1).toUInt(&ok);
+      BaseClassDef *bcd=m_inheritedBy->at(entryIndex);
+      if (ok && bcd)
+      {
+        ClassDef *cd=bcd->classDef;
+        if (cd->isLinkable())
+        {
+          ol.writeObjectLink(cd->getReference(),cd->getOutputFileBase(),0,cd->displayName());
+        }
+        else
+        {
+          ol.docify(cd->displayName());
+        }
+        writeInheritanceSpecifier(ol,bcd);
+      }
+      index=newIndex+matchLen;
+    } 
+    ol.parseText(inheritLine.right(inheritLine.length()-index));
+    ol.newParagraph();
+  }
+
+  if (Config_getBool("CLASS_DIAGRAMS")) ol.enableAll();
+  
+
+  count=0;
+  BaseClassDef *ibcd;
+  ibcd=m_inheritedBy->first();
+  while (ibcd)
+  {
+    ClassDef *icd=ibcd->classDef;
+    if ( icd->isVisibleInHierarchy()) count++;
+    ibcd=m_inheritedBy->next();
+  }
+  ibcd=m_inherits->first();
+  while (ibcd)
+  {
+    ClassDef *icd=ibcd->classDef;
+    if ( icd->isVisibleInHierarchy()) count++;
+    ibcd=m_inherits->next();
+  }
+
+  
+  if (Config_getBool("HAVE_DOT") && Config_getBool("CLASS_GRAPH"))
+    // write class diagram using dot
+  {
+    DotClassGraph inheritanceGraph(this,DotNode::Inheritance,Config_getInt("MAX_DOT_GRAPH_DEPTH"));
+    if (!inheritanceGraph.isTrivial())
+    {
+      ol.pushGeneratorState();
+      ol.disable(OutputGenerator::Man);
+      ol.startDotGraph();
+      ol.parseText(theTranslator->trClassDiagram(displayName()));
+      ol.endDotGraph(inheritanceGraph);
+      if (Config_getBool("GENERATE_LEGEND"))
+      {
+        ol.pushGeneratorState();
+        ol.disableAllBut(OutputGenerator::Html);
+        ol.writeString("<center><font size=\"2\">[");
+        ol.startHtmlLink(relativePathToRoot(0)+"graph_legend"+Doxygen::htmlFileExtension);
+        ol.docify(theTranslator->trLegend());
+        ol.endHtmlLink();
+        ol.writeString("]</font></center>");
+        ol.popGeneratorState();
+      }
+      ol.popGeneratorState();
+    }
+  }
+  else if (Config_getBool("CLASS_DIAGRAMS") && count>0) 
+    // write class diagram using build-in generator
+  {
+    ClassDiagram diagram(this); // create a diagram of this class.
+    ol.startClassDiagram();
+    ol.disable(OutputGenerator::Man);
+    ol.parseText(theTranslator->trClassDiagram(displayName()));
+    ol.enable(OutputGenerator::Man);
+    ol.endClassDiagram(diagram,getOutputFileBase(),displayName());
+  } 
+
+  if (Config_getBool("HAVE_DOT") && Config_getBool("COLLABORATION_GRAPH"))
+  {
+    DotClassGraph usageImplGraph(this,DotNode::Collaboration,Config_getInt("MAX_DOT_GRAPH_DEPTH"));
+    if (!usageImplGraph.isTrivial())
+    {
+      ol.pushGeneratorState();
+      ol.disable(OutputGenerator::Man);
+      ol.startDotGraph();
+      ol.parseText(theTranslator->trCollaborationDiagram(displayName()));
+      ol.endDotGraph(usageImplGraph);
+      if (Config_getBool("GENERATE_LEGEND"))
+      {
+        ol.disableAllBut(OutputGenerator::Html);
+        ol.writeString("<center><font size=\"2\">[");
+        ol.startHtmlLink(relativePathToRoot(0)+"graph_legend"+Doxygen::htmlFileExtension);
+        ol.docify(theTranslator->trLegend());
+        ol.endHtmlLink();
+        ol.writeString("]</font></center>");
+      }
+      ol.popGeneratorState();
+    }
+  }
+
+  // write link to list of all members (HTML only)
+  if (m_allMemberNameInfoSDict->count()>0 && 
+      !Config_getBool("OPTIMIZE_OUTPUT_FOR_C")
+     )
+  {
+    ol.pushGeneratorState();
+    ol.disableAllBut(OutputGenerator::Html);
+    ol.startTextLink(m_memListFileName,0);
+    ol.parseText(theTranslator->trListOfAllMembers());
+    ol.endTextLink();
+    ol.enableAll();
+    ol.popGeneratorState();
+  }
+
+  ol.endTextBlock();
+  
+  // write detailed description if the user wants it near the top
+  if (Config_getBool("DETAILS_AT_TOP")) {
+    writeDetailedDescription(ol,pageType,exampleFlag);
+  }
+
+  // write member groups
+  ol.startMemberSections();
+
+  // write user defined member groups
+  MemberGroupSDict::Iterator mgli(*memberGroupSDict);
+  MemberGroup *mg;
+  for (;(mg=mgli.current());++mgli)
+  {
+    if (!mg->allMembersInSameSection() || !m_subGrouping) // group is in its own section
+    {
+      mg->writeDeclarations(ol,this,0,0,0);
+    }
+    else // add this group to the corresponding member section
+    {
+      //printf("addToDeclarationSection(%s)\n",mg->header().data());
+      //mg->addToDeclarationSection();
+    }
+  }
+
+  // public types
+  pubTypes.writeDeclarations(ol,this,0,0,0,theTranslator->trPublicTypes(),0); 
+
+  // public methods
+  pubSlots.writeDeclarations(ol,this,0,0,0,theTranslator->trPublicSlots(),0); 
+  signals.writeDeclarations(ol,this,0,0,0,theTranslator->trSignals(),0); 
+  dcopMethods.writeDeclarations(ol,this,0,0,0,theTranslator->trDCOPMethods(),0); 
+  pubMethods.writeDeclarations(ol,this,0,0,0,theTranslator->trPublicMembers(),0); 
+  pubStaticMethods.writeDeclarations(ol,this,0,0,0,theTranslator->trStaticPublicMembers(),0); 
+
+  // public attribs
+  pubAttribs.writeDeclarations(ol,this,0,0,0,theTranslator->trPublicAttribs(),0); 
+  pubStaticAttribs.writeDeclarations(ol,this,0,0,0,theTranslator->trStaticPublicAttribs(),0); 
+  
+  // protected types
+  proTypes.writeDeclarations(ol,this,0,0,0,theTranslator->trProtectedTypes(),0); 
+
+  // protected methods
+  proSlots.writeDeclarations(ol,this,0,0,0,theTranslator->trProtectedSlots(),0); 
+  proMethods.writeDeclarations(ol,this,0,0,0,theTranslator->trProtectedMembers(),0); 
+  proStaticMethods.writeDeclarations(ol,this,0,0,0,theTranslator->trStaticProtectedMembers(),0); 
+
+  // protected attribs
+  proAttribs.writeDeclarations(ol,this,0,0,0,theTranslator->trProtectedAttribs(),0); 
+  proStaticAttribs.writeDeclarations(ol,this,0,0,0,theTranslator->trStaticProtectedAttribs(),0); 
+
+  // package types
+  pacTypes.writeDeclarations(ol,this,0,0,0,theTranslator->trPackageTypes(),0); 
+
+  // package methods
+  pacMethods.writeDeclarations(ol,this,0,0,0,theTranslator->trPackageMembers(),0); 
+  pacStaticMethods.writeDeclarations(ol,this,0,0,0,theTranslator->trStaticPackageMembers(),0); 
+
+  // package attribs
+  pacAttribs.writeDeclarations(ol,this,0,0,0,theTranslator->trPackageAttribs(),0); 
+  pacStaticAttribs.writeDeclarations(ol,this,0,0,0,theTranslator->trStaticPackageAttribs(),0); 
+
+  // package
+  properties.writeDeclarations(ol,this,0,0,0,theTranslator->trProperties(),0); 
+
+  // events
+  events.writeDeclarations(ol,this,0,0,0,theTranslator->trEvents(),0); 
+
+  if (Config_getBool("EXTRACT_PRIVATE"))
+  {
+    // private types
+    priTypes.writeDeclarations(ol,this,0,0,0,theTranslator->trPrivateTypes(),0); 
+
+    // private members
+    priSlots.writeDeclarations(ol,this,0,0,0,theTranslator->trPrivateSlots(),0); 
+    priMethods.writeDeclarations(ol,this,0,0,0,theTranslator->trPrivateMembers(),0); 
+    priStaticMethods.writeDeclarations(ol,this,0,0,0,theTranslator->trStaticPrivateMembers(),0); 
+
+    // private attribs
+    priAttribs.writeDeclarations(ol,this,0,0,0,theTranslator->trPrivateAttribs(),0); 
+    priStaticAttribs.writeDeclarations(ol,this,0,0,0,theTranslator->trStaticPrivateAttribs(),0); 
+  }
+
+  // friends
+  friends.writeDeclarations(ol,this,0,0,0,theTranslator->trFriends(),0);
+
+  // related functions
+  related.writeDeclarations(ol,this,0,0,0,
+                  theTranslator->trRelatedFunctions(),
+                  theTranslator->trRelatedSubscript()
+                 ); 
+  ol.endMemberSections();
+    
+  // write detailed description
+  if (!Config_getBool("DETAILS_AT_TOP")) {
+    writeDetailedDescription(ol,pageType,exampleFlag);
+  }
+  
+  
+  typedefMembers.writeDocumentation(ol,name(),this,
+                         theTranslator->trMemberTypedefDocumentation());
+
+  enumMembers.writeDocumentation(ol,name(),this,
+                         theTranslator->trMemberEnumerationDocumentation());
+  
+  constructors.writeDocumentation(ol,name(),this,
+                         theTranslator->trConstructorDocumentation());
+
+  functionMembers.writeDocumentation(ol,name(),this,
+                         theTranslator->trMemberFunctionDocumentation());
+
+  relatedMembers.writeDocumentation(ol,name(),this,
+                         theTranslator->trRelatedFunctionDocumentation());
+
+  variableMembers.writeDocumentation(ol,name(),this,
+                         theTranslator->trMemberDataDocumentation());
+  
+  propertyMembers.writeDocumentation(ol,name(),this,
+                         theTranslator->trPropertyDocumentation());
+  
+  eventMembers.writeDocumentation(ol,name(),this,
+                         theTranslator->trEventDocumentation());
+
+  ol.startTextBlock();
+
+  // write the list of used files (not for man pages)
+  ol.pushGeneratorState();
+  ol.disable(OutputGenerator::Man);
+
+  if (Config_getBool("SHOW_USED_FILES"))
+  {
+    ol.writeRuler();
+    ol.parseText(theTranslator->trGeneratedFromFiles(
+          m_isObjC && m_compType==Interface ? Class : m_compType,
+          m_files.count()==1));
+
+    bool first=TRUE;
+    const char *file = m_files.first();
+    while (file)
+    {
+      bool ambig;
+      FileDef *fd=findFileDef(Doxygen::inputNameDict,file,ambig);
+      if (fd)
+      {
+        if (first)
+        {
+          first=FALSE;   
+          ol.startItemList();
+        }
+
+        ol.writeListItem();
+        QCString path=fd->getPath().copy();
+        if (Config_getBool("FULL_PATH_NAMES"))
+        {
+          ol.docify(stripFromPath(path));
+        }
+
+        // for HTML 
+        ol.pushGeneratorState();
+        ol.disableAllBut(OutputGenerator::Html);
+        if (fd->generateSourceFile())
+        {
+          ol.writeObjectLink(0,fd->getSourceFileBase(),0,fd->name());
+        }
+        else if (fd->isLinkable())
+        {
+          ol.writeObjectLink(fd->getReference(),fd->getOutputFileBase(),0,
+              fd->name());
+        }
+        else
+        {
+          ol.docify(fd->name());
+        }
+        ol.popGeneratorState();
+
+        // for other output formats
+        ol.pushGeneratorState();
+        ol.disable(OutputGenerator::Html);
+        if (fd->isLinkable())
+        {
+          ol.writeObjectLink(fd->getReference(),fd->getOutputFileBase(),0,
+              fd->name());
+        }
+        else
+        {
+          ol.docify(fd->name());
+        }
+
+        ol.popGeneratorState();
+
+        
+      }
+      file=m_files.next();
+    }
+    if (!first) ol.endItemList();
+  }
+
+  // write Author section (Man only)
+  ol.enable(OutputGenerator::Man);
+  ol.disableAllBut(OutputGenerator::Man);
+  ol.writeString("\n");
+  ol.startGroupHeader();
+  ol.parseText(theTranslator->trAuthor(TRUE,TRUE));
+  ol.endGroupHeader();
+  ol.parseText(theTranslator->trGeneratedAutomatically(Config_getString("PROJECT_NAME")));
+  ol.popGeneratorState();
+
+  ol.endTextBlock();
+
+  if (!Config_getString("GENERATE_TAGFILE").isEmpty()) 
+  {
+    writeDocAnchorsToTagFile();
+    Doxygen::tagFile << "  </compound>" << endl;
+  }
+ 
+  endFile(ol);
+
+}
+
+void ClassDef::writeDocumentationForInnerClasses(OutputList &ol)
+{
+  // write inner classes after the parent, so the tag files contain
+  // the definition in proper order!
+  if (m_innerClasses)
+  {
+    ClassSDict::Iterator cli(*m_innerClasses);
+    ClassDef *innerCd;
+    for (cli.toFirst();(innerCd=cli.current());++cli)
+    {
+      if (innerCd->isLinkableInProject() && innerCd->templateMaster()==0 &&
+          (innerCd->protection()!=Private || Config_getBool("EXTRACT_PRIVATE"))
+         )
+      {
+        msg("Generating docs for nested compound %s...\n",innerCd->name().data());
+        innerCd->writeDocumentation(ol);
+        innerCd->writeMemberList(ol);
+      }
+      innerCd->writeDocumentationForInnerClasses(ol);
+    }
+  }
+}
+
+// write the list of all (inherited) members for this class
+void ClassDef::writeMemberList(OutputList &ol)
+{
+  if (m_allMemberNameInfoSDict->count()==0 || 
+      Config_getBool("OPTIMIZE_OUTPUT_FOR_C")) return;
+  // only for HTML
+  ol.pushGeneratorState();
+  ol.disableAllBut(OutputGenerator::Html);
+
+  startFile(ol,m_memListFileName,m_memListFileName,
+            theTranslator->trMemberList());
+  startTitle(ol,0);
+  ol.parseText(displayName()+" "+theTranslator->trMemberList());
+  endTitle(ol,0,0);
+  ol.parseText(theTranslator->trThisIsTheListOfAllMembers());
+  ol.writeObjectLink(getReference(),getOutputFileBase(),0,displayName());
+  ol.parseText(theTranslator->trIncludingInheritedMembers());
+  
+  //ol.startItemList();
+  ol.writeString("<p><table>\n");
+  
+  //MemberNameInfo *mni=m_allMemberNameInfoList->first();
+  MemberNameInfoSDict::Iterator mnii(*m_allMemberNameInfoSDict); 
+  MemberNameInfo *mni;
+  for (mnii.toFirst();(mni=mnii.current());++mnii)
+  {
+    MemberInfo *mi=mni->first();
+    while (mi)
+    {
+      MemberDef *md=mi->memberDef;
+      ClassDef  *cd=md->getClassDef();
+      Protection prot = mi->prot;
+      Specifier virt=md->virtualness();
+      
+      //printf("%s: Member %s of class %s md->protection()=%d mi->prot=%d prot=%d inherited=%d\n",
+      //    name().data(),md->name().data(),cd->name().data(),md->protection(),mi->prot,prot,mi->inherited);
+
+
+      if (cd && !md->name().isEmpty() && md->name()[0]!='@')
+      {
+        bool memberWritten=FALSE;
+        if (cd->isLinkable() && md->isLinkable()) 
+          // create a link to the documentation
+        {
+          QCString name=mi->ambiguityResolutionScope+md->name();
+          //ol.writeListItem();
+          ol.writeString("  <tr class=\"memlist\"><td>");
+          if (cd->isObjectiveC())
+          {
+            if (md->isObjCMethod())
+            {
+              if (md->isStatic())
+                ol.writeString("+&nbsp;</td><td>");
+              else
+                ol.writeString("-&nbsp;</td><td>");
+            }
+            else
+              ol.writeString("</td><td>");
+          }
+          if (md->isObjCMethod())
+          {
+            ol.writeObjectLink(md->getReference(),
+                md->getOutputFileBase(),
+                md->anchor(),md->name());
+          }
+          else
+          {
+            //Definition *bd = md->getGroupDef();
+            //if (bd==0) bd=cd;
+            ol.writeObjectLink(md->getReference(),
+                md->getOutputFileBase(),
+                md->anchor(),name);
+
+            if ( md->isFunction() || md->isSignal() || md->isSlot() ||
+                (md->isFriend() && md->argsString())) 
+              ol.docify(md->argsString());
+            else if (md->isEnumerate())
+              ol.parseText(" "+theTranslator->trEnumName());
+            else if (md->isEnumValue())
+              ol.parseText(" "+theTranslator->trEnumValue());
+            else if (md->isTypedef())
+              ol.docify(" typedef");
+            else if (md->isFriend() && !strcmp(md->typeString(),"friend class"))
+              ol.docify(" class");
+            //ol.writeString("\n");
+          }
+          ol.writeString("</td>");
+          memberWritten=TRUE;
+        }
+        else if (!Config_getBool("HIDE_UNDOC_MEMBERS") && 
+                  (md->protection()!=Private || Config_getBool("EXTRACT_PRIVATE") || md->isFriend()) 
+                ) // no documentation, 
+                  // generate link to the class instead.
+        {
+          //ol.writeListItem();
+          ol.writeString("  <tr bgcolor=\"#f0f0f0\"><td>");
+          if (cd->isObjectiveC())
+          {
+            if (md->isObjCMethod())
+            {
+              if (md->isStatic())
+                ol.writeString("+&nbsp;</td><td>");
+              else
+                ol.writeString("-&nbsp;</td><td>");
+            }
+            else
+              ol.writeString("</td><td>");
+          }
+          ol.startBold();
+          ol.docify(md->name());
+          ol.endBold();
+          if (!md->isObjCMethod())
+          {
+            if ( md->isFunction() || md->isSignal() || md->isSlot() ) 
+              ol.docify(md->argsString());
+            else if (md->isEnumerate())
+              ol.parseText(" "+theTranslator->trEnumName());
+            else if (md->isEnumValue())
+              ol.parseText(" "+theTranslator->trEnumValue());
+            else if (md->isTypedef())
+              ol.docify(" typedef");
+          }
+          ol.writeString(" (");
+          ol.parseText(theTranslator->trDefinedIn()+" ");
+          if (cd->isLinkable())
+          {
+            ol.writeObjectLink(cd->getReference(),cd->getOutputFileBase(),0,cd->displayName());
+          }
+          else
+          {
+            ol.startBold();
+            ol.docify(cd->displayName());
+            ol.endBold();
+          }
+          ol.writeString(")");
+          ol.writeString("</td>");
+          memberWritten=TRUE;
+        }
+        if (memberWritten)
+        {
+          ol.writeString("<td>");
+          ol.writeObjectLink(cd->getReference(),cd->getOutputFileBase(),
+                             0,cd->displayName());
+          ol.writeString("</td>");
+          ol.writeString("<td>");
+        }
+        if (
+            (prot!=Public || (virt!=Normal && !m_isObjC) || 
+             md->isFriend() || md->isRelated() || md->isExplicit() ||
+             md->isMutable() || (md->isInline() && Config_getBool("INLINE_INFO")) ||
+             md->isSignal() || md->isSlot() ||
+             md->isStatic()
+            )
+            && memberWritten)
+        {
+          ol.startTypewriter();
+          ol.docify(" [");
+          QStrList sl;
+          if (md->isFriend()) sl.append("friend");
+          else if (md->isRelated()) sl.append("related");
+          else
+          {
+            if (Config_getBool("INLINE_INFO") && md->isInline())        
+                                       sl.append("inline");
+            if (md->isExplicit())      sl.append("explicit");
+            if (md->isMutable())       sl.append("mutable");
+            if (prot==Protected)       sl.append("protected");
+            else if (prot==Private)    sl.append("private");
+            else if (prot==Package)    sl.append("package");
+            if (virt==Virtual && 
+                !m_isObjC)             sl.append("virtual");
+            else if (virt==Pure)       sl.append("pure virtual");
+            if (md->isStatic())        sl.append("static");
+            if (md->isSignal())        sl.append("signal");
+            if (md->isSlot())          sl.append("slot");
+          }
+          const char *s=sl.first();
+          while (s)
+          {
+            ol.docify(s);
+            s=sl.next();
+            if (s) ol.docify(", ");
+          }
+          ol.docify("]");
+          ol.endTypewriter();
+        }
+        if (memberWritten)
+        {
+          ol.writeString("</td>");
+          ol.writeString("</tr>\n");
+        }
+      }
+      mi=mni->next();
+    }
+  }
+  //ol.endItemList();
+
+  ol.writeString("</table>");
+  
+  endFile(ol);
+  ol.popGeneratorState();
+}
+
+
+// add a reference to an example
+bool ClassDef::addExample(const char *anchor,const char *nameStr,
+    const char *file)
+{
+  if (m_exampleSDict && !m_exampleSDict->find(nameStr))
+  {
+    Example *e=new Example;
+    e->anchor=anchor;
+    e->name=nameStr;
+    e->file=file;
+    m_exampleSDict->inSort(nameStr,e);
+    return TRUE;
+  }
+  return FALSE;
+}
+
+// returns TRUE if this class is used in an example
+bool ClassDef::hasExamples()
+{
+  if (m_exampleSDict==0) 
+    return FALSE;
+  else
+    return m_exampleSDict->count()>0;
+}
+
+
+void ClassDef::setTemplateArguments(ArgumentList *al)
+{
+  if (al==0) return;
+  if (!m_tempArgs) delete m_tempArgs; // delete old list if needed
+  m_tempArgs=new ArgumentList; 
+  ArgumentListIterator ali(*al);
+  Argument *a;
+  for (;(a=ali.current());++ali)
+  {
+    m_tempArgs->append(new Argument(*a));
+  }
+}
+
+/*! Returns \c TRUE iff this class or a class inheriting from this class
+ *  is \e not defined in an external tag file. 
+ */
+bool ClassDef::hasNonReferenceSuperClass()
+{
+  bool found=!isReference(); 
+  if (found) return TRUE; // we're done if this class is not a reference
+  BaseClassListIterator bcli(*m_inheritedBy);
+  for ( ; bcli.current() && !found ; ++bcli ) // for each super class
+  {
+    ClassDef *bcd=bcli.current()->classDef;
+    // recurse into the super class branch
+    found = found || bcd->hasNonReferenceSuperClass(); 
+    if (!found)
+    {
+      // look for template instances that might have non-reference super classes
+      QDict<ClassDef> *cil = bcd->getTemplateInstances();
+      if (cil)
+      {
+        QDictIterator<ClassDef> tidi(*cil);
+        for ( ; tidi.current() && !found ; ++tidi) // for each template instance
+        {
+          // recurse into the template instance branch
+          found = found || tidi.current()->hasNonReferenceSuperClass();
+        }
+      }
+    }
+  }
+  return found;
+}
+
+/*! called from MemberDef::writeDeclaration() to (recusively) write the 
+ *  definition of an annonymous struct, union or class.
+ */
+void ClassDef::writeDeclaration(OutputList &ol,MemberDef *md,bool inGroup)
+{
+  //ol.insertMemberAlign();
+  //printf("ClassName=`%s' inGroup=%d\n",name().data(),inGroup);
+
+  //if (inGroup && md && md->getClassDef()==this) return;
+
+  ol.docify(compoundTypeString());
+  int ri=name().findRev("::");
+  if (ri==-1) ri=name().length();
+  QCString cn=name().right(name().length()-ri-2);
+  if (!cn.isEmpty() && cn.at(0)!='@' && md)
+  { 
+    ol.docify(" ");
+    if (isLinkable())
+    {
+      ol.writeObjectLink(0,0,md->anchor(),cn);
+    }
+    else
+    {
+      ol.startBold();
+      ol.docify(cn);
+      ol.endBold();
+    }
+  }
+  ol.docify(" {");
+  ol.endMemberItem(); 
+
+  // write user defined member groups
+  MemberGroupSDict::Iterator mgli(*memberGroupSDict);
+  MemberGroup *mg;
+  for (;(mg=mgli.current());++mgli)
+  {
+    mg->setInGroup(inGroup);
+    mg->writePlainDeclarations(ol,this,0,0,0);
+  }
+
+  pubTypes.setInGroup(inGroup);
+  pubTypes.writePlainDeclarations(ol,this,0,0,0); 
+  pubMethods.setInGroup(inGroup);
+  pubMethods.writePlainDeclarations(ol,this,0,0,0); 
+  pubAttribs.setInGroup(inGroup);
+  pubAttribs.writePlainDeclarations(ol,this,0,0,0); 
+  pubSlots.setInGroup(inGroup);
+  pubSlots.writePlainDeclarations(ol,this,0,0,0); 
+  signals.setInGroup(inGroup);
+  signals.writePlainDeclarations(ol,this,0,0,0); 
+  dcopMethods.setInGroup(inGroup);
+  dcopMethods.writePlainDeclarations(ol,this,0,0,0); 
+  properties.setInGroup(inGroup);
+  properties.writePlainDeclarations(ol,this,0,0,0); 
+  events.setInGroup(inGroup);
+  events.writePlainDeclarations(ol,this,0,0,0); 
+  pubStaticMethods.setInGroup(inGroup);
+  pubStaticMethods.writePlainDeclarations(ol,this,0,0,0); 
+  pubStaticAttribs.setInGroup(inGroup);
+  pubStaticAttribs.writePlainDeclarations(ol,this,0,0,0); 
+  proTypes.setInGroup(inGroup);
+  proTypes.writePlainDeclarations(ol,this,0,0,0); 
+  proMethods.setInGroup(inGroup);
+  proMethods.writePlainDeclarations(ol,this,0,0,0); 
+  proAttribs.setInGroup(inGroup);
+  proAttribs.writePlainDeclarations(ol,this,0,0,0); 
+  proSlots.setInGroup(inGroup);
+  proSlots.writePlainDeclarations(ol,this,0,0,0); 
+  proStaticMethods.setInGroup(inGroup);
+  proStaticMethods.writePlainDeclarations(ol,this,0,0,0); 
+  proStaticAttribs.setInGroup(inGroup);
+  proStaticAttribs.writePlainDeclarations(ol,this,0,0,0); 
+  pacTypes.setInGroup(inGroup);
+  pacTypes.writePlainDeclarations(ol,this,0,0,0); 
+  pacMethods.setInGroup(inGroup);
+  pacMethods.writePlainDeclarations(ol,this,0,0,0); 
+  pacAttribs.setInGroup(inGroup);
+  pacAttribs.writePlainDeclarations(ol,this,0,0,0); 
+  pacStaticMethods.setInGroup(inGroup);
+  pacStaticMethods.writePlainDeclarations(ol,this,0,0,0); 
+  pacStaticAttribs.setInGroup(inGroup);
+  pacStaticAttribs.writePlainDeclarations(ol,this,0,0,0); 
+  if (Config_getBool("EXTRACT_PRIVATE"))
+  {
+    priTypes.setInGroup(inGroup);
+    priTypes.writePlainDeclarations(ol,this,0,0,0); 
+    priMethods.setInGroup(inGroup);
+    priMethods.writePlainDeclarations(ol,this,0,0,0); 
+    priAttribs.setInGroup(inGroup); 
+    priAttribs.writePlainDeclarations(ol,this,0,0,0); 
+    priSlots.setInGroup(inGroup); 
+    priSlots.writePlainDeclarations(ol,this,0,0,0); 
+    priStaticMethods.setInGroup(inGroup); 
+    priStaticMethods.writePlainDeclarations(ol,this,0,0,0); 
+    priStaticAttribs.setInGroup(inGroup); 
+    priStaticAttribs.writePlainDeclarations(ol,this,0,0,0); 
+  }
+  friends.setInGroup(inGroup);
+  friends.writePlainDeclarations(ol,this,0,0,0);
+  related.setInGroup(inGroup);
+  related.writePlainDeclarations(ol,this,0,0,0); 
+}
+
+/*! a link to this class is possible within this project */
+bool ClassDef::isLinkableInProject() const
+{ 
+  if (m_templateMaster)
+  {
+    return m_templateMaster->isLinkableInProject();
+  }
+  else
+  {
+    return !name().isEmpty() &&    /* no name */
+      !m_artificial &&
+      name().find('@')==-1 && /* anonymous compound */
+      (m_prot!=Private || Config_getBool("EXTRACT_PRIVATE")) && /* private */
+      (!m_isLocal || Config_getBool("EXTRACT_LOCAL_CLASSES")) && /* local */
+      hasDocumentation() &&   /* documented */ 
+      !isReference() &&         /* not an external reference */
+      (!m_isStatic || Config_getBool("EXTRACT_STATIC"));
+  }
+}
+
+bool ClassDef::isLinkable() const
+{
+  if (m_templateMaster)
+  {
+    return m_templateMaster->isLinkable();
+  }
+  else
+  {
+    return isLinkableInProject() || isReference();
+  }
+}
+
+
+/*! the class is visible in a class diagram, or class hierarchy */
+bool ClassDef::isVisibleInHierarchy() 
+{ 
+    return // show all classes or a subclass is visible
+      (Config_getBool("ALLEXTERNALS") || hasNonReferenceSuperClass()) &&
+      // and not an annonymous compound
+      name().find('@')==-1 &&
+      // not an artifically introduced class
+      !m_artificial &&
+      // and not privately inherited
+      (m_prot!=Private || Config_getBool("EXTRACT_PRIVATE")) &&
+      // documented or shown anyway or documentation is external 
+      (hasDocumentation() || 
+       !Config_getBool("HIDE_UNDOC_CLASSES") || 
+       (m_templateMaster && m_templateMaster->hasDocumentation()) || 
+       isReference()
+      ) &&
+      // is not part of an unnamed namespace or shown anyway
+      (!m_isStatic || Config_getBool("EXTRACT_STATIC"));
+}
+
+bool ClassDef::hasDocumentation() const
+{
+  return Definition::hasDocumentation();
+}
+
+//----------------------------------------------------------------------
+// recursive function:
+// returns TRUE iff class definition `bcd' represents an (in)direct base 
+// class of class definition `cd'.
+
+bool ClassDef::isBaseClass(ClassDef *bcd, bool followInstances,int level)
+{
+  bool found=FALSE;
+  //printf("isBaseClass(cd=%s) looking for %s\n",cd->name().data(),bcd->name().data());
+  if (level>256)
+  {
+    err("Possible recursive class relation while inside %s and looking for %s\n",name().data(),bcd->name().data());
+    return FALSE;
+  }
+  BaseClassListIterator bcli(*baseClasses());
+  for ( ; bcli.current() && !found ; ++bcli)
+  {
+    ClassDef *ccd=bcli.current()->classDef;
+    if (!followInstances && ccd->templateMaster()) ccd=ccd->templateMaster();
+    //printf("isBaseClass() baseclass %s\n",ccd->name().data());
+    if (ccd==bcd) 
+      found=TRUE;
+    else 
+      found=ccd->isBaseClass(bcd,followInstances,level+1);
+  }
+  return found;
+}
+
+//----------------------------------------------------------------------------
+
+static bool isStandardFunc(MemberDef *md)
+{
+  ClassDef *cd=md->getClassDef();
+  if (cd->templateMaster()) cd=cd->templateMaster();
+  return md->name()=="operator=" || // assignment operator
+         md->name()==cd->localName() || // constructor
+         (md->name().find('~')!=-1 && 
+          md->name().find("operator")==-1); // destructor
+}
+
+/*! 
+ * recusively merges the `all members' lists of a class base 
+ * with that of this class. Must only be called for classes without
+ * subclasses!
+ */
+
+void ClassDef::mergeMembers()
+{
+  if (m_membersMerged) return;
+  m_membersMerged=TRUE;
+  //printf("  mergeMembers for %s\n",name().data());
+  bool inlineInheritedMembers = Config_getBool("INLINE_INHERITED_MEMB" );
+  BaseClassListIterator bcli(*baseClasses());
+  BaseClassDef *bcd;
+  for ( ; (bcd=bcli.current()) ; ++bcli )
+  {
+    ClassDef *bClass=bcd->classDef; 
+
+    // merge the members in the base class of this inheritance branch first
+    bClass->mergeMembers();
+
+    MemberNameInfoSDict *srcMnd  = bClass->m_allMemberNameInfoSDict;
+    MemberNameInfoSDict *dstMnd  =         m_allMemberNameInfoSDict;
+
+    MemberNameInfoSDict::Iterator srcMnili(*srcMnd);
+    MemberNameInfo *srcMni;
+    for ( ; (srcMni=srcMnili.current()) ; ++srcMnili)
+    {
+      //printf("Base member name %s\n",srcMni->memberName());
+      MemberNameInfo *dstMni;
+      if ((dstMni=dstMnd->find(srcMni->memberName())))
+        // a member with that name is already in the class.
+        // the member may hide or reimplement the one in the sub class
+        // or there may be another path to the base class that is already 
+        // visited via another branch in the class hierarchy.
+      {
+        MemberNameInfoIterator srcMnii(*srcMni); 
+        MemberInfo *srcMi;
+        for ( ; (srcMi=srcMnii.current()) ; ++srcMnii )
+        {
+          MemberDef *srcMd = srcMi->memberDef;
+          bool found=FALSE;
+          bool ambigue=FALSE;
+          bool hidden=FALSE;
+          MemberNameInfoIterator dstMnii(*dstMni); 
+          MemberInfo *dstMi;
+          ClassDef *srcCd = srcMd->getClassDef();
+          for ( ; (dstMi=dstMnii.current()) && !found; ++dstMnii )
+          {
+            MemberDef *dstMd = dstMi->memberDef;
+            if (srcMd!=dstMd) // different members
+            {
+              ClassDef *dstCd = dstMd->getClassDef();
+              //printf("  Is %s a base class of %s?\n",srcCd->name().data(),dstCd->name().data());
+              if (srcCd==dstCd || dstCd->isBaseClass(srcCd,TRUE)) 
+                // member is in the same or a base class
+              {
+                found=matchArguments(srcMd->argumentList(),
+                    dstMd->argumentList());
+                //printf("  Yes, matching (%s<->%s): %d\n",
+                //    argListToString(srcMd->argumentList()).data(),
+                //    argListToString(dstMd->argumentList()).data(),
+                //    found);
+                hidden = hidden  || !found;
+              }
+              else // member is in a non base class => multiple inheritance
+                   // using the same base class.
+              {
+                //printf("$$ Existing member %s %s add scope %s\n",
+                //    dstMi->ambiguityResolutionScope.data(),
+                //    dstMd->name().data(),
+                //    dstMi->scopePath.left(dstMi->scopePath.find("::")+2).data());
+
+                QCString scope=dstMi->scopePath.left(dstMi->scopePath.find("::")+2);
+                if (scope!=dstMi->ambiguityResolutionScope.left(scope.length()))
+                  dstMi->ambiguityResolutionScope.prepend(scope);
+                ambigue=TRUE;
+              }
+            }
+            else // same members
+            {
+              // do not add if base class is virtual or 
+              // if scope paths are equal or
+              // if base class is an interface (and thus implicitly virtual).
+              //printf("same member found srcMi->virt=%d dstMi->virt=%d\n",srcMi->virt,dstMi->virt);
+              if ((srcMi->virt!=Normal && dstMi->virt!=Normal) ||
+                  bClass->name()+"::"+srcMi->scopePath == dstMi->scopePath ||
+                  dstMd->getClassDef()->compoundType()==Interface
+                 ) 
+              {
+                found=TRUE;
+              }
+              else // member can be reached via multiple paths in the 
+                // inheritance tree
+              {
+                //printf("$$ Existing member %s %s add scope %s\n",
+                //    dstMi->ambiguityResolutionScope.data(),
+                //    dstMd->name().data(),
+                //    dstMi->scopePath.left(dstMi->scopePath.find("::")+2).data());
+
+                QCString scope=dstMi->scopePath.left(dstMi->scopePath.find("::")+2);
+                if (scope!=dstMi->ambiguityResolutionScope.left(scope.length()))
+                {
+                  dstMi->ambiguityResolutionScope.prepend(scope);
+                }
+                ambigue=TRUE;
+              }
+            }
+          }
+          //printf("member %s::%s hidden %d ambigue %d srcMi->ambigClass=%p\n",
+          //    srcCd->name().data(),srcMd->name().data(),hidden,ambigue,srcMi->ambigClass);
+
+          // TODO: fix the case where a member is hidden by inheritance
+          //       of a member with the same name but with another prototype,
+          //       while there is more than one path to the member in the 
+          //       base class due to multiple inheritance. In this case
+          //       it seems that the member is not reachable by prefixing a 
+          //       scope name either (according to my compiler). Currently, 
+          //       this case is shown anyway.
+          if (!found && srcMd->protection()!=Private)
+          {
+            Protection prot=srcMd->protection();
+            if (bcd->prot==Protected && prot==Public)       prot=bcd->prot;
+            else if (bcd->prot==Private)                    prot=bcd->prot;
+            
+            if (inlineInheritedMembers)
+            {
+              if (!isStandardFunc(srcMd))
+              {
+                //printf("    insertMember `%s'\n",srcMd->name().data());
+                internalInsertMember(srcMd,prot,FALSE);
+              }
+            }
+
+            Specifier virt=srcMi->virt;
+            if (srcMi->virt==Normal && bcd->virt!=Normal) virt=bcd->virt;
+            
+            MemberInfo *newMi = new MemberInfo(srcMd,prot,virt,TRUE);
+            newMi->scopePath=bClass->name()+"::"+srcMi->scopePath;
+            if (ambigue)
+            {
+              //printf("$$ New member %s %s add scope %s::\n",
+              //     srcMi->ambiguityResolutionScope.data(),
+              //     srcMd->name().data(),
+              //     bClass->name().data());
+
+              QCString scope=bClass->name()+"::";
+              if (scope!=srcMi->ambiguityResolutionScope.left(scope.length()))
+              {
+                newMi->ambiguityResolutionScope=
+                  scope+srcMi->ambiguityResolutionScope.copy();
+              }
+            }
+            if (hidden)
+            {
+              if (srcMi->ambigClass==0)
+              {
+                newMi->ambigClass=bClass;
+                newMi->ambiguityResolutionScope=bClass->name()+"::";
+              }
+              else
+              {
+                newMi->ambigClass=srcMi->ambigClass;
+                newMi->ambiguityResolutionScope=srcMi->ambigClass->name()+"::";
+              }
+            }
+            dstMni->append(newMi);
+          }
+        }
+      }
+      else // base class has a member that is not in the sub class => copy
+      {
+        // create a deep copy of the list (only the MemberInfo's will be 
+        // copied, not the actual MemberDef's)
+        MemberNameInfo *newMni = 0;
+        newMni = new MemberNameInfo(srcMni->memberName()); 
+
+        // copy the member(s) from the base to the sub class
+        MemberNameInfoIterator mnii(*srcMni);
+        MemberInfo *mi;
+        for (;(mi=mnii.current());++mnii)
+        {
+          Protection prot = mi->prot;
+          if (bcd->prot==Protected)
+          {
+            if (prot==Public) prot=Protected;
+          }
+          else if (bcd->prot==Private)
+          {
+            prot=Private;
+          }
+          //printf("%s::%s: prot=%d bcd->prot=%d result=%d\n",
+          //    name().data(),mi->memberDef->name().data(),mi->prot,
+          //    bcd->prot,prot);
+
+          if (mi->prot!=Private)
+          {
+            Specifier virt=mi->virt;
+            if (mi->virt==Normal && bcd->virt!=Normal) virt=bcd->virt;
+
+            if (inlineInheritedMembers)
+            {
+              if (!isStandardFunc(mi->memberDef))
+              {
+                //printf("    insertMember `%s'\n",mi->memberDef->name().data());
+                internalInsertMember(mi->memberDef,prot,FALSE);
+              }
+            }
+            //printf("Adding!\n");
+            MemberInfo *newMi=new MemberInfo(mi->memberDef,prot,virt,TRUE);
+            newMi->scopePath=bClass->name()+"::"+mi->scopePath;
+            newMi->ambigClass=mi->ambigClass;
+            newMi->ambiguityResolutionScope=mi->ambiguityResolutionScope.copy();
+            newMni->append(newMi);
+          }
+        }
+
+        // add it to the dictionary
+        dstMnd->append(newMni->memberName(),newMni);
+      }
+    }
+  }
+  //printf("  end mergeMembers\n");
+}
+
+//----------------------------------------------------------------------------
+
+/*! Merges the members of a Objective-C category into this class.
+ */
+void ClassDef::mergeCategory(ClassDef *category)
+{
+  category->m_categoryOf = this;
+    
+  MemberNameInfoSDict *srcMnd  = category->m_allMemberNameInfoSDict;
+  MemberNameInfoSDict *dstMnd  =           m_allMemberNameInfoSDict;
+
+  MemberNameInfoSDict::Iterator srcMnili(*srcMnd);
+  MemberNameInfo *srcMni;
+  for ( ; (srcMni=srcMnili.current()) ; ++srcMnili)
+  {
+    MemberNameInfo *dstMni=dstMnd->find(srcMni->memberName());
+    if (dstMni) // method is already defined in the class
+    {
+      // TODO: we should remove the other member and insert this one.
+    }
+    else // new method name
+    {
+      // create a deep copy of the list (only the MemberInfo's will be 
+      // copied, not the actual MemberDef's)
+      MemberNameInfo *newMni = 0;
+      newMni = new MemberNameInfo(srcMni->memberName()); 
+
+      // copy the member(s) from the category to this class
+      MemberNameInfoIterator mnii(*srcMni);
+      MemberInfo *mi;
+      for (;(mi=mnii.current());++mnii)
+      {
+        //printf("Adding!\n");
+        MemberInfo *newMi=new MemberInfo(mi->memberDef,mi->prot,mi->virt,mi->inherited);
+        newMi->scopePath=mi->scopePath;
+        newMi->ambigClass=mi->ambigClass;
+        newMi->ambiguityResolutionScope=mi->ambiguityResolutionScope.copy();
+        newMni->append(newMi);
+      }
+
+      // add it to the dictionary
+      dstMnd->append(newMni->memberName(),newMni);
+    }
+  }
+}
+
+//----------------------------------------------------------------------------
+
+void ClassDef::addUsedClass(ClassDef *cd,const char *accessName)
+{
+  if (m_usesImplClassDict==0) 
+  {
+    m_usesImplClassDict = new UsesClassDict(17); 
+    m_usesImplClassDict->setAutoDelete(TRUE);
+  }
+  UsesClassDef *ucd=m_usesImplClassDict->find(cd->name());
+  if (ucd==0)
+  {
+     ucd = new UsesClassDef(cd);
+     m_usesImplClassDict->insert(cd->name(),ucd);
+     //printf("Adding used class %s to class %s\n",
+     //    cd->name().data(),name().data());
+  }
+  ucd->addAccessor(accessName);
+}
+
+void ClassDef::addUsedByClass(ClassDef *cd,const char *accessName)
+{
+  if (m_usedByImplClassDict==0) 
+  {
+    m_usedByImplClassDict = new UsesClassDict(17); 
+    m_usedByImplClassDict->setAutoDelete(TRUE);
+  }
+  UsesClassDef *ucd=m_usedByImplClassDict->find(cd->name());
+  if (ucd==0)
+  {
+     ucd = new UsesClassDef(cd);
+     m_usedByImplClassDict->insert(cd->name(),ucd);
+     //printf("Adding used by class %s to class %s\n",
+     //    cd->name().data(),name().data());
+  }
+  ucd->addAccessor(accessName);
+}
+
+
+#if 0
+/*! Builds up a dictionary of all classes that are used by the state of this 
+ *  class (the "implementation"). 
+ *  Must be called before mergeMembers() is called!
+ */
+
+void ClassDef::determineImplUsageRelation()
+{
+  MemberNameInfoSDict::Iterator mnili(*m_allMemberNameInfoSDict);
+  MemberNameInfo *mni;
+  for (;(mni=mnili.current());++mnili)
+  {
+    MemberNameInfoIterator mnii(*mni);
+    MemberInfo *mi;
+    for (mnii.toFirst();(mi=mnii.current());++mnii)
+    {
+      MemberDef *md=mi->memberDef;
+      if (md->isVariable()) // for each member variable in this class
+      {
+        QCString type=removeRedundantWhiteSpace(md->typeString());
+        //printf("in class %s found var type=`%s' name=`%s'\n",
+        //            name().data(),type.data(),md->name().data());
+        int pos=0;
+        QCString usedClassName;
+        QCString templSpec;
+        bool found=FALSE;
+        while (extractClassNameFromType(type,pos,usedClassName,templSpec) && !found)
+        {
+          //printf("usedClassName=`%s' templSpec=%s\n",usedClassName.data(),templSpec.data());
+          // check if usedClassName is a template argument of its class
+          ClassDef *cd=md->getClassDef();
+          if (cd && cd->templateArguments())
+          {
+            ArgumentListIterator ali(*cd->templateArguments());
+            Argument *arg;
+            int count=0;
+            for (ali.toFirst();(arg=ali.current());++ali,++count)
+            {
+              if (arg->name==usedClassName) // type is a template argument
+              {
+                found=TRUE;
+                if (m_usesImplClassDict==0) m_usesImplClassDict = new UsesClassDict(257); 
+                cd = new ClassDef(cd->getDefFileName(),cd->getDefLine(),
+                    usedClassName,ClassDef::Class);
+                cd->setIsTemplateBaseClass(count);
+                UsesClassDef *ucd = new UsesClassDef(cd);
+                m_usesImplClassDict->insert(cd->name(),ucd);
+                ucd->templSpecifiers = templSpec;
+                ucd->addAccessor(md->name());
+                Doxygen::hiddenClasses.append(cd);
+                //printf("Adding used template argument %s to class %s\n",
+                //    cd->name().data(),name().data());
+                //printf("Adding accessor %s to class %s\n",
+                //    md->name().data(),ucd->classDef->name().data());
+              }
+            }
+          }
+
+          if (!found)
+          {
+            cd=0;
+            if (getNamespaceDef()!=0)
+            {
+              cd=getResolvedClass(getNamespaceDef()->name()+"::"+usedClassName,0,&templSpec);
+            }
+            if (cd==0) cd=getResolvedClass(name()+"::"+usedClassName,0,&templSpec);
+            if (cd==0) cd=getResolvedClass(usedClassName,0,&templSpec); // TODO: also try inbetween scopes!
+            //printf("Search for class %s result=%p\n",usedClassName.data(),cd);
+            if (cd) // class exists 
+            {
+              found=TRUE;
+              if (m_usesImplClassDict==0) 
+              {
+                m_usesImplClassDict = new UsesClassDict(257); 
+                m_usesImplClassDict->setAutoDelete(TRUE);
+              }
+              UsesClassDef *ucd=m_usesImplClassDict->find(cd->name());
+              if (ucd==0 || ucd->templSpecifiers!=templSpec)
+              {
+                ucd = new UsesClassDef(cd);
+                m_usesImplClassDict->insert(cd->name(),ucd);
+                ucd->templSpecifiers = templSpec;
+                //printf("Adding used class %s to class %s\n",
+                //    cd->name().data(),name().data());
+              }
+              ucd->addAccessor(md->name());
+              //printf("Adding accessor %s to class %s\n",
+              //    md->name().data(),ucd->classDef->name().data());
+            }
+          }
+        }
+      }
+    }
+  }
+#ifdef DUMP
+  if (m_usesClassDict)
+  {
+    msg("Class %s uses the following classes:\n",name().data());
+    UsesClassDictIterator ucdi(*m_usesClassDict);
+    UsesClassDef *ucd;
+    for (;(ucd=ucdi.current());++ucdi)
+    {
+      msg("  %s via ",ucd->classDef->name().data());
+      QDictIterator<void> dvi(*ucd->accessors); 
+      const char *s;
+      for (;(s=dvi.currentKey());++dvi)
+      {
+        msg("%s ",s);
+      }
+      msg("\n");
+    }
+  }
+#endif
+}
+
+//----------------------------------------------------------------------------
+
+// I have disabled this code because the graphs it renders quickly become
+// too large to be of practical use.
+
+void ClassDef::addUsedInterfaceClasses(MemberDef *md,const char *typeStr)
+{
+  QCString type = typeStr;
+  static const QRegExp re("[a-z_A-Z][a-z_A-Z0-9:]*");
+  int p=0,i,l;
+  while ((i=re.match(type,p,&l))!=-1) // for each class name in the type
+  {
+    ClassDef *cd=getClass(name()+"::"+type.mid(i,l));
+    if (cd==0) cd=getClass(type.mid(i,l)); // TODO: also try inbetween scopes!
+    if (cd && cd!=this && !isBaseClass(cd))
+    {
+      if (m_usesIntfClassDict==0) 
+      {
+        m_usesIntfClassDict = new UsesClassDict(257); 
+      }
+      UsesClassDef *ucd=m_usesIntfClassDict->find(cd->name());
+      if (ucd==0)
+      {
+        ucd = new UsesClassDef(cd);
+        m_usesIntfClassDict->insert(cd->name(),ucd);
+        //printf("in class `%s' adding used intf class `%s'\n",
+        //  name().data(),cd->name().data());
+      }
+      ucd->addAccessor(md->name());
+      //printf("in class `%s' adding accessor `%s' to class `%s'\n",
+      //    name().data(),md->name().data(),ucd->classDef->name().data());
+    }
+    p=i+l;
+  }
+}
+
+void ClassDef::determineIntfUsageRelation()
+{
+  MemberNameInfoSDict::Iterator mnili(*m_allMemberNameInfoList);
+  MemberNameInfo *mni;
+  for (;(mni=mnili.current());++mnili)
+  {
+    MemberNameInfoIterator mnii(*mni);
+    MemberInfo *mi;
+    for (mnii.toFirst();(mi=mnii.current());++mnii)
+    {
+      MemberDef *md=mi->memberDef;
+      
+      // compute the protection level for this member
+      Protection protect=md->protection();
+      if (mi->prot==Protected) // inherited protection
+      {
+        if (protect==Public) protect=Protected;
+        else if (protect==Protected) protect=Private;
+      }
+      
+      if (!md->name().isEmpty() && md->name()[0]!='@' && 
+          (mi->prot!=Private && protect!=Private)
+         )
+      {
+        // add classes found in the return type
+        addUsedInterfaceClasses(md,md->typeString());
+        ArgumentList *al = md->argumentList();
+        if (al) // member has arguments
+        {
+          // add classes found in the types of the argument list
+          ArgumentListIterator ali(*al);
+          Argument *a;
+          for (;(a=ali.current());++ali)
+          {
+            if (!a->type.isEmpty() && a->type.at(0)!='@')
+            {
+              addUsedInterfaceClasses(md,a->type);
+            }
+          }
+        }
+      }
+    }
+  }
+}
+#endif
+
+QCString ClassDef::compoundTypeString() const
+{
+  if (m_compType==Interface && m_isObjC) return "class";
+  switch (m_compType)
+  {
+    case Class:     return "class";
+    case Struct:    return "struct";
+    case Union:     return "union";
+    case Interface: return "interface";
+    case Protocol:  return "protocol";
+    case Category:  return "category";
+    case Exception: return "exception";
+  }
+  return "unknown";
+}
+
+QCString ClassDef::getOutputFileBase() const 
+{ 
+  if (m_templateMaster)
+  {
+    return m_templateMaster->getOutputFileBase();
+  }
+  else if (isReference())
+  {
+    return m_fileName;
+  }
+  else
+  {
+    return convertNameToFile(m_fileName); 
+  }
+}
+
+QCString ClassDef::getInstanceOutputFileBase() const 
+{ 
+  if (isReference())
+  {
+    return m_fileName;
+  }
+  else
+  {
+    return convertNameToFile(m_fileName); 
+  }
+}
+
+QCString ClassDef::getFileBase() const 
+{ 
+  if (m_templateMaster)
+  {
+    return m_templateMaster->getFileBase();
+  }
+  else
+  {
+    return m_fileName; 
+  }
+}
+
+QCString ClassDef::getSourceFileBase() const 
+{ 
+  if (m_templateMaster)
+  {
+    return m_templateMaster->getSourceFileBase();
+  }
+  else
+  {
+    return convertNameToFile(m_fileName+"-source"); 
+  }
+}
+
+void ClassDef::setGroupDefForAllMembers(GroupDef *gd,Grouping::GroupPri_t pri,const QCString &fileName,int startLine,bool hasDocs)
+{
+  gd->addClass(this);
+  //printf("ClassDef::setGroupDefForAllMembers(%s)\n",gd->name().data());
+  MemberNameInfoSDict::Iterator mnili(*m_allMemberNameInfoSDict);
+  MemberNameInfo *mni;
+  for (;(mni=mnili.current());++mnili)
+  {
+    MemberNameInfoIterator mnii(*mni);
+    MemberInfo *mi;
+    for (mnii.toFirst();(mi=mnii.current());++mnii)
+    {
+      MemberDef *md=mi->memberDef;
+      md->setGroupDef(gd,pri,fileName,startLine,hasDocs);
+      gd->insertMember(md,TRUE);
+      ClassDef *innerClass = md->getClassDefOfAnonymousType();
+      if (innerClass) innerClass->setGroupDefForAllMembers(gd,pri,fileName,startLine,hasDocs);
+    }
+  }
+}
+
+void ClassDef::addInnerCompound(Definition *d)
+{
+  m_innerClasses->inSort(d->localName(),(ClassDef *)d);
+}
+
+Definition *ClassDef::findInnerCompound(const char *name)
+{
+  if (name==0) return 0;
+  return m_innerClasses->find(name);
+}
+
+//void ClassDef::initTemplateMapping()
+//{
+//  m_templateMapping->clear();
+//  ArgumentList *al = templateArguments();
+//  if (al)
+//  {
+//    ArgumentListIterator ali(*al);
+//    Argument *arg;
+//    for (ali.toFirst();(arg=ali.current());++ali)
+//    {
+//      setTemplateArgumentMapping(arg->name,arg->defval);
+//    }
+//  }
+//}
+//void ClassDef::setTemplateArgumentMapping(const char *formal,const char *actual)
+//{
+//  //printf("ClassDef::setTemplateArgumentMapping(%s,%s)\n",formal,actual);
+//  if (m_templateMapping && formal)
+//  {
+//    if (m_templateMapping->find(formal))
+//    {
+//      m_templateMapping->remove(formal);
+//    }
+//    m_templateMapping->insert(formal,new QCString(actual));
+//  }
+//}
+//
+//QCString ClassDef::getTemplateArgumentMapping(const char *formal) const
+//{
+//  if (m_templateMapping && formal)
+//  {
+//    QCString *s = m_templateMapping->find(formal);
+//    if (s)
+//    {
+//      return *s;
+//    }
+//  }
+//  return "";
+//}
+
+ClassDef *ClassDef::insertTemplateInstance(const QCString &fileName,
+    int startLine, const QCString &templSpec,bool &freshInstance)
+{
+  freshInstance = FALSE;
+  if (m_templateInstances==0) 
+  {
+    m_templateInstances = new QDict<ClassDef>(17);
+  }
+  ClassDef *templateClass=m_templateInstances->find(templSpec);
+  if (templateClass==0)
+  {
+    Debug::print(Debug::Classes,0,"      New template instance class `%s'`%s'\n",name().data(),templSpec.data());
+    templateClass = new ClassDef(
+        fileName,startLine,name()+templSpec,ClassDef::Class);
+    templateClass->setTemplateMaster(this);
+    templateClass->setOuterScope(getOuterScope());
+    m_templateInstances->insert(templSpec,templateClass);
+    freshInstance=TRUE;
+  }
+  return templateClass;
+}
+
+ClassDef *ClassDef::getVariableInstance(const char *templSpec)
+{
+  if (m_variableInstances==0) 
+  {
+    m_variableInstances = new QDict<ClassDef>(17);
+    m_variableInstances->setAutoDelete(TRUE);
+  }
+  ClassDef *templateClass=m_variableInstances->find(templSpec);
+  if (templateClass==0)
+  {
+    Debug::print(Debug::Classes,0,"      New template variable instance class `%s'`%s'\n",name().data(),templSpec);
+    templateClass = new ClassDef("<code>",1,name()+templSpec,
+                        ClassDef::Class,0,0,FALSE);
+    templateClass->addMembersToTemplateInstance( this, templSpec );
+    templateClass->setTemplateMaster(this);
+    m_variableInstances->insert(templSpec,templateClass);
+  }
+  return templateClass;
+}
+
+void ClassDef::setTemplateBaseClassNames(QDict<int> *templateNames)
+{
+  if (templateNames==0) return;
+  if (m_templBaseClassNames==0)
+  {
+    m_templBaseClassNames = new QDict<int>(17);
+    m_templBaseClassNames->setAutoDelete(TRUE);
+  }
+  // make a deep copy of the dictionary.
+  QDictIterator<int> qdi(*templateNames);
+  for (;qdi.current();++qdi)
+  {
+    if (m_templBaseClassNames->find(qdi.currentKey())==0)
+    {
+      m_templBaseClassNames->insert(qdi.currentKey(),new int(*qdi.current()));
+    }
+  }
+}
+
+QDict<int> *ClassDef::getTemplateBaseClassNames() const
+{
+  return m_templBaseClassNames;
+}
+
+void ClassDef::addMembersToTemplateInstance(ClassDef *cd,const char *templSpec)
+{
+  //printf("%s::addMembersToTemplateInstance(%s,%s)\n",name().data(),cd->name().data(),templSpec);
+  MemberNameInfoSDict::Iterator mnili(*cd->m_allMemberNameInfoSDict);
+  MemberNameInfo *mni;
+  for (;(mni=mnili.current());++mnili)
+  {
+    MemberNameInfoIterator mnii(*mni);
+    MemberInfo *mi;
+    for (mnii.toFirst();(mi=mnii.current());++mnii)
+    {
+      ArgumentList *actualArguments = new ArgumentList;
+      stringToArgumentList(templSpec,actualArguments);
+      MemberDef *md = mi->memberDef;
+      MemberDef *imd = md->createTemplateInstanceMember(
+                          cd->templateArguments(),actualArguments);
+      delete actualArguments;
+      //printf("%s->setMemberClass(%p)\n",imd->name().data(),this);
+      imd->setMemberClass(this);
+      imd->setTemplateMaster(md);
+      imd->setDocumentation(md->documentation(),md->docFile(),md->docLine());
+      imd->setBriefDescription(md->briefDescription(),md->briefFile(),md->briefLine());
+      imd->setInbodyDocumentation(md->inbodyDocumentation(),md->inbodyFile(),md->inbodyLine());
+      imd->setMemberSpecifiers(md->getMemberSpecifiers());
+      insertMember(imd);
+      //printf("Adding member=%s %s%s to class %s templSpec %s\n",
+      //    imd->typeString(),imd->name().data(),imd->argsString(),
+      //    imd->getClassDef()->name().data(),templSpec);
+      // insert imd in the list of all members
+      //printf("Adding member=%s class=%s\n",imd->name().data(),name().data());
+      MemberName *mn = Doxygen::memberNameSDict[imd->name()];
+      if (mn==0)
+      {
+        mn = new MemberName(imd->name());
+        Doxygen::memberNameSDict.append(imd->name(),mn);
+      }
+      mn->append(imd);
+    }
+  }
+}
+
+QCString ClassDef::getReference() const
+{
+  if (m_templateMaster)
+  {
+    return m_templateMaster->getReference();
+  }
+  else
+  {
+    return Definition::getReference();
+  }
+}
+
+bool ClassDef::isReference() const
+{
+  if (m_templateMaster)
+  {
+    return m_templateMaster->isReference();
+  }
+  else
+  {
+    return Definition::isReference();
+  }
+}
+
+void ClassDef::getTemplateParameterLists(QList<ArgumentList> &lists) const
+{
+  Definition *d=getOuterScope();
+  if (d)
+  {
+    if (d->definitionType()==Definition::TypeClass)
+    {
+      ClassDef *cd=(ClassDef *)d;
+      cd->getTemplateParameterLists(lists);
+    }
+  }
+  if (templateArguments())
+  {
+    lists.append(templateArguments());
+  }
+}
+
+QCString ClassDef::qualifiedNameWithTemplateParameters(
+    QList<ArgumentList> *actualParams) const
+{
+  //printf("qualifiedNameWithTemplateParameters() localName=%s\n",localName().data());
+  QCString scName;
+  Definition *d=getOuterScope();
+  if (d)
+  {
+    if (d->definitionType()==Definition::TypeClass)
+    {
+      ClassDef *cd=(ClassDef *)d;
+      scName = cd->qualifiedNameWithTemplateParameters(actualParams);
+    }
+    else
+    {
+      scName = d->qualifiedName();
+    }
+  }
+
+  QCString scopeSeparator;
+  if (Config_getBool("OPTIMIZE_OUTPUT_JAVA")) 
+    scopeSeparator=".";
+  else
+    scopeSeparator="::";
+
+  if (!scName.isEmpty()) scName+=scopeSeparator;
+  scName+=localName();
+  ArgumentList *al=0;
+  bool isSpecialization = localName().find('<')!=-1;
+  if (templateArguments())
+  {
+    if (actualParams && (al=actualParams->current()))
+    {
+      if (!isSpecialization)
+      {
+        scName+=tempArgListToString(al);
+      }
+      actualParams->next();
+    }
+    else
+    {
+      if (!isSpecialization)
+      {
+        scName+=tempArgListToString(templateArguments());
+      }
+    }
+  }
+  //printf("qualifiedNameWithTemplateParameters: scope=%s qualifiedName=%s\n",name().data(),scName.data());
+  return scName;
+}
+
+QCString ClassDef::className() const
+{
+  return m_className;
+};
+
+void ClassDef::addListReferences()
+{
+  addRefItem(xrefListItems(),
+             theTranslator->trClass(TRUE,TRUE),
+             getOutputFileBase(),displayName()
+            );
+  MemberGroupSDict::Iterator mgli(*memberGroupSDict);
+  MemberGroup *mg;
+  for (;(mg=mgli.current());++mgli)
+  {
+    mg->addListReferences(this);
+  }
+  constructors.addListReferences(this);
+  typedefMembers.addListReferences(this);
+  enumMembers.addListReferences(this);
+  enumValMembers.addListReferences(this);
+  functionMembers.addListReferences(this);
+  relatedMembers.addListReferences(this);
+  variableMembers.addListReferences(this);
+  propertyMembers.addListReferences(this);
+  eventMembers.addListReferences(this);
+}
+
+MemberDef *ClassDef::getMemberByName(const QCString &name) 
+{
+  MemberDef *xmd = 0;
+  MemberNameInfo *mni = m_allMemberNameInfoSDict->find(name);
+  if (mni)
+  {
+    const int maxInheritanceDepth = 100000;
+    int mdist=maxInheritanceDepth;
+    MemberNameInfoIterator mnii(*mni);
+    MemberInfo *mi;
+    for (mnii.toFirst();(mi=mnii.current());++mnii)
+    {
+      ClassDef *mcd=mi->memberDef->getClassDef();
+      int m=minClassDistance(this,mcd);
+      //printf("found member in %s linkable=%d m=%d\n",
+      //    mcd->name().data(),mcd->isLinkable(),m);
+      if (m<mdist && mcd->isLinkable())
+      {
+        mdist=m;
+        xmd=mi->memberDef;
+      }
+    }
+  }
+  //printf("getMemberByName(%s)=%p\n",name.data(),xmd);
+  return xmd;
+}
+
diff -Naur tmp_unpack/doxygen-1.3.8.orig/src/filedef.cpp doxygen-1.3.8/src/filedef.cpp
--- tmp_unpack/doxygen-1.3.8.orig/src/filedef.cpp	2004-06-16 19:18:22.000000000 +0000
+++ doxygen-1.3.8/src/filedef.cpp	2007-07-26 07:30:15.000000000 +0000
@@ -271,7 +271,8 @@
       if (fd)
       {
         isIDLorJava = fd->name().right(4)==".idl" || 
-                      fd->name().right(5)==".pidl" ||
+                      fd->name().right(5)==".midl" || 
+	              fd->name().right(5)==".pidl" ||
                       fd->name().right(5)==".java";
       }
       ol.startTypewriter();
diff -Naur tmp_unpack/doxygen-1.3.8.orig/src/filedef.cpp.orig doxygen-1.3.8/src/filedef.cpp.orig
--- tmp_unpack/doxygen-1.3.8.orig/src/filedef.cpp.orig	1970-01-01 00:00:00.000000000 +0000
+++ doxygen-1.3.8/src/filedef.cpp.orig	2004-06-16 19:18:22.000000000 +0000
@@ -0,0 +1,1068 @@
+/******************************************************************************
+ *
+ * $Id: doxygen.patch,v 1.2 2007/12/12 14:03:17 mpasquat Exp $
+ *
+ * Copyright (C) 1997-2004 by Dimitri van Heesch.
+ *
+ * Permission to use, copy, modify, and distribute this software and its
+ * documentation under the terms of the GNU General Public License is hereby 
+ * granted. No representations are made about the suitability of this software 
+ * for any purpose. It is provided "as is" without express or implied warranty.
+ * See the GNU General Public License for more details.
+ *
+ * Documents produced by Doxygen are derivative works derived from the
+ * input used in their production; they are not affected by this license.
+ *
+ */
+
+#include "qtbc.h"
+#include "memberlist.h"
+#include "classlist.h"
+#include "filedef.h"
+#include "doxygen.h"
+#include "memberdef.h"
+#include "classdef.h"
+#include "namespacedef.h"
+#include "util.h"
+#include "language.h"
+#include "outputlist.h"
+#include "dot.h"
+#include "message.h"
+#include "code.h"
+#include "docparser.h"
+#include "ftvhelp.h"
+#include "searchindex.h"
+//#include "xml.h"
+
+class DevNullCodeDocInterface : public BaseCodeDocInterface
+{
+  public:
+    virtual void codify(const char *) {}
+    virtual void writeCodeLink(const char *ref,const char *file,
+                               const char *anchor,const char *name) 
+    { ref=ref; file=file; anchor=anchor; name=name; }
+    virtual void writeLineNumber(const char *,const char *,
+                                 const char *,int) {}
+    virtual void startCodeLine() {}
+    virtual void endCodeLine() {}
+    virtual void startCodeAnchor(const char *) {}
+    virtual void endCodeAnchor() {}
+    virtual void startFontClass(const char *) {}
+    virtual void endFontClass() {}
+    virtual void writeCodeAnchor(const char *) {}
+};
+
+
+
+/*! create a new file definition, where \a p is the file path, 
+    \a nm the file name, and \a ref is an HTML anchor name if the
+    file was read from a tag file or 0 otherwise
+*/
+FileDef::FileDef(const char *p,const char *nm,
+                 const char *lref,const char *dn)
+   : Definition((QCString)p+nm,1,nm)
+{
+  path=p;
+  filepath=path+nm;
+  filename=nm;
+  diskname=dn;
+  if (diskname.isEmpty()) diskname=nm;
+  setReference(lref);
+  //printf("new FileDef(path=%s,name=%s,ref=%s)\n",p,nm,lref);
+  classSDict     = new ClassSDict(17);
+  includeList   = new QList<IncludeInfo>;
+  includeList->setAutoDelete(TRUE);
+  includeDict   = new QDict<IncludeInfo>(61);
+  includedByList = new QList<IncludeInfo>;
+  includedByList->setAutoDelete(TRUE);
+  includedByDict = new QDict<IncludeInfo>(61);
+  namespaceSDict = new NamespaceSDict;
+  srcDefDict = 0;
+  srcMemberDict = 0;
+  usingDirList = 0;
+  usingDeclList = 0;
+  package = 0;
+  isSource = FALSE; 
+  docname = nm;
+  if (Config_getBool("FULL_PATH_NAMES"))
+  {
+    docname.prepend(stripFromPath(path.copy()));
+  }
+  memberGroupSDict = new MemberGroupSDict;
+  memberGroupSDict->setAutoDelete(TRUE);
+}
+
+/*! destroy the file definition */
+FileDef::~FileDef()
+{
+  delete classSDict;
+  delete includeDict;
+  delete includeList;
+  delete includedByDict;
+  delete includedByList;
+  delete namespaceSDict;
+  delete srcDefDict;
+  delete srcMemberDict;
+  delete usingDirList;
+  delete usingDeclList;
+  delete memberGroupSDict;
+}
+
+/*! Compute the HTML anchor names for all members in the class */ 
+void FileDef::computeAnchors()
+{
+  setAnchors(0,'a',&allMemberList);
+}
+
+void FileDef::distributeMemberGroupDocumentation()
+{
+  //printf("FileDef::distributeMemberGroupDocumentation()\n");
+  MemberGroupSDict::Iterator mgli(*memberGroupSDict);
+  MemberGroup *mg;
+  for (;(mg=mgli.current());++mgli)
+  {
+    mg->distributeMemberGroupDocumentation();
+  }
+}
+
+void FileDef::findSectionsInDocumentation()
+{
+  docFindSections(documentation(),this,0,docFile());
+  MemberGroupSDict::Iterator mgli(*memberGroupSDict);
+  MemberGroup *mg;
+  for (;(mg=mgli.current());++mgli)
+  {
+    mg->findSectionsInDocumentation();
+  }
+  decDefineMembers.findSectionsInDocumentation();
+  decProtoMembers.findSectionsInDocumentation();
+  decTypedefMembers.findSectionsInDocumentation();
+  decEnumMembers.findSectionsInDocumentation();
+  decFuncMembers.findSectionsInDocumentation();
+  decVarMembers.findSectionsInDocumentation();
+}
+
+void FileDef::writeDetailedDocumentation(OutputList &ol)
+{
+  if ((!briefDescription().isEmpty() && Config_getBool("REPEAT_BRIEF")) || 
+      !documentation().isEmpty() 
+     )
+  {
+    ol.writeRuler();
+    ol.pushGeneratorState();
+    ol.disable(OutputGenerator::Latex);
+    ol.disable(OutputGenerator::RTF);
+    ol.writeAnchor(0,"_details"); 
+    ol.popGeneratorState();
+    ol.startGroupHeader();
+    ol.parseText(theTranslator->trDetailedDescription());
+    ol.endGroupHeader();
+    if (!briefDescription().isEmpty() && Config_getBool("REPEAT_BRIEF"))
+    {
+      ol.parseDoc(briefFile(),briefLine(),this,0,briefDescription(),FALSE,FALSE);
+    }
+    if (!briefDescription().isEmpty() && Config_getBool("REPEAT_BRIEF") && 
+        !documentation().isEmpty())
+    {
+      ol.pushGeneratorState();
+        ol.disable(OutputGenerator::Man);
+        ol.newParagraph();
+        ol.enableAll();
+        ol.disableAllBut(OutputGenerator::Man);
+        ol.writeString("\n\n");
+      ol.popGeneratorState();
+    }
+    if (!documentation().isEmpty())
+    {
+      //if (doc.at(dl-1)!='.' && doc.at(dl-1)!='!' && doc.at(dl-1)!='?') 
+      //  doc+='.';
+      ol.parseDoc(docFile(),docLine(),this,0,documentation()+"\n",TRUE,FALSE);
+    }
+    //printf("Writing source ref for file %s\n",name().data());
+    if (Config_getBool("SOURCE_BROWSER")) 
+    {
+      ol.newParagraph();
+      QCString refText = theTranslator->trDefinedInSourceFile();
+      int fileMarkerPos = refText.find("@0");
+      if (fileMarkerPos!=-1) // should always pass this.
+      {
+        ol.parseText(refText.left(fileMarkerPos)); //text left from marker 1
+        ol.writeObjectLink(0,getSourceFileBase(),
+            0,name());
+        ol.parseText(refText.right(
+              refText.length()-fileMarkerPos-2)); // text right from marker 2
+      }
+    }
+  }
+}
+
+/*! Write the documentation page for this file to the file of output
+    generators \a ol. 
+*/
+void FileDef::writeDocumentation(OutputList &ol)
+{
+  //funcList->countDecMembers();
+  
+  //QCString fn = name();
+  //if (Config_getBool("FULL_PATH_NAMES"))
+  //{
+  //  fn.prepend(stripFromPath(getPath().copy()));
+  //}
+
+  //printf("WriteDocumentation diskname=%s\n",diskname.data());
+  
+  QCString pageTitle=theTranslator->trFileReference(docname);
+  startFile(ol,getOutputFileBase(),name(),pageTitle);
+  startTitle(ol,getOutputFileBase());
+  ol.parseText(pageTitle);
+  addGroupListToTitle(ol,this);
+  endTitle(ol,getOutputFileBase(),docName());
+  //ol.newParagraph();
+  
+  if (Config_getBool("SEARCHENGINE"))
+  {
+    Doxygen::searchIndex->setCurrentDoc(pageTitle,getOutputFileBase());
+    Doxygen::searchIndex->addWord(localName().lower());
+  }
+  
+  if (!Config_getString("GENERATE_TAGFILE").isEmpty()) 
+  {
+    Doxygen::tagFile << "  <compound kind=\"file\">" << endl;
+    Doxygen::tagFile << "    <name>" << convertToXML(name()) << "</name>" << endl;
+    Doxygen::tagFile << "    <path>" << convertToXML(getPath()) << "</path>" << endl;
+    Doxygen::tagFile << "    <filename>" 
+                     << convertToXML(getOutputFileBase()) 
+                     << "</filename>" << endl;
+  }
+  
+  if (Config_getBool("DETAILS_AT_TOP"))
+  {
+    ol.startTextBlock(); 
+    writeDetailedDocumentation(ol);
+    ol.endTextBlock();
+  }
+  else if (!briefDescription().isEmpty()) 
+  {
+    ol.parseDoc(briefFile(),briefLine(),this,0,briefDescription(),TRUE,FALSE);
+    //ol.writeString(" \n");
+    ol.disableAllBut(OutputGenerator::Html);
+    ol.startTextLink(0,"_details");
+    ol.parseText(theTranslator->trMore());
+    ol.endTextLink();
+    ol.enableAll();
+
+    ol.pushGeneratorState();
+    ol.disable(OutputGenerator::Man);
+    ol.disable(OutputGenerator::RTF);
+    ol.newParagraph();
+    ol.popGeneratorState();
+  }
+  ol.writeSynopsis();
+ 
+  if (Config_getBool("SHOW_INCLUDE_FILES") && includeList->count()>0)
+  {
+    ol.startTextBlock(TRUE);
+    QListIterator<IncludeInfo> ili(*includeList);
+    IncludeInfo *ii;
+    for (;(ii=ili.current());++ili)
+    {
+      FileDef *fd=ii->fileDef;
+      bool isIDLorJava = FALSE;
+      if (fd)
+      {
+        isIDLorJava = fd->name().right(4)==".idl" || 
+                      fd->name().right(5)==".pidl" ||
+                      fd->name().right(5)==".java";
+      }
+      ol.startTypewriter();
+      if (isIDLorJava)
+      {
+        ol.docify("import ");
+      }
+      else
+      {
+        ol.docify("#include ");
+      }
+      if (ii->local || isIDLorJava)
+        ol.docify("\"");
+      else
+        ol.docify("<");
+      ol.disable(OutputGenerator::Html);
+      ol.docify(ii->includeName);
+      ol.enableAll();
+      ol.disableAllBut(OutputGenerator::Html);
+      
+      // Here we use the include file name as it appears in the file.
+      // we could also we the name as it is used within doxygen,
+      // then we should have used fd->docName() instead of ii->includeName
+      if (fd && fd->isLinkable())
+      {
+        ol.writeObjectLink(fd->getReference(),
+            fd->generateSourceFile() ? fd->includeName() : fd->getOutputFileBase(),
+            0,ii->includeName);
+        if (!Config_getString("GENERATE_TAGFILE").isEmpty() && !fd->isReference()) 
+        {
+          const char *locStr = (ii->local || isIDLorJava) ? "yes" : "no";
+          Doxygen::tagFile << "    <includes id=\"" 
+                           << convertToXML(fd->getOutputFileBase()) 
+                           << "\" name=\"" 
+                           << convertToXML(fd->name())
+                           << "\" local=\"" << locStr << "\">" 
+                           << convertToXML(ii->includeName)
+                           << "</includes>" 
+                           << endl;
+        }
+      }
+      else
+      {
+        ol.docify(ii->includeName);
+      }
+      
+      ol.enableAll();
+      if (ii->local || isIDLorJava)
+        ol.docify("\"");
+      else
+        ol.docify(">");
+      if (isIDLorJava) 
+        ol.docify(";");
+      ol.endTypewriter();
+      ol.lineBreak();
+    }
+    ol.endTextBlock();
+  }
+  
+  if (Config_getBool("HAVE_DOT") && Config_getBool("INCLUDE_GRAPH"))
+  {
+    //printf("Graph for file %s\n",name().data());
+    DotInclDepGraph incDepGraph(this,Config_getInt("MAX_DOT_GRAPH_DEPTH"),FALSE);
+    if (!incDepGraph.isTrivial())
+    {
+      ol.startTextBlock(); 
+      ol.disable(OutputGenerator::Man);
+      ol.newParagraph();
+      ol.startInclDepGraph();
+      ol.parseText(theTranslator->trInclDepGraph(name()));
+      ol.endInclDepGraph(incDepGraph);
+      ol.enableAll();
+      ol.endTextBlock(TRUE);
+    }
+    //incDepGraph.writeGraph(Config_getString("HTML_OUTPUT"),fd->getOutputFileBase());
+  }
+
+  if (Config_getBool("HAVE_DOT") && Config_getBool("INCLUDED_BY_GRAPH"))
+  {
+    //printf("Graph for file %s\n",name().data());
+    DotInclDepGraph incDepGraph(this,Config_getInt("MAX_DOT_GRAPH_DEPTH"),TRUE);
+    if (!incDepGraph.isTrivial())
+    {
+      ol.startTextBlock(); 
+      ol.disable(OutputGenerator::Man);
+      ol.newParagraph();
+      ol.startInclDepGraph();
+      ol.parseText(theTranslator->trInclByDepGraph());
+      ol.endInclDepGraph(incDepGraph);
+      ol.enableAll();
+      ol.endTextBlock(TRUE);
+    }
+    //incDepGraph.writeGraph(Config_getString("HTML_OUTPUT"),fd->getOutputFileBase());
+  }
+
+  //printf("%s: generateSourceFile()=%d\n",name().data(),generateSourceFile());
+  if (generateSourceFile())
+  {
+    ol.disableAllBut(OutputGenerator::Html);
+    ol.newParagraph();
+    ol.startTextLink(includeName(),0);
+    ol.parseText(theTranslator->trGotoSourceCode());
+    ol.endTextLink();
+    ol.enableAll();
+  }
+  
+  ol.startMemberSections();
+
+  if (namespaceSDict->count()>0)
+  {
+    NamespaceSDict::Iterator ndi(*namespaceSDict);
+    NamespaceDef *nd;
+    bool found=FALSE;
+    for (ndi.toFirst();(nd=ndi.current());++ndi)
+    {
+      if (nd->name().find('@')==-1)
+      {
+        if (!found)
+        {
+          ol.startMemberHeader();
+          ol.parseText(theTranslator->trNamespaces());
+          ol.endMemberHeader();
+          ol.startMemberList();
+          found=TRUE;
+        }
+        ol.startMemberItem(0);
+        ol.writeString("namespace ");
+        ol.insertMemberAlign();
+        if (nd->isLinkable()) 
+        {
+          ol.writeObjectLink(nd->getReference(),
+              nd->getOutputFileBase(),
+              0,
+              nd->displayName()
+          );
+          if (!Config_getString("GENERATE_TAGFILE").isEmpty()) 
+          {
+            Doxygen::tagFile << "    <namespace>" << convertToXML(nd->name()) << "</namespace>" << endl;
+          }
+        }
+        else
+        {
+          ol.startBold();
+          ol.docify(nd->displayName());
+          ol.endBold();
+        }
+        ol.endMemberItem();
+      }
+    }
+    if (found) ol.endMemberList();
+  }
+
+  classSDict->writeDeclaration(ol);
+  
+  /* write user defined member groups */
+  MemberGroupSDict::Iterator mgli(*memberGroupSDict);
+  MemberGroup *mg;
+  for (;(mg=mgli.current());++mgli)
+  {
+    if (mg->header()!="[NOHEADER]")
+    {
+      mg->writeDeclarations(ol,0,0,this,0);
+    }
+  }
+
+  //allMemberList.writeDeclarations(ol,0,0,this,0,0,0);
+  decDefineMembers.writeDeclarations(ol,0,0,this,0,theTranslator->trDefines(),0);
+  decProtoMembers.writeDeclarations(ol,0,0,this,0,theTranslator->trFuncProtos(),0);
+  decTypedefMembers.writeDeclarations(ol,0,0,this,0,theTranslator->trTypedefs(),0);
+  decEnumMembers.writeDeclarations(ol,0,0,this,0,theTranslator->trEnumerations(),0);
+  decFuncMembers.writeDeclarations(ol,0,0,this,0,theTranslator->trFunctions(),0);
+  decVarMembers.writeDeclarations(ol,0,0,this,0,theTranslator->trVariables(),0);
+  ol.endMemberSections();
+
+  if (!Config_getBool("DETAILS_AT_TOP"))
+  {
+    writeDetailedDocumentation(ol);
+  }
+
+  docDefineMembers.writeDocumentation(ol,name(),this,
+                            theTranslator->trDefineDocumentation());
+  
+  docProtoMembers.writeDocumentation(ol,name(),this,
+                            theTranslator->trFunctionPrototypeDocumentation());
+
+  docTypedefMembers.writeDocumentation(ol,name(),this,
+                            theTranslator->trTypedefDocumentation());
+  
+  docEnumMembers.writeDocumentation(ol,name(),this,
+                            theTranslator->trEnumerationTypeDocumentation());
+
+  docFuncMembers.writeDocumentation(ol,name(),this,
+                            theTranslator->trFunctionDocumentation());
+  
+  docVarMembers.writeDocumentation(ol,name(),this,
+                            theTranslator->trVariableDocumentation());
+  
+  // write Author section (Man only)
+  ol.disableAllBut(OutputGenerator::Man);
+  ol.startGroupHeader();
+  ol.parseText(theTranslator->trAuthor(TRUE,TRUE));
+  ol.endGroupHeader();
+  ol.parseText(theTranslator->trGeneratedAutomatically(Config_getString("PROJECT_NAME")));
+  ol.enableAll();
+
+  if (!Config_getString("GENERATE_TAGFILE").isEmpty()) 
+  {
+    writeDocAnchorsToTagFile();
+    Doxygen::tagFile << "  </compound>" << endl;
+  }
+
+  endFile(ol);
+}
+
+/*! Write a source listing of this file to the output */
+void FileDef::writeSource(OutputList &ol)
+{
+  ol.disableAllBut(OutputGenerator::Html);
+  startFile(ol,getSourceFileBase(),0,theTranslator->trSourceFile(docname));
+  startTitle(ol,0);
+  ol.parseText(docname);
+  endTitle(ol,0,0);
+
+  if (isLinkable())
+  {
+    ol.startTextLink(getOutputFileBase(),0);
+    ol.parseText(theTranslator->trGotoDocumentation());
+    ol.endTextLink();
+  }
+
+  initParseCodeContext();
+  ol.startCodeFragment();
+  parseCode(ol,0,
+            fileToString(absFilePath(),Config_getBool("FILTER_SOURCE_FILES")),
+            FALSE,0,this
+           );
+  ol.endCodeFragment();
+  endFile(ol);
+  ol.enableAll();
+}
+
+void FileDef::parseSource()
+{
+  DevNullCodeDocInterface devNullIntf;
+  parseCode(devNullIntf,0,
+            fileToString(absFilePath(),Config_getBool("FILTER_SOURCE_FILES")),
+            FALSE,0,this
+           );
+}
+
+void FileDef::addMembersToMemberGroup()
+{
+  ::addMembersToMemberGroup(&decDefineMembers,memberGroupSDict,this);
+  ::addMembersToMemberGroup(&decProtoMembers,memberGroupSDict,this);
+  ::addMembersToMemberGroup(&decTypedefMembers,memberGroupSDict,this);
+  ::addMembersToMemberGroup(&decEnumMembers,memberGroupSDict,this);
+  ::addMembersToMemberGroup(&decFuncMembers,memberGroupSDict,this);
+  ::addMembersToMemberGroup(&decVarMembers,memberGroupSDict,this);
+}
+
+/*! Adds member definition \a md to the list of all members of this file */
+void FileDef::insertMember(MemberDef *md)
+{
+  //printf("%s:FileDef::insertMember(%s)\n",name().data(),md->name().data());
+  allMemberList.append(md); 
+  bool sortBriefDocs = Config_getBool("SORT_BRIEF_DOCS");
+  bool sortMemberDocs = Config_getBool("SORT_MEMBER_DOCS");
+  switch(md->memberType())
+  {
+    case MemberDef::Variable:     
+    case MemberDef::Property:     
+      if (sortBriefDocs)
+        decVarMembers.inSort(md);
+      else
+        decVarMembers.append(md);
+      if (sortMemberDocs)
+        docVarMembers.inSort(md); 
+      else
+        docVarMembers.append(md);
+      break;
+    case MemberDef::Function: 
+      if (sortBriefDocs)
+        decFuncMembers.inSort(md);
+      else
+        decFuncMembers.append(md);
+      if (sortMemberDocs)    
+        docFuncMembers.inSort(md); 
+      else
+        docFuncMembers.append(md);
+      break;
+    case MemberDef::Typedef:      
+      if (sortBriefDocs)
+        decTypedefMembers.inSort(md);
+      else
+        decTypedefMembers.append(md);
+      if (sortMemberDocs)
+        docTypedefMembers.inSort(md); 
+      else
+        docTypedefMembers.append(md);
+      break;
+    case MemberDef::Enumeration:  
+      if (sortBriefDocs)
+        decEnumMembers.inSort(md);
+      else
+        decEnumMembers.append(md);
+      if (sortMemberDocs)
+        docEnumMembers.inSort(md); 
+      else
+        docEnumMembers.append(md);
+      break;
+    case MemberDef::EnumValue:    // enum values are shown inside their enums
+      break;
+    case MemberDef::Prototype:    
+      if (sortBriefDocs)
+        decProtoMembers.inSort(md);
+      else
+        decProtoMembers.append(md);
+      if (sortMemberDocs)
+        docProtoMembers.inSort(md); 
+      else
+        docProtoMembers.append(md);
+      break;
+    case MemberDef::Define:       
+      if (sortBriefDocs)
+        decDefineMembers.inSort(md);
+      else
+        decDefineMembers.append(md);
+      if (sortMemberDocs)
+        docDefineMembers.inSort(md); 
+      else
+        docDefineMembers.append(md);
+      break;
+    default:
+       err("FileDef::insertMembers(): "
+           "member `%s' with class scope `%s' inserted in file scope `%s'!\n",
+           md->name().data(),
+           md->getClassDef() ? md->getClassDef()->name().data() : "",
+           name().data());
+  }
+  //addMemberToGroup(md,groupId);
+}
+
+/*! Adds compound definition \a cd to the list of all compounds of this file */
+void FileDef::insertClass(ClassDef *cd)
+{
+  if (Config_getBool("SORT_BRIEF_DOCS"))
+    classSDict->inSort(cd->name(),cd);
+  else
+    classSDict->append(cd->name(),cd);
+}
+
+/*! Adds namespace definition \a nd to the list of all compounds of this file */
+void FileDef::insertNamespace(NamespaceDef *nd)
+{
+  if (!nd->name().isEmpty() && namespaceSDict->find(nd->name())==0)
+  {
+    if (Config_getBool("SORT_BRIEF_DOCS"))
+      namespaceSDict->inSort(nd->name(),nd);
+    else
+      namespaceSDict->append(nd->name(),nd);
+  }
+}
+
+void FileDef::addSourceRef(int line,Definition *d,MemberDef *md)
+{
+  if (d)
+  {
+    if (srcDefDict==0)    srcDefDict    = new QIntDict<Definition>(257);
+    if (srcMemberDict==0) srcMemberDict = new QIntDict<MemberDef>(257);
+    srcDefDict->insert(line,d);
+    if (md) srcMemberDict->insert(line,md);
+    //printf("Adding member %s with anchor %s at line %d to file %s\n",
+    //    d->name().data(),anchor,line,name().data());
+  }
+}
+
+Definition *FileDef::getSourceDefinition(int lineNr)
+{
+  Definition *result=0;
+  if (srcDefDict)
+  {
+    result = srcDefDict->find(lineNr);
+  }
+  return result;
+}
+
+MemberDef *FileDef::getSourceMember(int lineNr)
+{
+  MemberDef *result=0;
+  if (srcMemberDict)
+  {
+    result = srcMemberDict->find(lineNr);
+  }
+  return result;
+}
+
+
+void FileDef::addUsingDirective(NamespaceDef *nd)
+{
+  if (usingDirList==0)
+  {
+    usingDirList = new NamespaceSDict;
+  }
+  if (usingDirList->find(nd->qualifiedName())==0)
+  {
+    usingDirList->append(nd->qualifiedName(),nd);
+  }
+}
+
+void FileDef::addUsingDeclaration(Definition *d)
+{
+  if (usingDeclList==0)
+  {
+    usingDeclList = new SDict<Definition>(17);
+  }
+  if (usingDeclList->find(d->qualifiedName())==0)
+  {
+    usingDeclList->append(d->qualifiedName(),d);
+  }
+}
+
+void FileDef::addIncludeDependency(FileDef *fd,const char *incName,bool local)
+{
+  //printf("FileDef::addIncludeDependency(%p,%s,%d)\n",fd,incName,local);
+  QCString iName = fd ? fd->absFilePath().data() : incName;
+  if (!iName.isEmpty() && includeDict->find(iName)==0)
+  {
+    IncludeInfo *ii = new IncludeInfo;
+    ii->fileDef     = fd;
+    ii->includeName = incName;
+    ii->local       = local;
+    includeList->append(ii);
+    includeDict->insert(iName,ii);
+  }
+}
+
+void FileDef::addIncludedUsingDirectives()
+{
+  if (visited) return;
+  visited=TRUE;
+  //printf("( FileDef::addIncludedUsingDirectives for file %s\n",name().data());
+
+  NamespaceList nl;
+  if (includeList) // file contains #includes
+  {
+    {
+      QListIterator<IncludeInfo> iii(*includeList);
+      IncludeInfo *ii;
+      for (iii.toFirst();(ii=iii.current());++iii) // foreach #include...
+      {
+        if (ii->fileDef && !ii->fileDef->visited) // ...that is a known file
+        {
+          // recurse into this file
+          ii->fileDef->addIncludedUsingDirectives();
+        }
+      }
+    }
+    {
+      QListIterator<IncludeInfo> iii(*includeList);
+      IncludeInfo *ii;
+      // iterate through list from last to first
+      for (iii.toLast();(ii=iii.current());--iii)
+      {
+        if (ii->fileDef && ii->fileDef!=this)
+        {
+          NamespaceSDict *unl = ii->fileDef->usingDirList;
+          if (unl)
+          {
+            NamespaceSDict::Iterator nli(*unl);
+            NamespaceDef *nd;
+            for (nli.toLast();(nd=nli.current());--nli)
+            {
+              // append each using directive found in a #include file
+              if (usingDirList==0) usingDirList = new NamespaceSDict;
+              //printf("Prepending used namespace %s to the list of file %s\n",
+              //    nd->name().data(),name().data());
+              usingDirList->prepend(nd->qualifiedName(),nd);
+            }
+          }
+        }
+      }
+    }
+  }
+  //printf(") end FileDef::addIncludedUsingDirectives for file %s\n",name().data());
+}
+
+
+void FileDef::addIncludedByDependency(FileDef *fd,const char *incName,bool local)
+{
+  //printf("FileDef::addIncludedByDependency(%p,%s,%d)\n",fd,incName,local);
+  QCString iName = fd ? fd->absFilePath().data() : incName;
+  if (!iName.isEmpty() && includedByDict->find(iName)==0)
+  {
+    IncludeInfo *ii = new IncludeInfo;
+    ii->fileDef     = fd;
+    ii->includeName = incName;
+    ii->local       = local;
+    includedByList->append(ii);
+    includedByDict->insert(iName,ii);
+  }
+}
+
+bool FileDef::isIncluded(const QCString &name) const
+{
+  if (name.isEmpty()) return FALSE;
+  return includeDict->find(name)!=0;
+}
+
+bool FileDef::generateSourceFile() const 
+{ 
+  QCString extension = name().right(4);
+  return !isReference() && 
+         (Config_getBool("SOURCE_BROWSER") || 
+           (Config_getBool("VERBATIM_HEADERS") && guessSection(name())==Entry::HEADER_SEC) 
+         ) &&
+         extension!=".doc" && extension!=".txt" && extension!=".dox"; 
+}
+
+
+void FileDef::addListReferences()
+{
+  addRefItem(xrefListItems(),
+             theTranslator->trFile(TRUE,TRUE),
+             getOutputFileBase(),name()
+            );
+  MemberGroupSDict::Iterator mgli(*memberGroupSDict);
+  MemberGroup *mg;
+  for (;(mg=mgli.current());++mgli)
+  {
+    mg->addListReferences(this);
+  }
+  docDefineMembers.addListReferences(this);
+  docProtoMembers.addListReferences(this);
+  docTypedefMembers.addListReferences(this);
+  docEnumMembers.addListReferences(this);
+  docFuncMembers.addListReferences(this);
+  docVarMembers.addListReferences(this);
+}
+
+//-------------------------------------------------------------------
+
+static int findMatchingPart(const QCString &path,const QCString dir)
+{
+  int si1;
+  int pos1=0,pos2=0;
+  while ((si1=path.find('/',pos1))!=-1)
+  {
+    int si2=dir.find('/',pos2);
+    //printf("  found slash at pos %d in path %d: %s<->%s\n",si1,si2,
+    //    path.mid(pos1,si1-pos2).data(),dir.mid(pos2).data());
+    if (si2==-1 && path.mid(pos1,si1-pos2)==dir.mid(pos2)) // match at end
+    {
+      return dir.length();
+    }
+    if (si1!=si2 || path.mid(pos1,si1-pos2)!=dir.mid(pos2,si2-pos2)) // no match in middle
+    {
+      return QMAX(pos1-1,0);
+    }
+    pos1=si1+1;
+    pos2=si2+1;
+  }
+  return 0;
+}
+
+static Directory *findDirNode(Directory *root,const QCString &name)
+{
+  QListIterator<DirEntry> dli(root->children());
+  DirEntry *de;
+  for (dli.toFirst();(de=dli.current());++dli)
+  {
+    if (de->kind()==DirEntry::Dir)
+    {
+      Directory *dir = (Directory *)de;
+      QCString dirName=dir->name();
+      int sp=findMatchingPart(name,dirName);
+      //printf("findMatchingPart(%s,%s)=%d\n",name.data(),dirName.data(),sp);
+      if (sp>0) // match found
+      {
+        if ((uint)sp==dirName.length()) // whole directory matches
+        {
+          // recurse into the directory
+          return findDirNode(dir,name.mid(dirName.length()+1));
+        } 
+        else // partial match => we need to split the path into three parts
+        {
+          QCString baseName     =dirName.left(sp);
+          QCString oldBranchName=dirName.mid(sp+1);
+          QCString newBranchName=name.mid(sp+1);
+          // strip file name from path
+          int newIndex=newBranchName.findRev('/');
+          if (newIndex>0) newBranchName=newBranchName.left(newIndex);
+
+          //printf("Splitting off part in new branch \n"
+          //    "base=%s old=%s new=%s\n",
+          //    baseName.data(),
+          //    oldBranchName.data(),
+          //    newBranchName.data()
+          //      );
+          Directory *base = new Directory(root,baseName);
+          Directory *newBranch = new Directory(base,newBranchName);
+          dir->reParent(base);
+          dir->rename(oldBranchName);
+          base->addChild(dir);
+          base->addChild(newBranch);
+          dir->setLast(FALSE);
+          // remove DirEntry container from list (without deleting it)
+          root->children().setAutoDelete(FALSE);
+          root->children().removeRef(dir);
+          root->children().setAutoDelete(TRUE);
+          // add new branch to the root
+          if (!root->children().isEmpty())
+          {
+            root->children().last()->setLast(FALSE); 
+          }
+          root->addChild(base);
+          return newBranch;
+        }
+      }
+    }
+  }
+  int si=name.findRev('/');
+  if (si==-1) // no subdir
+  {
+    return root; // put the file under the root node.
+  }
+  else // need to create a subdir 
+  {
+    QCString baseName = name.left(si);
+    //printf("new subdir %s\n",baseName.data());
+    Directory *newBranch = new Directory(root,baseName);
+    if (!root->children().isEmpty())
+    {
+      root->children().last()->setLast(FALSE); 
+    }
+    root->addChild(newBranch);
+    return newBranch;
+  }
+}
+
+static void mergeFileDef(Directory *root,FileDef *fd)
+{
+  QCString rootPath = root->name();
+  QCString filePath = fd->absFilePath();
+  //printf("merging %s\n",filePath.data());
+  Directory *dirNode = findDirNode(root,filePath);
+  if (!dirNode->children().isEmpty())
+  {
+    dirNode->children().last()->setLast(FALSE); 
+  }
+  DirEntry *e=new DirEntry(dirNode,fd);
+  dirNode->addChild(e);
+}
+
+static void generateIndent(QTextStream &t,DirEntry *de,int level)
+{
+  if (de->parent())
+  {
+    generateIndent(t,de->parent(),level+1);
+  }
+  // from the root up to node n do...
+  if (level==0) // item before a dir or document
+  {
+    if (de->isLast())
+    {
+      if (de->kind()==DirEntry::Dir)
+      {
+        t << "<img " << FTV_IMGATTRIBS(plastnode) << "/>";
+      }
+      else
+      {
+        t << "<img " << FTV_IMGATTRIBS(lastnode) << "/>";
+      }
+    }
+    else
+    {
+      if (de->kind()==DirEntry::Dir)
+      {
+        t << "<img " << FTV_IMGATTRIBS(pnode) << "/>";
+      }
+      else
+      {
+        t << "<img " << FTV_IMGATTRIBS(node) << "/>";
+      }
+    }
+  }
+  else // item at another level
+  {
+    if (de->isLast())
+    {
+      t << "<img " << FTV_IMGATTRIBS(blank) << "/>";
+    }
+    else
+    {
+      t << "<img " << FTV_IMGATTRIBS(vertline) << "/>";
+    }
+  }
+}
+
+
+static void writeDirTreeNode(QTextStream &t,Directory *root,int level)
+{
+  QCString indent;
+  indent.fill(' ',level*2);
+  QListIterator<DirEntry> dli(root->children());
+  DirEntry *de;
+  for (dli.toFirst();(de=dli.current());++dli)
+  {
+    t << indent << "<p>";
+    generateIndent(t,de,0);
+    if (de->kind()==DirEntry::Dir)
+    {
+      Directory *dir=(Directory *)de;
+      //printf("%s [dir]: %s (last=%d,dir=%d)\n",indent.data(),dir->name().data(),dir->isLast(),dir->kind()==DirEntry::Dir);
+      t << "<img " << FTV_IMGATTRIBS(folderclosed) << "/>";
+      t << dir->name();
+      t << "</p>\n";
+      t << indent << "<div>\n";
+      writeDirTreeNode(t,dir,level+1);
+      t << indent << "</div>\n";
+    }
+    else
+    {
+      //printf("%s [file]: %s (last=%d,dir=%d)\n",indent.data(),de->file()->name().data(),de->isLast(),de->kind()==DirEntry::Dir);
+      t << "<img " << FTV_IMGATTRIBS(doc) << "/>";
+      t << de->file()->name();
+      t << "</p>\n";
+    }
+  }
+}
+
+void generateFileTree(QTextStream &t)
+{
+  FTVHelp::generateTreeViewImages();
+  
+  Directory *root=new Directory(0,"");
+  root->setLast(TRUE);
+  FileNameListIterator fnli(Doxygen::inputNameList); 
+  FileName *fn;
+  for (fnli.toFirst();(fn=fnli.current());++fnli)
+  {
+    FileNameIterator fni(*fn);
+    FileDef *fd;
+    for (;(fd=fni.current());++fni)
+    {
+      mergeFileDef(root,fd);
+    }
+  }
+  t << "<div class=\"directory\">\n";
+  writeDirTreeNode(t,root,0);
+  t << "</div>\n";
+  delete root;
+}
+
+void FileDef::combineUsingRelations()
+{
+  if (visited) return; // already done
+  visited=TRUE;
+  if (usingDirList)
+  {
+    NamespaceSDict::Iterator nli(*usingDirList);
+    NamespaceDef *nd;
+    for (nli.toFirst();(nd=nli.current());++nli)
+    {
+      nd->combineUsingRelations();
+    }
+    for (nli.toFirst();(nd=nli.current());++nli)
+    {
+      // add used namespaces of namespace nd to this namespace
+      if (nd->getUsedNamespaces())
+      {
+        NamespaceSDict::Iterator unli(*nd->getUsedNamespaces());
+        NamespaceDef *und;
+        for (unli.toFirst();(und=unli.current());++unli)
+        {
+          //printf("Adding namespace %s to the using list of %s\n",und->qualifiedName().data(),qualifiedName().data());
+          addUsingDirective(und);
+        }
+      }
+      // add used classes of namespace nd to this namespace
+      if (nd->getUsedClasses())
+      {
+        SDict<Definition>::Iterator cli(*nd->getUsedClasses());
+        Definition *ucd;
+        for (cli.toFirst();(ucd=cli.current());++cli)
+        {
+          //printf("Adding class %s to the using list of %s\n",cd->qualifiedName().data(),qualifiedName().data());
+          addUsingDeclaration(ucd);
+        }
+      }
+    }
+  }
+}
+
+
diff -Naur tmp_unpack/doxygen-1.3.8.orig/src/scanner.cpp doxygen-1.3.8/src/scanner.cpp
--- tmp_unpack/doxygen-1.3.8.orig/src/scanner.cpp	2004-07-19 19:05:34.000000000 +0000
+++ doxygen-1.3.8/src/scanner.cpp	2007-07-26 07:30:15.000000000 +0000
@@ -14039,7 +14039,7 @@
 static void setContext()
 {
   QCString fileName = yyFileName;
-  insideIDL  = fileName.right(4)==".idl" || fileName.right(5)==".pidl" || 
+  insideIDL  = fileName.right(4)==".idl" || fileName.right(5)==".midl" || fileName.right(5)==".pidl" || 
                fileName.right(4)==".odl";
   insideJava = fileName.right(5)==".java";
   insideCS   = fileName.right(3)==".cs"; // for normal keywords add colon
diff -Naur tmp_unpack/doxygen-1.3.8.orig/src/scanner.cpp.orig doxygen-1.3.8/src/scanner.cpp.orig
--- tmp_unpack/doxygen-1.3.8.orig/src/scanner.cpp.orig	1970-01-01 00:00:00.000000000 +0000
+++ doxygen-1.3.8/src/scanner.cpp.orig	2004-07-19 19:05:34.000000000 +0000
@@ -0,0 +1,24058 @@
+#define yy_create_buffer scanYY_create_buffer
+#define yy_delete_buffer scanYY_delete_buffer
+#define yy_scan_buffer scanYY_scan_buffer
+#define yy_scan_string scanYY_scan_string
+#define yy_scan_bytes scanYY_scan_bytes
+#define yy_flex_debug scanYY_flex_debug
+#define yy_init_buffer scanYY_init_buffer
+#define yy_flush_buffer scanYY_flush_buffer
+#define yy_load_buffer_state scanYY_load_buffer_state
+#define yy_switch_to_buffer scanYY_switch_to_buffer
+#define yyin scanYYin
+#define yyleng scanYYleng
+#define yylex scanYYlex
+#define yyout scanYYout
+#define yyrestart scanYYrestart
+#define yytext scanYYtext
+
+/* A lexical scanner generated by flex */
+
+/* Scanner skeleton version:
+ * $Header: /diskb/tmp/stefano/project2/CVS/ACS/LGPL/Tools/doxygen/src/doxygen.patch,v 1.2 2007/12/12 14:03:17 mpasquat Exp $
+ */
+
+#define FLEX_SCANNER
+#define YY_FLEX_MAJOR_VERSION 2
+#define YY_FLEX_MINOR_VERSION 5
+
+#include <stdio.h>
+
+
+/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
+#ifdef c_plusplus
+#ifndef __cplusplus
+#define __cplusplus
+#endif
+#endif
+
+
+#ifdef __cplusplus
+
+#include <stdlib.h>
+#include <unistd.h>
+
+/* Use prototypes in function declarations. */
+#define YY_USE_PROTOS
+
+/* The "const" storage-class-modifier is valid. */
+#define YY_USE_CONST
+
+#else	/* ! __cplusplus */
+
+#if __STDC__
+
+#define YY_USE_PROTOS
+#define YY_USE_CONST
+
+#endif	/* __STDC__ */
+#endif	/* ! __cplusplus */
+
+#ifdef __TURBOC__
+ #pragma warn -rch
+ #pragma warn -use
+#include <io.h>
+#include <stdlib.h>
+#define YY_USE_CONST
+#define YY_USE_PROTOS
+#endif
+
+#ifdef YY_USE_CONST
+#define yyconst const
+#else
+#define yyconst
+#endif
+
+
+#ifdef YY_USE_PROTOS
+#define YY_PROTO(proto) proto
+#else
+#define YY_PROTO(proto) ()
+#endif
+
+/* Returned upon end-of-file. */
+#define YY_NULL 0
+
+/* Promotes a possibly negative, possibly signed char to an unsigned
+ * integer for use as an array index.  If the signed char is negative,
+ * we want to instead treat it as an 8-bit unsigned char, hence the
+ * double cast.
+ */
+#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
+
+/* Enter a start condition.  This macro really ought to take a parameter,
+ * but we do it the disgusting crufty way forced on us by the ()-less
+ * definition of BEGIN.
+ */
+#define BEGIN yy_start = 1 + 2 *
+
+/* Translate the current start state into a value that can be later handed
+ * to BEGIN to return to the state.  The YYSTATE alias is for lex
+ * compatibility.
+ */
+#define YY_START ((yy_start - 1) / 2)
+#define YYSTATE YY_START
+
+/* Action number for EOF rule of a given start state. */
+#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
+
+/* Special action meaning "start processing a new file". */
+#define YY_NEW_FILE yyrestart( yyin )
+
+#define YY_END_OF_BUFFER_CHAR 0
+
+/* Size of default input buffer. */
+#define YY_BUF_SIZE 262144
+
+typedef struct yy_buffer_state *YY_BUFFER_STATE;
+
+extern int yyleng;
+extern FILE *yyin, *yyout;
+
+#define EOB_ACT_CONTINUE_SCAN 0
+#define EOB_ACT_END_OF_FILE 1
+#define EOB_ACT_LAST_MATCH 2
+
+/* The funky do-while in the following #define is used to turn the definition
+ * int a single C statement (which needs a semi-colon terminator).  This
+ * avoids problems with code like:
+ *
+ * 	if ( condition_holds )
+ *		yyless( 5 );
+ *	else
+ *		do_something_else();
+ *
+ * Prior to using the do-while the compiler would get upset at the
+ * "else" because it interpreted the "if" statement as being all
+ * done when it reached the ';' after the yyless() call.
+ */
+
+/* Return all but the first 'n' matched characters back to the input stream. */
+
+#define yyless(n) \
+	do \
+		{ \
+		/* Undo effects of setting up yytext. */ \
+		*yy_cp = yy_hold_char; \
+		YY_RESTORE_YY_MORE_OFFSET \
+		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
+		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
+		} \
+	while ( 0 )
+
+#define unput(c) yyunput( c, yytext_ptr )
+
+/* The following is because we cannot portably get our hands on size_t
+ * (without autoconf's help, which isn't available because we want
+ * flex-generated scanners to compile on their own).
+ */
+typedef unsigned int yy_size_t;
+
+
+struct yy_buffer_state
+	{
+	FILE *yy_input_file;
+
+	char *yy_ch_buf;		/* input buffer */
+	char *yy_buf_pos;		/* current position in input buffer */
+
+	/* Size of input buffer in bytes, not including room for EOB
+	 * characters.
+	 */
+	yy_size_t yy_buf_size;
+
+	/* Number of characters read into yy_ch_buf, not including EOB
+	 * characters.
+	 */
+	int yy_n_chars;
+
+	/* Whether we "own" the buffer - i.e., we know we created it,
+	 * and can realloc() it to grow it, and should free() it to
+	 * delete it.
+	 */
+	int yy_is_our_buffer;
+
+	/* Whether this is an "interactive" input source; if so, and
+	 * if we're using stdio for input, then we want to use getc()
+	 * instead of fread(), to make sure we stop fetching input after
+	 * each newline.
+	 */
+	int yy_is_interactive;
+
+	/* Whether we're considered to be at the beginning of a line.
+	 * If so, '^' rules will be active on the next match, otherwise
+	 * not.
+	 */
+	int yy_at_bol;
+
+	/* Whether to try to fill the input buffer when we reach the
+	 * end of it.
+	 */
+	int yy_fill_buffer;
+
+	int yy_buffer_status;
+#define YY_BUFFER_NEW 0
+#define YY_BUFFER_NORMAL 1
+	/* When an EOF's been seen but there's still some text to process
+	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
+	 * shouldn't try reading from the input source any more.  We might
+	 * still have a bunch of tokens to match, though, because of
+	 * possible backing-up.
+	 *
+	 * When we actually see the EOF, we change the status to "new"
+	 * (via yyrestart()), so that the user can continue scanning by
+	 * just pointing yyin at a new input file.
+	 */
+#define YY_BUFFER_EOF_PENDING 2
+	};
+
+static YY_BUFFER_STATE yy_current_buffer = 0;
+
+/* We provide macros for accessing buffer states in case in the
+ * future we want to put the buffer states in a more general
+ * "scanner state".
+ */
+#define YY_CURRENT_BUFFER yy_current_buffer
+
+
+/* yy_hold_char holds the character lost when yytext is formed. */
+static char yy_hold_char;
+
+static int yy_n_chars;		/* number of characters read into yy_ch_buf */
+
+
+int yyleng;
+
+/* Points to current character in buffer. */
+static char *yy_c_buf_p = (char *) 0;
+static int yy_init = 1;		/* whether we need to initialize */
+static int yy_start = 0;	/* start state number */
+
+/* Flag which is used to allow yywrap()'s to do buffer switches
+ * instead of setting up a fresh yyin.  A bit of a hack ...
+ */
+static int yy_did_buffer_switch_on_eof;
+
+void yyrestart YY_PROTO(( FILE *input_file ));
+
+void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
+void yy_load_buffer_state YY_PROTO(( void ));
+YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
+void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
+void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
+void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
+#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )
+
+YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
+YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
+YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));
+
+static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
+static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
+static void yy_flex_free YY_PROTO(( void * ));
+
+#define yy_new_buffer yy_create_buffer
+
+#define yy_set_interactive(is_interactive) \
+	{ \
+	if ( ! yy_current_buffer ) \
+		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
+	yy_current_buffer->yy_is_interactive = is_interactive; \
+	}
+
+#define yy_set_bol(at_bol) \
+	{ \
+	if ( ! yy_current_buffer ) \
+		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
+	yy_current_buffer->yy_at_bol = at_bol; \
+	}
+
+#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)
+
+
+#define YY_USES_REJECT
+
+#define yywrap() 1
+#define YY_SKIP_YYWRAP
+typedef unsigned char YY_CHAR;
+FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
+typedef int yy_state_type;
+extern char *yytext;
+#define yytext_ptr yytext
+
+static yy_state_type yy_get_previous_state YY_PROTO(( void ));
+static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
+static int yy_get_next_buffer YY_PROTO(( void ));
+static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));
+
+/* Done after the current pattern has been matched and before the
+ * corresponding action - sets up yytext.
+ */
+#define YY_DO_BEFORE_ACTION \
+	yytext_ptr = yy_bp; \
+	yyleng = (int) (yy_cp - yy_bp); \
+	yy_hold_char = *yy_cp; \
+	*yy_cp = '\0'; \
+	yy_c_buf_p = yy_cp;
+
+#define YY_NUM_RULES 739
+#define YY_END_OF_BUFFER 740
+static yyconst short int yy_acclist[8789] =
+    {   0,
+      203,  203,  203,  203,  203,  203,16808,16808,17035,17034,
+    17035,17074,17074,  565,  565,  479,  479,  482,  482,  484,
+      484,  487,  487,  583,  583,  252,  252,  252,  252,   34,
+       34,   41,   41,  740,  734,  739,  734,  739,  729,  739,
+      730,  733,  734,  739,  731,  734,  739,  732,  734,  739,
+      734,  739,  734,  739,  134,  734,  739,  140,  734,  739,
+      140,  734,  739,  140,  734,  739,  135,  729,  739,  139,
+      140,  730,  733,  734,  739,  140,  731,  734,  739,  140,
+      732,  734,  739,  140,  734,  739,  140,  734,  739,  734,
+      739,  729,  739,  734,  739,  734,  739,  734,  739,  734,
+
+      739,  343,  734,  739,  350,  351,  734,  739,  365,  734,
+      739,  734,  739,  734,  739,  374,  729,  739,  734,  739,
+      734,  739,  359,  734,  739,  355,  734,  739,  734,  739,
+      353,  734,  739,  734,  739,  358,  734,  739,  376,  734,
+      739,  734,  739,  354,  734,  739,  734,  739,  734,  739,
+      357,  734,  739,  356,  734,  739,  348,  734,  739,  348,
+      734,  739,  348,  730,  733,  734,  739,  348,  731,  734,
+      739,  348,  732,  734,  739,  348,  734,  739,  347,  348,
+      734,  739,  346,  348,  734,  739,  734,  739,  374,  729,
+      739,  734,  739,  734,  739,  391,  734,  739,  734,  739,
+
+      377,  734,  739,  372,  373,  734,  739,  392,  734,  739,
+      371,  734,  739,  371,  734,  739,  370,  371,  734,  739,
+      370,  729,  739,  371,  730,  733,  734,  739,  371,  731,
+      734,  739,  371,  732,  734,  739,  371,  734,  739,  371,
+      734,  739,  371,  734,  739,    9,  730,  733,  734,  739,
+      732,  734,  739,    3,  734,  739,   10,  734,  739,   10,
+      734,  739,    2,  734,  739,  184,  734,  739,  184,  734,
+      739,  184,  730,  733,  734,  739,  184,  731,  734,  739,
+      184,  732,  734,  739,   11,  184,  734,  739,  184,  734,
+      739,   11,  184,  734,  739,   45,  734,  739,   45,  729,
+
+      739,   45,  734,  739,  124,  731,  734,  739,  734,  739,
+      142,  734,  739,  248,  734,  739,   30,  734,  739,  185,
+      734,  739,  111,  734,  739,  734,  739,  183,  734,  739,
+      185,  734,  739,  194,  734,  739,  148,  734,  739,  734,
+      739,  734,  739,  110,  734,  739,  110,  734,  739,  186,
+      734,  739,  110,  734,  739,  110,  734,  739,  110,  734,
+      739,  110,  734,  739,  110,  734,  739,  110,  734,  739,
+      110,  734,  739,  110,  734,  739,  110,  734,  739,  110,
+      734,  739,  110,  734,  739,  110,  734,  739,  110,  734,
+      739,  110,  734,  739,  110,  734,  739,  110,  734,  739,
+
+      410,  734,  739,  734,  739,   13,   15,  734,  739,   13,
+       15,  734,  739,   14,  729,  739,   13,   15,  730,  733,
+      734,  739,   13,   15,  731,  734,  739,   13,   15,  732,
+      734,  739,   13,   15,  734,  739,   15,  734,  739,  734,
+      739,  729,  739,  734,  739,  734,  739,  110,  734,  739,
+      734,  739,  734,  739,  729,  739,  734,  739,  201,  734,
+      739,  734,  739,  200,  734,  739,  199,  734,  739,  202,
+      734,  739,  734,  739,  289,  731,  734,  739,  314,  734,
+      739,  316,  734,  739,  315,  734,  739,  316,  734,  739,
+      302,  734,  739,  302,  734,  739,  288,  302,  734,  739,
+
+      288,  729,  739,  302,  730,  733,  734,  739,  289,  302,
+      731,  734,  739,  302,  732,  734,  739,  281,  302,  734,
+      739,  282,  302,  734,  739,  287,  302,  734,  739,  302,
+      734,  739,  309,  734,  739,  309,  734,  739,  309,  730,
+      733,  734,  739,  309,  731,  734,  739,  309,  732,  734,
+      739,  307,  309,  734,  739,  308,  309,  734,  739,  309,
+      734,  739,  313,  734,  739,  313,  734,  739,  312,  729,
+      739,  313,  730,  733,  734,  739,  313,  731,  734,  739,
+      313,  732,  734,  739,  313,  734,  739,  311,  313,  734,
+      739,  310,  313,  734,  739,  288,  302,  734,  739,  288,
+
+      729,  739,  302,  734,  739,  283,  302,  734,  739,  302,
+      734,  739,  290,  302,  734,  739,  297,  302,  734,  739,
+      297,  302,  734,  739,  297,  302,  734,  739,  297,  302,
+      734,  739,  297,  302,  734,  739,   76,  734,  739,   76,
+      734,  739,   76,  729,  739,   76,  730,  733,  734,  739,
+       76,  731,  734,  739,   76,  732,  734,  739,   78,  734,
+      739,   76,  734,  739,   75,   76,  734,  739,   76,  734,
+      739,  189,  734,  739,  189,  734,  739,  189,  730,  733,
+      734,  739,  189,  731,  734,  739,  189,  732,  734,  739,
+      189,  734,  739,  188,  189,  734,  739,  187,  189,  734,
+
+      739,  203,  224,  734,  739,  203,  224,  734,  739,  203,
+      221,  224,  734,  739,  221,  729,  739,  221,  224,  734,
+      739,  207,  224,  730,  733,  734,  739,  205,  224,  731,
+      734,  739,  223,  224,  732,  734,  739,  224,  734,  739,
+      224,  734,  739,  211,  224,  734,  739,  212,  224,  734,
+      739,  212,  224,  734,  739,  224,  734,  739,  224,  734,
+      739,  734,  739,   90,  734,  739,   88,  734,  739,   88,
+      734,  739,  734,  739,  729,  739,  734,  739,  734,  739,
+       89,  734,  739,  734,  739,  734,  739,  499,  729,  739,
+      734,  739,  734,  739,  497,  734,  739,  734,  739,  734,
+
+      739,  502,  729,  739,  734,  739,  500,  734,  739,  734,
+      739,  326,  336,  734,  739,  326,  336,  734,  739,  326,
+      336,  734,  739,  325,  729,  739,  323,  336,  730,  733,
+      734,  739,  326,  333,  336,  731,  734,  739,  336,  732,
+      734,  739,  336,  734,  739,  336,  734,  739,  336,  734,
+      739,  318,  336,  734,  739,  319,  336,  734,  739,  326,
+      336,  734,  739,  324,  326,  333,  336,  731,  734,  739,
+      327,  729,  739,  336,  730,  733,  734,  739,  336,  732,
+      734,  739,  336,  734,  739,  336,  734,  739,  321,  734,
+      739,  342,  734,  739,  342,  734,  739,  341,  729,  739,
+
+      338,  342,  730,  733,  734,  739,  342,  731,  734,  739,
+      342,  732,  734,  739,  342,  734,  739,  342,  734,  739,
+      342,  734,  739,  342,  730,  733,  734,  739,  339,  342,
+      732,  734,  739,  336,  734,  739,  331,  336,  730,  733,
+      734,  739,  333,  336,  731,  734,  739,  336,  734,  739,
+      332,  336,  734,  739,  317,  336,  734,  739,  130,  734,
+      739,  130,  734,  739,  132,  729,  739,  130,  734,  739,
+      130,  730,  733,  734,  739,  130,  731,  734,  739,  130,
+      732,  734,  739,  130,  734,  739,  130,  734,  739,  728,
+      734,  739,  728,  734,  739,  728,  734,  739,  728,  730,
+
+      733,  734,  739,  728,  731,  734,  739,  728,  732,  734,
+      739,  734,  739,  728,  734,  739,  734,  739,  734,  739,
+      727,  729,  739,  730,  733,  734,  739,  731,  734,  739,
+      732,  734,  739,  734,  739,    6,  734,  739,    7,  734,
+      739,    4,  734,  739,    5,  734,  739,  577,  579,  734,
+      739,  577,  579,  734,  739,  579,  734,  739,  578,  729,
+      739,  577,  579,  730,  733,  734,  739,  577,  579,  731,
+      734,  739,  577,  579,  732,  734,  739,  579,  734,  739,
+      579,  734,  739,  579,  734,  739,  577,  579,  734,  739,
+      579,  734,  739,  579,  734,  739,  579,  734,  739,16958,
+
+      579,  734,  739,  198,  734,  739,  198,  734,  739,  197,
+      198,  734,  739,  197,  729,  739,  198,  730,  733,  734,
+      739,  198,  731,  734,  739,  198,  732,  734,  739,  198,
+      734,  739,  196,  198,  734,  739,  195,  198,  734,  739,
+      387,  734,  739,  388,  734,  739,  389,  734,  739,  390,
+      734,  739,  193,  734,  739,  193,  734,  739,  192,  730,
+      733,  734,  739,  193,  731,  734,  739,  193,  732,  734,
+      739,  193,  734,  739,  190,  734,  739,  191,  734,  739,
+      630,  729,  739,  734,  739,  734,  739,  734,  739,  621,
+      734,  739,  621,  734,  739,  620,  729,  739,  621,  730,
+
+      733,  734,  739,  621,  731,  734,  739,  621,  732,  734,
+      739,  621,  734,  739,  623,  734,  739,  623,  734,  739,
+      622,  729,  739,  623,  730,  733,  734,  739,  623,  731,
+      734,  739,  623,  732,  734,  739,  623,  734,  739,  734,
+      739,  215,  734,  739,  214,  734,  739,  120,  734,  739,
+      120,  734,  739,  118,  729,  739,  120,  730,  733,  734,
+      739,  120,  731,  734,  739,  120,  732,  734,  739,  120,
+      734,  739,  119,  120,  734,  739,  122,  734,  739,  122,
+      734,  739,  122,  730,  733,  734,  739,  122,  731,  734,
+      739,  122,  732,  734,  739,  122,  734,  739,  122,  734,
+
+      739,  402,  404,  734,  739,  402,  404,  734,  739,  397,
+      402,  404,  734,  739,  397,  729,  739,  397,  404,  734,
+      739,  402,  404,  730,  733,  734,  739,  402,  404,  731,
+      734,  739,  402,  404,  732,  734,  739,  404,  734,  739,
+      404,  734,  739,  404,  734,  739,  402,  404,  734,  739,
+      677,  734,  739,  677,  734,  739,  677,  734,  739,  679,
+      729,  739,  677,  730,  733,  734,  739,  677,  731,  734,
+      739,  677,  732,  734,  739,  677,  734,  739,  677,  734,
+      739,  675,  677,  734,  739,  677,  734,  739,  677,  734,
+      739,  677,  734,  739,  677,  734,  739,  677,  734,  739,
+
+      677,  734,  739,  420,  734,  739,  420,  734,  739,  420,
+      734,  739,16808,  421,  729,  739,  420,  730,  733,  734,
+      739,  420,  731,  734,  739,  420,  732,  734,  739,  420,
+      734,  739,  420,  734,  739,  420,  734,  739,  420,  734,
+      739,  420,  734,  739,  420,  734,  739,  420,  734,  739,
+    16808,  418,  421,  729,  739,  420,  734,  739,  420,  734,
+      739,  420,  734,  739,  590,  734,  739,  590,  734,  739,
+      586,  590,  734,  739,  585,  729,  739,  590,  730,  733,
+      734,  739,  590,  731,  734,  739,  590,  732,  734,  739,
+      590,  734,  739,  590,  734,  739,  586,  590,  734,  739,
+
+      590,  734,  739,  590,  734,  739,  590,  734,  739,  586,
+      590,  734,  739,  590,  734,  739,  590,  734,  739,  678,
+      734,  739,  678,  734,  739,  678,  734,  739,  681,  729,
+      739,  678,  734,  739,  678,  730,  733,  734,  739,  678,
+      731,  734,  739,  678,  732,  734,  739,  678,  734,  739,
+      678,  734,  739,  678,  734,  739,  678,  734,  739,  678,
+      734,  739,  678,  734,  739,  682,  729,  739,  678,  734,
+      739,  678,  734,  739,  678,  734,  739,  734,  739,  507,
+      729,  739,  734,  739,  734,  739,  734,  739,  505,  734,
+      739,  734,  739,  734,  739,  734,  739,  508,  729,  739,
+
+      734,  739,  734,  739,  734,  739,  734,  739,  734,  739,
+      518,  729,  739,  730,  733,  734,  739,  734,  739,  516,
+      734,  739,  734,  739,  734,  739,  734,  739,  734,  739,
+      522,  729,  739,  730,  733,  734,  739,  734,  739,  520,
+      734,  739,  734,  739,  734,  739,  734,  739,  734,  739,
+      672,  734,  739,  672,  734,  739,  659,  729,  739,  672,
+      730,  733,  734,  739,  672,  731,  734,  739,  672,  732,
+      734,  739,  661,  672,  734,  739,  672,  734,  739,  672,
+      734,  739,  672,  734,  739,  672,  734,  739,  734,  739,
+      729,  739,  734,  739,  664,  734,  739,  734,  739,  663,
+
+      734,  739,  734,  739,  672,  734,  739,  673,  729,  739,
+      672,  734,  739,  672,  734,  739,  672,  734,  739,  672,
+      734,  739,  665,  672,  734,  739,  671,  734,  739,  671,
+      734,  739,  671,  730,  733,  734,  739,  671,  731,  734,
+      739,  671,  732,  734,  739,  670,  671,  734,  739,  671,
+      734,  739,  734,  739,  655,  734,  739,  734,  739,  494,
+      734,  739,  734,  739,  496,  734,  739,  653,  734,  739,
+      653,  734,  739,  653,  734,  739,17035,  648,  729,  739,
+      653,  730,  733,  734,  739,  653,  731,  734,  739,  653,
+      732,  734,  739,  653,  734,  739,  653,  734,  739,  653,
+
+      734,  739,  653,  734,  739,  653,  734,  739,  653,  734,
+      739,17034,17035,  647,  648,  729,  739,  653,  734,  739,
+      653,  734,  739,17034,  653,  734,  739,  653,  734,  739,
+      653,  734,  739,  653,  734,  739,  431,  734,  739,  431,
+      734,  739,  431,  734,  739,  429,  729,  739,  431,  730,
+      733,  734,  739,  431,  731,  734,  739,  431,  732,  734,
+      739,  431,  734,  739,  431,  734,  739,  657,  734,  739,
+      657,  734,  739,  657,  730,  733,  734,  739,  657,  731,
+      734,  739,  657,  732,  734,  739,  656,  657,  734,  739,
+      657,  734,  739,  657,  734,  739,  697,  734,  739,  697,
+
+      734,  739,  698,  729,  739,  697,  730,  733,  734,  739,
+      697,  731,  734,  739,  697,  732,  734,  739,  697,  734,
+      739,  697,  734,  739,  701,  734,  739,  701,  734,  739,
+      702,  729,  739,  701,  730,  733,  734,  739,  701,  731,
+      734,  739,  701,  732,  734,  739,  701,  734,  739,  646,
+      729,  739,  734,  739,  645,  734,  739,  734,  739,  123,
+      734,  739,  511,  729,  739,  734,  739,  509,  734,  739,
+      734,  739,  514,  734,  739,  514,  734,  739,  514,  734,
+      739,  515,  729,  739,  514,  730,  733,  734,  739,  514,
+      731,  734,  739,  514,  732,  734,  739,  734,  739,  514,
+
+      734,  739,  514,  734,  739,  641,  729,  739,  734,  739,
+      734,  739,  640,  734,  739,  539,  734,  739,  539,  734,
+      739,  541,  729,  739,  539,  730,  733,  734,  739,  539,
+      731,  734,  739,  539,  732,  734,  739,  539,  734,  739,
+      539,  734,  739,  542,  734,  739,  707,  734,  739,  707,
+      734,  739,  706,  729,  739,  707,  730,  733,  734,  739,
+      707,  731,  734,  739,  707,  732,  734,  739,  707,  734,
+      739,  707,  734,  739,  707,  734,  739,  707,  734,  739,
+      707,  734,  739,  707,  734,  739,  707,  734,  739,  692,
+      734,  739,  692,  734,  739,  692,  734,  739,17074,  691,
+
+      729,  739,  692,  730,  733,  734,  739,  692,  731,  734,
+      739,  692,  732,  734,  739,  692,  734,  739,  692,  734,
+      739,  692,  734,  739,  692,  734,  739,  692,  734,  739,
+      692,  734,  739,  692,  734,  739,17074,  688,  691,  729,
+      739,  692,  734,  739,  692,  734,  739,  692,  734,  739,
+      692,  734,  739,  687,  734,  739,  687,  734,  739,  684,
+      729,  739,  687,  730,  733,  734,  739,  687,  731,  734,
+      739,  687,  732,  734,  739,  687,  734,  739,  687,  734,
+      739,  687,  734,  739,  687,  734,  739,  586,  590,  734,
+      739,  590,  734,  739,  590,  734,  739,  590,  734,  739,
+
+      586,  590,  734,  739,  605,  734,  739,  605,  734,  739,
+      604,  729,  739,  605,  730,  733,  734,  739,  605,  731,
+      734,  739,  605,  732,  734,  739,  605,  734,  739,  734,
+      739,  529,  729,  739,  730,  733,  734,  739,  527,  734,
+      739,  734,  739,  734,  739,  734,  739,  734,  739,  734,
+      739,  530,  729,  739,  730,  733,  734,  739,  731,  734,
+      739,  732,  734,  739,  734,  739,  526,  729,  739,  730,
+      733,  734,  739,  734,  739,  524,  734,  739,  734,  739,
+      734,  739,  734,  739,  730,  733,  734,  739,  492,  734,
+      739,  734,  739,  734,  739,  533,  729,  739,  734,  739,
+
+      531,  734,  739,  734,  739,  229,  734,  739,  229,  734,
+      739,  229,  734,  739,  729,  739,  229,  730,  733,  734,
+      739,  229,  731,  734,  739,  229,  734,  739,  229,  732,
+      734,  739,  229,  734,  739,  229,  734,  739,  228,  229,
+      734,  739,  229,  734,  739,  233,  734,  739,  235,  734,
+      739,  734,  739,  295,  734,  739,  295,  734,  739,  296,
+      729,  739,  292,  295,  730,  733,  734,  739,  295,  731,
+      734,  739,  295,  734,  739,  295,  732,  734,  739,  295,
+      734,  739,  291,  295,  734,  739,  294,  295,  734,  739,
+      236,  302,  734,  739,  237,  302,  734,  739,  240,  734,
+
+      739,  240,  734,  739,  240,  730,  733,  734,  739,  240,
+      731,  734,  739,  240,  732,  734,  739,  240,  734,  739,
+      240,  734,  739,  245,  734,  739,  245,  734,  739,  244,
+      245,  734,  739,  244,  729,  739,  245,  730,  733,  734,
+      739,  245,  731,  734,  739,  245,  732,  734,  739,  241,
+      245,  734,  739,  242,  245,  734,  739,  243,  245,  734,
+      739,  245,  734,  739,  734,  739,  729,  739,  734,  739,
+      734,  739,  217,  734,  739,  734,  739,  217,  734,  739,
+      218,  734,  739,  216,  734,  739,  219,  734,  739,  220,
+      734,  739,  565,  569,  734,  739,  565,  569,  734,  739,
+
+      569,  734,  739,  568,  729,  739,  565,  569,  730,  733,
+      734,  739,  565,  569,  731,  734,  739,  565,  569,  732,
+      734,  739,  569,  734,  739,  569,  734,  739,  569,  734,
+      739,  465,  734,  739,  465,  734,  739,  462,  729,  739,
+      465,  730,  733,  734,  739,  465,  731,  734,  739,  465,
+      732,  734,  739,  465,  734,  739,  469,  734,  739,  469,
+      734,  739,  466,  729,  739,  469,  730,  733,  734,  739,
+      469,  731,  734,  739,  469,  732,  734,  739,  469,  734,
+      739,  473,  734,  739,  473,  734,  739,  470,  729,  739,
+      473,  730,  733,  734,  739,  473,  731,  734,  739,  473,
+
+      732,  734,  739,  473,  734,  739,  477,  734,  739,  477,
+      734,  739,  474,  729,  739,  477,  730,  733,  734,  739,
+      477,  731,  734,  739,  477,  732,  734,  739,  477,  734,
+      739,  480,  734,  739,  480,  734,  739,  479,  480,  734,
+      739,  480,  730,  733,  734,  739,  480,  731,  734,  739,
+      480,  734,  739,  480,  732,  734,  739,  480,  734,  739,
+      478,  480,  734,  739,  483,  734,  739,  483,  734,  739,
+      482,  483,  734,  739,  483,  730,  733,  734,  739,  483,
+      731,  734,  739,  483,  732,  734,  739,  483,  734,  739,
+      486,  734,  739,  486,  734,  739,  484,  486,  734,  739,
+
+      486,  730,  733,  734,  739,  486,  731,  734,  739,  486,
+      732,  734,  739,  486,  734,  739,  491,  734,  739,  491,
+      734,  739,  487,  491,  734,  739,  488,  729,  739,  491,
+      730,  733,  734,  739,  491,  731,  734,  739,  491,  732,
+      734,  739,  491,  734,  739,  581,  734,  739,  583,  734,
+      739,  583,  734,  739,  582,  729,  739,  583,  730,  733,
+      734,  739,  583,  731,  734,  739,  583,  732,  734,  739,
+      584,  734,  739,  583,  734,  739,  101,  734,  739,  101,
+      734,  739,  101,  730,  733,  734,  739,  101,  731,  734,
+      739,  101,  732,  734,  739,  101,  734,  739,   95,  101,
+
+      734,  739,   97,  101,  734,  739,16483,  250,  280,  734,
+      739,  250,  280,  734,  739,  279,  729,  739,  277,  280,
+      730,  733,  734,  739,  250,  280,  731,  734,  739,  280,
+      732,  734,  739,  250,  280,  734,  739,  280,  734,  739,
+      251,  280,  734,  739,  251,  280,  734,  739,  253,  280,
+      730,  733,  734,  739,  251,  280,  731,  734,  739,  280,
+      732,  734,  739,  272,  280,  734,  739,  273,  280,  734,
+      739,  280,  734,  739,  280,  734,  739,  280,  734,  739,
+      280,  731,  734,  739,  274,  280,  734,  739,  275,  280,
+      734,  739,  263,  269,  734,  739,  263,  269,  734,  739,
+
+      268,  729,  739,  263,  269,  730,  733,  734,  739,  263,
+      269,  731,  734,  739,  263,  269,  732,  734,  739,  269,
+      734,  739,  263,  269,  734,  739,  269,  734,  739,  263,
+      269,  734,  739,  269,  734,  739,16646,  266,  267,  734,
+      739,  266,  267,  734,  739,  265,  729,  739,  266,  267,
+      730,  733,  734,  739,  266,  267,  731,  734,  739,  266,
+      267,  732,  734,  739,  266,  267,  734,  739,  267,  734,
+      739,  396,  734,  739,  396,  734,  739,  396,  734,  739,
+      395,  729,  739,  396,  730,  733,  734,  739,  396,  731,
+      734,  739,  396,  732,  734,  739,  393,  396,  734,  739,
+
+      394,  396,  734,  739,  396,  734,  739,  249,  280,  734,
+      739,  249,  280,  734,  739,  252,  280,  734,  739,  252,
+      279,  729,  739,  260,  280,  731,  734,  739,  280,  732,
+      734,  739,  254,  280,  734,  739,  255,  280,  734,  739,
+      280,  734,  739,  270,  280,  734,  739,  271,  280,  734,
+      739,  386,  734,  739,  386,  734,  739,  380,  386,  734,
+      739,  380,  729,  739,  386,  730,  733,  734,  739,  386,
+      731,  734,  739,  386,  732,  734,  739,  384,  386,  734,
+      739,  385,  386,  734,  739,  386,  734,  739,  378,  386,
+      734,  739,  379,  386,  734,  739,  386,  734,  739,  454,
+
+      734,  739,  454,  734,  739,  454,  730,  733,  734,  739,
+      454,  731,  734,  739,  454,  732,  734,  739,  454,  734,
+      739,  454,  734,  739,  601,  734,  739,  601,  734,  739,
+      601,  734,  739,  598,  729,  739,  601,  730,  733,  734,
+      739,  601,  731,  734,  739,  601,  732,  734,  739,  601,
+      734,  739,  601,  734,  739,  601,  734,  739,  601,  734,
+      739,  601,  734,  739,  601,  734,  739,  600,  729,  739,
+      601,  734,  739,  580,  734,  739,  161,  734,  739,  161,
+      734,  739,  161,  734,  739,  154,  729,  739,  152,  161,
+      730,  733,  734,  739,  161,  731,  734,  739,  161,  732,
+
+      734,  739,  149,  161,  734,  739,  151,  161,  734,  739,
+      161,  734,  739,  151,  161,  734,  739,  161,  734,  739,
+      150,  161,  734,  739,  167,  734,  739,  167,  734,  739,
+      166,  729,  739,  163,  167,  730,  733,  734,  739,  167,
+      731,  734,  739,  167,  732,  734,  739,  167,  734,  739,
+      167,  734,  739,  167,  734,  739,  167,  730,  733,  734,
+      739,  164,  167,  732,  734,  739,  173,  174,  734,  739,
+      173,  174,  734,  739,  171,  729,  739,  168,  174,  730,
+      733,  734,  739,  173,  174,  731,  734,  739,  174,  732,
+      734,  739,  169,  174,  734,  739,  170,  174,  734,  739,
+
+      173,  174,  734,  739,  179,  182,  734,  739,  179,  182,
+      734,  739,  181,  729,  739,  175,  182,  730,  733,  734,
+      739,  179,  182,  731,  734,  739,  182,  732,  734,  739,
+      180,  182,  734,  739,  176,  182,  734,  739,  177,  182,
+      734,  739,  117,  734,  739,  117,  734,  739,  116,  729,
+      739,  117,  730,  733,  734,  739,  117,  731,  734,  739,
+      117,  732,  734,  739,  117,  734,  739,  115,  117,  734,
+      739,  734,  739,   81,  734,  739,  734,  739,   83,  734,
+      739,   82,  734,  739,  734,  739,   47,  734,  739,   46,
+      734,  739,  734,  739,  729,  739,  734,  739,  734,  739,
+
+      734,  739,  734,  739,  415,  734,  739,  415,  734,  739,
+      416,  729,  739,  415,  730,  733,  734,  739,  415,  731,
+      734,  739,  415,  732,  734,  739,  415,  734,  739,  415,
+      734,  739,  415,  734,  739,  411,  415,  734,  739,  412,
+      415,  734,  739,  128,  734,  739,  128,  734,  739,  129,
+      729,  739,  128,  730,  733,  734,  739,  128,  731,  734,
+      739,  128,  732,  734,  739,  128,  734,  739,  734,  739,
+      734,  739,  137,  734,  739,  137,  734,  739,  137,  730,
+      733,  734,  739,  137,  731,  734,  739,  137,  732,  734,
+      739,  137,  734,  739,  136,  137,  734,  739,  301,  734,
+
+      739,  301,  734,  739,  301,  734,  739,  301,  730,  733,
+      734,  739,  301,  731,  734,  739,  301,  734,  739,  301,
+      732,  734,  739,  298,  301,  734,  739,  301,  734,  739,
+      298,  301,  734,  739,  299,  301,  734,  739,  300,  301,
+      734,  739,  156,  160,  734,  739,  156,  160,  734,  739,
+      159,  729,  739,  158,  160,  730,  733,  734,  739,  156,
+      160,  731,  734,  739,  156,  160,  732,  734,  739,  156,
+      160,  734,  739,  734,  739,   31,  734,  739,   33,  734,
+      739,   43,  734,  739,   32,  734,  739,   44,  734,  739,
+       34,  734,  739,   34,  734,  739,   34,  729,  739,   34,
+
+      730,  733,  734,  739,   34,  731,  734,  739,   34,  732,
+      734,  739,   35,  734,  739,   34,  734,  739,  734,  739,
+       40,  734,  739,  734,  739,   39,  734,  739,   37,  734,
+      739,   41,  734,  739,   41,  734,  739,   41,  729,  739,
+       41,  730,  733,  734,  739,   41,  731,  734,  739,   41,
+      732,  734,  739,   42,  734,  739,   41,  734,  739,  345,
+      734,  739,  734,  739,  105,  734,  739,  734,  739,  106,
+      734,  739,  109,  734,  739,  734,  739,  734,  739,    1,
+      736,  738,  134,  133,  134,  736,  738,  138,  365,  350,
+      351,  351,  350,  351,  349,  344,  365,  350,  351,  374,
+
+      354,  364,  736,  738,  352,  354,  356,  356,  372,  373,
+      372,  373,  392,  374,  372,  373,  392,   45,   45,  124,
+      110,  142,  227,   30,  736,  738,  112,   16,  110,   92,
+      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
+      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
+      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
+       13,   13,    1,   13,   13,  736,   13,  738,   12,  110,
+      110,   93,  110,  199,  736,  738,  199,  288,  287,  287,
+      288,  297,  736,  738,  286,  297,  297,  297,  297,  297,
+      297,   77,  203,  203,    1,  203,  203,  221,  221,  205,
+
+      205,  225,  208,  736,  204,  738,  206,   88,   88,   88,
+       88,   89,   89,   89,  497,  497,  498,  497,  500,  500,
+      501,  326,  326,    1,  326,  326,  326,  326,  329,  736,
+      330,  738,  334,  326,  324,  326,  329,  736,  330,  738,
+      328,  340,  340,  736,  340,  738,  337,  330,  738,  132,
+      132,  131,  728,  728,    1,  728,  728,  737,  735,  736,
+      728,  735,  738,  727,    1,  727,  736,  738,  577,  577,
+        1,  577,  576,  576,  736,  575,  738,  577,16958, 8766,
+      573,  575,  738,  197,  193,  193,    1,  193,  193,  736,
+      193,  738,  628,  631,  736,  631,  738,  621,  621,    1,
+
+      621,  621,  736,  621,  738,  623,  623,    1,  623,  623,
+      736,  623,  738,  214,  214,  402,  402,    1,  402,  397,
+      402,  397,  403,  398,  736,  399,  738,  402,  402,  402,
+      711,  726,  736,  592,  726,  738,  675,  676,  721,  721,
+      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
+      721,  721,  721,  721,  721,  721,  721,  721,  721,  588,
+      589,  721,  721,  721,  721,  721,  721,  721,  721,  721,
+      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
+      721,  721,  717,  717,  718,  717,  717,  717,  591,  592,
+      726,  738,16808,  712,  423,  593,  738,  725,  725,  725,
+
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725, 8616,  588,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,16808,  418,  419,  717,  419,  717,  718,  418,  419,
+      717,  419,  717,  419,  717,  419,  717,  419,  717,  591,
+      593,  738,  586,  586,  602,  721,  721,  721,  721,  721,
+      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
+      721,  721,  721,  721,  721,  721,  721,  586,  593,  726,
+      738,  676,  725,  725,  725,  725,  725,  725,  725,  725,
+
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  674,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  591,  593,  726,  738,  726,  738,  505,  709,  505,
+      504,  506,  505,  519,  516,  738,  517,  523,  520,  520,
+      738,  521,  662,  658,  663,  663,  663,  668,  655,  654,
+      655,  494,  494,  496,  496,17035,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725, 8843,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+
+      725,  725,  725,  725,  725,17034,17035,  647,17034,  717,
+      718,17034,  647,  717,  717,  717,17034,  717,  717,  717,
+      717,  717,  593,  738,17034,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725, 8842, 8843,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  429,  430,  700,  699,  736,
+      699,  738,  645,  645,  113,  509,  509,  510,  514,  514,
+        1,  514,  514,  512,  514,  738,  514,  513,  640,  642,
+      640,  540,  708,  704,  736,  704,  738,  676,  721,  721,
+
+      721,  721,  721,  721,  721,  721,  721,  721,  721,  705,
+      717,  705,  717,  718,  705,  717,  705,  717,  705,  717,
+      704,  738,17074,  693,  694,  689,  736,  689,  738,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725, 8882,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,17074,  688,
+      717,  718,  688,  717,  717,  717,  717,  689,  738,  725,
+      683,  736,  683,  738,  725,  725,  725,  725,  725,  725,
+      586,  721,  721,  721,  721,  721,  721,  721,  721,  721,
+
+      721,  721,  721,  586,  527,  738,  528,  530,    1,  530,
+      736,  738,  710,  524,  738,  525,  492,  738,  531,  531,
+      531,  532,  228,  228,  228,  231,  230,  232,  234,  294,
+      294,  238,  239,  244,  243,  243,  216,  216,  565,  565,
+        1,  565,  567,  736,  567,  738,  566,  567,  738,  464,
+      736,  463,  738,  468,  736,  467,  738,  472,  736,  471,
+      738,  476,  736,  475,  738,  479,  478,  478,  482,  481,
+      484,  485,  487,  490,  736,  489,  738,  581,  583,  582,
+      583,    1,  583,  582,  583,  738,   94,16483,   98,   96,
+      250,  250,    1,  250,  250,  736,  250,  738,  276,  251,
+
+      251,    1,  251,  263,  263,    1,  263,  264,  263,  738,
+      263,16646, 8454,  266,  266,    1,  266,  266,  736,  266,
+      738,  725,  725,  725,  393,  249,  249,    1,  249,  252,
+      259,  257,  736,  258,  738,  380,  381,  382,  738,  580,
+      736,  738,  155,  165,  165,  736,  165,  738,  162,  173,
+      173,    1,  173,  173,  736,  173,  738,  179,  179,    1,
+      179,  114,   81,   81,   82,   82,   46,   46,  247,  127,
+      299,  736,  738,  299,  156,  156,    1,  156,  157,  156,
+      736,  156,  738,   32,   33,   32,   34,   34,    1,   34,
+       34,  736,   34,  738,   37,   37,   37,   36,   41,   41,
+
+        1,   41,   42,   41,  736,   41,  738,  105,  105,  106,
+      106,  350,  350,  351,  351,  350,  351,  362,  405,  363,
+      407,  372,  373,  372,  373,    8,   45,   45,  227,  405,
+      407,   91,  110,  110,  110,  110,  110,  110,  110,  110,
+      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
+      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
+      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
+      405,  407,  405,  407,  286,  297,  297,  297,  297,  297,
+       74,  205,  210,  208,  209,  204,   88,   88,   89,  497,
+      500,  326,  322,  335,  335,  328,  131,  577,  573,  629,
+
+      402,  402,  402,  720,  720,  720,  720,  720,  720,  720,
+      720,  720,  720,  720,  720,  721,  721,  721,  721,  721,
+      721,  721,  721,  721,  721,  721,  721,  721,  595,  596,
+      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
+      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
+      721,  721,  721,  721,  721,  721,  721,  721,  719,  721,
+      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
+      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
+      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
+      721,  721,  721,  721,  721,  721,  721,  721,  591,  718,
+
+      713,  714, 8616,  422,  425,  724,  724,  724,  724,  724,
+      724,  724,  724,  724,  724,  724,  724,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725, 8616,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+     8616,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  722,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725, 8616,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+
+     8616,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  718,  721,  721,  721,
+      721,  721,  721,  721,  721,  721,  721,  721,  721,  724,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  674,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  674,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+
+      725,  725,  725,  725,  591,  505,  516,  516,  520,  520,
+      663,  668,  725,  725,  725,  725,  725,  725,  725,  725,
+      725, 8843,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725, 8843,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,17034,  718,17034,  715,  716, 8842,17034,17034,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+
+     8842, 8843,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725, 8842, 8843,  725,
+      725,  725,  725,  725,  722,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  720,  721,  721,  721,  721,
+      721,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+     8882,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725, 8882,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  718,
+      722,  725,  725,  725,  725,  721,  721,  721,  721,  527,
+      527,  524,  524,  492,  492,  531,  531,  531,  531,  228,
+      293,  216, 8291,  100,  278,  725,  256,  453,  597,  599,
+      153,  172,  178,   46,   84,   85,  414,  413,  141,  405,
+      407,   38,  145,  350,  350,  351,  361,  406,  360,  408,
+      360,  408,  375,  346,  372,  373,  372,  373,    8,   45,
+
+       45,  226,  406,  406,  406,  146,  408,  408,  408,  408,
+      147,  110,  110,  110,  110,  110,  110,  110,  110,  110,
+      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
+      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
+      110,  110,  110,  110,  110,  110,  110,  110,  110,  145,
+      406,  145,  408,  297,  297,  297,  303,  297,  205,  210,
+      222,   88,   88,  500,  326,  322,  335,  335,  577,  624,
+      402,  402,  402,  452,  720,  720,  720,  720,  720,  720,
+      720,  594,  720,  720,  720,  720,  720,  720,  720,  721,
+      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
+
+      721,  721,  721,  721,  721,  721,  426,  721,  721,  721,
+      617,  619,  721,  721,  721,  721,  721,  721,  721,  721,
+      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
+      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
+      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
+      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
+      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
+      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
+     8616,  724,  724,  724,  724,  724,  724,  724,  724,  724,
+      724,  724,  724,  724,  724,  725,  725,  725,  725, 8616,
+
+      725,  725,  725,  725,  725,  725, 8616,  725,  725,  725,
+     8616,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725, 8616,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725, 8616,  725,
+      725,  725,  725,  725,  725, 8616,  725,  725,  725, 8616,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725, 8616,  725,  725,  725,  725,  725,  725,
+
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  721,  721,  721,  721,  721,  680,  725,
+      725,  725,  674,  725,  725,  725,  725,  674,  725,  725,
+      725,  674,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  674,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  674,  725,  725,  725,  725,  674,  725,  725,
+      725,  674,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  674,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  674,
+
+      674,  674,  503,  649,  725,  725,  725,  725,  725, 8843,
+      725,  725,  725, 8843,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725, 8843,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725, 8843,  725,  725,  725,
+     8843,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725, 8843,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725, 8842, 8843,  725,  725,  725, 8842,
+     8843,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+
+      725,  725, 8842, 8843,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725, 8842, 8843,  725,  725,  725,
+     8842, 8843,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725, 8842, 8843,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      721,  721,  721,  721,  725,  725,  725,  725,  725, 8882,
+      725,  725,  725, 8882,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725, 8882,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+
+      725,  725,  725,  725,  725, 8882,  725,  725,  725, 8882,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725, 8882,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      721,  721,  721,  721,  531,  531,  531,  293, 8291,  278,
+      725,  256,  153,  172,  178,   46,   85,  141,  107,  346,
+      346,  372,  373,  144,  143,   45,   45,  126,  246,  147,
+      110,  110,  110,  110,  110,  110,  110,  110,  110,   17,
+       17,   17,   17,   92,   73,   72,  110,  110,  110,  110,
+      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
+
+      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
+      110,  110,  110,  110,   12,  284,  297,  297,  297,  297,
+      126,  205,   88,  320,  577,  577,  121,  400,  402,  402,
+      402,  402,  562,  720,  720,  720,  720,  720,  720,  720,
+      607,  720,  720,  720,  720,  720,  720,  721,  721,  721,
+      721,  459,  721,  721,  721,  721,  427,  721,  721,  721,
+      560,  721,  721,  721,  721,  447,  721,  721,  721,  721,
+      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
+      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
+      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
+
+      459,  719,  721,  721,  721,  721,  721,  721,  721,  560,
+      719,  721,  721,  721,  721,  447,  721,  721,  721,  721,
+      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
+      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
+      721,  721,  721,  721,  721,  721, 8616, 8616, 8616, 8616,
+      563,  724,  724,  724,  724,  724,  724,  724,  612,  724,
+      724,  724,  724,  724,  724,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  561,  725,  725,
+      725,  725,  725,  725,  447,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725, 8616,  725, 8616,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      459,  722,  725,  725,  725,  725,  725,  725,  725,  561,
+      722,  725,  725,  725,  725,  725,  725,  447,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725, 8616,  725, 8616,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  721,  721,
+      721,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  674,  725,  674,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  674,  725,  674,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  666, 8843, 8843, 8843,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725, 8842, 8843, 8842,
+     8843, 8842, 8843, 8842, 8842, 8842,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+
+      721,  721, 8882, 8882, 8882,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  686,  685,  725,  725,  725,
+      725,  721,  721,  721,  721,  261,  108,  346,  372,  373,
+      367,   45,   45,   73,  147,   64,  110,  110,  110,  110,
+      110,   66,   65,  110,  110,  110,  110,  110,  110,  110,
+
+      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
+      110,  110,  110,  110,  110,  110,16453,  110,  110,  110,
+       71,   70,   86,  110,  110,  110,  284,  284,  297,  304,
+      297,  297,   88,  571,  577,  577,  626,  402,  402,  402,
+      447,  455,  720,  720,  544,  558,  720,  720,  720,  720,
+      720,  720,  720,  721,  721,  721,  643,  721,  721,  721,
+      721,  556,  721,  721,  721,  633,  721,  721,  432,  721,
+      447,  721,  721,  721,  721,  721,  721,  721,  721,  451,
+      721,  721,  721,  721,  445,  721,  721,  721,  721,  721,
+      721,  721,  721,  721,  458,  457,  721,  721,  721,  721,
+
+      721,  721,  721,  721,  643,  721,  721,  721,  721,  556,
+      719,  721,  721,  721,  633,  719,  721,  721,  721,  721,
+      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
+      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
+      458,  719,  457,  719,  721,  721,  721,  721,  721,  563,
+      456,  724,  724,  545,  559,  724,  724,  724,  724,  724,
+      724,  724,  725,  725,  725,  725,  725,  725,  725, 8616,
+      725,  557,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+
+      725,  725,  725,  725,  725,  725, 8616,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725, 8616,  725,  557,  722,  725,  725,  725,  725,  633,
+      722,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      458,  722,  457,  722,  725, 8616,  725,  725,  725,  725,
+      725,  725,  725,  721,  721,  721,  725,  725,  723,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  450,  725,  725,  725,  725,  725,  725,  725,  725,
+
+      725,  725,  725,  725,  725,  725,  725,  725,  723,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  722,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  666,  669,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  509,  703,  721,  703,  721,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+
+      725,  725,  725,  725,  725,  721,  721,  721,  721,  372,
+      373,  369,  366,   45,   45,   66,16453,   71,  125,  110,
+      110,  110,  110,  110,  110,  110,  110,   49,  110,   52,
+      110,   19,  110,  110,   57,  110,  110,  110,  110,  110,
+       24,  110,  110,  110,   48, 8261,   68,  110,  110,  110,
+      110,  110,  110,  305,  306,  297,   88,  577,  577,  625,
+      402,  402,  402,  643,  554,  720,  610,  720,  720,  720,
+      720,  720,  720,  720,  721,  721,  721,  721,  721,  438,
+      721,  721,  721,  721,  634,  721,  721,  721,  721,  618,
+      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
+
+      721,  721,  721,  721,  721,  721,  721,  721,  721,  441,
+      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
+      721,  721,  634,  719,  721,  721,  721,  721,  721,  721,
+      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
+      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
+     8616, 8616,  555,  724,  615,  724,  724,  724,  724,  724,
+      724,  724,  725,  725,  725,  417,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725, 8616,  725, 8616,  725,  725,  725, 8616,  725,
+
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  634,
+      722,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+     8616,  725, 8616,  725,  725,  725, 8616,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  721,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  674,  725,  674,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  674,  725,  674,
+
+      725,  725,  725,  725,  725,  725,  725,  725,  674,  674,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725, 8843,  725, 8843,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725, 8843,
+      725, 8843,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  652,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725, 8842, 8843,  725, 8842, 8843,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+
+      725,  725, 8842, 8843,  725, 8842, 8843,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725, 8882,
+      725, 8882,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725, 8882,  725, 8882,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  603,
+      721,  721,  721,  721,  372,  373,   45,   45,   49,   52,
+       19,   57,   24,   48, 8261,   29,  103,  110,  110,  110,
+      110,  110,   67,  102,  110,  110,  110,  110,   19,   58,
+
+       53,  110,   26,  110,  110,  110,   24,  110,  110,   20,
+      110,  110,  110,   50,  110,  285,  297,   88,  577,  572,
+      577,  572,  627,  401,  402,  402,  402,  720,  720,  611,
+      720,  608,  720,  720,  720,  721,  721,  543,  721,  721,
+      721,  721,  721,  632,  721,  721,  721,  721,  721,  721,
+      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
+      493,  721,  721,  721,  442,  721,  721,  721,  721,  721,
+      721,  721,  721,  721,  721,  721,  721,  632,  719,  721,
+      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
+      721,  721,  721,  721,  721,  493,  721,  721,  721,  721,
+
+      721,  721,  721,  721, 8616, 8616, 8616,  724,  724,  616,
+      724,  613,  724,  724,  724,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725, 8616,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      493,  725, 8616,  725, 8616,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  632,
+      722,  725,  725,  725,  725,  725, 8616,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      493,  725, 8616,  725, 8616,  725,  725,  725,  725,  725,
+      725,  725,  725,  721,  725,  725,  725,  725,  725,  725,
+
+      674,  725,  725,  725,  725,  725,  725,  674,  725,  674,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      674,  725,  725,  725,  725,  725,  725,  674,  725,  674,
+      725,  725,  725,  725,  674,  674,  667, 8843, 8843,  725,
+      725,  725,  725,  725,  725, 8843,  725,  725,  725,  725,
+      725,  725, 8843,  725, 8843,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725, 8843,  725,  725,  725,  725,
+      725,  725, 8843,  725, 8843,  725,  725,  725,  725, 8842,
+     8843, 8842, 8843, 8842, 8842,  725,  725,  725,  725,  725,
+      725, 8842, 8843,  725,  725,  725,  725,  725,  725, 8842,
+
+     8843,  725, 8842, 8843,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725, 8842, 8843,  725,  725,  725,  725,
+      725,  725, 8842, 8843,  725, 8842, 8843,  725,  725,  725,
+      725, 8882, 8882,  725,  725,  725,  725,  725,  725, 8882,
+      725,  725,  725,  725,  725,  725, 8882,  725, 8882,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  725, 8882,
+      725,  725,  725,  725,  725,  725, 8882,  725, 8882,  725,
+      725,  725,  725,  725,  725,  725,  725,  721,  721,  721,
+      721,  606,  564,  372,  373,  368,   45,   45,   67,   58,
+       53,   26,   20,   50,   27,  110,  110,  110,   51,  110,
+
+       54,  409,  110,  110,  110,   26,  110,  110,  110,  110,
+      110,   20, 8271,   92,16463,   55,  285,  285,   88,  570,
+      577,  570,  402,  493,  720,  609,  720,  720,  720,  720,
+      721,  721,  721,  721,  721,  721,  449,  448,  721,  721,
+      721,  635,  721,  696,  721,  721,  446,  721,  721,  721,
+      428,  721,  437,  721,  721,  493,  721,  535,  721,  721,
+      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
+      721,  721,  721,  721,  696,  721,  721,  446,  721,  721,
+      721,  428,  721,  721,  721,  721,  721,  721,  721,  721,
+      721,  721, 8616, 8616,  724,  614,  724,  724,  724,  724,
+
+      725,  725,  725,  725, 8616,  725,  725,  725,  725, 8616,
+      725,  725,  725, 8616,  696,  725,  725,  725,  446,  725,
+      725,  725, 8616,  428,  725,  725,  725,  725,  725,  725,
+      725,  725, 8616,  725,  725, 8616,  725,  725,  725,  725,
+      725, 8616,  725,  725,  725,  725, 8616,  725,  725,  725,
+     8616,  696,  725,  725,  725,  446,  725,  725,  725, 8616,
+      428,  725,  725,  725,  725,  725,  725,  725,  725, 8616,
+      725,  725, 8616,  725,  644,  725,  725,  725,  725,  674,
+      695,  725,  725,  725,  725,  428,  674,  725,  725,  674,
+      725,  725,  725,  725,  725,  674,  695,  725,  725,  725,
+
+      725,  428,  674,  725,  725,  674,  725,  667, 8843, 8843,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725, 8842, 8843, 8842, 8843,
+     8842, 8842,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725, 8882, 8882,
+      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
+      725,  725,  725,  725,  725,  725,  725,  725,  587,  534,
+      721,  721,  719,  383,  372,  373,   45,   45,   51,   54,
+       55,   62,  104,  110,  110,  110,   63,  409,  409,  110,
+       59,   56,   56,16464,   56,   56,   92,  110,   25,  110,
+
+      110,  110, 8271,   91,  213,   87,   88,  402,  446,  428,
+      720,  720,  720,  721,  721,  440,  433,  721,  721,  550,
+      721,  721,  721,  446,  721,  721,  428,  721,  439,  721,
+      721,  721,  721,  546,  721,  461,  721,  721,  721,  721,
+      550,  719,  721,  721,  721,  721,  721,  721,  721,  721,
+      721,  721,  546,  719,  721,  461,  719, 8616, 8616,  428,
+      724,  724,  724,  725, 8616,  725,  725,  725,  551,  725,
+      725, 8616,  725, 8616,  725,  725,  725,  725,  725,  725,
+      725,  547, 8616,  725,  725, 8616,  725,  725,  725,  551,
+      722,  725,  725, 8616,  725, 8616,  725,  725,  725,  725,
+
+      725,  725,  725,  547,  722, 8616,  725,  461,  722,  725,
+      674,  725,  725,  674,  725,  725,  674,  725,  725,  674,
+      725,  660,  725, 8843,  725,  725,  725, 8843,  725,  725,
+      725, 8842, 8843,  725,  725,  725, 8842, 8843,  725,  725,
+      725, 8882,  725,  725,  725, 8882,  725,  725,  372,  373,
+      391,   45,   45,   63,   59,   56,   25,   61,   28,   18,
+      110,   56,  110,   25,  110,  110,  110,  402,  720,  544,
+      552,  552,  721,  639,  721,  721,  444,  443,  548,  436,
+      721,  538,  721,  721,  721,  721,  435,  721,  639,  719,
+      721,  721,  548,  719,  721,  721,  721,  721,  721, 8616,
+
+     8616,  724,  545,  553,  553, 8616,  725, 8616,  725,  725,
+      549,  725,  725,  725,  725,  725, 8616,  725,  639,  722,
+     8616,  725,  725,  549,  722,  725,  725,  725,  725,  725,
+      674,  725,  674,  725,  391,   45,   45,   18,   18, 8272,
+      110,  110,   21,  434,  460,  721,  721,  495,  721,  721,
+      536,  721,  460,  719,  721,  721,  495,  721,  721,  721,
+     8616,  725,  725,  495,  725,  725,  725,  460,  722,  725,
+      725,  495,  725,  725,  725,   45,   45,   21,   23,  110,
+       21,  495,  721,  721,  495,  721,  721,  721,  721,  721,
+      721,  725,  725,  725,  725,  725,  725,  725,  725,   45,
+
+       45,   23,   23,  110,  721,  721,  721,  721,  721,  721,
+      721,  721,  725,  725,  725,  725,  725,  725,  725,  725,
+       45,   45,   22,  721,  636,  721,  537,  721,  636,  719,
+      721,  725,  725,  725,  636,  722,  725,   45,   45,   22,
+       60,   22,  721,  721,  721,  721,  725,  725,  725,  725,
+       45,   45,  638,  637,  638,  719,  637,  719,  638,  722,
+      637,  722,   45,   45,   45,   45,   45,   45,   45,   45,
+       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
+       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
+       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
+
+       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
+       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
+       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
+       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
+       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
+       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
+       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
+       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
+       45,   45,   45,   45,   45,   45,   45,   45
+    } ;
+
+static yyconst short int yy_accept[8400] =
+    {   0,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
+        3,    4,    5,    6,    7,    7,    7,    7,    7,    7,
+        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
+        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
+        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
+        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
+
+        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
+        7,    7,    7,    8,    9,    9,    9,    9,    9,    9,
+        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
+        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
+        9,    9,    9,    9,    9,   10,   12,   12,   12,   12,
+       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
+       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
+       12,   12,   12,   13,   14,   14,   14,   14,   14,   14,
+       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
+       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
+
+       14,   14,   14,   14,   14,   14,   14,   14,   14,   15,
+       16,   16,   16,   16,   16,   16,   16,   16,   16,   17,
+       18,   19,   20,   21,   22,   23,   24,   24,   24,   25,
+       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
+       26,   26,   26,   26,   26,   26,   26,   27,   28,   29,
+       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
+       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
+       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
+       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
+       30,   30,   30,   30,   30,   30,   30,   31,   32,   32,
+
+       32,   33,   34,   34,   34,   34,   34,   34,   34,   34,
+       34,   35,   37,   39,   41,   45,   48,   51,   53,   55,
+       58,   61,   64,   67,   70,   76,   80,   84,   87,   90,
+       92,   94,   96,   98,  100,  102,  105,  109,  112,  114,
+      116,  119,  121,  123,  126,  129,  131,  134,  136,  139,
+      142,  144,  147,  149,  151,  154,  157,  160,  163,  168,
+      172,  176,  179,  183,  187,  189,  192,  194,  196,  199,
+      201,  204,  208,  211,  214,  217,  221,  224,  229,  233,
+      237,  240,  243,  246,  251,  254,  257,  260,  263,  266,
+      269,  272,  277,  281,  285,  289,  292,  296,  299,  302,
+
+      305,  309,  311,  314,  317,  320,  323,  326,  328,  331,
+      334,  337,  340,  342,  344,  347,  350,  353,  356,  359,
+      362,  365,  368,  371,  374,  377,  380,  383,  386,  389,
+      392,  395,  398,  401,  404,  406,  410,  414,  417,  423,
+      428,  433,  437,  440,  442,  444,  446,  448,  451,  453,
+      455,  457,  459,  462,  464,  467,  470,  473,  475,  479,
+      482,  485,  488,  491,  494,  497,  501,  504,  509,  514,
+      518,  522,  526,  530,  533,  536,  539,  544,  548,  552,
+      556,  560,  563,  566,  569,  572,  577,  581,  585,  588,
+      592,  596,  600,  603,  606,  610,  613,  617,  621,  625,
+
+      629,  633,  637,  640,  643,  646,  651,  655,  659,  662,
+      665,  669,  672,  675,  678,  683,  687,  691,  694,  698,
+      702,  706,  710,  715,  718,  722,  728,  733,  738,  741,
+      744,  748,  752,  756,  759,  762,  764,  767,  770,  773,
+      775,  777,  779,  781,  784,  786,  788,  791,  793,  795,
+      798,  800,  802,  805,  807,  810,  812,  816,  820,  824,
+      827,  833,  839,  843,  846,  849,  852,  856,  860,  864,
+      871,  874,  879,  883,  886,  889,  892,  895,  898,  901,
+      907,  911,  915,  918,  921,  924,  929,  934,  937,  943,
+      948,  951,  955,  959,  962,  965,  968,  971,  976,  980,
+
+      984,  987,  990,  993,  996,  999, 1004, 1008, 1012, 1014,
+     1017, 1019, 1021, 1024, 1028, 1031, 1034, 1036, 1039, 1042,
+     1045, 1048, 1052, 1056, 1059, 1062, 1068, 1073, 1078, 1081,
+     1084, 1087, 1091, 1094, 1097, 1101, 1104, 1107, 1110, 1114,
+     1117, 1122, 1126, 1130, 1133, 1137, 1141, 1144, 1147, 1150,
+     1153, 1156, 1159, 1164, 1168, 1172, 1175, 1178, 1181, 1184,
+     1186, 1188, 1190, 1193, 1196, 1199, 1204, 1208, 1212, 1215,
+     1218, 1221, 1224, 1229, 1233, 1237, 1240, 1242, 1245, 1248,
+     1251, 1254, 1257, 1262, 1266, 1270, 1273, 1277, 1280, 1283,
+     1288, 1292, 1296, 1299, 1302, 1306, 1310, 1315, 1318, 1322,
+
+     1328, 1333, 1338, 1341, 1344, 1347, 1351, 1354, 1357, 1360,
+     1363, 1368, 1372, 1376, 1379, 1382, 1386, 1389, 1392, 1395,
+     1398, 1401, 1404, 1407, 1410, 1414, 1417, 1422, 1426, 1430,
+     1433, 1436, 1439, 1442, 1445, 1448, 1452, 1456, 1459, 1462,
+     1465, 1468, 1471, 1475, 1478, 1483, 1487, 1491, 1494, 1497,
+     1501, 1504, 1507, 1510, 1514, 1517, 1520, 1523, 1526, 1529,
+     1532, 1535, 1540, 1544, 1548, 1551, 1554, 1557, 1560, 1563,
+     1566, 1569, 1572, 1575, 1578, 1580, 1583, 1585, 1587, 1589,
+     1592, 1594, 1596, 1598, 1601, 1603, 1605, 1607, 1609, 1611,
+     1614, 1618, 1620, 1623, 1625, 1627, 1629, 1631, 1634, 1638,
+
+     1640, 1643, 1645, 1647, 1649, 1651, 1654, 1657, 1660, 1665,
+     1669, 1673, 1677, 1680, 1683, 1686, 1689, 1691, 1693, 1695,
+     1698, 1700, 1703, 1705, 1708, 1711, 1714, 1717, 1720, 1723,
+     1727, 1730, 1733, 1738, 1742, 1746, 1750, 1753, 1755, 1758,
+     1760, 1763, 1765, 1768, 1771, 1774, 1778, 1781, 1786, 1790,
+     1794, 1797, 1800, 1803, 1806, 1809, 1814, 1818, 1821, 1825,
+     1828, 1831, 1834, 1837, 1840, 1843, 1846, 1849, 1854, 1858,
+     1862, 1865, 1868, 1871, 1874, 1879, 1883, 1887, 1891, 1894,
+     1897, 1900, 1903, 1906, 1911, 1915, 1919, 1922, 1925, 1928,
+     1931, 1934, 1939, 1943, 1947, 1950, 1953, 1955, 1958, 1960,
+
+     1963, 1966, 1968, 1971, 1973, 1976, 1979, 1982, 1985, 1990,
+     1994, 1998, 2000, 2003, 2006, 2009, 2011, 2013, 2016, 2019,
+     2022, 2025, 2030, 2034, 2038, 2041, 2044, 2047, 2050, 2053,
+     2056, 2061, 2065, 2069, 2072, 2075, 2078, 2081, 2084, 2087,
+     2090, 2093, 2096, 2100, 2103, 2108, 2112, 2116, 2119, 2122,
+     2125, 2128, 2131, 2134, 2138, 2142, 2145, 2148, 2151, 2154,
+     2157, 2160, 2163, 2168, 2172, 2176, 2179, 2182, 2185, 2188,
+     2192, 2195, 2198, 2201, 2205, 2208, 2211, 2214, 2219, 2223,
+     2227, 2230, 2232, 2235, 2239, 2242, 2244, 2246, 2248, 2250,
+     2252, 2255, 2259, 2262, 2265, 2267, 2270, 2274, 2276, 2279,
+
+     2281, 2283, 2285, 2289, 2292, 2294, 2296, 2299, 2301, 2304,
+     2306, 2309, 2312, 2315, 2317, 2322, 2326, 2329, 2333, 2336,
+     2339, 2343, 2346, 2349, 2352, 2354, 2357, 2360, 2363, 2369,
+     2373, 2376, 2380, 2383, 2387, 2391, 2395, 2399, 2402, 2405,
+     2410, 2414, 2418, 2421, 2424, 2427, 2430, 2434, 2437, 2442,
+     2446, 2450, 2454, 2458, 2462, 2465, 2467, 2469, 2471, 2473,
+     2476, 2478, 2481, 2484, 2487, 2490, 2493, 2497, 2501, 2504,
+     2507, 2513, 2518, 2523, 2526, 2529, 2532, 2535, 2538, 2541,
+     2546, 2550, 2554, 2557, 2560, 2563, 2566, 2571, 2575, 2579,
+     2582, 2585, 2588, 2591, 2596, 2600, 2604, 2607, 2610, 2613,
+
+     2616, 2621, 2625, 2629, 2632, 2635, 2638, 2642, 2647, 2651,
+     2654, 2658, 2661, 2665, 2668, 2671, 2675, 2680, 2684, 2688,
+     2691, 2694, 2697, 2701, 2706, 2710, 2714, 2717, 2720, 2723,
+     2727, 2730, 2735, 2739, 2743, 2746, 2749, 2752, 2755, 2758,
+     2763, 2767, 2771, 2774, 2777, 2780, 2783, 2788, 2792, 2796,
+     2799, 2803, 2808, 2812, 2816, 2819, 2825, 2830, 2834, 2838,
+     2841, 2845, 2849, 2855, 2860, 2864, 2868, 2872, 2875, 2878,
+     2881, 2885, 2889, 2893, 2897, 2901, 2904, 2910, 2915, 2920,
+     2923, 2927, 2930, 2934, 2938, 2942, 2946, 2949, 2955, 2960,
+     2965, 2969, 2972, 2975, 2978, 2981, 2984, 2989, 2993, 2997,
+
+     3001, 3005, 3008, 3012, 3016, 3020, 3024, 3029, 3033, 3037,
+     3041, 3044, 3048, 3052, 3055, 3058, 3062, 3065, 3070, 3074,
+     3078, 3082, 3086, 3089, 3093, 3097, 3100, 3103, 3106, 3111,
+     3115, 3119, 3122, 3125, 3128, 3131, 3134, 3137, 3142, 3146,
+     3150, 3153, 3156, 3159, 3162, 3165, 3168, 3171, 3174, 3177,
+     3180, 3183, 3186, 3189, 3195, 3199, 3203, 3207, 3211, 3214,
+     3218, 3221, 3225, 3228, 3231, 3234, 3240, 3244, 3248, 3251,
+     3254, 3257, 3262, 3267, 3271, 3275, 3278, 3284, 3289, 3293,
+     3297, 3301, 3305, 3309, 3313, 3316, 3322, 3327, 3331, 3335,
+     3339, 3343, 3346, 3349, 3352, 3357, 3361, 3365, 3368, 3372,
+
+     3374, 3377, 3379, 3382, 3385, 3387, 3390, 3393, 3395, 3397,
+     3399, 3401, 3403, 3405, 3408, 3411, 3414, 3419, 3423, 3427,
+     3430, 3433, 3436, 3440, 3444, 3447, 3450, 3453, 3458, 3462,
+     3466, 3469, 3471, 3473, 3476, 3479, 3484, 3488, 3492, 3495,
+     3499, 3502, 3505, 3508, 3513, 3517, 3520, 3524, 3528, 3531,
+     3535, 3539, 3543, 3547, 3551, 3554, 3560, 3565, 3570, 3574,
+     3576, 3579, 3582, 3585, 3588, 3591, 3594, 3597, 3600, 3605,
+     3609, 3613, 3616, 3619, 3621, 3624, 3626, 3629, 3632, 3635,
+     3638, 3641, 3646, 3650, 3654, 3657, 3660, 3663, 3665, 3668,
+     3670, 3673, 3676, 3678, 3680, 3680, 3681, 3682, 3683, 3684,
+
+     3684, 3685, 3686, 3686, 3686, 3687, 3688, 3689, 3689, 3689,
+     3689, 3689, 3689, 3690, 3690, 3690, 3692, 3692, 3692, 3692,
+     3693, 3693, 3693, 3693, 3695, 3696, 3697, 3698, 3698, 3698,
+     3700, 3700, 3700, 3700, 3701, 3701, 3702, 3702, 3703, 3704,
+     3705, 3705, 3705, 3705, 3706, 3707, 3707, 3707, 3707, 3708,
+     3709, 3709, 3709, 3709, 3709, 3709, 3711, 3713, 3714, 3715,
+     3715, 3715, 3715, 3717, 3717, 3718, 3718, 3718, 3718, 3718,
+     3718, 3718, 3718, 3718, 3718, 3719, 3720, 3721, 3721, 3721,
+     3721, 3721, 3721, 3721, 3721, 3721, 3721, 3721, 3721, 3721,
+     3721, 3721, 3721, 3721, 3721, 3721, 3721, 3721, 3721, 3722,
+
+     3722, 3723, 3723, 3723, 3724, 3724, 3725, 3726, 3727, 3728,
+     3729, 3729, 3729, 3729, 3729, 3730, 3731, 3732, 3733, 3734,
+     3735, 3736, 3737, 3738, 3739, 3740, 3741, 3742, 3743, 3744,
+     3745, 3746, 3747, 3748, 3749, 3750, 3751, 3752, 3753, 3754,
+     3755, 3756, 3757, 3758, 3759, 3760, 3760, 3760, 3761, 3762,
+     3763, 3765, 3767, 3769, 3770, 3770, 3770, 3770, 3771, 3771,
+     3771, 3771, 3772, 3773, 3773, 3773, 3774, 3775, 3776, 3777,
+     3778, 3779, 3780, 3781, 3782, 3782, 3782, 3782, 3782, 3782,
+     3783, 3784, 3785, 3785, 3786, 3787, 3788, 3789, 3790, 3791,
+     3792, 3792, 3792, 3793, 3794, 3795, 3797, 3799, 3800, 3800,
+
+     3801, 3802, 3802, 3803, 3803, 3805, 3807, 3808, 3808, 3808,
+     3809, 3810, 3810, 3811, 3811, 3812, 3812, 3812, 3812, 3813,
+     3813, 3813, 3814, 3814, 3814, 3815, 3815, 3815, 3815, 3816,
+     3816, 3816, 3817, 3817, 3818, 3818, 3818, 3819, 3820, 3820,
+     3821, 3821, 3822, 3823, 3824, 3826, 3827, 3828, 3829, 3829,
+     3829, 3831, 3833, 3834, 3834, 3834, 3835, 3837, 3837, 3837,
+     3839, 3841, 3842, 3842, 3843, 3845, 3847, 3848, 3850, 3851,
+     3852, 3852, 3853, 3853, 3854, 3855, 3857, 3858, 3858, 3859,
+     3861, 3864, 3864, 3865, 3865, 3866, 3867, 3868, 3869, 3870,
+     3871, 3873, 3874, 3876, 3878, 3878, 3879, 3879, 3879, 3880,
+
+     3881, 3884, 3885, 3886, 3887, 3889, 3891, 3893, 3895, 3896,
+     3898, 3898, 3898, 3899, 3900, 3902, 3904, 3906, 3907, 3908,
+     3910, 3912, 3914, 3915, 3916, 3916, 3917, 3918, 3920, 3922,
+     3923, 3924, 3926, 3928, 3929, 3930, 3931, 3931, 3931, 3932,
+     3934, 3937, 3938, 3938, 3938, 3939, 3940, 3940, 3941, 3942,
+     3943, 3944, 3945, 3946, 3947, 3948, 3949, 3950, 3951, 3952,
+     3953, 3954, 3955, 3956, 3957, 3958, 3959, 3960, 3961, 3962,
+     3963, 3964, 3965, 3966, 3967, 3968, 3969, 3970, 3971, 3972,
+     3973, 3974, 3975, 3976, 3977, 3978, 3979, 3980, 3981, 3982,
+     3983, 3983, 3983, 3983, 3984, 3986, 3987, 3988, 3989, 3993,
+
+     3994, 3994, 3994, 3995, 3996, 3996, 3998, 3998, 3998, 3998,
+     3998, 3998, 3998, 3999, 3999, 4000, 4001, 4002, 4003, 4004,
+     4005, 4006, 4007, 4008, 4009, 4010, 4011, 4012, 4013, 4014,
+     4015, 4016, 4017, 4018, 4019, 4021, 4022, 4023, 4024, 4025,
+     4026, 4027, 4028, 4029, 4030, 4031, 4032, 4033, 4034, 4035,
+     4036, 4037, 4038, 4039, 4040, 4041, 4042, 4043, 4044, 4044,
+     4044, 4046, 4049, 4052, 4054, 4056, 4058, 4060, 4063, 4064,
+     4064, 4065, 4065, 4065, 4066, 4067, 4068, 4069, 4070, 4071,
+     4072, 4073, 4074, 4075, 4076, 4077, 4078, 4079, 4080, 4081,
+     4082, 4083, 4084, 4085, 4086, 4087, 4088, 4089, 4089, 4089,
+
+     4089, 4089, 4089, 4089, 4092, 4092, 4093, 4094, 4095, 4096,
+     4097, 4098, 4099, 4100, 4101, 4102, 4103, 4104, 4105, 4106,
+     4107, 4108, 4109, 4110, 4111, 4112, 4113, 4114, 4115, 4116,
+     4117, 4118, 4119, 4120, 4121, 4122, 4123, 4124, 4125, 4126,
+     4127, 4128, 4129, 4130, 4131, 4132, 4132, 4132, 4136, 4138,
+     4138, 4138, 4138, 4138, 4138, 4138, 4138, 4138, 4138, 4138,
+     4138, 4138, 4138, 4138, 4138, 4138, 4138, 4138, 4138, 4138,
+     4138, 4138, 4139, 4139, 4140, 4140, 4141, 4142, 4142, 4143,
+     4143, 4143, 4144, 4144, 4144, 4144, 4144, 4144, 4144, 4144,
+     4144, 4144, 4144, 4144, 4144, 4144, 4144, 4144, 4145, 4146,
+
+     4146, 4146, 4147, 4147, 4148, 4148, 4148, 4148, 4149, 4150,
+     4150, 4150, 4151, 4152, 4152, 4152, 4153, 4153, 4153, 4154,
+     4154, 4154, 4155, 4155, 4155, 4155, 4155, 4156, 4156, 4156,
+     4157, 4157, 4157, 4158, 4158, 4158, 4158, 4158, 4158, 4159,
+     4159, 4159, 4159, 4160, 4161, 4162, 4163, 4164, 4164, 4165,
+     4166, 4166, 4167, 4167, 4167, 4167, 4167, 4167, 4167, 4168,
+     4169, 4170, 4171, 4172, 4173, 4174, 4175, 4176, 4177, 4178,
+     4179, 4180, 4181, 4182, 4183, 4184, 4185, 4186, 4187, 4188,
+     4189, 4190, 4191, 4192, 4193, 4194, 4195, 4196, 4197, 4198,
+     4199, 4200, 4201, 4202, 4203, 4204, 4205, 4206, 4208, 4209,
+
+     4209, 4210, 4210, 4210, 4210, 4210, 4213, 4215, 4216, 4218,
+     4219, 4220, 4221, 4222, 4223, 4226, 4226, 4227, 4228, 4229,
+     4230, 4231, 4232, 4233, 4234, 4235, 4236, 4237, 4238, 4239,
+     4240, 4241, 4242, 4243, 4244, 4245, 4247, 4248, 4249, 4250,
+     4251, 4252, 4253, 4254, 4255, 4256, 4257, 4258, 4259, 4260,
+     4261, 4262, 4263, 4264, 4265, 4266, 4266, 4267, 4267, 4268,
+     4269, 4271, 4273, 4274, 4275, 4275, 4276, 4277, 4277, 4278,
+     4278, 4279, 4280, 4281, 4283, 4284, 4284, 4285, 4287, 4288,
+     4289, 4290, 4291, 4292, 4293, 4294, 4296, 4298, 4299, 4300,
+     4301, 4302, 4303, 4304, 4305, 4306, 4307, 4308, 4309, 4310,
+
+     4310, 4310, 4310, 4312, 4315, 4317, 4319, 4321, 4323, 4324,
+     4324, 4324, 4325, 4326, 4328, 4330, 4330, 4331, 4332, 4333,
+     4334, 4335, 4336, 4337, 4338, 4339, 4340, 4341, 4342, 4343,
+     4344, 4345, 4346, 4347, 4348, 4349, 4350, 4351, 4352, 4353,
+     4354, 4355, 4356, 4357, 4358, 4359, 4360, 4361, 4362, 4363,
+     4364, 4365, 4366, 4367, 4368, 4369, 4370, 4371, 4371, 4371,
+     4371, 4371, 4373, 4375, 4376, 4377, 4378, 4380, 4381, 4381,
+     4381, 4383, 4385, 4385, 4386, 4387, 4388, 4389, 4390, 4391,
+     4392, 4392, 4392, 4393, 4394, 4395, 4396, 4397, 4398, 4399,
+     4400, 4401, 4402, 4403, 4404, 4405, 4405, 4405, 4406, 4406,
+
+     4406, 4407, 4407, 4408, 4408, 4409, 4409, 4410, 4411, 4412,
+     4413, 4413, 4414, 4415, 4415, 4415, 4416, 4416, 4417, 4417,
+     4418, 4418, 4418, 4419, 4420, 4420, 4420, 4421, 4421, 4422,
+     4422, 4423, 4423, 4423, 4423, 4424, 4424, 4424, 4425, 4425,
+     4425, 4426, 4426, 4427, 4428, 4429, 4429, 4430, 4431, 4431,
+     4431, 4432, 4432, 4433, 4434, 4435, 4436, 4437, 4437, 4437,
+     4437, 4438, 4439, 4439, 4440, 4441, 4443, 4445, 4447, 4447,
+     4450, 4452, 4454, 4456, 4458, 4460, 4462, 4464, 4466, 4467,
+     4468, 4469, 4470, 4470, 4471, 4472, 4472, 4473, 4474, 4476,
+     4478, 4479, 4480, 4481, 4482, 4484, 4485, 4487, 4488, 4489,
+
+     4490, 4490, 4491, 4492, 4493, 4495, 4497, 4499, 4500, 4501,
+     4502, 4504, 4504, 4504, 4505, 4506, 4508, 4509, 4511, 4511,
+     4512, 4513, 4514, 4515, 4516, 4518, 4520, 4522, 4523, 4524,
+     4525, 4525, 4526, 4527, 4528, 4530, 4531, 4532, 4532, 4532,
+     4534, 4536, 4537, 4538, 4539, 4539, 4539, 4539, 4539, 4539,
+     4540, 4540, 4541, 4541, 4541, 4542, 4543, 4544, 4545, 4547,
+     4549, 4550, 4551, 4552, 4554, 4554, 4554, 4556, 4558, 4559,
+     4560, 4562, 4562, 4562, 4563, 4564, 4565, 4566, 4567, 4567,
+     4568, 4568, 4569, 4569, 4569, 4569, 4569, 4570, 4570, 4570,
+     4570, 4570, 4570, 4570, 4570, 4570, 4571, 4571, 4571, 4571,
+
+     4572, 4573, 4574, 4575, 4576, 4577, 4579, 4580, 4582, 4584,
+     4585, 4586, 4587, 4588, 4589, 4591, 4593, 4595, 4596, 4596,
+     4597, 4598, 4599, 4600, 4601, 4603, 4604, 4606, 4608, 4609,
+     4610, 4611, 4612, 4612, 4612, 4612, 4612, 4612, 4613, 4613,
+     4613, 4614, 4614, 4615, 4615, 4615, 4616, 4616, 4616, 4618,
+     4618, 4620, 4620, 4620, 4622, 4622, 4622, 4622, 4622, 4622,
+     4622, 4624, 4624, 4624, 4625, 4625, 4626, 4626, 4626, 4626,
+     4626, 4626, 4626, 4627, 4627, 4627, 4627, 4627, 4627, 4627,
+     4628, 4629, 4629, 4629, 4629, 4629, 4629, 4629, 4629, 4629,
+     4629, 4629, 4629, 4629, 4629, 4629, 4629, 4629, 4629, 4629,
+
+     4629, 4629, 4629, 4629, 4629, 4629, 4629, 4629, 4629, 4629,
+     4630, 4630, 4630, 4630, 4630, 4630, 4630, 4630, 4631, 4631,
+     4631, 4631, 4632, 4632, 4632, 4632, 4632, 4632, 4632, 4632,
+     4632, 4633, 4634, 4635, 4636, 4637, 4638, 4639, 4640, 4641,
+     4642, 4643, 4644, 4645, 4646, 4647, 4648, 4649, 4650, 4651,
+     4652, 4653, 4654, 4655, 4656, 4657, 4658, 4659, 4660, 4661,
+     4662, 4663, 4664, 4665, 4666, 4667, 4668, 4669, 4669, 4670,
+     4670, 4670, 4670, 4671, 4672, 4672, 4673, 4673, 4673, 4673,
+     4673, 4673, 4673, 4674, 4674, 4674, 4675, 4675, 4676, 4677,
+     4678, 4679, 4680, 4681, 4681, 4682, 4682, 4683, 4683, 4684,
+
+     4684, 4684, 4685, 4686, 4686, 4687, 4687, 4687, 4687, 4687,
+     4688, 4689, 4689, 4690, 4690, 4691, 4691, 4692, 4693, 4693,
+     4695, 4695, 4695, 4695, 4695, 4695, 4696, 4696, 4696, 4697,
+     4697, 4698, 4698, 4699, 4699, 4699, 4700, 4701, 4701, 4701,
+     4701, 4701, 4702, 4703, 4704, 4704, 4704, 4704, 4704, 4704,
+     4704, 4704, 4704, 4704, 4704, 4704, 4704, 4704, 4704, 4704,
+     4704, 4704, 4704, 4704, 4705, 4706, 4707, 4708, 4709, 4710,
+     4711, 4712, 4713, 4714, 4715, 4716, 4717, 4718, 4719, 4720,
+     4721, 4722, 4723, 4724, 4725, 4726, 4727, 4728, 4729, 4730,
+     4731, 4732, 4733, 4734, 4735, 4736, 4737, 4738, 4739, 4740,
+
+     4741, 4742, 4743, 4744, 4745, 4746, 4747, 4748, 4749, 4750,
+     4751, 4752, 4753, 4754, 4755, 4756, 4757, 4758, 4759, 4760,
+     4761, 4762, 4763, 4764, 4765, 4766, 4767, 4768, 4769, 4770,
+     4771, 4772, 4773, 4774, 4775, 4776, 4777, 4778, 4779, 4780,
+     4781, 4782, 4783, 4784, 4785, 4786, 4787, 4788, 4789, 4790,
+     4791, 4792, 4793, 4794, 4795, 4796, 4797, 4798, 4799, 4800,
+     4801, 4801, 4801, 4802, 4802, 4802, 4803, 4803, 4803, 4803,
+     4803, 4803, 4803, 4803, 4803, 4803, 4803, 4803, 4803, 4803,
+     4803, 4803, 4803, 4803, 4803, 4803, 4803, 4803, 4804, 4805,
+     4805, 4805, 4806, 4806, 4806, 4807, 4808, 4809, 4810, 4811,
+
+     4812, 4813, 4814, 4815, 4816, 4817, 4818, 4819, 4820, 4821,
+     4822, 4823, 4824, 4825, 4826, 4827, 4828, 4829, 4830, 4831,
+     4832, 4833, 4834, 4836, 4837, 4838, 4839, 4840, 4841, 4842,
+     4843, 4844, 4845, 4846, 4847, 4848, 4849, 4850, 4851, 4853,
+     4854, 4855, 4856, 4857, 4858, 4859, 4860, 4861, 4862, 4863,
+     4864, 4865, 4866, 4867, 4868, 4869, 4870, 4871, 4872, 4873,
+     4874, 4875, 4876, 4877, 4878, 4879, 4880, 4881, 4882, 4883,
+     4884, 4886, 4887, 4888, 4889, 4890, 4891, 4892, 4893, 4894,
+     4895, 4896, 4897, 4898, 4899, 4900, 4901, 4903, 4904, 4905,
+     4906, 4907, 4908, 4909, 4910, 4911, 4912, 4913, 4914, 4915,
+
+     4916, 4917, 4918, 4918, 4918, 4919, 4920, 4921, 4922, 4923,
+     4924, 4925, 4926, 4927, 4928, 4929, 4930, 4930, 4930, 4930,
+     4931, 4932, 4933, 4934, 4935, 4936, 4937, 4938, 4939, 4940,
+     4941, 4942, 4944, 4945, 4946, 4947, 4948, 4949, 4950, 4951,
+     4952, 4953, 4954, 4955, 4956, 4957, 4958, 4959, 4960, 4961,
+     4962, 4963, 4964, 4965, 4966, 4967, 4968, 4969, 4970, 4971,
+     4972, 4973, 4974, 4975, 4976, 4977, 4978, 4979, 4981, 4982,
+     4983, 4984, 4985, 4986, 4987, 4988, 4989, 4990, 4991, 4992,
+     4993, 4994, 4995, 4996, 4997, 4998, 4999, 5000, 5001, 5002,
+     5003, 5004, 5005, 5006, 5006, 5006, 5006, 5006, 5006, 5006,
+
+     5006, 5006, 5006, 5006, 5006, 5006, 5006, 5006, 5006, 5006,
+     5006, 5006, 5006, 5006, 5006, 5006, 5006, 5006, 5006, 5006,
+     5006, 5006, 5006, 5006, 5006, 5006, 5006, 5007, 5007, 5007,
+     5007, 5007, 5008, 5009, 5009, 5010, 5011, 5011, 5011, 5011,
+     5011, 5011, 5012, 5013, 5013, 5013, 5013, 5013, 5013, 5013,
+     5013, 5013, 5013, 5013, 5013, 5013, 5013, 5013, 5013, 5013,
+     5013, 5013, 5013, 5013, 5013, 5013, 5013, 5013, 5013, 5013,
+     5014, 5015, 5016, 5017, 5018, 5019, 5020, 5021, 5022, 5024,
+     5025, 5026, 5027, 5028, 5029, 5030, 5031, 5032, 5033, 5034,
+     5035, 5036, 5037, 5038, 5039, 5040, 5041, 5042, 5043, 5044,
+
+     5045, 5046, 5047, 5048, 5049, 5050, 5051, 5052, 5053, 5054,
+     5055, 5056, 5057, 5059, 5060, 5061, 5062, 5063, 5064, 5065,
+     5066, 5067, 5068, 5069, 5070, 5071, 5072, 5073, 5074, 5075,
+     5076, 5077, 5078, 5079, 5080, 5081, 5082, 5083, 5084, 5084,
+     5084, 5084, 5084, 5084, 5084, 5084, 5084, 5084, 5084, 5084,
+     5084, 5084, 5084, 5084, 5084, 5084, 5084, 5084, 5084, 5086,
+     5086, 5086, 5086, 5086, 5086, 5087, 5087, 5087, 5088, 5088,
+     5088, 5088, 5088, 5088, 5088, 5088, 5088, 5088, 5088, 5088,
+     5088, 5088, 5088, 5088, 5088, 5088, 5088, 5088, 5088, 5089,
+     5089, 5090, 5091, 5091, 5092, 5093, 5094, 5095, 5096, 5097,
+
+     5098, 5099, 5100, 5101, 5104, 5105, 5106, 5107, 5108, 5109,
+     5110, 5111, 5112, 5113, 5114, 5115, 5116, 5117, 5118, 5119,
+     5120, 5121, 5122, 5123, 5124, 5125, 5126, 5127, 5128, 5129,
+     5130, 5131, 5132, 5133, 5134, 5135, 5136, 5137, 5138, 5141,
+     5142, 5143, 5144, 5145, 5146, 5147, 5148, 5149, 5150, 5151,
+     5152, 5153, 5154, 5155, 5156, 5157, 5158, 5159, 5160, 5161,
+     5162, 5163, 5164, 5165, 5166, 5166, 5167, 5168, 5169, 5170,
+     5171, 5172, 5172, 5172, 5172, 5172, 5172, 5172, 5172, 5172,
+     5172, 5172, 5172, 5172, 5172, 5172, 5172, 5172, 5172, 5172,
+     5172, 5172, 5172, 5173, 5174, 5175, 5176, 5177, 5178, 5179,
+
+     5180, 5181, 5183, 5184, 5185, 5186, 5187, 5188, 5189, 5190,
+     5191, 5192, 5193, 5194, 5195, 5196, 5197, 5198, 5199, 5200,
+     5201, 5202, 5203, 5204, 5205, 5206, 5207, 5208, 5209, 5210,
+     5211, 5212, 5213, 5214, 5215, 5217, 5218, 5219, 5220, 5221,
+     5222, 5223, 5224, 5225, 5226, 5227, 5228, 5229, 5230, 5231,
+     5232, 5233, 5234, 5235, 5236, 5237, 5238, 5239, 5240, 5240,
+     5240, 5241, 5241, 5241, 5241, 5242, 5242, 5242, 5243, 5244,
+     5245, 5246, 5246, 5247, 5248, 5249, 5250, 5250, 5251, 5252,
+     5252, 5253, 5254, 5254, 5255, 5256, 5256, 5257, 5258, 5259,
+     5260, 5260, 5261, 5261, 5262, 5262, 5262, 5262, 5263, 5263,
+
+     5263, 5263, 5264, 5264, 5265, 5265, 5266, 5266, 5266, 5267,
+     5267, 5267, 5268, 5268, 5268, 5269, 5270, 5271, 5271, 5272,
+     5272, 5272, 5272, 5272, 5272, 5272, 5272, 5272, 5272, 5273,
+     5273, 5273, 5273, 5274, 5274, 5274, 5274, 5274, 5275, 5275,
+     5275, 5276, 5277, 5278, 5279, 5279, 5280, 5281, 5281, 5282,
+     5282, 5283, 5283, 5283, 5284, 5284, 5285, 5286, 5287, 5287,
+     5289, 5289, 5291, 5293, 5294, 5294, 5294, 5294, 5295, 5295,
+     5297, 5298, 5299, 5299, 5299, 5299, 5299, 5299, 5299, 5300,
+     5300, 5300, 5300, 5301, 5302, 5302, 5302, 5302, 5302, 5302,
+     5302, 5302, 5302, 5302, 5302, 5302, 5302, 5302, 5302, 5302,
+
+     5302, 5302, 5302, 5302, 5302, 5302, 5302, 5302, 5302, 5302,
+     5302, 5302, 5302, 5302, 5302, 5302, 5302, 5302, 5302, 5302,
+     5302, 5303, 5303, 5303, 5303, 5303, 5303, 5304, 5305, 5306,
+     5307, 5307, 5307, 5308, 5309, 5310, 5311, 5312, 5312, 5312,
+     5312, 5312, 5312, 5312, 5313, 5314, 5315, 5316, 5317, 5318,
+     5319, 5320, 5321, 5322, 5323, 5324, 5325, 5326, 5327, 5328,
+     5329, 5330, 5331, 5332, 5333, 5334, 5335, 5336, 5337, 5338,
+     5339, 5340, 5341, 5342, 5343, 5344, 5345, 5346, 5347, 5348,
+     5349, 5350, 5350, 5352, 5354, 5354, 5354, 5354, 5354, 5354,
+     5355, 5356, 5357, 5358, 5359, 5360, 5360, 5361, 5361, 5361,
+
+     5362, 5362, 5363, 5364, 5365, 5366, 5366, 5368, 5368, 5368,
+     5368, 5369, 5369, 5369, 5369, 5370, 5370, 5370, 5370, 5371,
+     5371, 5372, 5373, 5374, 5374, 5374, 5374, 5374, 5374, 5374,
+     5374, 5374, 5374, 5374, 5374, 5374, 5374, 5374, 5374, 5374,
+     5374, 5374, 5374, 5374, 5374, 5374, 5374, 5375, 5375, 5376,
+     5377, 5378, 5379, 5380, 5381, 5382, 5383, 5384, 5385, 5386,
+     5387, 5388, 5389, 5390, 5391, 5392, 5393, 5394, 5395, 5396,
+     5397, 5398, 5399, 5400, 5401, 5402, 5403, 5404, 5405, 5406,
+     5407, 5408, 5409, 5410, 5411, 5412, 5413, 5413, 5414, 5415,
+     5416, 5417, 5418, 5419, 5420, 5421, 5422, 5423, 5424, 5425,
+
+     5426, 5427, 5428, 5429, 5430, 5431, 5432, 5433, 5434, 5435,
+     5436, 5437, 5438, 5439, 5440, 5441, 5442, 5443, 5444, 5445,
+     5446, 5447, 5448, 5449, 5450, 5451, 5452, 5453, 5454, 5455,
+     5456, 5457, 5458, 5459, 5460, 5461, 5462, 5463, 5464, 5465,
+     5466, 5467, 5468, 5469, 5470, 5471, 5472, 5473, 5474, 5475,
+     5476, 5477, 5478, 5479, 5480, 5481, 5481, 5481, 5481, 5481,
+     5481, 5481, 5481, 5481, 5481, 5481, 5482, 5482, 5482, 5482,
+     5482, 5482, 5482, 5482, 5482, 5482, 5482, 5482, 5482, 5482,
+     5482, 5482, 5482, 5482, 5482, 5482, 5482, 5482, 5482, 5482,
+     5482, 5482, 5482, 5482, 5483, 5484, 5485, 5486, 5487, 5488,
+
+     5489, 5490, 5491, 5492, 5493, 5494, 5495, 5496, 5497, 5498,
+     5499, 5500, 5502, 5503, 5504, 5505, 5506, 5507, 5509, 5510,
+     5511, 5513, 5514, 5515, 5516, 5517, 5518, 5519, 5520, 5521,
+     5522, 5523, 5524, 5525, 5526, 5527, 5528, 5529, 5530, 5531,
+     5532, 5533, 5534, 5535, 5537, 5538, 5539, 5540, 5541, 5542,
+     5543, 5544, 5545, 5546, 5547, 5548, 5549, 5550, 5551, 5552,
+     5553, 5554, 5555, 5556, 5557, 5558, 5559, 5561, 5562, 5563,
+     5564, 5565, 5566, 5568, 5569, 5570, 5572, 5573, 5574, 5575,
+     5576, 5577, 5578, 5579, 5580, 5581, 5582, 5583, 5584, 5585,
+     5586, 5587, 5588, 5589, 5590, 5591, 5592, 5593, 5594, 5596,
+
+     5597, 5598, 5599, 5600, 5601, 5602, 5603, 5604, 5605, 5606,
+     5607, 5608, 5609, 5610, 5611, 5612, 5613, 5614, 5614, 5615,
+     5616, 5617, 5618, 5619, 5620, 5620, 5621, 5622, 5623, 5625,
+     5626, 5627, 5628, 5630, 5631, 5632, 5634, 5635, 5636, 5637,
+     5638, 5639, 5640, 5641, 5642, 5643, 5644, 5646, 5647, 5648,
+     5649, 5650, 5651, 5652, 5653, 5654, 5655, 5656, 5657, 5658,
+     5659, 5660, 5661, 5662, 5663, 5665, 5666, 5667, 5668, 5670,
+     5671, 5672, 5674, 5675, 5676, 5677, 5678, 5679, 5680, 5681,
+     5682, 5683, 5684, 5686, 5687, 5688, 5689, 5690, 5691, 5692,
+     5693, 5694, 5695, 5696, 5697, 5698, 5699, 5700, 5700, 5700,
+
+     5700, 5700, 5700, 5701, 5701, 5701, 5702, 5702, 5702, 5702,
+     5702, 5702, 5702, 5702, 5702, 5702, 5702, 5703, 5703, 5703,
+     5703, 5703, 5703, 5703, 5703, 5703, 5703, 5703, 5703, 5703,
+     5703, 5704, 5704, 5704, 5704, 5704, 5704, 5704, 5704, 5704,
+     5704, 5704, 5704, 5704, 5704, 5704, 5704, 5704, 5704, 5704,
+     5704, 5704, 5704, 5704, 5704, 5704, 5704, 5704, 5704, 5704,
+     5704, 5704, 5704, 5704, 5704, 5704, 5704, 5704, 5704, 5704,
+     5704, 5704, 5705, 5705, 5706, 5707, 5708, 5709, 5710, 5712,
+     5713, 5714, 5716, 5717, 5718, 5719, 5720, 5721, 5722, 5723,
+     5724, 5725, 5726, 5728, 5729, 5730, 5731, 5732, 5733, 5734,
+
+     5735, 5736, 5737, 5738, 5739, 5740, 5741, 5742, 5743, 5744,
+     5745, 5746, 5747, 5749, 5750, 5751, 5753, 5754, 5755, 5756,
+     5757, 5758, 5759, 5760, 5761, 5762, 5763, 5765, 5766, 5767,
+     5768, 5769, 5770, 5771, 5772, 5773, 5774, 5775, 5776, 5777,
+     5778, 5779, 5779, 5779, 5779, 5779, 5779, 5779, 5779, 5779,
+     5779, 5779, 5779, 5779, 5779, 5779, 5779, 5779, 5779, 5779,
+     5779, 5779, 5779, 5779, 5779, 5779, 5779, 5779, 5779, 5779,
+     5779, 5779, 5779, 5779, 5779, 5779, 5779, 5779, 5779, 5779,
+     5779, 5779, 5779, 5779, 5779, 5779, 5779, 5779, 5779, 5779,
+     5779, 5779, 5779, 5779, 5779, 5779, 5779, 5779, 5779, 5779,
+
+     5779, 5779, 5779, 5779, 5779, 5779, 5779, 5779, 5779, 5779,
+     5779, 5780, 5781, 5782, 5783, 5784, 5785, 5788, 5789, 5790,
+     5793, 5794, 5795, 5796, 5797, 5798, 5799, 5800, 5801, 5802,
+     5803, 5806, 5807, 5808, 5809, 5810, 5811, 5812, 5813, 5814,
+     5815, 5816, 5817, 5818, 5819, 5820, 5821, 5822, 5823, 5824,
+     5825, 5826, 5829, 5830, 5831, 5834, 5835, 5836, 5837, 5838,
+     5839, 5840, 5841, 5842, 5843, 5844, 5847, 5848, 5849, 5850,
+     5851, 5852, 5853, 5854, 5855, 5856, 5857, 5858, 5859, 5860,
+     5861, 5861, 5862, 5863, 5864, 5865, 5865, 5865, 5865, 5865,
+     5865, 5865, 5865, 5865, 5865, 5865, 5865, 5865, 5865, 5865,
+
+     5865, 5865, 5865, 5865, 5865, 5865, 5865, 5865, 5865, 5865,
+     5865, 5865, 5865, 5865, 5865, 5865, 5865, 5865, 5865, 5866,
+     5867, 5868, 5869, 5870, 5872, 5873, 5874, 5876, 5877, 5878,
+     5879, 5880, 5881, 5882, 5883, 5884, 5885, 5886, 5888, 5889,
+     5890, 5891, 5892, 5893, 5894, 5895, 5896, 5897, 5898, 5899,
+     5900, 5901, 5902, 5903, 5904, 5905, 5906, 5908, 5909, 5910,
+     5912, 5913, 5914, 5915, 5916, 5917, 5918, 5919, 5920, 5921,
+     5922, 5924, 5925, 5926, 5927, 5928, 5929, 5930, 5931, 5932,
+     5933, 5934, 5935, 5936, 5937, 5937, 5937, 5937, 5937, 5937,
+     5938, 5939, 5940, 5941, 5941, 5942, 5943, 5944, 5945, 5945,
+
+     5945, 5946, 5947, 5948, 5948, 5949, 5949, 5949, 5950, 5950,
+     5950, 5950, 5950, 5951, 5951, 5952, 5952, 5953, 5953, 5953,
+     5954, 5954, 5954, 5955, 5955, 5955, 5956, 5956, 5956, 5957,
+     5958, 5959, 5960, 5960, 5960, 5960, 5960, 5960, 5961, 5961,
+     5961, 5962, 5964, 5964, 5964, 5964, 5964, 5964, 5964, 5965,
+     5966, 5967, 5968, 5968, 5968, 5968, 5968, 5968, 5968, 5968,
+     5968, 5968, 5968, 5968, 5968, 5968, 5968, 5968, 5968, 5968,
+     5968, 5968, 5968, 5968, 5968, 5968, 5968, 5968, 5968, 5968,
+     5968, 5968, 5968, 5969, 5969, 5969, 5969, 5969, 5970, 5970,
+     5970, 5970, 5970, 5970, 5970, 5970, 5971, 5971, 5971, 5971,
+
+     5971, 5971, 5971, 5972, 5973, 5974, 5975, 5976, 5977, 5978,
+     5979, 5980, 5981, 5982, 5983, 5985, 5986, 5987, 5988, 5989,
+     5990, 5991, 5992, 5993, 5994, 5995, 5996, 5997, 5998, 5999,
+     6000, 6001, 6002, 6003, 6004, 6005, 6006, 6007, 6008, 6009,
+     6010, 6011, 6012, 6013, 6014, 6015, 6016, 6016, 6016, 6016,
+     6016, 6018, 6019, 6020, 6021, 6023, 6023, 6023, 6023, 6024,
+     6024, 6024, 6025, 6025, 6025, 6025, 6026, 6027, 6027, 6027,
+     6027, 6027, 6028, 6030, 6031, 6032, 6033, 6033, 6033, 6033,
+     6033, 6033, 6033, 6033, 6033, 6033, 6033, 6033, 6033, 6033,
+     6033, 6033, 6033, 6033, 6033, 6033, 6033, 6033, 6033, 6033,
+
+     6033, 6034, 6035, 6036, 6037, 6038, 6039, 6040, 6041, 6042,
+     6043, 6044, 6045, 6046, 6047, 6048, 6049, 6050, 6051, 6052,
+     6053, 6054, 6055, 6056, 6057, 6058, 6059, 6060, 6061, 6062,
+     6063, 6064, 6065, 6066, 6068, 6069, 6070, 6071, 6072, 6073,
+     6074, 6075, 6076, 6077, 6078, 6079, 6080, 6081, 6082, 6083,
+     6084, 6085, 6086, 6087, 6088, 6089, 6090, 6091, 6092, 6093,
+     6094, 6095, 6096, 6097, 6098, 6099, 6100, 6101, 6103, 6104,
+     6105, 6106, 6107, 6108, 6109, 6110, 6112, 6113, 6114, 6115,
+     6116, 6118, 6119, 6120, 6121, 6122, 6123, 6124, 6125, 6126,
+     6127, 6128, 6129, 6130, 6131, 6132, 6133, 6134, 6135, 6136,
+
+     6137, 6138, 6139, 6140, 6141, 6142, 6143, 6144, 6145, 6146,
+     6147, 6147, 6147, 6147, 6147, 6147, 6147, 6148, 6148, 6148,
+     6149, 6149, 6149, 6149, 6149, 6149, 6149, 6149, 6149, 6149,
+     6149, 6150, 6150, 6150, 6150, 6150, 6150, 6150, 6150, 6150,
+     6150, 6150, 6150, 6150, 6150, 6150, 6152, 6152, 6153, 6154,
+     6155, 6156, 6157, 6158, 6159, 6160, 6161, 6162, 6163, 6164,
+     6165, 6166, 6167, 6168, 6169, 6170, 6171, 6172, 6173, 6174,
+     6175, 6176, 6177, 6178, 6179, 6180, 6181, 6182, 6183, 6184,
+     6185, 6187, 6188, 6189, 6190, 6191, 6192, 6193, 6194, 6195,
+     6196, 6197, 6198, 6199, 6200, 6201, 6202, 6203, 6204, 6205,
+
+     6206, 6207, 6208, 6209, 6210, 6211, 6212, 6213, 6214, 6216,
+     6218, 6219, 6220, 6221, 6222, 6223, 6224, 6225, 6226, 6227,
+     6228, 6229, 6230, 6231, 6233, 6234, 6235, 6236, 6237, 6238,
+     6239, 6240, 6242, 6243, 6244, 6245, 6246, 6247, 6248, 6250,
+     6251, 6252, 6253, 6254, 6255, 6256, 6257, 6258, 6259, 6260,
+     6261, 6262, 6263, 6264, 6265, 6266, 6267, 6268, 6269, 6270,
+     6271, 6272, 6273, 6274, 6275, 6276, 6277, 6279, 6281, 6282,
+     6283, 6284, 6285, 6286, 6287, 6288, 6289, 6289, 6290, 6291,
+     6292, 6293, 6294, 6295, 6296, 6297, 6298, 6299, 6300, 6301,
+     6302, 6303, 6304, 6305, 6306, 6307, 6308, 6309, 6310, 6311,
+
+     6312, 6313, 6314, 6315, 6316, 6318, 6320, 6321, 6322, 6323,
+     6324, 6325, 6326, 6327, 6328, 6329, 6330, 6331, 6332, 6333,
+     6334, 6335, 6336, 6337, 6338, 6339, 6340, 6341, 6342, 6343,
+     6344, 6345, 6346, 6347, 6348, 6349, 6350, 6351, 6352, 6354,
+     6356, 6357, 6358, 6359, 6360, 6361, 6362, 6363, 6364, 6364,
+     6364, 6364, 6364, 6364, 6364, 6364, 6364, 6364, 6364, 6364,
+     6364, 6364, 6364, 6364, 6364, 6364, 6364, 6364, 6364, 6364,
+     6364, 6364, 6364, 6364, 6364, 6364, 6364, 6364, 6364, 6364,
+     6365, 6365, 6365, 6365, 6365, 6365, 6365, 6365, 6366, 6366,
+     6366, 6367, 6367, 6367, 6367, 6367, 6367, 6367, 6367, 6367,
+
+     6367, 6367, 6368, 6368, 6368, 6368, 6368, 6368, 6368, 6368,
+     6368, 6368, 6368, 6368, 6368, 6368, 6368, 6368, 6369, 6370,
+     6371, 6372, 6373, 6374, 6375, 6376, 6377, 6378, 6379, 6380,
+     6381, 6382, 6383, 6384, 6385, 6386, 6387, 6388, 6389, 6390,
+     6391, 6392, 6393, 6394, 6395, 6396, 6397, 6398, 6399, 6400,
+     6401, 6402, 6403, 6404, 6405, 6406, 6407, 6408, 6409, 6410,
+     6411, 6412, 6413, 6414, 6415, 6416, 6417, 6418, 6419, 6420,
+     6421, 6422, 6423, 6424, 6425, 6426, 6427, 6428, 6428, 6428,
+     6428, 6428, 6428, 6428, 6430, 6430, 6430, 6432, 6432, 6432,
+     6432, 6432, 6432, 6432, 6432, 6432, 6432, 6432, 6434, 6434,
+
+     6434, 6434, 6434, 6434, 6434, 6434, 6434, 6434, 6434, 6434,
+     6434, 6434, 6434, 6434, 6434, 6434, 6434, 6434, 6434, 6435,
+     6435, 6435, 6436, 6436, 6436, 6436, 6436, 6436, 6436, 6436,
+     6436, 6436, 6436, 6437, 6437, 6437, 6437, 6437, 6437, 6437,
+     6437, 6437, 6437, 6437, 6437, 6437, 6437, 6438, 6439, 6440,
+     6441, 6442, 6443, 6444, 6445, 6446, 6447, 6448, 6449, 6450,
+     6451, 6452, 6453, 6454, 6455, 6456, 6457, 6458, 6459, 6460,
+     6461, 6462, 6463, 6464, 6465, 6466, 6467, 6468, 6469, 6470,
+     6471, 6472, 6473, 6474, 6475, 6476, 6477, 6478, 6479, 6480,
+     6481, 6482, 6483, 6484, 6485, 6486, 6487, 6488, 6489, 6490,
+
+     6491, 6492, 6493, 6494, 6495, 6496, 6497, 6498, 6499, 6500,
+     6501, 6501, 6502, 6503, 6503, 6503, 6503, 6503, 6503, 6504,
+     6504, 6504, 6505, 6505, 6505, 6505, 6505, 6505, 6505, 6505,
+     6505, 6505, 6505, 6506, 6506, 6506, 6506, 6506, 6506, 6506,
+     6506, 6506, 6506, 6506, 6506, 6506, 6506, 6507, 6508, 6509,
+     6510, 6511, 6512, 6513, 6514, 6515, 6516, 6517, 6518, 6519,
+     6520, 6521, 6522, 6523, 6524, 6525, 6526, 6527, 6528, 6529,
+     6530, 6531, 6532, 6533, 6534, 6535, 6536, 6537, 6538, 6539,
+     6540, 6541, 6542, 6543, 6544, 6545, 6546, 6547, 6548, 6549,
+     6550, 6551, 6552, 6553, 6554, 6555, 6556, 6557, 6558, 6559,
+
+     6560, 6561, 6562, 6563, 6564, 6565, 6566, 6567, 6568, 6569,
+     6570, 6571, 6572, 6572, 6573, 6574, 6575, 6576, 6576, 6576,
+     6576, 6576, 6576, 6576, 6576, 6576, 6576, 6576, 6576, 6576,
+     6577, 6577, 6577, 6577, 6577, 6577, 6577, 6577, 6578, 6578,
+     6579, 6581, 6581, 6581, 6582, 6582, 6583, 6584, 6584, 6584,
+     6584, 6584, 6584, 6584, 6585, 6585, 6585, 6585, 6585, 6585,
+     6585, 6585, 6585, 6585, 6585, 6585, 6585, 6585, 6585, 6585,
+     6585, 6585, 6585, 6585, 6585, 6585, 6585, 6585, 6585, 6585,
+     6585, 6585, 6585, 6585, 6585, 6586, 6587, 6587, 6587, 6587,
+     6587, 6587, 6587, 6588, 6589, 6590, 6591, 6592, 6593, 6594,
+
+     6595, 6596, 6597, 6598, 6599, 6600, 6601, 6602, 6603, 6604,
+     6605, 6606, 6607, 6608, 6609, 6610, 6611, 6612, 6613, 6614,
+     6615, 6616, 6618, 6619, 6620, 6621, 6622, 6623, 6624, 6625,
+     6626, 6627, 6628, 6628, 6628, 6628, 6629, 6630, 6630, 6631,
+     6632, 6633, 6633, 6634, 6634, 6635, 6636, 6637, 6637, 6637,
+     6638, 6638, 6638, 6639, 6640, 6641, 6641, 6641, 6641, 6641,
+     6641, 6641, 6641, 6641, 6642, 6642, 6642, 6642, 6642, 6642,
+     6642, 6642, 6642, 6642, 6642, 6642, 6642, 6642, 6642, 6642,
+     6642, 6642, 6643, 6644, 6645, 6647, 6648, 6649, 6650, 6651,
+     6652, 6653, 6654, 6655, 6656, 6657, 6659, 6660, 6661, 6662,
+
+     6663, 6664, 6665, 6666, 6667, 6668, 6669, 6670, 6671, 6672,
+     6673, 6674, 6675, 6676, 6677, 6678, 6679, 6680, 6681, 6682,
+     6683, 6684, 6685, 6686, 6687, 6688, 6689, 6690, 6691, 6692,
+     6693, 6694, 6695, 6696, 6697, 6698, 6699, 6700, 6701, 6702,
+     6703, 6704, 6705, 6707, 6708, 6709, 6710, 6712, 6713, 6714,
+     6715, 6717, 6718, 6719, 6720, 6721, 6722, 6723, 6724, 6725,
+     6726, 6727, 6728, 6729, 6730, 6731, 6732, 6733, 6734, 6735,
+     6736, 6737, 6738, 6739, 6740, 6741, 6743, 6745, 6746, 6747,
+     6748, 6749, 6750, 6750, 6750, 6750, 6750, 6750, 6750, 6750,
+     6750, 6750, 6750, 6750, 6750, 6750, 6750, 6750, 6750, 6750,
+
+     6750, 6750, 6750, 6750, 6750, 6750, 6750, 6750, 6750, 6750,
+     6750, 6750, 6750, 6750, 6750, 6751, 6752, 6753, 6754, 6756,
+     6757, 6758, 6759, 6760, 6761, 6762, 6763, 6764, 6765, 6766,
+     6767, 6768, 6769, 6770, 6772, 6773, 6774, 6775, 6776, 6777,
+     6778, 6779, 6780, 6781, 6782, 6783, 6784, 6785, 6786, 6787,
+     6788, 6789, 6790, 6791, 6792, 6793, 6794, 6795, 6796, 6797,
+     6798, 6799, 6800, 6801, 6802, 6803, 6804, 6805, 6806, 6807,
+     6809, 6810, 6811, 6812, 6813, 6814, 6815, 6816, 6817, 6818,
+     6819, 6820, 6821, 6822, 6824, 6826, 6827, 6828, 6829, 6830,
+     6832, 6833, 6834, 6835, 6836, 6837, 6838, 6839, 6840, 6841,
+
+     6842, 6843, 6844, 6845, 6846, 6847, 6848, 6849, 6850, 6851,
+     6852, 6853, 6854, 6855, 6856, 6857, 6858, 6859, 6860, 6861,
+     6863, 6865, 6866, 6868, 6869, 6870, 6871, 6872, 6873, 6874,
+     6874, 6875, 6876, 6877, 6878, 6879, 6881, 6882, 6883, 6884,
+     6885, 6886, 6887, 6888, 6889, 6890, 6891, 6892, 6892, 6893,
+     6894, 6895, 6896, 6897, 6898, 6899, 6900, 6901, 6902, 6903,
+     6904, 6905, 6906, 6907, 6908, 6909, 6911, 6912, 6913, 6914,
+     6915, 6916, 6917, 6918, 6919, 6920, 6921, 6922, 6923, 6924,
+     6925, 6926, 6927, 6928, 6929, 6930, 6931, 6932, 6933, 6934,
+     6935, 6936, 6937, 6937, 6937, 6937, 6937, 6937, 6937, 6937,
+
+     6937, 6937, 6937, 6937, 6937, 6937, 6937, 6937, 6937, 6937,
+     6937, 6937, 6937, 6937, 6937, 6937, 6937, 6937, 6937, 6937,
+     6938, 6938, 6939, 6939, 6939, 6939, 6939, 6939, 6939, 6939,
+     6939, 6939, 6939, 6939, 6939, 6939, 6939, 6939, 6939, 6939,
+     6939, 6939, 6939, 6939, 6939, 6939, 6939, 6939, 6939, 6939,
+     6939, 6939, 6939, 6939, 6940, 6941, 6942, 6943, 6944, 6945,
+     6946, 6947, 6948, 6949, 6950, 6951, 6952, 6953, 6954, 6955,
+     6956, 6957, 6958, 6959, 6960, 6961, 6962, 6963, 6964, 6965,
+     6966, 6967, 6968, 6969, 6970, 6971, 6972, 6973, 6974, 6975,
+     6976, 6977, 6978, 6979, 6980, 6981, 6982, 6983, 6984, 6985,
+
+     6986, 6987, 6988, 6989, 6990, 6991, 6991, 6991, 6991, 6991,
+     6991, 6991, 6991, 6991, 6991, 6991, 6991, 6991, 6991, 6991,
+     6991, 6991, 6991, 6991, 6991, 6991, 6991, 6991, 6991, 6991,
+     6991, 6991, 6991, 6991, 6991, 6991, 6991, 6991, 6991, 6991,
+     6991, 6991, 6991, 6991, 6991, 6991, 6991, 6991, 6991, 6991,
+     6991, 6991, 6991, 6991, 6991, 6991, 6991, 6991, 6991, 6991,
+     6991, 6991, 6991, 6991, 6991, 6991, 6991, 6991, 6992, 6993,
+     6994, 6995, 6996, 6997, 6998, 6999, 7000, 7001, 7002, 7003,
+     7004, 7005, 7006, 7007, 7008, 7009, 7010, 7011, 7012, 7013,
+     7014, 7015, 7016, 7017, 7018, 7019, 7020, 7021, 7022, 7023,
+
+     7024, 7025, 7026, 7027, 7028, 7029, 7030, 7031, 7032, 7033,
+     7034, 7035, 7036, 7037, 7038, 7039, 7040, 7041, 7042, 7043,
+     7044, 7045, 7046, 7048, 7050, 7050, 7050, 7050, 7050, 7050,
+     7050, 7050, 7050, 7050, 7050, 7050, 7050, 7050, 7050, 7050,
+     7050, 7050, 7050, 7050, 7050, 7050, 7050, 7050, 7050, 7050,
+     7050, 7050, 7050, 7050, 7050, 7051, 7052, 7053, 7054, 7055,
+     7056, 7057, 7058, 7059, 7060, 7061, 7062, 7063, 7064, 7065,
+     7066, 7067, 7068, 7069, 7070, 7071, 7072, 7073, 7074, 7075,
+     7076, 7077, 7078, 7079, 7080, 7081, 7082, 7083, 7084, 7085,
+     7086, 7087, 7088, 7089, 7090, 7091, 7092, 7093, 7094, 7095,
+
+     7096, 7097, 7098, 7099, 7100, 7101, 7102, 7103, 7104, 7105,
+     7106, 7106, 7107, 7108, 7109, 7110, 7110, 7110, 7110, 7110,
+     7110, 7110, 7110, 7110, 7110, 7112, 7113, 7113, 7114, 7115,
+     7116, 7116, 7116, 7116, 7117, 7117, 7117, 7117, 7117, 7117,
+     7117, 7117, 7117, 7117, 7117, 7117, 7117, 7117, 7117, 7117,
+     7117, 7117, 7117, 7117, 7118, 7118, 7118, 7119, 7119, 7119,
+     7119, 7120, 7120, 7120, 7120, 7120, 7120, 7120, 7120, 7120,
+     7121, 7122, 7123, 7124, 7125, 7126, 7126, 7126, 7127, 7128,
+     7129, 7129, 7130, 7131, 7132, 7132, 7133, 7134, 7135, 7136,
+     7137, 7138, 7139, 7140, 7141, 7141, 7142, 7143, 7144, 7145,
+
+     7146, 7147, 7148, 7149, 7150, 7151, 7152, 7153, 7154, 7154,
+     7154, 7154, 7154, 7155, 7156, 7157, 7157, 7158, 7158, 7158,
+     7159, 7160, 7160, 7160, 7160, 7161, 7162, 7163, 7164, 7164,
+     7165, 7165, 7165, 7165, 7165, 7165, 7165, 7165, 7165, 7165,
+     7165, 7165, 7165, 7165, 7165, 7165, 7165, 7165, 7165, 7166,
+     7167, 7168, 7169, 7170, 7171, 7172, 7173, 7174, 7175, 7176,
+     7177, 7178, 7179, 7180, 7181, 7182, 7183, 7184, 7185, 7186,
+     7187, 7188, 7189, 7190, 7191, 7192, 7193, 7194, 7195, 7196,
+     7197, 7198, 7199, 7200, 7201, 7202, 7203, 7204, 7205, 7206,
+     7207, 7208, 7209, 7210, 7211, 7212, 7213, 7214, 7215, 7216,
+
+     7217, 7218, 7219, 7220, 7221, 7222, 7223, 7225, 7226, 7227,
+     7228, 7229, 7230, 7231, 7232, 7233, 7234, 7235, 7236, 7237,
+     7238, 7239, 7240, 7241, 7242, 7243, 7244, 7245, 7246, 7247,
+     7248, 7249, 7250, 7251, 7251, 7251, 7251, 7252, 7252, 7252,
+     7252, 7252, 7252, 7252, 7252, 7252, 7252, 7252, 7252, 7252,
+     7252, 7252, 7252, 7252, 7252, 7253, 7253, 7253, 7253, 7253,
+     7253, 7253, 7254, 7255, 7256, 7257, 7258, 7259, 7260, 7261,
+     7262, 7263, 7264, 7265, 7266, 7267, 7268, 7269, 7270, 7271,
+     7272, 7273, 7274, 7275, 7276, 7277, 7278, 7279, 7280, 7281,
+     7282, 7283, 7284, 7285, 7286, 7287, 7288, 7289, 7290, 7291,
+
+     7292, 7293, 7295, 7297, 7298, 7299, 7301, 7302, 7303, 7304,
+     7305, 7306, 7307, 7308, 7309, 7310, 7311, 7312, 7313, 7314,
+     7315, 7316, 7317, 7318, 7319, 7320, 7322, 7323, 7324, 7325,
+     7326, 7327, 7328, 7329, 7330, 7331, 7332, 7333, 7334, 7335,
+     7336, 7337, 7338, 7339, 7340, 7341, 7343, 7345, 7346, 7347,
+     7349, 7350, 7351, 7352, 7353, 7354, 7355, 7356, 7357, 7358,
+     7358, 7359, 7360, 7361, 7362, 7363, 7364, 7365, 7366, 7367,
+     7368, 7369, 7370, 7371, 7372, 7373, 7375, 7377, 7378, 7379,
+     7380, 7381, 7382, 7383, 7384, 7385, 7386, 7387, 7388, 7389,
+     7390, 7391, 7392, 7393, 7394, 7395, 7396, 7397, 7398, 7400,
+
+     7402, 7403, 7404, 7405, 7406, 7407, 7408, 7409, 7409, 7409,
+     7409, 7409, 7409, 7409, 7409, 7409, 7409, 7409, 7409, 7409,
+     7409, 7409, 7410, 7411, 7411, 7411, 7411, 7411, 7411, 7411,
+     7411, 7411, 7411, 7411, 7411, 7411, 7411, 7411, 7411, 7411,
+     7411, 7411, 7411, 7411, 7411, 7411, 7411, 7411, 7411, 7411,
+     7411, 7411, 7411, 7411, 7411, 7411, 7411, 7411, 7411, 7412,
+     7413, 7414, 7415, 7416, 7417, 7418, 7419, 7420, 7421, 7422,
+     7423, 7424, 7425, 7427, 7429, 7430, 7431, 7432, 7433, 7434,
+     7435, 7436, 7437, 7438, 7439, 7440, 7441, 7442, 7443, 7444,
+     7445, 7446, 7447, 7448, 7449, 7450, 7452, 7454, 7455, 7456,
+
+     7457, 7458, 7459, 7460, 7461, 7461, 7461, 7461, 7461, 7461,
+     7461, 7461, 7461, 7461, 7461, 7461, 7461, 7461, 7461, 7461,
+     7461, 7461, 7461, 7461, 7461, 7461, 7461, 7461, 7461, 7461,
+     7461, 7461, 7461, 7461, 7461, 7461, 7461, 7461, 7461, 7461,
+     7461, 7461, 7461, 7461, 7461, 7461, 7461, 7461, 7461, 7461,
+     7461, 7461, 7461, 7461, 7461, 7461, 7461, 7461, 7462, 7463,
+     7464, 7465, 7466, 7467, 7468, 7469, 7470, 7471, 7472, 7473,
+     7474, 7475, 7476, 7479, 7482, 7483, 7484, 7485, 7486, 7487,
+     7488, 7489, 7490, 7491, 7492, 7493, 7494, 7495, 7496, 7497,
+     7498, 7499, 7500, 7501, 7502, 7503, 7506, 7509, 7510, 7511,
+
+     7512, 7513, 7514, 7515, 7516, 7516, 7516, 7516, 7516, 7516,
+     7516, 7516, 7516, 7516, 7516, 7516, 7516, 7516, 7516, 7516,
+     7516, 7516, 7516, 7516, 7516, 7516, 7516, 7516, 7516, 7516,
+     7516, 7517, 7518, 7519, 7520, 7521, 7522, 7523, 7524, 7525,
+     7526, 7527, 7528, 7529, 7530, 7532, 7534, 7535, 7536, 7537,
+     7538, 7539, 7540, 7541, 7542, 7543, 7544, 7545, 7546, 7547,
+     7548, 7549, 7550, 7551, 7552, 7553, 7554, 7555, 7557, 7559,
+     7560, 7561, 7562, 7563, 7564, 7565, 7566, 7567, 7568, 7569,
+     7570, 7571, 7572, 7573, 7574, 7575, 7575, 7575, 7575, 7575,
+     7575, 7575, 7575, 7577, 7577, 7578, 7579, 7579, 7579, 7579,
+
+     7579, 7579, 7579, 7580, 7581, 7581, 7581, 7582, 7582, 7582,
+     7583, 7583, 7583, 7583, 7583, 7583, 7583, 7584, 7584, 7584,
+     7585, 7586, 7586, 7586, 7586, 7586, 7586, 7586, 7586, 7586,
+     7586, 7586, 7587, 7589, 7590, 7591, 7592, 7593, 7594, 7594,
+     7595, 7596, 7597, 7597, 7598, 7599, 7600, 7601, 7601, 7602,
+     7603, 7603, 7604, 7605, 7606, 7607, 7608, 7609, 7610, 7610,
+     7611, 7612, 7612, 7613, 7614, 7615, 7616, 7616, 7618, 7618,
+     7619, 7620, 7622, 7623, 7623, 7624, 7626, 7627, 7628, 7628,
+     7628, 7628, 7628, 7628, 7628, 7628, 7628, 7628, 7628, 7628,
+     7628, 7628, 7628, 7628, 7628, 7628, 7629, 7630, 7631, 7632,
+
+     7633, 7634, 7635, 7636, 7637, 7638, 7639, 7640, 7641, 7642,
+     7643, 7644, 7645, 7646, 7647, 7648, 7649, 7650, 7651, 7652,
+     7653, 7654, 7655, 7656, 7657, 7658, 7659, 7660, 7661, 7663,
+     7664, 7665, 7666, 7667, 7668, 7669, 7670, 7671, 7672, 7673,
+     7674, 7675, 7676, 7677, 7678, 7680, 7681, 7682, 7683, 7684,
+     7685, 7686, 7687, 7688, 7689, 7690, 7691, 7692, 7693, 7694,
+     7695, 7696, 7698, 7699, 7700, 7701, 7702, 7703, 7704, 7705,
+     7705, 7705, 7705, 7705, 7705, 7705, 7705, 7705, 7705, 7705,
+     7705, 7705, 7705, 7705, 7706, 7707, 7708, 7708, 7708, 7708,
+     7708, 7708, 7708, 7708, 7709, 7710, 7711, 7712, 7713, 7714,
+
+     7715, 7716, 7717, 7718, 7719, 7720, 7721, 7722, 7723, 7724,
+     7725, 7726, 7727, 7729, 7730, 7731, 7732, 7733, 7734, 7735,
+     7736, 7737, 7738, 7739, 7740, 7741, 7743, 7745, 7747, 7748,
+     7749, 7750, 7751, 7752, 7753, 7754, 7755, 7756, 7757, 7758,
+     7759, 7760, 7762, 7763, 7764, 7765, 7766, 7767, 7769, 7770,
+     7771, 7772, 7773, 7774, 7775, 7776, 7777, 7778, 7779, 7780,
+     7781, 7783, 7785, 7787, 7788, 7789, 7790, 7791, 7792, 7793,
+     7794, 7794, 7795, 7796, 7797, 7798, 7799, 7800, 7801, 7803,
+     7804, 7805, 7806, 7807, 7808, 7810, 7812, 7813, 7814, 7815,
+     7816, 7817, 7818, 7819, 7820, 7821, 7823, 7824, 7825, 7826,
+
+     7827, 7828, 7830, 7832, 7833, 7834, 7835, 7835, 7835, 7835,
+     7835, 7835, 7835, 7835, 7835, 7835, 7835, 7835, 7836, 7837,
+     7837, 7837, 7837, 7837, 7838, 7838, 7838, 7838, 7838, 7838,
+     7838, 7838, 7838, 7838, 7838, 7838, 7838, 7838, 7838, 7839,
+     7840, 7840, 7840, 7840, 7840, 7840, 7840, 7840, 7841, 7842,
+     7843, 7844, 7845, 7846, 7848, 7849, 7850, 7851, 7852, 7853,
+     7855, 7857, 7858, 7859, 7860, 7861, 7862, 7863, 7864, 7865,
+     7866, 7868, 7869, 7870, 7871, 7872, 7873, 7875, 7877, 7878,
+     7879, 7880, 7880, 7880, 7880, 7880, 7880, 7880, 7880, 7880,
+     7880, 7880, 7880, 7880, 7880, 7880, 7882, 7884, 7884, 7884,
+
+     7884, 7884, 7884, 7884, 7884, 7884, 7884, 7884, 7884, 7884,
+     7884, 7884, 7884, 7884, 7884, 7884, 7884, 7884, 7884, 7885,
+     7886, 7886, 7886, 7886, 7886, 7886, 7886, 7886, 7887, 7888,
+     7889, 7890, 7891, 7892, 7895, 7896, 7897, 7898, 7899, 7900,
+     7903, 7906, 7907, 7908, 7909, 7910, 7911, 7912, 7913, 7914,
+     7915, 7918, 7919, 7920, 7921, 7922, 7923, 7926, 7929, 7930,
+     7931, 7932, 7932, 7932, 7932, 7932, 7932, 7932, 7932, 7932,
+     7932, 7932, 7932, 7932, 7932, 7932, 7933, 7934, 7934, 7934,
+     7934, 7934, 7934, 7934, 7934, 7935, 7936, 7937, 7938, 7939,
+     7940, 7942, 7943, 7944, 7945, 7946, 7947, 7949, 7951, 7952,
+
+     7953, 7954, 7955, 7956, 7957, 7958, 7959, 7960, 7962, 7963,
+     7964, 7965, 7966, 7967, 7969, 7971, 7972, 7973, 7974, 7975,
+     7976, 7977, 7978, 7979, 7980, 7981, 7982, 7983, 7984, 7984,
+     7984, 7984, 7984, 7984, 7986, 7987, 7988, 7989, 7989, 7989,
+     7989, 7990, 7990, 7990, 7990, 7991, 7991, 7992, 7992, 7992,
+     7993, 7993, 7993, 7993, 7993, 7993, 7994, 7994, 7994, 7994,
+     7995, 7995, 7995, 7995, 7996, 7996, 7996, 7997, 7998, 7999,
+     8000, 8001, 8002, 8003, 8003, 8004, 8005, 8006, 8007, 8008,
+     8009, 8010, 8011, 8012, 8013, 8013, 8016, 8016, 8016, 8016,
+     8016, 8017, 8017, 8018, 8019, 8019, 8020, 8022, 8023, 8024,
+
+     8024, 8024, 8024, 8024, 8024, 8024, 8024, 8024, 8024, 8024,
+     8024, 8024, 8024, 8025, 8025, 8026, 8027, 8028, 8029, 8030,
+     8031, 8032, 8033, 8034, 8035, 8036, 8037, 8038, 8039, 8040,
+     8041, 8042, 8043, 8044, 8046, 8047, 8049, 8050, 8051, 8053,
+     8054, 8055, 8056, 8057, 8058, 8059, 8060, 8061, 8062, 8063,
+     8064, 8065, 8066, 8067, 8068, 8069, 8070, 8071, 8072, 8073,
+     8074, 8075, 8077, 8078, 8080, 8081, 8082, 8084, 8085, 8086,
+     8087, 8088, 8089, 8090, 8091, 8092, 8093, 8093, 8093, 8093,
+     8093, 8093, 8093, 8093, 8093, 8093, 8093, 8093, 8094, 8095,
+     8095, 8095, 8095, 8096, 8097, 8098, 8099, 8100, 8101, 8102,
+
+     8103, 8104, 8105, 8107, 8108, 8109, 8110, 8112, 8113, 8114,
+     8117, 8118, 8119, 8121, 8122, 8123, 8126, 8127, 8128, 8129,
+     8130, 8131, 8132, 8133, 8135, 8136, 8138, 8139, 8140, 8141,
+     8142, 8144, 8145, 8146, 8147, 8149, 8150, 8151, 8154, 8155,
+     8156, 8158, 8159, 8160, 8163, 8164, 8165, 8166, 8167, 8168,
+     8169, 8170, 8172, 8173, 8175, 8175, 8176, 8177, 8178, 8179,
+     8180, 8183, 8184, 8185, 8186, 8189, 8190, 8192, 8193, 8194,
+     8195, 8196, 8199, 8200, 8201, 8202, 8205, 8206, 8208, 8208,
+     8208, 8208, 8208, 8208, 8208, 8208, 8208, 8208, 8208, 8209,
+     8209, 8209, 8209, 8209, 8209, 8209, 8209, 8209, 8209, 8209,
+
+     8209, 8210, 8211, 8211, 8211, 8211, 8212, 8213, 8214, 8215,
+     8216, 8217, 8218, 8219, 8220, 8221, 8222, 8223, 8224, 8225,
+     8226, 8227, 8227, 8227, 8227, 8227, 8227, 8227, 8227, 8227,
+     8227, 8227, 8227, 8229, 8231, 8231, 8231, 8231, 8231, 8231,
+     8231, 8231, 8231, 8231, 8231, 8231, 8231, 8231, 8231, 8232,
+     8233, 8233, 8233, 8233, 8234, 8235, 8236, 8237, 8238, 8239,
+     8240, 8241, 8242, 8243, 8244, 8245, 8246, 8247, 8248, 8249,
+     8249, 8249, 8249, 8249, 8249, 8249, 8249, 8249, 8249, 8249,
+     8249, 8250, 8251, 8251, 8251, 8251, 8252, 8253, 8254, 8255,
+     8256, 8257, 8258, 8259, 8260, 8261, 8262, 8263, 8264, 8265,
+
+     8266, 8267, 8268, 8269, 8270, 8270, 8271, 8272, 8273, 8274,
+     8274, 8274, 8274, 8274, 8275, 8277, 8278, 8279, 8279, 8279,
+     8280, 8280, 8281, 8281, 8281, 8281, 8281, 8281, 8281, 8282,
+     8282, 8282, 8282, 8282, 8283, 8285, 8286, 8287, 8288, 8289,
+     8290, 8290, 8291, 8292, 8293, 8295, 8296, 8298, 8299, 8299,
+     8300, 8301, 8302, 8303, 8305, 8305, 8306, 8308, 8309, 8309,
+     8309, 8309, 8309, 8309, 8310, 8310, 8311, 8311, 8311, 8311,
+     8312, 8313, 8314, 8314, 8315, 8316, 8317, 8318, 8319, 8320,
+     8321, 8322, 8323, 8324, 8325, 8326, 8327, 8328, 8329, 8330,
+     8331, 8332, 8333, 8334, 8335, 8336, 8337, 8338, 8339, 8340,
+
+     8341, 8343, 8344, 8345, 8346, 8347, 8348, 8349, 8350, 8351,
+     8352, 8353, 8355, 8356, 8358, 8358, 8358, 8359, 8359, 8359,
+     8359, 8359, 8359, 8361, 8361, 8362, 8363, 8364, 8364, 8365,
+     8367, 8368, 8369, 8370, 8371, 8372, 8374, 8376, 8377, 8378,
+     8379, 8380, 8381, 8382, 8383, 8385, 8386, 8388, 8389, 8390,
+     8392, 8393, 8394, 8396, 8398, 8399, 8400, 8401, 8402, 8403,
+     8404, 8406, 8408, 8410, 8411, 8413, 8414, 8416, 8417, 8419,
+     8420, 8422, 8422, 8422, 8422, 8423, 8423, 8423, 8423, 8423,
+     8423, 8423, 8423, 8423, 8424, 8426, 8427, 8428, 8430, 8431,
+     8431, 8431, 8431, 8431, 8431, 8431, 8431, 8431, 8431, 8431,
+
+     8431, 8431, 8431, 8431, 8431, 8431, 8432, 8435, 8436, 8437,
+     8440, 8441, 8441, 8441, 8441, 8441, 8441, 8441, 8441, 8441,
+     8442, 8444, 8445, 8446, 8448, 8449, 8449, 8449, 8449, 8449,
+     8452, 8453, 8454, 8454, 8454, 8455, 8456, 8457, 8457, 8457,
+     8458, 8458, 8458, 8458, 8459, 8460, 8460, 8461, 8462, 8463,
+     8463, 8464, 8465, 8466, 8467, 8468, 8469, 8469, 8469, 8469,
+     8469, 8469, 8469, 8470, 8471, 8472, 8473, 8474, 8475, 8476,
+     8477, 8478, 8479, 8480, 8481, 8482, 8483, 8484, 8485, 8486,
+     8487, 8488, 8489, 8491, 8492, 8493, 8495, 8496, 8497, 8498,
+     8499, 8500, 8500, 8500, 8501, 8502, 8503, 8504, 8505, 8506,
+
+     8508, 8510, 8511, 8512, 8513, 8514, 8515, 8516, 8517, 8519,
+     8521, 8523, 8524, 8526, 8527, 8528, 8529, 8530, 8531, 8533,
+     8535, 8535, 8535, 8535, 8535, 8535, 8535, 8535, 8535, 8535,
+     8535, 8535, 8536, 8537, 8538, 8538, 8539, 8539, 8539, 8539,
+     8539, 8540, 8540, 8540, 8541, 8542, 8543, 8543, 8544, 8544,
+     8544, 8545, 8546, 8547, 8548, 8550, 8551, 8552, 8553, 8555,
+     8556, 8557, 8559, 8560, 8561, 8562, 8563, 8564, 8566, 8567,
+     8568, 8570, 8571, 8572, 8574, 8575, 8576, 8576, 8577, 8578,
+     8578, 8578, 8578, 8579, 8579, 8579, 8580, 8581, 8582, 8583,
+     8584, 8585, 8586, 8587, 8588, 8589, 8590, 8591, 8592, 8593,
+
+     8594, 8595, 8596, 8597, 8598, 8599, 8600, 8601, 8602, 8602,
+     8603, 8603, 8603, 8604, 8605, 8606, 8607, 8608, 8609, 8610,
+     8611, 8612, 8613, 8614, 8615, 8616, 8617, 8618, 8619, 8620,
+     8621, 8622, 8623, 8623, 8623, 8623, 8624, 8625, 8626, 8627,
+     8628, 8629, 8631, 8632, 8633, 8634, 8635, 8637, 8638, 8639,
+     8640, 8640, 8641, 8642, 8643, 8644, 8645, 8646, 8647, 8648,
+     8649, 8650, 8651, 8652, 8653, 8654, 8655, 8657, 8659, 8661,
+     8663, 8664, 8665, 8666, 8667, 8668, 8669, 8670, 8671, 8672,
+     8673, 8674, 8675, 8676, 8677, 8678, 8679, 8680, 8681, 8682,
+     8683, 8684, 8685, 8686, 8687, 8688, 8689, 8690, 8691, 8692,
+
+     8693, 8694, 8695, 8696, 8697, 8698, 8699, 8700, 8701, 8702,
+     8703, 8704, 8705, 8706, 8707, 8708, 8709, 8710, 8711, 8712,
+     8713, 8714, 8715, 8716, 8717, 8718, 8719, 8720, 8721, 8722,
+     8723, 8724, 8725, 8726, 8727, 8728, 8729, 8730, 8731, 8732,
+     8733, 8734, 8735, 8736, 8737, 8738, 8739, 8740, 8741, 8742,
+     8743, 8744, 8745, 8746, 8747, 8748, 8749, 8750, 8751, 8752,
+     8753, 8754, 8755, 8756, 8757, 8758, 8759, 8760, 8761, 8762,
+     8763, 8764, 8765, 8766, 8767, 8768, 8769, 8770, 8771, 8772,
+     8773, 8774, 8775, 8776, 8777, 8778, 8779, 8780, 8781, 8782,
+     8783, 8784, 8785, 8786, 8787, 8788, 8789, 8789, 8789
+
+    } ;
+
+static yyconst int yy_ec[256] =
+    {   0,
+        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
+        1,    1,    5,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    6,    7,    8,    9,   10,    1,   11,   12,   13,
+       14,   15,   16,   17,   18,   19,   20,   21,   22,   22,
+       22,   22,   22,   22,   22,   23,   23,   24,   25,   26,
+       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
+       36,   36,   37,   38,   36,   39,   36,   36,   40,   41,
+       42,   43,   36,   44,   45,   36,   46,   36,   47,   36,
+       48,   49,   50,    1,   51,    1,   52,   53,   54,   55,
+
+       56,   57,   58,   59,   60,   36,   61,   62,   63,   64,
+       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
+       75,   76,   77,    1,   78,   79,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1
+    } ;
+
+static yyconst int yy_meta[80] =
+    {   0,
+        1,    1,    2,    3,    4,    5,    1,    6,    7,    8,
+        9,   10,   11,   12,   13,   14,    1,   15,   16,   17,
+       18,   18,   18,   19,   20,   21,   22,   23,    1,   24,
+       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
+       25,   25,   25,   25,   25,   25,   25,   26,   27,   28,
+       25,   25,   25,   25,   25,   25,   25,   25,   25,   29,
+       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
+       25,   25,   25,   25,   25,   25,   30,   31,   32
+    } ;
+
+static yyconst long int yy_base[9108] =
+    {   0,
+        0,    9,   29,    0,  107,  116,  129,  142,  191,    0,
+      270,    0,  349,    0,  151,  427,  455,    0,  533,  546,
+      555,  569,  164,  583,  646,    0,  602,  611,  725,    0,
+      804,    0,  882,  895,  904,  918,  994, 1013,  932,  945,
+      958,  967, 1044,    0, 1122, 1137, 1152, 1165, 1214, 1291,
+     1368, 1445, 1522, 1599, 1677,    0, 1756,    0, 1835,    0,
+     1914,    0, 1992, 2069, 2146, 2223, 1174, 1187, 1223, 1238,
+     1255, 1269, 1304, 1318, 1337, 1385, 1398, 1407, 1420, 1458,
+     1472, 1481, 1494, 1509, 1531, 1545, 2300, 2348, 1586, 1618,
+     1631, 1646, 1565, 2001, 2015, 2034, 2083, 2092, 2047, 2117,
+
+     2159, 2178, 2397,    0, 2131, 2192, 2201, 2232, 2475, 2523,
+     2572,    4, 2650, 2698, 2747,  137, 2825, 2873, 2258, 2309,
+     2922,    0, 3001,    0, 3080, 3159, 3238, 3317, 2484, 2498,
+     3396,    0, 3474, 3550, 2271, 2285, 2357, 2371, 3627,    0,
+     3706,    0, 3785,    0, 3863, 3911, 2542, 2669, 2707, 2721,
+     2834, 2848, 2882, 2896, 3960,    0, 3111, 3130, 3190, 3209,
+     4039,    0, 3289, 3487, 4118,    0, 3269, 3348, 3367, 3496,
+     3511, 3563, 4196, 4244, 3572, 3872, 4293,  155, 3587, 3920,
+     4372, 4451, 3525, 3606, 4530, 4609, 4205, 4219, 4688, 4767,
+     4846,    0, 4925,    0, 4421, 4500, 5004,    0, 5082, 5101,
+
+     4253, 4267, 5120, 5139, 5159,    0, 4407, 4486, 5237, 5250,
+     4561, 4580, 4640, 4659, 4719, 4738, 4798, 4817, 5299,    0,
+     5269, 5377, 5390, 5403, 5416, 5429, 5449,    0, 5527, 5536,
+     5550, 5559, 5572, 5581, 5602, 5611, 5624, 5641, 5654, 5663,
+     5684, 5704, 5718, 5727, 5752, 5771, 5784, 5797, 5816, 5843,
+     5870, 5939, 5883, 5898, 5919, 5954, 5974, 6004, 6053,    0,
+     6131, 6207, 6145, 6165, 6180, 6226, 6013, 6027, 6240, 6249,
+     6262, 6279, 6327,    0, 6406,    0, 6485,    0, 6564,    0,
+     6643,    0, 6721, 6734, 6288, 6302, 6812,    0, 6743, 6757,
+     6891,    0, 6776, 6785, 6970,    0, 7048, 7057, 7077,    0,
+
+     7155, 7164, 7177, 7186, 7212,    0, 7291,    0, 7369, 7378,
+    30884,42114,30881,42114,42114,42114,42114,    7,    0,  161,
+    42114,30879,  621,  985,42114,42114,42114,    8,    1, 1205,
+     1359, 1557, 2244, 1433,30856,42114, 3882,  107,  438, 2028,
+     1355, 1612, 2253,42114,42114,  182,42114,   97,30850,42114,
+    30817, 2340,  630,    0,42114,    0,42114,30870,42114,42114,
+    42114,  106,42114, 2169, 3143, 3222, 4433, 4513,42114,30846,
+    42114, 2214,  136,42114,30867,42114,42114,42114,42114,42114,
+      417,  112,30808,42114,30818,42114, 1347, 2111,42114,42114,
+    30864,42114,42114,42114, 2516,  418, 2688, 7422, 3506, 3544,
+
+      541, 5829,  154, 1658,  446, 2692,42114,  425,30839, 2867,
+    42114,42114,30834,  914, 3930, 5862,42114, 5967, 5697, 7396,
+     4571, 7390, 6199, 7429, 4650, 7433, 7444, 7496, 4729, 7502,
+     7507, 7511, 7535,42114, 1033,    0,  558,42114,    0,    0,
+        0,  541,30832, 3582, 4230, 7541,30836, 4402, 2383, 3891,
+     3939,    0, 4238,  550,42114,    0,42114,  554,42114,42114,
+    42114,42114, 4808,42114,30857, 4479, 5279,42114,42114,42114,
+    42114,42114,  639,  568,42114,30856,42114,42114,42114,42114,
+    42114,  578,42114,30855,42114,42114,42114,42114,  582,42114,
+    42114, 7549, 7580,    0,42114,  601, 1200,    0,30791,30803,
+
+       55,30789,42114,30851,42114,42114,42114,42114, 2555,  890,
+    42114,30824,42114,30844,42114,42114,42114,  894,42114,42114,
+        0, 7569, 2561, 1504, 2105,42114,  537,  581,  903,30837,
+    42114, 2511,42114,  881,42114,    0,42114, 6274, 7587, 5673,
+     5738, 7619,30819, 5856, 2734, 5996, 6193, 7627,30818, 6767,
+      889, 2907,42114,    0,30822, 1006,    0, 7606, 1025,42114,
+    42114,  573,30790,  935,30830,42114,42114, 5810, 1134,  945,
+    42114,42114,30788,  941,   10,42114,42114,30834,42114,42114,
+    42114,42114,30815,  957,    0,42114,42114,30831,42114,42114,
+     1009,42114,42114,42114,30830,30826,   21,42114,42114,42114,
+
+     1112,  125,    0, 1151,  979,    0,    0,    0,30810, 1113,
+    30825,  605,42114,30824,30823,30822, 1155,42114,42114,42114,
+    42114,    0, 7638,42114,42114,    0,    0,    0,30805, 1164,
+    30804,30766,30765,  998, 7403, 1172,42114,30813, 2682, 2861,
+    42114,42114,42114, 1173,42114,42114,42114,42114,42114,42114,
+        0, 2288,42114,    0,    0, 1213,42114,42114,42114,30794,
+     1221,  374,    0, 1329,42114,    0,    0,    0, 1234,    0,
+     2058,42114,    0,    0,    0, 1236,    0,42114,    0,42114,
+    30811,42114,42114,42114,42114, 1240,42114,42114,30809,42114,
+    42114,42114, 1246,30758,    0, 7655, 2915, 3302, 3307,    0,
+
+        0,    0,30789,42114, 1254, 1158,42114,30806, 1295,42114,
+    42114,42114,42114,30787, 1265,    0, 1389, 7677, 7726, 1622,
+     2196, 1268,42114,30804, 3095,42114,42114,42114,42114,30785,
+     4442, 1287, 7798, 7840, 7889, 7803,42114, 3377, 7662, 1290,
+    42114,30802, 1996,42114,42114,42114,42114,30783, 1294, 1384,
+     1475, 7916, 7938, 7807, 2322, 1308,42114,30800, 1414, 7685,
+     7811,42114,42114,42114, 1388, 1543, 7982, 8012, 2139, 1457,
+    42114, 1471,  898, 8039, 7841, 8016, 8114,30781,30775, 8122,
+     1465, 3945, 8025, 8126, 8130,30774, 8138, 4279, 1017,42114,
+        0,30777, 2820, 3181, 3092, 5244, 1165,42114,    0,30776,
+
+     5241, 5545, 5567, 6144, 8149,42114,30792,42114,42114,42114,
+    42114, 1650,30773, 1479, 1628,30725, 8154, 8160, 8176,42114,
+    30766, 8184, 4828, 5615,42114, 1334,30722,30726,30718,42114,
+    42114,30779,42114,42114,42114,42114, 1480,    0,30767,    0,
+    30755,    0,30722,42114,30741, 5086,42114,42114,42114,42114,
+    30719, 1500, 2198, 8226, 8274, 8191,42114, 3385, 8349, 1517,
+     2848, 8347, 8373,42114,30735, 2728,42114,42114,42114,42114,
+    30715, 1555,42114,30732,42114,42114,42114,42114,30713, 1655,
+    42114,30730,42114,42114,42114,42114,30711, 2005,42114,30696,
+    42114,42114,42114,42114, 2024,42114,    0,    0, 2080,42114,
+
+    42114,    0,30676, 2124,    0, 1578, 1398,42114,    0,    0,
+        0,30671, 2059, 2378,42114,    0,30670,    0,42114,30687,
+    42114,42114,42114,42114,30667, 2082,42114,42114,30684,42114,
+    42114,42114,42114,30665, 2163, 8421, 8466, 3358, 4663, 2177,
+    42114,30682, 3253,42114,42114,42114,42114,30663, 4598, 2222,
+     1124, 8489, 8515, 8198,42114, 4521, 8449, 2256,30618,42114,
+    30679, 1242,42114,42114,42114, 2299, 1249, 8563, 8592, 5722,
+     2326, 8640, 8685, 8356,42114,30678,42114,42114,42114,42114,
+     2307,30659,42114,    0, 3132, 4547, 3335, 5397,30674,  982,
+    42114,30673,30672,30671, 2519,42114,    0,30654, 3468, 4626,
+
+     4393, 8480,    0, 4700, 5610, 4740,42114,    0, 8227, 2657,
+    42114,30671, 8308, 8313,42114,42114, 8384,42114, 2375,30648,
+     8455, 6039,42114, 8673,30620,42114,30667,42114,42114,42114,
+        0,30614, 2483,42114,    0,42114,42114,42114,30660,42114,
+    42114,42114, 8596, 2659,42114,30659, 7845, 8010,42114,42114,
+    42114,42114,42114, 4836, 2833, 7689, 8502, 8713, 8757, 8302,
+     2868, 8377,42114,30611,42114,42114,    0, 8681,42114,42114,
+        0,    0,    0, 2877,30602, 3102,42114,30655,42114,42114,
+    42114,42114, 3120,42114,30654,42114,42114,42114,42114, 3160,
+    42114,30653,42114,42114,42114,42114, 3162,42114,30650,42114,
+
+    42114,42114,42114, 3175,42114,30649, 1195,42114,42114,    0,
+    42114, 3199,    0,42114,30648, 1273,30641,42114,42114, 3254,
+    42114,30646, 1379,30639,42114,42114, 3255,42114,30643, 1453,
+    42114,42114,42114,42114, 3265,    0,30640, 2014,42114,30639,
+    30638,30637,30615, 3520,42114,30632,42114,42114,42114, 3320,
+    30606, 8770,    0, 7517,42114,42114,    0,42114, 3333,    0,
+        0, 8776,42114,    0,30582,42114,42114, 3464,42114,30628,
+    42114,42114,42114,    0, 7441,42114,    0,    0,    0,30608,
+     3523, 1095, 3130, 8591,    0, 1534,42114,    0,    0,    0,
+     3585, 5801,42114,30625, 2034,42114,42114,42114,42114,42114,
+
+    42114, 3596,    0, 8797, 5439, 5932,42114,  924,42114, 8809,
+     3604,42114,42114,42114,30624, 5992, 6803,42114,42114,42114,
+    42114,42114, 3853,30599,30596,30547,42114,30619,42114,42114,
+    42114,30602, 3862,42114,30617, 3209,42114,42114,42114,42114,
+    30598, 3884,30560, 4742, 7190, 3885,42114,30559,    0,42114,
+    30613, 8815, 8819,42114,42114,30565,42114, 8827, 3910, 8837,
+    30605,42114,42114,30609,42114,42114,42114,42114,30590, 3932,
+        0,42114,42114,    0, 6311,42114,42114,    0,30555,42114,
+    42114, 3938,    0, 8842,42114,42114,    0,30554, 4186,42114,
+    42114,42114,30600,42114,42114,42114,42114, 4204,30576,    0,
+
+        0,    0,42114,30575,    0,42114,30579, 8528, 8855, 8863,
+     7196,    0, 8871,42114,30595,42114,42114,42114,42114, 4217,
+    30540,30539,42114,42114,42114,30592,42114,30585,42114,42114,
+     4257,    0, 1413,42114,30590,42114,42114,42114, 4271,42114,
+    42114,30589, 8875,42114,42114,    0,42114, 8879, 4373, 8883,
+        0,42114,    0, 3189,42114,30582,    0,    0, 4375,    0,
+    42114, 1607,42114,    0,42114,    0,  615,    0,    0,    0,
+        0,42114, 4452,    0,42114,30570,42114, 8888,    0, 1352,
+        0,    0,    0,    0, 2087, 4472,42114,    0,    0,    0,
+        0,42114,30553,30544,30584,42114,42114,42114, 3519, 4580,
+
+    42114, 4659, 8901, 4531,  175,  912,42114,30581, 8905, 8911,
+     8922,30559, 2150, 8933,    0, 8939, 8943, 8956, 8964, 8973,
+     8981, 8990, 8999, 9003,42114,42114, 2154, 9007, 9027, 9035,
+     9041, 9046,30558, 9050,    0, 9072, 9076, 7069,  439, 4723,
+     9084,30512, 9096,42114, 9100, 9111, 9122, 7854,    0,    0,
+     9130,30551, 9134, 9142, 9152, 9161, 9165, 2279, 9171, 9187,
+     9200,30564, 9211,30548, 2292, 4534,30518,30502,30556,  617,
+     9217, 4610, 9235, 4665, 9253, 9239, 4667,30541, 1581,30513,
+    30510, 2269,30502, 1367,30497,30509,30499, 2649,30506, 2414,
+     1427,30482,30492, 4738, 9230,30499, 9262,    0, 9266, 9270,
+
+     1634, 9291,    0, 8239, 9323, 8020, 9327, 9329, 9340,42114,
+    30492,  977, 2441, 9348, 9357,30520, 9362, 9386, 9390, 9394,
+     9401, 9418, 9425, 9430, 9434, 9458, 9464, 9474, 9511, 9516,
+     9527, 9541, 9551, 9555, 9565, 9593, 9597, 9601, 9625, 9630,
+     9635, 9639, 9667, 9674, 9678, 9498, 9702, 9710,    0, 2004,
+        0,    0,    0,30481, 9468,30521,    0, 9715, 9720, 9728,
+     9740, 9744,42114, 9750, 9768, 9776,    0, 9780, 9755,    0,
+     9195, 9204, 9589, 9785, 9793,30479,30491, 1070,30476,    0,
+     1377, 4802, 9812, 9816,    0,30476,30479,30470,30462,30473,
+     9820, 9832,42114,    0, 9838,    0, 9856, 9866, 2534,    0,
+
+     6233,30522,30521, 1483, 9870,    0,42114, 9874,30468, 9878,
+     9882, 9886, 9904,30507, 9908, 9914,30506,    0, 9930, 9936,
+     9945, 9953, 9957, 9969,    0, 9977,30505,    0, 9981, 9985,
+     9993,10003, 2855,42114,10008,10016,    0,30509,30517,30507,
+     2903,42114,    0,10021,    0, 4821, 2549, 7382,30512, 1534,
+     2051, 5384,42114,10032, 4689, 5285, 2565,30511, 1575,42114,
+    42114,30512, 2202,42114,42114,42114,42114, 5621,30510,30507,
+     2241,30506, 2343,    0, 2653,    0, 3558,30490,42114,42114,
+        0,30505,42114, 1235,30504,30504,30501,30494,    0,10028,
+        0,42114,42114,42114, 2123,30433,30432, 4748,10041,10054,
+
+     5105,10058,    0, 6754,    0,    0,    0,42114,30488,42114,
+     1255,30322,    0, 7463,    0,    0,    0,    0, 7554,    0,
+        0,    0,    0,    0,30308,    0, 9491,    0,10062,10070,
+    42114,42114,42114,30310,30303,30309, 5547,10048,42114,42114,
+    42114,    0,30285, 2231,10069,    0, 2020, 1292, 2596, 3238,
+     1423, 2427, 3212, 1937, 3294,30249,30248, 3062,30167, 1129,
+    30181, 5614, 5071,30172, 2082,30142,30128,42114,42114,30127,
+     3854, 4752, 5481, 5855, 5365, 5090, 4437, 5548, 2693, 2783,
+     3490, 3054, 5227, 1102, 6678, 6106,  847, 3545, 2121, 2847,
+     9092, 5911,30153,42114, 6172, 8204, 5569, 5834, 5909, 8701,
+
+     3165,10092,42114,42114,10075,42114, 3300, 3331, 8459, 1360,
+     4525,10117,    0, 2205, 4339, 3450, 5653, 5583, 4156, 5833,
+     2302, 5924,30081,30075, 3320,30051, 6118,30063, 7542, 5684,
+    30047, 3429, 4236, 4643,42114,30060, 7116, 5943, 7002, 6679,
+     6169, 8722, 5915, 7771, 3530, 4591, 5646, 4519, 7109, 2634,
+     8314, 6711, 2492, 5485, 6089, 5683,10177,42114,10079,10091,
+    42114,10190,42114,10083,10195, 6256, 7407, 6270,10209,30088,
+     6191, 6252, 7474,42114, 1993, 3538, 3814, 1484,  915, 3197,
+    29926,29929, 4685, 4147,29893, 5553, 5729, 5981, 6245, 5109,
+     5897, 1393, 5774, 8156, 7589, 4466,10213,10217, 9061, 2079,
+
+     7666,10087,29904,42114, 5087,10174, 2611, 5980, 4216, 6094,
+     7310, 8566, 4220, 5583,29867, 4186,29845, 7139,29836, 8115,
+     7540,29823, 4362, 4388, 4720,42114, 3047, 7392, 7611, 8309,
+     8454, 9239, 6704, 7920, 6127, 7926, 5202, 8623, 4549,10193,
+     8417, 2798, 7423, 8445, 6732, 9560,29865,42114,42114, 3554,
+    29778, 5235, 8050,29774,29781,29772, 3091,29783, 4520,29756,
+     8005,29768, 5378, 7765,29752, 5041, 5332, 4736,10129,29791,
+        0,10250,10261,42114,10274,10282,42114, 7993,42114,10286,
+    10297,29787,10306,29787,    0,10310,10314,10322,10332,    0,
+    10336,10358,10366, 8223, 8665,29787,29795,42114, 8301, 8038,
+
+     8490, 8931, 8235,42114, 8789,29779,29774,42114, 9638, 8558,
+     9781,42114, 9875,29770, 8389,42114, 8849,    0, 9056,29751,
+     8845,42114,29717,10374,29745,    0,10378,10382,10390,10400,
+    10405,10413,    0,10419, 8428,29693,29686, 8544, 6244,29684,
+    29679,29682,29729,42114,29713,29696,29692,29688,29676,29671,
+    29667,10423, 5491,10440, 5702, 5739,29632,    0, 4418,29615,
+     5837, 8358, 7355, 7540, 5849, 3170,29631, 4599,29610, 8668,
+    29615, 9633, 8160,29606, 5612, 5638, 5345,42114, 7432, 2459,
+     8673, 8700, 8717, 8127, 8767, 7460, 7006, 8590, 5792, 9799,
+     4628,10295, 9235, 5763, 8556, 9130, 8328,10428,42114,10436,
+
+    10515,29646, 6160,10513,29600,10588,42114,10456,10593, 9376,
+     8894, 6691,10591,29597,10522, 6707, 4450, 7308, 5976, 8866,
+     8723, 8135, 6242, 3827,29608, 5190,29585, 9182,29600,10296,
+     9086,29591, 6216, 7480, 5589,42114, 7607, 8542, 9269, 9401,
+     9474, 8924, 8853, 7969, 7627, 9306, 5883,10153, 4787,10415,
+     9728, 5941, 9321, 9359, 8575, 9570,42114,29618,42114,42114,
+    42114,42114,    0,    0, 8740,42114,29618,29577,29611, 9275,
+    42114,    0, 9481,    0, 9607,29604,42114,    0, 9546,42114,
+        0,42114,    0,42114,42114,42114,42114,10483, 8029,29542,
+    29533,29527,29496, 8785, 8308, 5391, 3454, 8292, 7004,10460,
+
+    10254,29499,42114, 9691,10541,10441, 9644, 9661,10628, 7561,
+    10626,42114,42114,42114,42114, 7628, 5511,29447, 7108, 9131,
+     8764, 9009, 7122, 9066,29460, 5330,29433, 9380,29439,10431,
+     9237,29428, 7645, 8384, 5700,42114, 7770, 5195, 9779,10568,
+     9904,10364, 8966, 9197, 8601, 9990, 6173,10173, 7560,10617,
+    10467, 6252, 9800, 9873, 9110,10701,42114,10597,10705,29448,
+    29395,10622,42114,10709,10729,29394,10736,10403, 9381, 7846,
+    42114,42114,10700, 9477, 5743,29368,10387,10497, 7446,10473,
+     2303, 7665,29351,29356,29341, 7571,29354, 6668, 6218, 6093,
+     6117, 8610, 8065, 9619,10753, 4196,29350,10118, 8932,10531,
+
+    10741,10182,42114,29331,42114, 1564,29321,29322,29313,29299,
+    29286,42114,10743, 9048,10752,10760,10291,42114,29265,10762,
+     9563,10769,10775,10809,10801,    0,10817,29239,10839,10478,
+    42114,10831,29223,    0,10847,10862,10870,10853,10878,10886,
+        0,10894,42114,42114,42114,29195,42114,    0,29224, 3917,
+        0,10898,42114,42114,10909,10924,10928,10933,10947,10961,
+    29187,29186,29183,    0,10957,    0,42114,42114,29136,42114,
+    42114,42114,42114,42114,42114,42114,42114,42114, 8723,    0,
+        0, 9060,29187,42114, 9147,29180,42114, 9805,42114,42114,
+        0,29174,42114, 9622,29171,29170,29166,42114,10975,10979,
+
+    29135,42114,    0,10988,    0,    0,    0,42114,    0,10989,
+        0,29144, 4531,    0,10715,    0,42114,    0,    0,10244,
+    11007,11011,    0, 9896,    0,    0,    0,29085, 2058,29087,
+    10424,42114,    0,11021,    0,11015,29116,11039, 7985, 2309,
+     7804,11043,42114,42114,29059, 7155,10483,29087,10669,10723,
+    29038,    0,29073, 7527,11025,11047,42114,42114,42114,42114,
+    42114,    0,11056,    0,29071, 7547,    0,    0,    0,11071,
+        0,29054, 7833,42114,    0,    0,29033,29032,29014,29013,
+    29021,29011,11082,11094,11102,11106,42114,11110,11123,11127,
+    11135,11148,28942,28933,28976,42114, 8481,11152, 8544,    0,
+
+     5702,10629,    0,    0, 9439,    0,42114,    0,    0,    0,
+     9860,    0,    0, 3372,    0,    0,    0,11156,28960,11160,
+    11167,42114,    0, 7428,    0,10047,    0,    0,    0,    0,
+        0,    0,28942,28935, 8132, 8504,28932,11171,11182,11195,
+    11203,11207,11211,11215,11228,    0,11236,11244,11248,11252,
+    42114,    0,10797,42114,28935,11258,28893,11131,11274,11280,
+    11288,11292,11313,11305,    0,28922,11321,28868,28868,28865,
+    28850,28901,42114,26231, 8977, 8441, 8583, 8675, 8757,11357,
+    11329,11345,26175,26152,26159,26156,26140,26128, 9473, 8801,
+    26134,26135,26117,26122,26097,26103, 8096,26112,26097, 7323,
+
+    26075,26080,26077,26065,26070,11059,26054,    0,11341,11367,
+    11373,11386,11390,11427,11401,26051,11337,11432,11433, 8045,
+    11437,11439,11441, 8232,11448,26022,26007,25965, 8836,25981,
+    42114,11470,11474,11500,11504,11508,11516,11532,11540,11546,
+    11556,11581,11590,11594,11598,11622,11627,11635,11639,11651,
+    11664,11668,11675,11692,11699,11708,11723,11733,11737,11747,
+    11772,11776,11780,11784,11809,11816,11820,11824,11848,25937,
+    11852,11861,11865,11718,11833,11872,11878,25931,25934,25889,
+    25880,25885,42114,    0,10902,42114,25926,11585,25848,25847,
+    25850,11681,25821,11906,42114,11443,11893,25856,42114,25826,
+
+     9071,11919,42114,11929,    0,25762,25781,11933,11941,11949,
+    11953,11957,    0,11979,    0,    0,25779,11972,25785,42114,
+    25747, 9909, 9027, 9206,25746,42114,25745,10583,25714,25703,
+    25703, 8020,25625,25624,10903,25663,42114,25567,25576,    0,
+    25547,25545,25544,25494,25505,25484, 8996,25490, 9412, 8956,
+     4697,25470,25469,25448, 8420,25426, 5529,25406,25379,25390,
+    25385,25382, 8114,    0,25293,25298, 6745, 1605, 9717,25292,
+    25267,25271, 7514,25229,25216,    0,25228,25191,25184,25148,
+     9049,25153,25149,10070,25093,25058, 9117,25074,42114,42114,
+    25063,10172,25032,25023,24986,11993, 8176,24977,24986,24954,
+
+    24947,24959,10275,24940,24931,24915,24903,24875,24889,24872,
+    24843,24824,24829,24820,24793,24787,24782,24787,42114, 2136,
+     9178, 5845, 8266,10408,10509, 2173,11922, 8204, 2677, 9921,
+    10618, 9249,11002, 3508, 5068, 9307,12001, 9894, 8884, 7391,
+     6677, 3245, 8941,10867, 9416, 9364, 9326, 9442, 3167, 9460,
+     5808, 3568, 3861, 7957, 4161, 9271,10694, 9169,10992,11175,
+    11297,11116,10763,10823,11335,42114,11087, 8530, 9507,24757,
+     9649,10889, 9695, 9524,24755,10295,24771, 9670,24733,11207,
+    24746,10666,10996,24571, 9948,10735, 9764,42114,42114,11176,
+    11551,42114, 9757, 9962,    0,24563,24568, 8780, 5988,10727,
+
+    24551,24562,24553, 9672,24526,24513,    0,24525,   68,   86,
+      486,  543, 9278,  941,  987, 1066,11006, 1198, 1217, 9561,
+     7722, 1274,10914, 1320, 1456, 1966,12007, 2072,10738, 2211,
+     2250, 2331, 8738, 2785,11169, 2826, 9937,10559,    0, 7834,
+     3072, 3228, 3280, 3323, 3442, 3891, 4200, 4336, 4363, 4406,
+     4509, 4544, 4576, 4676,42114, 5243,10157, 9979, 9100,10101,
+    11173,10921, 5500,10191,11951,10234, 8123,10250,11435, 9714,
+    11609, 7021, 8408,10155,12019,10987,11696,10350, 9844,10219,
+    10540, 9233,11977,10396,10830,11843, 4786,10475,10119,10202,
+    11094,10505, 8165, 5884,11029,10625,10748,10779,11350,10514,
+
+    10829,12024, 5039, 5085, 5371, 5619, 5703, 5977, 9073, 6139,
+     8323,10590,10324, 9597,11830,10906, 6235,10949,10813, 6727,
+     7342, 7392, 7437, 7472, 7535, 7597, 7615,11459, 7633, 7672,
+     7758,    0, 7773, 7885,11425, 7869, 7911,10546, 7987, 8011,
+     8207, 8279,10877, 8366, 8472, 8496, 8535, 8626, 8637, 8645,
+     8701, 8725, 8802, 8820, 8878, 8915, 9702,11054,11035,10273,
+    11140,11466,11154,11983,11196, 9961,11069, 8972,10326,11524,
+    11989,11218,10358,11252,11045,10989,11315,11134,11250,11319,
+    10805,11499,11365,10226,10844,11325,11561,11568,11598,11657,
+    11399,11436,42114, 9029, 9125, 9206, 9279, 9357, 9347,11735,
+
+     9429, 9518, 9545, 9622,11483, 9616, 9654, 9724, 9750, 9776,
+     9785, 9849,11630, 9881, 9879, 9896, 9985,10003,10011,10047,
+    10062,10122,10194,10231,10301,12069,10341,12081,10377,11828,
+    11963,42114,11967,11995,10428,12032,12070,10483,10491,10520,
+    12096,    0,11716,10561,10573,10649,10692,10718,11234,10681,
+    11004,11403,10684,10734,10776,11294,10812,11556,10815,11665,
+    10868,11513,12013,10882,11557,11704,11748,11914,11435,10913,
+    10916,10946,11106,11184,11174,11837,11201,11227,    0,11251,
+    11276,11825,11260,11273,11328,11286,11284,11353,11394,11645,
+    11404,11428,11431,11432,11468,11465,11473,11471,11479,11495,
+
+    11523,11519,11567,11744,11725,11697,11600,11877,11879,11997,
+    11931,11836,11585,11709,11985,12046,11969,11754,12027,11892,
+    12043,11881,11992,12054,12006,11812,12058,11921,11788,11852,
+    11800,12059,12060,12061,12028,11971,12065,12127,12011,12044,
+    11912,12082,11561,11600,11606,12059,11639,12084,11690,12087,
+    11735,12102,12081,11745,12088,12089,12096,12113,12163,12168,
+    12180,11899,12161,11783,12167,12182,12188,42114,12082,12080,
+    12119,12143,12144,11799,11938,11994,12116,12018,12145,12041,
+    12154,12087,12184,12172,12099,12146,12147,12176,42114,12159,
+    12245,12258,12210,12146,12134,12147,12183,12180,12194,12182,
+
+    12199,12183,12201,    0,12194,12206,12209,12189,12205,12213,
+    12214,12204,12205,12222,12217,12229,12221,12221,12221,12236,
+    12226,12233,12227,12228,12229,12246,12237,12244,12253,12252,
+    12254,12255,12256,12257,12261,12262,12263,12266,12267,12272,
+    12274,12276,12268,12260,12278,12280,12281,12287,12290,12291,
+    12293,12295,12296,12294,12303,12305,12304,12308,12309,12315,
+    12316,12317,12318,12322,12303,12318,12315,12311,12330,12333,
+    12332,12383,12330,12316,12340,12343,12314,12329,12324,12341,
+    12344,12348,12334,12355,12353,12358,12356,12347,12363,12366,
+    12361,12381,12362,12355,12368,12365,12378,12362,12376,12364,
+
+    12381,    0,12373,12386,12381,12370,12378,12374,12389,12379,
+    12379,12393,12387,12396,12386,12386,12401,12392,12399,12392,
+    12393,12394,12411,12402,12409,12417,12418,12419,12420,12421,
+    12422,12427,12425,12426,12429,12436,12434,12432,12430,12438,
+    12440,12442,12445,12447,12456,12454,12458,12457,12459,12466,
+    12469,12462,12470,12471,12474,12477,12478,12481,12528,12492,
+    12542,12472,12500,12547,12490,12548,12549,12495,12503,12515,
+    12516,12522,12509,12511,12524,12526,12533,42114,12561,12578,
+    42114,12580,12587,42114,12589,12595,12618,12627,12642,12650,
+    12672,    0,12559,42114,12562,12604,12526,12536,12531,12680,
+
+    12688,12664,12696,42114,12575,42114,12576,12637,12524,12588,
+    12598,12564,12545,12584,42114,42114,42114,12605,42114,12608,
+    12685,12705,12706,12556,12707,12712,12557,12631,42114,12638,
+    12702,12645,42114,12649,12704,12652,    0,12661,12724,12742,
+    42114,12759,42114,42114,12763,12767,12655,12661,12662,12707,
+    42114,12655,12660,42114,12771,12778,12782,    0,12786,42114,
+    12690,42114,12734,42114,12808,12816,12693,12824,12831,12839,
+    12846,12700,12850,12669,12675,12680,12672,12732,42114,12738,
+    12727,12732,12899,12861,12730,12709,12724,12732,12734,12742,
+    12750,12747,12759,12756,12761,12769,12756,12766,12760,12781,
+
+    12782,12767,12791,12784,12783,12789,12791,12812,12804,12800,
+    12802,12821,12871,12815,12885,12907,12911,12929,12942,12893,
+    42114,12969,12981,12863,12967,12993,42114,12998,12803,42114,
+    12863,12999,42114,13003,12877,12805,    0,12817,12831,12838,
+    12835,12848,12857,13008,13013,13017,13051,13055,13059,13063,
+    13067,13092,13152,13096,13108,13180,13121,13187,13191,13215,
+    13219,13230,13243,13247,13271,13275,13286,13299,13310,13315,
+    13323,13327,13354,13358,13364,13368,13392,13396,13401,13405,
+    13434,12854,42114,42114,12855,12856,12862,12937,12876,12860,
+    12880,12864,13021,12868,13032,12937,42114,13117,12886,42114,
+
+    13440,13444,13466,12937,13100,12945,42114,13121,12932,12952,
+    42114,13128,12985,12959,12976,12990,12911,12916,42114,12919,
+    12924,13020,12929,12938,12947,12940,12984,13037,12971,12997,
+    12988,13138,12989,13006,13018,13017,13028,13032,13023,13043,
+    13044,13042,13051,13059,13053,13078,42114,13204,    0,13077,
+    13081,13071,13076,13079,13096,42114,13112,13535,13107,13118,
+    13133,13130,13143,13156,13144,13149,13614,13146,13153,13143,
+    13158,13259,13159,13176,13693,13181,13178,13179,13181,13201,
+    13257,13203,13199,13208,13282,42114,13262,13203,13202,13216,
+    13230,13223,13237,13223,13228,13237,13244,13254,13241,13270,
+
+    13265,13269,13269,13274,13275,13281,13292,13285,13299,13293,
+    13299,13316,13328,13368,13772,13366,13385,13344,13386,13430,
+    13406,13413,13851,13417,13370,13340,13404,13426,13428,13429,
+    13431,13432,13434,13437,13440,13443,13445,13446,13450,13449,
+    13456,13451,13457,13459,13460,13507,13508,13464,13517,13466,
+    13465,13467,13332,13473,13471,13532,13336,13351,13393,13506,
+    13400,13391,13512,13449,13472,13567,13462,13477,13519,13488,
+    13508,13502,13518,13532,13512,13536,13532,13537,13528,13528,
+    13543,13537,13544,13537,13538,13539,13556,13547,13554,13583,
+    13642,13643,13596,    0,13578,13582,13581,13580,13582,13597,
+
+    13590,13930,13584,13586,13601,13589,13603,13605,13601,13602,
+    13610,14009,13605,13612,13600,13616,13617,13671,13608,13626,
+    14088,13623,13620,13618,13619,13627,13628,13629,13624,13631,
+    13623,13631,13622,13658,13663,13660,13660,13669,13655,13671,
+    13660,13669,13675,13680,13663,13668,13683,13684,13668,13667,
+    13676,13674,13677,13677,13683,13694,13686,13699,13689,13693,
+    13690,13699,13744,13708,13710,13709,14167,13745,13754,13746,
+    13756,13757,13760,13759,13712,14246,13767,13768,13762,13770,
+    13775,13780,13781,13777,13785,13783,13786,13823,13789,13791,
+    13833,13824,13834,13825,13836,13835,13837,13838,13853,13844,
+
+    13846,13855,13857,13848,13902,13903,13904,13912,13913,13859,
+    13861,13862,13915,13918,13864,13920,13866,13701,13702,13786,
+    13914,13917,13921,42114,13818,13777,13859,13865,    0,13860,
+    13857,13909,13928,13919,13936,13932,13934,13929,13934,13925,
+    13939,13944,13941,13942,13943,13932,13949,13932,13951,13933,
+    13972,13935,13960,13966,13976,13976,13991,13978,13982,13981,
+    13990,13999,14002,14000,    0,14001,14003,14006,14015,14016,
+    14018,14017,14019,14060,14022,14061,14027,14029,14070,14071,
+    14072,14062,14030,14074,14082,14075,14083,14084,14090,14076,
+    14086,14094,14149,14099,14091,14139,14028,13983,13995,14087,
+
+    14081,14097,14096,14089,14106,14104,14106,14102,14131,14122,
+    14143,14148,14145,14147,14149,14138,14155,14138,14157,14139,
+    14141,14143,14149,14163,14155,14168,14158,14162,14159,14168,
+    42114,14223,14175,14158,14157,14161,    0,    0,14177,14164,
+    14177,14174,14187,14170,14211,14171,14188,14180,14215,14220,
+    14199,14216,14210,14226,14215,14215,14229,14223,14231,14220,
+    14220,14236,14231,14238,14231,14232,14233,14250,14242,14249,
+    14303,42114,14279,14238,14251,14249,14243,14257,14256,14247,
+    14264,14260,14262,14257,14262,14253,14266,14274,14271,14272,
+    14273,14262,14280,14263,14282,14264,14264,14267,14269,14275,
+
+    14285,14277,14290,14280,14284,14281,14290,14299,14301,14300,
+    14302,14305,14306,14304,14314,14308,14318,14319,14321,14307,
+    14324,14333,14327,14328,14337,14329,14338,14339,14340,14342,
+    14345,14346,14349,14347,14350,14351,14352,14358,14354,14355,
+    14353,14297,14288,14348,14353,14361,14372,14355,14369,14357,
+    14374,14366,14378,14373,14362,14370,14364,14380,14369,14369,
+    14384,14378,14386,14379,14378,14378,14394,14384,14391,14384,
+    14385,14386,14403,14394,14401,14394,14424,14405,14391,14404,
+    14401,14412,14395,14409,14397,14414,14406,14418,14413,14402,
+    14410,14404,14420,14409,14409,14425,14419,14428,14418,14418,
+
+    14433,14424,14431,14424,14425,14426,14443,14434,14441,14470,
+    14429,14441,14445,14440,14434,14448,14447,14438,14455,14451,
+    14453,14448,14453,14444,14457,14462,14459,14460,14461,14450,
+    14467,14450,14469,14451,14456,14454,14456,14462,14472,14465,
+    14478,14468,14472,14469,14478,14487,14489,14488,14490,14491,
+    14493,14492,14494,14502,14496,14507,14497,14506,14509,14512,
+    14517,14516,14518,14522,14521,14524,14526,14530,14531,14532,
+    14535,14534,14536,14537,14542,14539,14545,14538,14546,14541,
+    14534,14554,14539,14564,14565,14560,14546,14559,14556,14567,
+    14551,14565,14553,14570,14562,14574,14569,14558,14566,14560,
+
+    14576,14565,14565,14580,14574,14584,14574,14574,14590,14580,
+    14587,14580,14581,14582,14599,14590,14597,14626,14585,14597,
+    14595,14589,14603,14602,14593,14610,14606,14608,14603,14608,
+    14599,14612,14617,14614,14615,14616,14605,14622,14605,14624,
+    14606,14608,14610,14616,14626,14618,14631,14621,14625,14622,
+    14631,14640,14642,14641,14643,14646,14647,14645,14655,14649,
+    14659,14660,14662,14648,14665,14674,14668,14669,14678,14670,
+    14679,14680,14681,14683,14686,14688,14687,14690,14691,14692,
+    14695,14699,14698,14694,14629,14673,14716,14723,14727,14706,
+    14696,14716,14717,14728,14700,14709,14721,14722,14729,    0,
+
+    14771,14797,14805,14766,42114,14775,14768,14828,14832,14841,
+    14755,14768,42114,14792,14715,14758,42114,14722,14776,42114,
+    14804,14779,42114,14827,14786,42114,14829,    0,14786,14849,
+    14854,42114,14771,14854,14867,    0,14871,14879,14883,14894,
+        0,14902,14742,14763,14768,14772,14816,14850,42114,42114,
+    14956,14906,14798,14811,14798,14798,14826,14819,14910,14814,
+    14830,14824,14830,14828,14836,14850,14852,14856,14866,14851,
+    14870,14867,14868,14865,14875,14868,14875,14876,14868,14877,
+    14863,14865,42114,14872,14939,14943,14913,42114,14954,14960,
+    14985,    0,14999,14923,14936,    0,14870,14885,14884,14901,
+
+    14901,14894,15026,15030,15034,15039,15043,15070,15079,15083,
+    15087,42114,15111,14931,14941,15116,42114,15120,15126,15150,
+    15155,15159,15163,15167,15192,15197,15201,15225,15232,15237,
+    15241,15265,15269,15273,15277,15307,15311,15321,15345,15350,
+    15354,15359,15383,15387,15391,42114,14901,14916,14900,14908,
+    14993,15074,15415,15400,    0,14967,14972,14929,15419,14980,
+    14981,42114,14982,14989,15206,14941,14944,14949,14950,14961,
+    14967,42114,    0,14976,14995,15001,14985,15001,15003,14993,
+    15130,15012,15003,15005,15014,15016,15025,15033,15042,15031,
+    15041,15048,15040,15056,15044,15047,15071,15063,15073,15256,
+
+    42114,15485,15082,15073,15564,15089,15089,15095,42114,15110,
+    15121,15108,15117,15131,15129,15128,15129,15134,15151,42114,
+    15153,15155,15148,15643,15216,15156,15170,15172,42114,15722,
+    15182,15247,15182,15282,15194,15190,15190,15196,15221,15222,
+    15218,15228,15299,15243,15238,15252,15315,15248,15252,15255,
+    15252,15268,15259,15270,15278,15296,15801,15880,15279,15272,
+    15286,15282,15282,15335,15317,15349,15351,42114,15321,15377,
+    15361,15959,15378,15380,15384,42114,16038,15383,15431,15392,
+    15615,15396,15398,15393,15399,15400,15403,15401,15406,15616,
+    15363,15408,15294,15617,15410,15405,15413,15536,15417,15537,
+
+    15538,15323,15546,16117,16196,15424,15547,15548,15425,15550,
+    15316,15305,15405,15414,15412,15426,15621,15533,15551,15547,
+    15549,15546,15551,15547,15560,15573,15570,15572,15573,15562,
+    15579,15562,15581,15563,15565,15567,15573,15583,15575,15621,
+    15611,15615,15612,15621,15677,42114,15646,16275,15626,15616,
+    16354,15630,15627,15626,42114,15624,15638,15625,15631,15644,
+    15641,15635,15635,15636,15638,15647,15648,15649,15639,16433,
+    15641,15654,15651,42114,15652,16512,15656,15711,15649,15650,
+    15750,15658,15654,15669,15674,15689,15689,15687,15689,15684,
+    15693,15763,15707,15699,15710,15761,15705,15709,15708,15704,
+
+    15707,15708,15725,15718,15709,15720,15727,15727,16591,16670,
+    15729,15721,15734,15727,15728,15731,15726,15731,15773,15774,
+    15775,15787,15784,42114,15785,15786,15789,16749,15793,15797,
+    15796,42114,15799,16828,15798,15854,15805,15852,15862,15813,
+    15866,15828,15863,15814,15867,15868,15870,15865,15871,15941,
+    15743,15864,15745,15942,15891,15818,15876,15872,15875,15878,
+    15817,15815,15885,15932,15902,15944,16907,16986,15946,15886,
+    15945,15953,15954,15947,15955,15957,15737,15727,15931,15962,
+    15807,15811,15865,15865,15883,15885,15926,15938,15952,15950,
+    15953,15964,15956,15954,15955,15950,17065,15963,15963,15959,
+
+    15960,15977,15961,15978,    0,    0,15978,15970,15983,15999,
+    16000,16003,16005,16010,16024,16025,16022,16023,16026,16028,
+    16027,16031,16033,16035,16029,16036,16048,16089,16090,16099,
+    17144,16050,16051,16091,16100,16053,16101,16054,    0,    0,
+    16055,16105,16057,16102,16103,16106,16111,16112,16042,16046,
+    16095,16087,16102,16118,16116,16117,16112,16114,16124,16116,
+    16114,16115,16110,16116,16124,16124,16120,16121,16138,16137,
+    16137,16129,16165,16158,16159,16169,16164,16169,16160,16228,
+    16229,16173,16166,16178,16176,16170,16184,16183,16175,16195,
+    16191,16193,16188,16193,16184,16197,16202,16199,16200,16201,
+
+    16190,16207,16190,16209,16191,16193,16195,16201,16211,16203,
+    16322,16205,16209,16206,16215,16348,16382,16312,16321,16329,
+    16320,16322,16336,16333,16334,16329,16331,16341,16333,16331,
+    16332,16327,16336,16344,16344,16340,16341,16359,16358,16358,
+    16350,16363,16356,16357,16360,16355,16360,16405,16406,16372,
+    16407,16416,16373,16415,16417,16419,16423,16418,16424,16429,
+    16430,16420,16431,16437,16438,16441,16484,16374,16442,16453,
+    16443,16375,16444,16446,16485,16486,16495,16355,16369,16447,
+    16443,16476,16490,16489,16480,16497,16494,16497,16492,16498,
+    16489,16502,16507,16507,16508,16509,16498,16515,16498,16517,
+
+    16499,16505,16503,16505,16511,16521,16513,16559,16515,16519,
+    16516,16525,16555,16514,16526,16524,16518,16532,16555,16546,
+    16570,16566,16568,16563,16568,16559,16573,16578,16575,16576,
+    16577,16566,16583,16566,16585,16571,16567,16574,16580,16590,
+    16582,16595,16585,16589,16586,16595,16588,16589,16598,16598,
+    16588,16590,16603,16600,16601,16596,16598,16609,16601,16599,
+    16623,16618,16624,16639,16639,16635,16636,16653,16636,16653,
+    16653,16645,16658,16651,16652,16655,16650,16655,16667,16668,
+    16672,16673,16674,16676,16678,16675,16677,16679,16681,16731,
+    16721,16722,16723,16732,16733,16734,16740,16736,16739,16687,
+
+    16735,16746,16759,16745,16689,16752,16761,16762,16800,16764,
+    16678,16685,16766,16722,16734,16754,16748,16762,16761,16754,
+    16773,16793,16795,16797,16802,16793,16806,16811,16809,16810,
+    16811,16800,16817,16800,16819,16801,16803,16805,16814,16824,
+    16816,16829,16819,16823,16820,16829,16822,16824,16832,16822,
+    16824,16837,16834,16835,16830,16832,16843,16835,16833,16834,
+    16829,16835,16866,16866,16862,16870,16887,16886,16886,16878,
+    16891,16884,16885,16888,16883,16888,16900,16901,16902,16903,
+    16905,16912,16904,16909,16910,16913,16914,16918,16958,16959,
+    16968,16960,16969,16970,16971,16972,16922,16926,16973,16974,
+
+    16930,16981,16983,16988,16995,16996,42114,42114,16908,16919,
+    17175,16998,17190,16959,16955,17177,17178,17189,17231,17036,
+    17037,16985,16981,17000,16997,16991,17253,17043,17045,42114,
+    17006,17049,17050,17217,17218,17219,17220,42114,17261,    0,
+    17269,17177,17168,42114,17177,17338,17273,17174,17181,17193,
+    17277,17178,17185,17286,17180,17206,17197,17206,17212,17204,
+    17216,17231,17231,17232,17229,17226,17230,17245,17246,17239,
+    17248,17233,17248,17253,17303,17240,17259,17252,17257,17311,
+        0,17324,17331,17346,17303,42114,17256,17263,17252,17269,
+    17270,17271,17353,17361,17408,17412,17416,17420,42114,17424,
+
+    17449,17453,17462,17477,17486,17492,17501,17525,17529,17535,
+    17539,17563,17567,17575,17579,17591,17608,17615,17625,17639,
+    17649,17653,17663,17687,17691,17695,42114,17699,17723,17731,
+    17735,17368,17262,17378,17273,17747,17759,17763,42114,17774,
+    17778,17283,17796,17457,42114,17284,17276,17298,17291,42114,
+    17306,    0,17314,17307,17306,17313,17331,17337,17328,17335,
+    17345,17468,17340,17481,17357,17365,17369,17368,17377,17389,
+    17496,17387,17380,17379,17381,17407,17414,17412,17420,17472,
+    17508,42114,17848,17452,42114,17927,17452,17448,17445,17443,
+    17467,17460,17466,17466,17458,    0,17478,17482,17551,42114,
+
+    17485,17498,17494,42114,17501,18006,17601,17498,17603,17498,
+    17500,17520,17619,17504,17569,17511,17534,17634,17522,17532,
+    17527,17540,17644,17532,17534,17562,17568,17571,17574,17576,
+    17594,17607,42114,42114,17606,17668,17594,17602,17602,17627,
+    17658,17663,17631,17675,17657,17739,42114,17683,17634,17709,
+    42114,17661,18085,17711,17721,17725,17660,17789,17737,17747,
+    17741,17758,17756,17745,17760,17763,17707,17764,17765,17767,
+    17768,17775,17777,17780,17778,42114,42114,17779,17978,17899,
+    17769,17900,17620,17621,17662,17677,17762,17780,17781,17782,
+    17777,17779,17789,17781,17882,17890,17885,17891,17899,17899,
+
+    17895,17896,17913,17912,17912,17904,17919,17912,17913,17916,
+    17914,17919,17952,18034,42114,42114,18164,17926,42114,18243,
+    17926,17920,17916,17914,17937,17930,17936,17934,17925,17926,
+    17992,17928,17932,17996,42114,17935,17947,17941,17966,17972,
+    18322,17976,17969,17977,17978,17989,18041,17974,17989,17988,
+    17984,17998,17985,17994,17992,18000,17991,17992,18007,18007,
+    18003,18001,18004,18002,18004,17999,18016,18018,18016,18070,
+    18004,18010,18013,18010,18017,18010,18067,18059,18057,18058,
+    18294,18069,18071,18295,42114,18074,18070,18078,18079,42114,
+    18072,18401,18081,18082,18083,18089,18095,18296,18215,18093,
+
+    18096,18216,18099,18217,18097,18225,18226,18227,18228,18105,
+    18229,18233,18240,18256,18304,18309,18238,18257,18260,42114,
+    42114,18258,18313,18305,18311,18310,18312,18306,18307,18013,
+    18018,18318,18315,18100,18092,    0,18093,18214,18226,18226,
+    18248,18242,18251,18246,18293,18303,18300,18362,42114,18480,
+    18315,18317,18322,18320,18323,18316,18331,18318,18324,18326,
+    18323,18330,18323,18374,18373,18345,18375,18387,18384,18385,
+    18386,18388,18390,18391,18393,18395,18396,18559,18391,18330,
+    18404,18407,18410,18411,18397,18414,18590,18591,18593,18594,
+    18415,18595,18339,18330,18397,18401,18417,18410,18413,18406,
+
+    18577,18574,18582,18587,18583,18583,18585,18590,18588,18591,
+    18584,18599,18588,18594,18597,18595,18602,18596,18602,18665,
+    18666,42114,18608,18608,18609,18617,18607,18609,18622,18620,
+    18621,18616,18618,18628,18620,18618,18619,18614,18620,18628,
+    18628,18624,18625,18642,18641,18641,18633,18646,18639,18640,
+    18643,18638,18643,18646,18637,18638,18642,18654,18647,18648,
+    18641,18648,18642,18650,18655,18651,18651,18653,18658,18656,
+    18659,18652,18667,18654,18660,18662,18659,18666,18659,18681,
+    18682,18683,18684,18686,18685,18692,18687,18688,18689,18694,
+    18693,18696,18697,18699,18695,18706,18710,18713,18717,18716,
+
+    18719,18718,18720,18725,18722,18710,18711,18720,18720,18710,
+    18712,18725,18725,18729,18724,18726,18737,18729,18727,18728,
+    18723,18729,18737,18737,18733,18734,18751,18734,18751,18751,
+    18743,18756,18749,18750,18753,18748,18753,18749,18750,18758,
+    18748,18750,18763,18760,18761,18756,18758,18768,18760,18758,
+    18759,18754,18760,18768,18768,18764,18765,18782,18781,18781,
+    18773,18786,18779,18780,18783,18778,18783,18786,18777,18843,
+    18782,18786,18798,18791,18792,18785,18792,18786,18794,18799,
+    18795,18795,18797,18802,18800,18803,18796,18811,18798,18804,
+    18806,18803,18810,18803,18825,18826,18873,18831,18832,18833,
+
+    18836,18839,18835,18840,18837,18842,18843,18844,18841,18846,
+    18851,18853,18861,18864,18865,18866,18867,18869,18870,18875,
+    18871,42114,    0,18847,18860,18861,18869,18859,18861,18874,
+    18871,18875,18873,18875,18886,18878,18876,18877,18872,18878,
+    18886,18886,18882,18883,18900,18899,18899,18891,18904,18897,
+    18898,18901,18896,18901,18904,18895,18896,18900,18912,18905,
+    18906,18899,18906,18900,18908,18913,18909,18909,18911,18916,
+    18914,18917,18910,18925,18912,18918,18920,18917,18924,18917,
+    18939,18940,18941,18942,18944,18943,18950,18945,18946,18947,
+    18952,18951,18954,18955,18957,18953,18964,18968,18971,18975,
+
+    18974,18977,18976,18978,18983,18980,18967,18969,18986,18988,
+    19008,18967,18983,18994,18998,19013,19052,19074,18979,18988,
+    18989,18992,18999,19000,19082,42114,19008,42114,19136,19086,
+    19010,19007,19014,19099,19001,19001,19012,19021,19108,19112,
+    19030,19119,19008,19024,19123,19038,19047,19044,19037,19038,
+    19143,19040,19127,19147,19062,19057,19131,19046,19082,19092,
+    42114,19152,19158,19103,19113,19112,19099,19105,19168,19210,
+    19214,19222,19226,19238,19255,19262,19266,19279,19288,19293,
+    19142,19358,19317,19325,19321,19180,19329,19386,19390,19394,
+    19398,19422,19427,19436,19451,19333,19460,19126,19464,19475,
+
+    19490,42114,19499,19503,19507,19532,19536,19540,19544,19175,
+    19127,19548,42114,19468,19137,19138,19564,19167,19274,19145,
+    19618,19147,    0,    0,42114,19153,19157,19151,19163,42114,
+    19157,19250,19158,19171,19173,19183,19182,19193,19181,19184,
+    19193,19187,19209,19217,19206,19231,19301,19221,42114,19246,
+    42114,19249,19697,19245,19776,19245,19241,19243,19259,19248,
+    19377,19266,19272,19441,19271,19294,19279,19855,42114,19294,
+    19292,19292,19300,19455,19315,19353,19359,19349,19357,19365,
+    19351,19369,19367,19377,19364,19373,19390,19379,19389,19479,
+    19380,19407,19426,19494,19429,19433,19459,19468,19510,19568,
+
+    19469,19516,19523,19524,19526,19934,42114,19470,19530,19531,
+    19533,19536,19548,19552,19528,19550,19554,19537,19558,19560,
+    19562,19542,19590,19601,19600,19591,19669,19592,19604,19603,
+    19605,19609,19620,19470,19462,19464,19674,19469,19527,19525,
+    19551,19545,19593,19588,19614,19601,19598,19613,19616,19621,
+    19619,19622,19615,19630,19684,19618,19624,19627,19624,19631,
+    19624,42114,19665,42114,19663,20013,19664,20092,19664,19660,
+    19661,19676,19665,19731,19732,19684,19671,19669,19689,19673,
+    19687,20171,19688,19688,19689,19688,19695,19686,19701,19702,
+    19703,19692,19699,19706,19691,19708,19705,19710,19693,19699,
+
+    19742,19696,19697,19703,19708,19766,19700,19702,19716,19738,
+    19735,19749,19743,19734,19754,19763,19764,19827,19765,19766,
+    19767,19769,19771,19773,20250,42114,19779,19782,19787,19788,
+    19790,19778,19796,19800,19837,19828,19829,19839,19841,19844,
+    19845,19846,19848,19850,19851,19774,19853,19859,19861,19908,
+    19858,19906,19867,19870,19863,19868,19864,19916,19917,19781,
+    19907,19783,19873,19860,19915,19899,19913,19910,19909,19906,
+    19922,19924,19914,20329,19927,19911,19912,19928,19926,19923,
+    19930,19924,19915,19936,19985,19944,19986,19945,19987,19946,
+    19949,19996,19998,19951,19952,19995,20408,19956,19997,19999,
+
+    19950,20000,20001,20018,20005,20002,20022,19938,19958,19981,
+    20003,20000,20016,20013,20012,20009,20027,20028,20017,20030,
+    20031,20015,20016,20029,20027,20024,20031,20048,20039,20059,
+    20055,20068,20067,20058,20059,20063,20075,20068,20069,20062,
+    20069,20063,20071,20076,20072,20072,20074,20082,20080,20083,
+    20076,20091,20078,20084,20086,20083,20090,20083,20086,20103,
+    20085,20105,20089,20103,20100,20099,20096,20111,20112,20101,
+    20114,20115,20099,20123,20136,20134,20138,20145,20139,20130,
+    20150,20158,20159,20160,20161,20163,20166,20165,20167,20168,
+    20175,20181,20174,20187,20188,20222,20223,20186,20224,20232,
+
+    20236,20179,20233,20234,20160,20173,20283,20174,20180,20192,
+    20185,20231,20225,20233,20230,20238,20243,20239,20239,20241,
+    20246,20245,20248,20241,20256,20243,20249,20251,20248,20255,
+    20248,20261,20252,20253,20257,20269,20262,20263,20256,20424,
+    20418,20426,20431,20427,20427,20429,20434,20432,20435,20428,
+    20443,20430,20436,20438,20435,20442,20435,20438,20504,20459,
+    20441,20461,20445,20459,20456,20455,20452,20467,20468,20457,
+    20470,20471,20455,20456,20469,20467,20464,20471,20465,20456,
+    20476,20484,20485,20486,20487,20489,20491,20493,20492,20494,
+    20496,20497,20495,20512,20513,20501,20502,20506,20507,20517,
+
+    20519,20520,20523,20524,20516,20507,20508,20513,20525,20520,
+    20521,20514,20522,20516,20524,20529,20525,20525,20527,20532,
+    20530,20533,20526,20541,20529,20535,20537,20534,20541,20534,
+    20537,20554,20536,20556,20540,20554,20551,20550,20547,20562,
+    20563,20552,20565,20566,20550,20551,20564,20562,20559,20566,
+    20560,20551,20571,20579,20580,20581,20582,20584,20586,20588,
+    20587,20589,20591,20592,20590,20607,20608,20596,20597,20601,
+    20602,20612,20614,20615,20618,20619,20617,20618,20622,20629,
+    42114,20607,20614,20630,20634,20654,    0,20622,20629,20633,
+    20622,20632,20686,20639,20748,20695,20627,20633,20633,20703,
+
+    20639,20641,20709,20717,20662,20721,20725,20729,20734,20738,
+    20743,20663,20756,20658,20680,20760,20764,20693,20770,20782,
+    20786,20792,20700,20705,20818,20721,20715,20727,20827,20726,
+    20721,20831,20835,20839,20843,20847,20851,20875,20881,42114,
+    20891,20899,20785,20904,20915,20928,20932,20939,20944,20948,
+    20956,20972,20981,20985,20989,20994,21013,21023,21027,21018,
+    21051,21055,21059,21063,21067,21091,20749,21095,20749,21099,
+    21155,21234,42114,    0,42114,    0,20755,20750,20747,20748,
+    20755,20758,20772,20802,20808,20804,20812,20814,20812,20800,
+    20807,20819,20908,20819,20817,20838,21313,42114,20829,42114,
+
+    20828,20838,20844,20838,20851,20921,20856,20851,20863,20870,
+    20961,42114,21000,20876,20882,20900,21032,20919,20917,20919,
+    20927,20947,20937,20953,21042,20944,20937,20952,21282,21104,
+    20950,21110,20974,20980,20977,20975,20987,21057,21025,21059,
+    21037,21071,21065,21286,42114,21287,21072,21073,21079,21295,
+    21080,21081,21084,21083,21087,21027,21089,21296,21206,21216,
+    21091,21297,21301,21207,21208,21098,21217,21224,21218,20984,
+    21028,21011,21032,21080,21094,21091,21090,21203,21218,21219,
+    21210,21223,21224,21209,21210,21291,21229,21227,21232,21247,
+    21241,21233,21253,21258,21392,42114,21285,42114,21284,21291,
+
+    21296,21279,21289,21289,21281,21291,21288,21361,21294,21290,
+    21290,21300,21365,21315,21308,21308,21311,21318,21321,21311,
+    21322,21375,21313,21305,21320,21380,    0,    0,21381,21315,
+    21328,21333,21350,21343,21352,21374,21378,21379,21375,21380,
+    21377,42114,21427,21386,21382,21385,21387,21451,21390,21376,
+    21400,21406,21407,21412,21409,21410,21469,21413,21418,21424,
+    21474,21388,21429,21478,21433,21434,21436,21438,21439,21441,
+    21419,21492,21426,21430,21431,21429,21437,21430,21503,21445,
+    21444,21449,21460,21458,    0,    0,21452,21445,21454,21470,
+    21471,21472,21473,21475,21476,21525,21480,21481,21484,21480,
+
+    21495,21487,21490,21498,21499,21500,21487,21487,21488,21485,
+    21491,21482,21496,21495,21498,21508,21509,42114,42114,21502,
+    21495,21504,21565,21566,21505,21523,21505,21525,21510,21524,
+    21521,21520,21517,21532,21533,21522,21535,21536,21520,21521,
+    21534,21532,21529,21536,21530,21521,21541,21533,21533,21534,
+    21531,21537,21528,21601,21543,21542,21546,21555,21555,    0,
+        0,21548,21541,21550,21565,21566,21567,21568,21569,21570,
+    21617,21573,21572,21575,21577,21591,21576,21578,21579,21580,
+    21590,21573,21591,21573,21595,21579,21593,21590,21590,21588,
+    21603,21604,21593,21606,21607,21591,21592,21605,21603,21600,
+
+    21607,21602,21593,21613,21602,21619,21601,21621,21605,21619,
+    21616,21615,21612,21627,21628,21617,21630,21631,21615,21616,
+    21629,21627,21624,21631,21625,21616,21636,21628,21628,21629,
+    21626,21632,21623,21696,21638,21637,21641,21650,21650,    0,
+        0,21643,21636,21645,21660,21661,21662,21663,21664,21665,
+    21712,21668,21667,21670,21672,21686,21671,21673,21674,21675,
+    21685,21668,21686,21668,21690,21674,21688,21685,21685,21683,
+    21698,21699,21688,21701,21702,21686,21687,21700,21698,21695,
+    21702,21697,21688,21708,21700,21700,21701,21698,21704,21695,
+    21768,21710,21709,21713,21722,21722,    0,    0,21715,21708,
+
+    21717,21732,21733,21734,21735,21736,21737,21784,21740,21739,
+    21742,21744,21758,21743,21745,21746,21747,21757,21754,21755,
+    21762,21766,21811,21833,21910,21959,42114,42114,21754,21748,
+    21771,21760,21822,22036,42114,21826,21914,21844,21856,21918,
+    21922,21865,21927,21878,21936,22040,21940,21879,22044,21944,
+    21874,21881,21896,21887,22048,21950,22053,22070,21901,22074,
+    22078,21888,22005,22082,22007,22086,22090,22094,22123,22127,
+    22135,22139,22098,22047,22152,22167,22216,22177,22182,22245,
+    22249,22253,22257,22191,22281,22037,22004,22003,21999,22005,
+    22285,22293,22195,22199,22206,22321,    0,42114,22001,22040,
+
+    22033,22044,22109,22161,22045,22063,22063,22067,22068,22171,
+    22059,22073,22186,22065,22076,42114,22073,22088,22089,22091,
+    22264,22089,22103,22297,22298,22110,22307,22309,22108,22364,
+    22114,22325,22134,    0,22132,22326,22157,22143,22327,22331,
+    22156,22332,22333,22175,22338,22179,22203,22218,22443,22208,
+    22522,22346,22231,22233,22347,22348,22299,22297,22601,22273,
+    22307,22227,22267,22355,22349,22336,22415,22350,22416,22338,
+    22357,22337,22354,22680,22361,22759,22213,22240,22242,22250,
+    22294,22285,22339,22347,22353,22362,22365,42114,42114,22360,
+    22353,22362,22356,42114,22353,22367,22367,22368,22429,22362,
+
+    22375,22433,22434,22382,22402,22414,22838,22405,22420,    0,
+    22407,22403,22476,22424,22410,22480,22425,22482,22484,22427,
+    22434,22430,22442,22917,22431,22996,22495,22494,22450,22504,
+    22505,22456,22451,22453,23075,22496,22506,22454,22507,22508,
+    22511,22512,22509,22573,22457,22575,22583,22520,22514,22510,
+    22536,23154,22518,23233,22585,22589,22433,22459,22463,22500,
+        0,22503,22512,23312,22590,22528,    0,22574,22584,22585,
+    22588,22548,22586,22587,23391,22652,22591,    0,22527,22579,
+    22583,22578,22574,22571,22591,22582,22657,22658,22662,22588,
+    22588,22593,22596,22602,22594,22609,22609,22612,22621,22621,
+
+    42114,42114,22614,22631,22640,22640,22653,22657,22650,22645,
+    22641,22661,22652,22670,22672,22671,22673,22674,22675,22676,
+    22677,22668,22668,22669,22666,22673,22664,22678,22678,22683,
+    22692,22692,42114,42114,22685,22678,22688,22687,22687,22688,
+    22685,22691,22705,22719,22718,22728,22737,22737,42114,42114,
+    22730,22723,22732,22725,22738,22742,22735,22730,22726,22746,
+    22737,22755,22756,22757,22761,22762,22784,22763,22765,22751,
+    22751,22752,22750,22756,22747,22761,22760,22765,22774,22774,
+    42114,42114,22767,22763,22772,22789,22802,22813,22806,22801,
+    22797,22817,22808,22826,22830,22827,22828,22829,22831,22835,
+
+    22832,22826,22844,22898,22881,42114,23470,23549,22886,22830,
+    22830,22826,22840,22904,22949,23626,22945,22828,22849,22908,
+    22953,22957,22971,22975,22873,22870,23027,22870,22979,22983,
+    22912,22987,23035,23044,23103,23107,23636,23111,23053,42114,
+    22962,23202,23115,42114,23698,22947,22944,23185,23195,23189,
+    23775,23779,23640,42114,22949,23057,23265,22959,22956,23061,
+    23062,22958,22973,23063,22978,23137,23139,22973,22970,22986,
+    23848,22968,23141,22987,23927,23143,23145,23000,23018,42114,
+    23209,23211,24006,23217,23219,23005,23221,23269,23270,23003,
+    23045,23034,23052,42114,23271,42114,23229,24085,23077,23236,
+
+    42114,23630,23670,24164,23783,23230,23784,23127,23238,23216,
+    23148,42114,23785,42114,23057,23075,23288,23080,23074,23080,
+    23100,23121,23294,23119,23130,24243,23112,23295,23144,24322,
+    23161,23177,42114,23296,23300,24401,23301,23164,23302,23185,
+    23214,23203,23216,42114,23631,23243,24480,23598,23599,42114,
+    23789,23790,24559,23791,23589,23820,23600,23605,23603,23614,
+    42114,23821,42114,23227,    0,23603,24638,23619,    0,23610,
+    24717,23595,23615,23669,42114,23600,23615,23637,23656,23651,
+    23723,23744,23736,23738,    0,23751,23759,    0,23758,23738,
+    23751,23755,23748,23744,23740,23760,23751,23747,23760,23764,
+
+    23757,23752,23753,23773,23764,23765,    0,23780,23822,    0,
+    23787,23770,23784,23788,23781,23776,23772,23823,23814,23815,
+        0,23827,23834,    0,23835,23823,23822,23827,23814,23888,
+    24794,23898,23955,23840,23905,23910,23914,23829,23959,23963,
+    23843,23837,23851,23967,23981,24034,24038,24803,    0,24042,
+    24047,23985,24120,24114,24811,23860,23858,23975,23989,23990,
+    23879,23991,23894,42114,    0,23995,23996,42114,24867,23888,
+    23997,24058,42114,24060,23914,24062,23915,23920,24064,23967,
+    24069,24073,42114,24946,24059,42114,24079,24078,24080,24146,
+    24081,23963,23994,24071,24075,24002,42114,    0,24142,24144,
+
+    25025,23997,42114,24020,24017,24044,24148,24047,24150,42114,
+    25104,24138,42114,24137,24152,24147,24154,24155,    0,    0,
+    24065,24077,24070,24082,24089,24103,24093,24106,24123,24140,
+    24142,24215,24219,24271,24275,24223,24137,24142,24279,24148,
+    24227,24283,24350,42114,24354,24362,24358,24370,24231,24145,
+    24232,42114,24151,24152,24291,24176,24295,24175,42114,24247,
+    24241,24384,24251,24253,24303,24204,24201,24309,24206,24239,
+    42114,24259,24332,24386,24374,24320,24238,24433,24437,24441,
+    24244,24449,24453,24251,24508,24512,24521,24463,24392,24241,
+    24285,24457,24268,24281,24348,24413,24399,24471,24303,24325,
+
+    24315,24329,24425,24473,24427,24474,24536,24588,24592,24545,
+    24353,24400,24549,24596,24414,25183,24416,24540,24488,25262,
+    24554,24798,24421,25341,24446,24608,24557,25420,24568,24918,
+    24622,24807,24816,24626,24896,24838,24451,42114,24453,24612,
+    24555,42114,24783,24465,24488,24784,42114,24785,24900,24904,
+    24908,24930,24934,24974,25499,25578,25657,25736,25815,25894,
+    25973,26052,24978,24982,42114,42114,42114,42114,42114,42114,
+    24986,24994,24998,25053,25004,25057,25008,25061,25016,25065,
+    25087,25132,25091,25136,25095,25140,25144,25211,25162,25215,
+    25166,25219,25170,25223,25174,25290,25245,25294,25249,25298,
+
+    25253,25302,25324,25369,25328,25373,25332,25377,25381,25448,
+    25399,25452,25403,25456,25407,25460,25411,25527,25482,25531,
+    25486,25535,25490,25539,25561,25606,25565,25610,25569,25614,
+    25618,25685,25636,25689,25640,25693,25644,25697,25648,25764,
+    25719,25768,25723,25772,25727,25776,25798,25843,25802,25847,
+    25806,25851,25855,25922,25873,25926,25877,25930,25881,25934,
+    25885,26001,25956,26005,25960,26009,25964,26013,26035,26080,
+    26039,26084,26043,26088,26092,26110,26114,26118,26122,26132,
+    26140,26144,26148,26154,26158,26166,26170,26176,26180,26188,
+    26192,26198,26202,26210,26214,26220,26224,42114,26244,26276,
+
+    26308,26340,26372,26404,26436,26468,26500,26532,26564,26596,
+    26628,26660,26692,26724,26756,26788,26820,26852,26884,26916,
+    26948,26980,27012,27044,27076,27108,27140,27172,27204,27236,
+    27268,27300,27332,27364,27396,27428,27460,27492,27524,27556,
+    27588,27620,27652,27684,27716,27748,27780,27812,27844,27876,
+    27908,27940,27972,28004,28036,28068,28100,28132,28164,28196,
+    28228,28260,28292,28324,28356,28388,28420,28452,28484,28516,
+    28548,28580,28612,28644,28676,28708,28740,28772,28804,28836,
+    28868,24801,28899,28927,28958,28989,29017,29045,29076,29104,
+    24894,24900,29132,29161,29190,29221,29252,29280,29308,29337,
+
+    29369,29400,29431,29459,24901,25054,24902,25133,29488,29520,
+    29552,29584,25051,29615,29643,29674,29702,29730,29761,29789,
+    25053,28887,29818,29850,29882,29914,29946,29978,30010,30042,
+    30074,30106,30138,30170,30202,30234,30266,30298,30330,25059,
+    25212,30362,30394,25291,30426,30458,30489,30517,30548,30576,
+    30604,30635,30663,30692,30711,30740,30759,30787,30815,30846,
+    30874,25130,28896,25132,26213,25209,28890,30903,25211,25370,
+    25217,28918,30935,30967,25288,25449,25529,25608,30999,31030,
+    31059,31078,31107,31139,31171,31190,31219,31238,25290,31266,
+    31294,31325,31353,31382,25296,31414,25532,31445,25686,31474,
+
+    31506,25367,25765,31538,31570,28908,31602,31634,31666,31698,
+    31730,31762,31794,31826,31858,31890,25845,31922,31954,25924,
+    31986,32018,32050,28924,32082,32114,32146,32178,32210,32242,
+    32274,32306,25369,25927,25446,28926,25448,28951,32337,32365,
+    25454,32393,32422,25600,32449,25685,26002,32478,32510,25691,
+    26081,32542,32574,25762,32605,32634,32666,25764,28893,25770,
+    28939,32697,32725,25837,32756,32784,32812,32840,32868,32896,
+    25999,32924,32952,32980,28952,33008,33037,33065,28946,33094,
+    33126,26001,33157,33185,33213,26007,33241,33269,33298,33330,
+    26078,33361,33389,33417,28960,28970,33446,33478,33510,33542,
+
+    33574,33606,33637,33665,26080,33693,33721,28986,26208,33749,
+    33777,28988,29008,28957,33806,33838,33870,33902,33934,33966,
+    33998,34030,34062,34094,34126,34158,34190,34222,34254,34286,
+    34318,34350,34382,28998,34414,34446,29010,26210,29011,29016,
+    34478,26211,29026,29034,34510,34541,28877,34569,34597,29044,
+    28971,34625,34653,34682,34713,34742,34761,34777,34806,34825,
+    34841,28972,29057,28973,34869,34897,29042,29073,29071,29074,
+    29029,29086,29092,34926,29095,29098,34958,34990,29113,29043,
+    29114,29123,35022,35053,35082,35101,35117,35146,35178,35210,
+    35242,35261,35277,35306,35325,35341,35369,29093,35397,29101,
+
+    35425,35453,29126,35482,29129,35514,35546,35577,29142,29156,
+    35606,35638,29158,35670,35702,29212,35734,35766,35798,35829,
+    35858,35890,35922,35954,35986,36018,36050,36082,29120,36114,
+    36146,29164,36178,36210,29213,36242,36274,36306,36338,36370,
+    36402,36434,36466,36498,36530,29214,29233,29243,29241,36561,
+    36589,36617,36645,36674,36701,29246,36730,36762,29249,36794,
+    36826,36857,36886,36918,29251,29261,36949,36977,37005,37033,
+    37061,29271,37089,37120,37148,37177,37209,37240,37271,37299,
+    37330,37358,37386,29144,29277,37415,37446,29219,37477,37505,
+    37533,37561,37590,37622,37653,37681,37709,37740,29279,37769,
+
+    37801,37833,37864,37892,37920,37948,29289,37979,29297,29262,
+    29303,38011,38043,38075,38107,38139,38171,29302,29305,29388,
+    38203,29311,29389,29412,38234,29391,38265,38297,38328,38344,
+    38360,29426,38388,29413,29418,29440,38420,38439,38455,38471,
+    38499,38527,38555,38583,29428,38615,29448,38646,38674,38703,
+    38735,38767,38799,29446,29263,29454,38830,38858,38887,38919,
+    38950,38978,29456,39006,39034,39065,39093,39121,39149,29462,
+    39177,39206,39237,39265,39293,39321,39343,39371,39400,39432,
+    39463,29603,39492,39524,39555,39583,29625,39612,39644,39676,
+    39708,39740,29624,29634,29640,39772,29655,29656,29669,39803,
+
+    29398,29399,39832,29457,39863,39891,39920,39951,39980,40012,
+    40044,40076,29469,29672,40107,29597,40135,40163,29684,40191,
+    40219,40241,40269,29598,40297,40326,40358,40389,40417,40446,
+    40477,40506,40538,40570,40602,29690,29693,29696,40634,29699,
+    29711,29712,40666,40697,40725,40753,29725,40784,40812,29600,
+    40840,40868,40897,40928,40956,40984,41013,41045,41077,41109,
+    41141,29727,41173,29728,29742,29743,41205,41236,41264,41292,
+    41320,29756,41348,41377,41409,41441,41473,41505,29758,29759,
+    29771,29777,41537,41568,41596,41624,41652,41681,41713,41745,
+    41776,41805,41836,41865,29780,41897,29783,30474,29792,41929,
+
+    41960,41989,29610,42020,42049,30475,42081
+    } ;
+
+static yyconst short int yy_def[9108] =
+    {   0,
+     8399, 8399, 8398,    3, 8399, 8399, 8400, 8400, 8398,    9,
+     8398,   11, 8398,   13, 8401, 8401, 8398,   17, 8402, 8402,
+     8399, 8399, 8403, 8403, 8398,   25, 8404, 8404, 8398,   29,
+     8398,   31, 8399, 8399, 8399, 8399, 8405, 8405, 8406, 8406,
+     8407, 8407, 8398,   43, 8408, 8408, 8409, 8409, 8410, 8410,
+     8410, 8410, 8410, 8410, 8398,   55, 8398,   57, 8398,   59,
+     8398,   61, 8411, 8411, 8411, 8411, 8399, 8399, 8412, 8412,
+     8412, 8412, 8413, 8413, 8414, 8414, 8399, 8399, 8415, 8415,
+     8416, 8416, 8399, 8399, 8399, 8399, 8417, 8417, 8418, 8418,
+     8399, 8399, 8399, 8399, 8419, 8419, 8399, 8399, 8420, 8420,
+
+     8421, 8421, 8398,  103, 8422, 8422, 8423, 8423, 8424, 8424,
+     8398,  111, 8425, 8425, 8398,  115, 8426, 8426, 8426, 8426,
+     8398,  121, 8398,  123, 8427, 8427, 8428, 8428, 8429, 8429,
+     8398,  131, 8429, 8429, 8399, 8399, 8430, 8430, 8398,  139,
+     8398,  141, 8398,  143, 8431, 8431, 8432, 8432, 8433, 8433,
+     8434, 8434, 8435, 8435, 8398,  155, 8399, 8399, 8399, 8399,
+     8398,  161, 8436, 8436, 8398,  165, 8437, 8437, 8399, 8399,
+     8438, 8438, 8439, 8439, 8440, 8440, 8398,  177, 8441, 8441,
+     8442, 8442, 8443, 8443, 8444, 8444, 8399, 8399, 8445, 8445,
+     8398,  191, 8398,  193, 8399, 8399, 8398,  197, 8446, 8446,
+
+     8447, 8447, 8448, 8448, 8398,  205, 8399, 8399, 8449, 8449,
+     8450, 8450, 8451, 8451, 8452, 8452, 8453, 8453, 8398,  219,
+     8454, 8454, 8455, 8455, 8456, 8456, 8398,  227, 8457, 8457,
+     8399, 8399, 8458, 8458, 8459, 8459, 8460, 8460, 8461, 8461,
+     8462, 8462, 8463, 8463, 8464, 8464, 8465, 8465, 8461, 8461,
+     8466, 8466, 8467, 8467, 8468, 8468, 8468, 8468, 8398,  259,
+     8469, 8469, 8470, 8470, 8470, 8470, 8471, 8471, 8472, 8472,
+     8473, 8473, 8398,  273, 8398,  275, 8398,  277, 8398,  279,
+     8398,  281, 8474, 8474, 8475, 8475, 8398,  287, 8476, 8476,
+     8398,  291, 8477, 8477, 8398,  295, 8478, 8478, 8398,  299,
+
+     8479, 8479, 8480, 8480, 8398,  305, 8398,  307, 8480, 8480,
+     8398, 8398, 8481, 8398, 8398, 8398, 8398, 8398, 8482, 8483,
+     8398, 8481, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8484, 8485, 8398, 8398, 8486, 8398, 8487, 8398,
+     8398, 8398, 8488, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8489, 8490, 8491, 8398, 8492, 8398, 8481, 8398, 8398,
+     8398, 8398, 8398, 8398, 8493, 8493, 8493, 8493, 8398, 8398,
+     8398, 8494, 8398, 8398, 8481, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8495, 8398, 8398, 8398, 8398, 8398,
+     8481, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+
+     8398, 8496, 8398, 8497, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8498, 8498, 8398, 8498, 8498, 8498,
+     8498, 8498, 8498, 8498, 8498, 8498, 8498, 8498, 8498, 8498,
+     8498, 8498, 8498, 8398, 8499, 8500, 8501, 8398, 8500, 8500,
+     8500, 8500, 8398, 8398, 8398, 8502, 8398, 8503, 8504, 8398,
+     8398, 8505, 8398, 8398, 8398, 8506, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8481, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8481, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8481, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8507, 8398, 8398, 8398, 8508, 8508, 8508,
+
+     8508, 8508, 8398, 8481, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8481, 8398, 8398, 8398, 8398, 8398, 8398,
+     8509, 8510, 8509, 8398, 8398, 8398, 8511, 8512, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8513, 8398, 8514, 8514, 8398,
+     8398, 8515, 8398, 8516, 8517, 8398, 8398, 8518, 8398, 8519,
+     8398, 8520, 8398, 8521, 8522, 8398, 8523, 8524, 8523, 8398,
+     8398, 8523, 8525, 8398, 8398, 8398, 8398, 8398, 8523, 8523,
+     8398, 8398, 8526, 8398, 8398, 8398, 8398, 8481, 8398, 8398,
+     8398, 8398, 8398, 8398, 8527, 8398, 8398, 8481, 8398, 8398,
+     8398, 8398, 8398, 8398, 8481, 8398, 8398, 8398, 8398, 8398,
+
+     8398, 8398, 8528, 8529, 8528, 8528, 8528, 8528, 8398, 8528,
+     8530, 8531, 8398, 8530, 8530, 8530, 8530, 8398, 8398, 8398,
+     8398, 8532, 8533, 8398, 8398, 8532, 8532, 8532, 8398, 8398,
+     8398, 8532, 8398, 8398, 8398, 8398, 8398, 8481, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8534, 8535, 8398, 8534, 8534, 8534, 8398, 8398, 8398, 8398,
+     8398, 8398, 8536, 8537, 8398, 8536, 8536, 8536, 8536, 8538,
+     8539, 8398, 8538, 8538, 8538, 8538, 8540, 8398, 8541, 8398,
+     8481, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8481, 8398,
+     8398, 8398, 8398, 8398, 8542, 8543, 8542, 8398, 8398, 8542,
+
+     8542, 8542, 8398, 8398, 8398, 8542, 8398, 8481, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8544, 8398, 8398, 8398, 8398,
+     8545, 8398, 8398, 8481, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8546, 8398,
+     8398, 8481, 8547, 8398, 8398, 8398, 8398, 8398, 8398, 8547,
+     8398,  718,  719, 8547, 8545, 8398, 8398, 8481, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398,  734,  735, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8548, 8398, 8398, 8549,
+     8398, 8550, 8398, 8398, 8551, 8398, 8552, 8553, 8398, 8398,
+     8554, 8398, 8555, 8555, 8555, 8555, 8398, 8398, 8556, 8398,
+
+     8557, 8557, 8557, 8557, 8557, 8398, 8481, 8398, 8398, 8398,
+     8398, 8558, 8398, 8398, 8398, 8398, 8398, 8398, 8559, 8398,
+     8398, 8560, 8561, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8481, 8398, 8398, 8398, 8398, 8398, 8562, 8563, 8564,
+     8565, 8566, 8567, 8398, 8481, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398,  768, 8398, 8398, 8398, 8568, 8398,
+     8398,  854,  855, 8398, 8481, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8481, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8481, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8481,
+     8398, 8398, 8398, 8398, 8398, 8398, 8569, 8570, 8398, 8398,
+
+     8398, 8571, 8572, 8398, 8573, 8574, 8573, 8398, 8573, 8573,
+     8573, 8398, 8573, 8573, 8398, 8575, 8398, 8576, 8398, 8481,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8481, 8398,
+     8398, 8398, 8398, 8398, 8398, 8577, 8578, 8398, 8579, 8398,
+     8398, 8481, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398,  854,  855, 8398, 8398, 8398, 8568, 8398,  953, 8398,
+     8481, 8398, 8398, 8398, 8398, 8398, 8398,  854,  953, 8580,
+     8398, 8577, 8578, 8580, 8398, 8481, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8581, 8582, 8582, 8582, 8582, 8583, 8584,
+     8398, 8583, 8583, 8583, 8583, 8398, 8585, 8398, 8586, 8586,
+
+     8586, 8586, 8587, 8588, 8588, 8588, 8398, 8589, 8590, 8398,
+     8398, 8481, 8398, 8398, 8398, 8398, 8591, 8398, 8398, 8398,
+     8592, 8593, 8398, 8398, 8594, 8398, 8481, 8398, 8398, 8398,
+     8595, 8596, 8398, 8398, 8597, 8398, 8398, 8398, 8481, 8398,
+     8398, 8398, 8398, 8398, 8398, 8481, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8598, 8598, 8598, 8598, 8398,
+     8398, 8398, 8398, 8599, 8398, 8398, 8600, 8601, 8398, 8398,
+     8600, 8600, 8600, 8398, 8398, 8398, 8398, 8481, 8398, 8398,
+     8398, 8398, 8398, 8398, 8481, 8398, 8398, 8398, 8398, 8398,
+     8398, 8481, 8398, 8398, 8398, 8398, 8398, 8398, 8481, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8481, 8398, 8398, 8398, 8602,
+     8398, 8398, 8603, 8398, 8481, 8398, 8604, 8398, 8398, 8398,
+     8398, 8481, 8398, 8605, 8398, 8398, 8398, 8398, 8481, 8398,
+     8398, 8398, 8398, 8398, 8398, 8606, 8607, 8608, 8398, 8607,
+     8607, 8607, 8398, 8607, 8398, 8481, 8398, 8398, 8398, 8398,
+     8398, 8398, 8609, 8610, 8398, 8398, 8609, 8398, 8609, 8611,
+     8612, 8613, 8398, 8612, 8614, 8398, 8398, 8398, 8398, 8481,
+     8398, 8398, 8398, 8615, 8616, 8398, 8615, 8615, 8615, 8398,
+     8615, 8617, 8615, 8398, 8618, 8619, 8398, 8618, 8618, 8618,
+     8618, 8620, 8398, 8481, 8398, 8398, 8398, 8398, 8398, 8398,
+
+     8398, 8398, 8621, 8622, 8398, 8398, 8398, 8614, 8398, 8398,
+     8398, 8398, 8398, 8398, 8481, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8481, 8398, 8398,
+     8398, 8398, 8398, 8398, 8481, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8623, 8398, 8398, 8398, 8624, 8398,
+     8481, 8398, 8398, 8398, 8398, 8625, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8481, 8398, 8398, 8398, 8398, 8398, 8398,
+     8626, 8398, 8398, 8627, 8628, 8398, 8398, 8627, 8629, 8398,
+     8398, 8627, 8630, 8631, 8398, 8398, 8630, 8632, 8398, 8398,
+     8398, 8398, 8481, 8398, 8398, 8398, 8398, 8398, 8398, 8633,
+
+     8634, 8635, 8398, 8636, 8637, 8398, 8638, 8639, 8639, 8639,
+     8640, 8641, 8642, 8398, 8481, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8481, 8398, 8643, 8398, 8398,
+     8398, 8644, 8645, 8398, 8481, 8398, 8398, 8398, 8398, 8398,
+     8398, 8481, 8398, 8398, 8398, 8646, 8398, 8398, 8398, 8398,
+     8647, 8398, 8648, 8649, 8398, 8398, 8648, 8648, 8648, 8650,
+     8398, 8398, 8398, 8651, 8398, 8652, 8653, 8652, 8652, 8652,
+     8652, 8398, 8652, 8654, 8398, 8398, 8398, 8655, 8656, 8657,
+     8656, 8656, 8656, 8656, 8398, 8656, 8398, 8658, 8659, 8660,
+     8661, 8398, 8398, 8398, 8481, 8398, 8398, 8398, 8662, 8398,
+
+     8398, 8662, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8663, 8398, 8398, 8398, 8664, 8665, 8666, 8663, 8663, 8667,
+     8668, 8664, 8398, 8665, 8398, 8398, 8398, 8669, 8669, 8670,
+     8398, 8398, 8398, 8398, 8671, 8672, 8673, 8398, 8398, 8398,
+     8671, 8398, 8398, 8398, 8672, 8673, 8673, 8674, 8675, 8675,
+     8398, 8398, 8676, 8676, 8676, 8677, 8677, 8398, 8676, 8678,
+     8398, 8679, 8677, 8398, 8398, 8398, 8398, 8398, 8680, 8681,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8682, 8683, 8684,
+
+     8398, 8685, 8686, 8398, 8687, 8398, 8398, 8398, 8682, 8398,
+     8398, 8398, 8398, 8398, 8683, 8398, 8683, 8683, 8683, 8683,
+     8683, 8683, 8683, 8683, 8683, 8683, 8683, 8683, 8683, 8683,
+     8683, 8683, 8683, 8683, 8683, 8683, 8683, 8683, 8683, 8683,
+     8683, 8683, 8683, 8683, 8683, 8684, 8684, 8688, 8689, 8690,
+     8689, 8689, 8689, 8398, 8398, 8398, 8691, 8692, 8693, 8691,
+     8398, 8692, 8398, 8693, 8693, 8694, 8695, 8398, 8398, 8695,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8696,
+     8398, 8398, 8398, 8398, 8696, 8696, 8696, 8696, 8696, 8696,
+     8398, 8398, 8398, 8697, 8698, 8697, 8697, 8398, 8398, 8699,
+
+     8699, 8700, 8700, 8701, 8398, 8702, 8398, 8398, 8398, 8703,
+     8398, 8704, 8703, 8398, 8703, 8398, 8398, 8705, 8706, 8707,
+     8705, 8706, 8707, 8707, 8708, 8398, 8398, 8709, 8710, 8711,
+     8709, 8710, 8398, 8398, 8711, 8711, 8712, 8713, 8714, 8713,
+     8398, 8398, 8715, 8716, 8715, 8715, 8715, 8715, 8717, 8718,
+     8398, 8398, 8398, 8398, 8398, 8715, 8715, 8719, 8720, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8721, 8722, 8721, 8721, 8398, 8398, 8398,
+     8721, 8723, 8398, 8724, 8723, 8725, 8723, 8723, 8726, 8727,
+     8726, 8398, 8398, 8398, 8398, 8726, 8398, 8398, 8398, 8398,
+
+     8398, 8398, 8728, 8729, 8728, 8728, 8728, 8398, 8398, 8398,
+     8398, 8398, 8730, 8731, 8730, 8730, 8730, 8732, 8733, 8732,
+     8732, 8732, 8734, 8734, 8398, 8735, 8736, 8735, 8735, 8398,
+     8398, 8398, 8398, 8735, 8735, 8735, 8398, 8398, 8398, 8398,
+     8398, 8737, 8398, 8398, 8738, 8739, 8738, 8739, 8739, 8739,
+     8739, 8739, 8739, 8739, 8739, 8739, 8739, 8739, 8739, 8739,
+     8739, 8739, 8739, 8739, 8739, 8739, 8739, 8398, 8398, 8740,
+     8740, 8740, 8740, 8740, 8740, 8740, 8740, 8740, 8740, 8740,
+     8740, 8740, 8740, 8740, 8740, 8740, 8740, 8740, 8740, 8740,
+     8398, 8741, 8398, 8398, 8398, 8741, 8398, 8398, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8742, 8743, 8742, 8743, 8743, 8743, 8743, 8743, 8743,
+     8743, 8743, 8743, 8743, 8743, 8743, 8743, 8743, 8743, 8743,
+     8743, 8743, 8743, 8743, 8398, 8744, 8744, 8744, 8744, 8744,
+     8744, 8744, 8744, 8744, 8744, 8744, 8744, 8744, 8744, 8744,
+     8744, 8744, 8744, 8744, 8744, 8744, 8398, 8398, 8398, 8745,
+     8398, 8398, 8398, 8398, 8745, 8398, 8398, 8398, 8746, 8398,
+     8746, 8398, 8398, 8398, 8739, 8739, 8739, 8739, 8739, 8739,
+     8739, 8739, 8739, 8739, 8739, 8740, 8740, 8740, 8740, 8740,
+     8740, 8740, 8740, 8740, 8740, 8740, 8746, 8741, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8742, 8743, 8743, 8743, 8743,
+     8743, 8743, 8743, 8743, 8743, 8743, 8743, 8743, 8743, 8743,
+     8743, 8743, 8743, 8743, 8743, 8398, 8744, 8744, 8744, 8744,
+     8744, 8744, 8744, 8744, 8744, 8744, 8744, 8744, 8744, 8744,
+     8744, 8744, 8744, 8744, 8744, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8747, 8748, 8749, 8398, 8747, 8748, 8398, 8398, 8398, 8749,
+     8749, 8750, 8398, 8398, 8751, 8752, 8753, 8751, 8398, 8754,
+     8752, 8753, 8753, 8755, 8398, 8398, 8756, 8398, 8757, 8758,
+
+     8757, 8757, 8398, 8398, 8398, 8398, 8759, 8398, 8760, 8761,
+     8760, 8398, 8760, 8759, 8398, 8398, 8398, 8762, 8398, 8763,
+     8398, 8398, 8398, 8398, 8398, 8764, 8765, 8766, 8764, 8765,
+     8766, 8766, 8767, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8768, 8398, 8768, 8769, 8769, 8398, 8770, 8770,
+     8398, 8398, 8398, 8398, 8398, 8398, 8771, 8771, 8772, 8772,
+     8772, 8772, 8772, 8772, 8772, 8772, 8772, 8772, 8772, 8772,
+     8772, 8772, 8772, 8772, 8772, 8772, 8772, 8398, 8773, 8773,
+     8773, 8773, 8773, 8773, 8773, 8773, 8773, 8773, 8773, 8773,
+     8773, 8773, 8773, 8773, 8773, 8773, 8773, 8398, 8398, 8398,
+
+     8774, 8398, 8398, 8398, 2104, 8398, 8398, 8398, 8774, 8398,
+     8398, 8398, 8398, 2113, 8398, 8398, 8772, 8772, 8772, 8772,
+     8772, 8772, 8772, 8772, 8772, 8772, 8772, 8772, 8772, 8772,
+     8772, 8772, 8772, 8772, 8772, 8398, 8773, 8773, 8773, 8773,
+     8773, 8773, 8773, 8773, 8773, 8773, 8773, 8773, 8773, 8773,
+     8773, 8773, 8773, 8773, 8773, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8775, 8775, 8398, 8398, 8776, 8398, 8776, 8398,
+     8398, 8777, 8778, 8777, 8777, 8398, 8398, 8777, 8777, 8398,
+     8779, 8398, 8779, 8398, 8398, 8398, 8398, 8780, 8781, 8781,
+     8781, 8781, 8781, 8782, 8782, 8782, 8782, 8782, 8782, 8398,
+
+     8783, 8398, 8398, 8398, 8783, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8772, 8772, 8772, 8772,
+     8772, 8772, 8772, 8772, 8772, 8772, 8772, 8772, 8772, 8772,
+     8772, 8772, 8772, 8772, 8772, 8398, 8773, 8773, 8773, 8773,
+     8773, 8773, 8773, 8773, 8773, 8773, 8773, 8773, 8773, 8773,
+     8773, 8773, 8773, 8773, 8773, 8398, 8398, 8398, 8774, 8398,
+     2211, 8398, 8398, 8398, 8774, 8398, 8398, 8773, 8398, 8398,
+     8398, 8398, 8771, 8772, 8772, 8772, 8773, 8773, 8773, 8784,
+     8398, 8398, 8781, 8781, 8781, 8781, 8781, 8781, 8782, 8782,
+     8782, 8782, 8782, 8782, 8784, 8398, 8785, 8786, 8787, 8786,
+
+     8786, 8398, 8398, 8788, 8398, 8789, 8788, 8790, 8788, 8788,
+     8791, 8398, 8792, 8793, 8792, 8792, 8398, 8398, 8794, 8795,
+     8796, 8795, 8795, 8797, 8398, 8798, 8797, 8398, 8799, 8398,
+     8398, 8398, 8398, 8800, 8801, 8802, 8800, 8801, 8802, 8802,
+     8803, 8398, 8398, 8398, 8398, 8804, 8398, 8805, 8806, 8807,
+     8805, 8398, 8398, 8398, 8398, 8398, 8398, 8808, 8808, 8808,
+     8809, 8809, 8810, 8811, 8812, 8811, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8813,
+     8813, 8398, 8814, 8398, 8398, 8815, 8398, 8398, 8398, 8398,
+     8816, 8817, 8398, 8818, 8817, 8819, 8817, 8398, 8398, 8820,
+
+     8398, 8398, 8821, 8822, 8821, 8821, 8821, 8398, 8823, 8824,
+     8823, 8825, 8826, 8827, 8828, 8827, 8398, 8827, 8829, 8827,
+     8398, 8398, 8830, 8831, 8830, 8830, 8830, 8832, 8832, 8832,
+     8398, 8398, 8833, 8834, 8833, 8398, 8825, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8835, 8836, 8837, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8838, 8839, 8838, 8840, 8841, 8838, 8838, 8842, 8843,
+     8842, 8844, 8845, 8398, 8846, 8846, 8847, 8847, 8398, 8848,
+     8849, 8848, 8850, 8850, 8851, 8398, 8398, 8851, 8852, 8398,
+     8853, 8852, 8398, 8398, 8854, 8398, 8855, 8398, 8855, 8856,
+
+     8398, 8398, 8856, 8857, 8858, 8857, 8398, 8857, 8857, 8859,
+     8398, 8859, 8860, 8861, 8860, 8860, 8860, 8862, 8398, 8398,
+     8862, 8398, 8863, 8864, 8863, 8398, 8863, 8863, 8865, 8865,
+     8866, 8866, 8398, 8398, 8398, 8398, 8398, 8867, 8868, 8868,
+     8869, 8398, 8870, 8871, 8871, 8872, 8873, 8398, 8874, 8875,
+     8398, 8876, 8398, 8398, 8877, 8878, 8398, 8398, 8879, 8880,
+     8881, 8882, 8882, 8883, 8884, 8885, 8882, 8398, 8398, 8398,
+     8398, 8886, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8887, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8888, 8889, 8398,
+     8890, 8398, 8398, 8891, 8892, 8398, 8398, 8398, 8893, 8398,
+     8398, 8398, 8894, 8398, 8887, 8398, 8398, 8398, 8398, 8398,
+     8398, 8895, 8895, 8895, 8895, 8895, 8895, 8895, 8895, 8895,
+     8895, 8895, 8895, 8895, 8895, 8895, 8895, 8895, 8895, 8895,
+     8895, 8895, 8895, 8895, 8895, 8895, 8895, 8895, 8895, 8895,
+     8895, 8895, 8895, 8895, 8895, 8895, 8895, 8398, 8896, 8398,
+     8897, 8398, 8898, 8398, 8893, 8398, 8894, 8398, 8398, 8398,
+     8398, 8398, 8398, 8893, 8398, 8398, 8894, 8398, 8899, 8899,
+     8899, 8899, 8899, 8398, 8398, 8398, 8900, 8901, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8902, 8398, 8398, 8903, 8903, 8904,
+     8905, 8906, 8907, 8908, 8909, 8910, 8911, 8912, 8913, 8398,
+     8398, 8398, 8398, 8398, 8914, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8915, 8398, 8398, 8398, 8398, 8398, 8398, 8916,
+     8398, 8917, 8917, 8917, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8918, 8918, 8918, 8918, 8918, 8918, 8918,
+     8918, 8918, 8918, 8918, 8918, 8919, 8919, 8919, 8919, 8919,
+     8919, 8919, 8919, 8919, 8919, 8919, 8919, 8919, 8398, 8398,
+     8919, 8919, 8919, 8919, 8919, 8919, 8919, 8919, 8919, 8919,
+
+     8919, 8919, 8919, 8919, 8919, 8919, 8919, 8919, 8919, 8919,
+     8919, 8919, 8919, 8919, 8919, 8919, 8919, 8920, 8398, 8920,
+     8920, 8920, 8920, 8920, 8920, 8920, 8920, 8920, 8920, 8920,
+     8920, 8920, 8920, 8920, 8920, 8920, 8920, 8920, 8920, 8920,
+     8920, 8920, 8920, 8920, 8920, 8920, 8920, 8920, 8920, 8920,
+     8920, 8920, 8920, 8920, 8920, 8920, 8920, 8920, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8921, 8398, 8398, 8398, 8922, 8922, 8922, 8922, 8922, 8922,
+
+     8922, 8922, 8922, 8922, 8922, 8922, 8923, 8923, 8923, 8923,
+     8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923,
+     8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923,
+     8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923,
+     8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923,
+     8923, 8923, 8923, 8924, 8398, 8924, 8924, 8924, 8924, 8924,
+     8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924,
+     8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924,
+     8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924,
+     8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924,
+
+     8924, 8398, 8398, 8398, 8919, 8919, 8919, 8919, 8919, 8919,
+     8920, 8920, 8920, 8920, 8920, 8920, 8398, 8398, 8398, 8922,
+     8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923,
+     8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923,
+     8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923,
+     8923, 8923, 8923, 8923, 8923, 8923, 8924, 8924, 8924, 8924,
+     8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924,
+     8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924,
+     8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924,
+     8924, 8924, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8925, 8926, 8927, 8928, 8398,
+     8929, 8398, 8930, 8930, 8398, 8931, 8931, 8932, 8398, 8398,
+     8933, 8934, 8398, 8398, 8398, 8398, 8935, 8936, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8923,
+     8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923,
+     8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923,
+     8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923,
+
+     8923, 8923, 8923, 8924, 8924, 8924, 8924, 8924, 8924, 8924,
+     8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924,
+     8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924,
+     8924, 8924, 8924, 8924, 8924, 8924, 8924, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 3263, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8937, 8398, 8923, 8923, 8923, 8923, 8923, 8923, 8923,
+
+     8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923,
+     8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923,
+     8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923, 8924, 8924,
+     8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924,
+     8924, 8924, 8924, 8398, 8924, 8924, 8924, 8924, 8924, 8924,
+     8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924,
+     8924, 8924, 8924, 8924, 8398, 8918, 8919, 8919, 8920, 8920,
+     8920, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923,
+
+     8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923,
+     8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923, 8923,
+     8923, 8923, 8923, 8923, 8923, 8924, 8924, 8924, 8924, 8924,
+     8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924,
+     8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924,
+     8924, 8924, 8924, 8924, 8924, 8924, 8924, 8924, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8923, 8923, 8924,
+     8924, 8398, 8919, 8919, 8920, 8920, 8398, 8398, 8938, 8938,
+     8398, 8939, 8939, 8398, 8940, 8940, 8941, 8942, 8943, 8943,
+     8944, 8945, 8946, 8398, 8398, 8398, 8947, 8398, 8398, 8948,
+
+     8948, 8398, 8949, 8398, 8950, 8398, 8398, 8398, 8923, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8951, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8952, 8398, 8398,
+     8398, 8953, 8398, 8398, 8398, 8954, 8955, 8956, 8957, 8957,
+     8398, 8958, 8398, 8398, 8398, 8398, 8398, 8959, 8398, 8960,
+     8398, 8398, 8398, 8398, 8398, 8961, 8962, 8963, 8964, 8398,
+     8398, 8398, 8398, 8398, 8965, 8965, 8398, 8966, 8967, 8968,
+     8969, 8970, 8971, 8398, 8398, 8398, 8398, 8972, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8973, 8974, 8974, 8975, 8398,
+     8398, 8976, 8976, 8398, 8977, 8978, 8398, 8398, 8398, 8398,
+     8979, 8398, 8398, 8398, 8398, 8398, 8980, 8398, 8398, 8398,
+     8398, 8398, 8398, 8981, 8981, 8981, 8981, 8981, 8981, 8981,
+     8981, 8981, 8981, 8981, 8981, 8981, 8981, 8981, 8981, 8981,
+     8981, 8981, 8981, 8981, 8981, 8981, 8981, 8981, 8981, 8981,
+     8981, 8981, 8981, 8981, 8981, 8981, 8981, 8981, 8981, 8981,
+     8981, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8982,
+     8982, 8982, 8398, 8982, 8983, 8984, 8398, 8398, 8398, 8398,
+
+     8398, 8985, 8986, 8987, 8988, 8989, 8398, 8398, 8398, 8990,
+     8398, 8398, 8398, 8398, 8991, 8398, 8398, 8398, 8398, 8398,
+     8992, 8992, 8992, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8993, 8993,
+     8993, 8993, 8993, 8993, 8993, 8398, 8993, 8993, 8993, 8993,
+     8993, 8993, 8993, 8994, 8994, 8994, 8994, 8994, 8994, 8994,
+     8994, 8994, 8994, 8994, 8994, 8994, 8994, 8994, 8994, 8994,
+     8398, 8994, 8994, 8994, 8398, 8398, 8398, 8994, 8994, 8994,
+     8994, 8994, 8994, 8994, 8994, 8994, 8994, 8994, 8994, 8994,
+
+     8994, 8994, 8994, 8994, 8994, 8994, 8994, 8994, 8994, 8994,
+     8994, 8995, 8995, 8995, 8995, 8995, 8995, 8995, 8995, 8995,
+     8995, 8995, 8995, 8995, 8995, 8995, 8995, 8995, 8995, 8995,
+     8995, 8995, 8995, 8995, 8995, 8995, 8995, 8995, 8995, 8995,
+     8995, 8995, 8995, 8995, 8995, 8995, 8995, 8995, 8995, 8995,
+     8995, 8995, 8995, 8995, 8995, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8996,
+     8996, 8398, 8398, 8997, 8997, 8997, 8997, 8997, 8997, 8997,
+
+     8997, 8997, 8997, 8997, 8997, 8997, 8997, 8998, 8998, 8998,
+     8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998,
+     8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998,
+     8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998,
+     8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998,
+     8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998,
+     8998, 8998, 8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999,
+     8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999,
+     8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999,
+     8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999,
+
+     8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999,
+     8999, 8999, 8999, 8999, 8999, 8999, 8999, 8398, 8994, 8994,
+     8995, 8995, 8995, 8398, 8398, 8998, 8998, 8998, 3912, 8998,
+     8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998,
+     8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998,
+     8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998,
+     8998, 8999, 8999, 8999, 3967, 8999, 8999, 8999, 8999, 8999,
+     8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999,
+     8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999,
+     8999, 8999, 8999, 8999, 8999, 8999, 8999, 8398, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 9000, 8398, 8398, 8398, 8398, 9001, 9002, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     9003, 8398, 8398, 8998, 8998, 8998, 8998, 8998, 8998, 8998,
+     8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998,
+     8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998,
+
+     8998, 8998, 8998, 8998, 8998, 8998, 8998, 8999, 8999, 8999,
+     8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999,
+     8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999,
+     8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999,
+     8999, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998,
+     8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998,
+     8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998,
+     8998, 8998, 8998, 8998, 8998, 8999, 8999, 8999, 8999, 8999,
+     8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999,
+     8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999,
+     8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999,
+     8398, 8994, 8994, 8995, 8995, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8998, 8998,
+     8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998,
+     8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998,
+     8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998, 8998,
+     8998, 8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999,
+     8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999,
+     8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999, 8999,
+     8999, 8999, 8999, 8999, 8398, 8398, 8398, 8398, 8398, 8998,
+     8998, 8999, 8999, 8398, 8994, 8994, 8995, 8995, 8398, 9004,
+
+     9005, 9005, 9006, 9007, 8398, 8398, 8398, 8398, 8398, 9008,
+     8398, 9009, 8398, 8398, 8998, 8398, 8398, 8398, 9010, 8398,
+     8398, 9011, 8398, 8398, 9012, 8398, 8398, 9013, 9014, 9015,
+     8398, 8398, 8398, 8398, 8398, 9016, 9016, 9017, 9018, 9018,
+     9019, 9020, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 9021, 8398, 8398, 9022, 9022,
+     9023, 9024, 9025, 9026, 9026, 9027, 8398, 8398, 8398, 8398,
+
+     8398, 8398, 9028, 9028, 9028, 9028, 9028, 9028, 9028, 9028,
+     9028, 8398, 8398, 8398, 8398, 8398, 8398, 9028, 9028, 9028,
+     9028, 9028, 9028, 9028, 9028, 9028, 9028, 9028, 9028, 9028,
+     9028, 9028, 9028, 9028, 9028, 9028, 9028, 9028, 9028, 9028,
+     9028, 9028, 9028, 9028, 9028, 8398, 8398, 8398, 8398, 8398,
+     9029, 9029, 9029, 9029, 9030, 8398, 8398, 8398, 9031, 8398,
+     8398, 8398, 8398, 8398, 8398, 9032, 9032, 8398, 8398, 9033,
+     8398, 8398, 9034, 9034, 9034, 9034, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 9035,
+
+     8398, 8398, 9036, 9036, 9036, 9036, 9036, 9036, 8398, 9036,
+     9036, 9036, 9036, 9036, 9036, 9037, 9037, 9037, 9037, 8398,
+     9037, 9037, 9037, 9037, 8398, 9037, 9037, 9037, 8398, 9037,
+     9037, 9037, 9037, 9037, 9037, 9037, 9037, 9037, 9037, 9037,
+     9037, 9037, 9037, 9037, 9037, 9037, 9037, 9037, 9037, 9037,
+     9037, 9037, 9037, 9037, 9037, 9037, 9037, 9037, 9037, 9037,
+     9037, 9037, 9037, 9038, 9038, 9038, 9038, 8398, 9038, 9038,
+     9038, 9038, 9038, 9038, 9038, 8398, 9038, 9038, 9038, 9038,
+     9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038,
+     9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038,
+
+     9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 9039, 8398, 8398, 8398, 9040, 9040,
+     9040, 9040, 9040, 9040, 8398, 9040, 9040, 9040, 9040, 9040,
+     9040, 9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041,
+     9041, 9041, 9041, 8398, 9041, 9041, 9041, 9041, 9041, 9041,
+     9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041,
+     9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041,
+
+     9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041,
+     9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041, 9042, 9042,
+     9042, 9042, 9042, 8398, 9042, 9042, 9042, 9042, 9042, 9042,
+     9042, 8398, 9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042,
+     9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042,
+     9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042,
+     9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042,
+     9042, 9042, 9042, 9042, 9042, 9042, 8398, 9037, 9038, 9038,
+     9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041,
+     9041, 9041, 9041, 9041, 9041, 9041, 8398, 9041, 9041, 9041,
+
+     9041, 9041, 9041, 9041, 4909, 4910, 9041, 9041, 9041, 9041,
+     9041, 9041, 9041, 9041, 9042, 9042, 9042, 9042, 9042, 9042,
+     9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042,
+     8398, 9042, 9042, 9042, 9042, 9042, 9042, 9042, 4967, 4968,
+     9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 9043, 9043, 9041, 9041, 9041,
+     9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041,
+     9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041,
+     9041, 9041, 9041, 9041, 9041, 9041, 9041, 9042, 9042, 9042,
+     9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042,
+     9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042,
+     9042, 9042, 9042, 9042, 9042, 9042, 9042, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 9041, 9041, 9041, 9041,
+     9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041,
+     9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041,
+     9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041, 9042, 9042,
+     9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042,
+     9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042,
+
+     9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042,
+     8398, 9037, 9038, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 9041, 9041, 9041, 9041,
+     9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041,
+     9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041, 9041,
+     9041, 9041, 9041, 9041, 9041, 9041, 9042, 9042, 9042, 9042,
+     9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042,
+     9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042, 9042,
+
+     9042, 9042, 9042, 9042, 9042, 9042, 8398, 8398, 9041, 9041,
+     9042, 9042, 8398, 9037, 9037, 9038, 9038, 8398, 9044, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 9045, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 9046, 9047,
+     9048, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 9049,
+     9050, 9051, 8398, 9052, 9053, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 9054, 9054, 9054, 9054, 9054, 8398, 8398, 9054,
+
+     9054, 9054, 9054, 9054, 9054, 9054, 9054, 9054, 9054, 9054,
+     9054, 9054, 9054, 9054, 9054, 9054, 9054, 9054, 9054, 9054,
+     9054, 9054, 9054, 9054, 9054, 8398, 8398, 8398, 9054, 9054,
+     9054, 8398, 8398, 8398, 8398, 8398, 9055, 8398, 8398, 9055,
+     9055, 8398, 9056, 9057, 8398, 9058, 9058, 8398, 8398, 8398,
+     8398, 9059, 9060, 9060, 9060, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 9061,
+     9061, 8398, 8398, 9062, 8398, 9062, 9062, 9062, 9062, 9062,
+     9062, 9062, 9037, 9037, 9037, 9037, 9037, 9037, 9037, 8398,
+
+     9037, 9037, 9037, 8398, 9037, 9037, 8398, 9037, 8398, 9037,
+     9037, 9037, 9037, 9037, 9037, 9037, 9037, 8398, 9037, 9037,
+     9037, 9037, 8398, 9037, 9037, 9037, 9037, 9037, 9037, 9037,
+     9037, 9037, 8398, 8398, 9037, 9037, 9037, 9037, 9037, 9038,
+     9038, 9038, 9038, 9038, 9038, 9038, 8398, 9038, 9038, 9038,
+     8398, 9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038,
+     9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038,
+     9038, 9038, 9038, 9038, 9038, 8398, 8398, 9038, 9038, 9038,
+     9038, 9038, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 9063, 9063, 8398, 8398, 8398, 9064, 8398, 9064,
+     9064, 9064, 9064, 9064, 9064, 9064, 9065, 9065, 9065, 9065,
+     9065, 9065, 9065, 9065, 8398, 9065, 9065, 9065, 9065, 9065,
+     9065, 9065, 9065, 9065, 9065, 9065, 9065, 9065, 9065, 9065,
+     9065, 9065, 9065, 9065, 9065, 9065, 9065, 9065, 9065, 9065,
+     9065, 9065, 9065, 9065, 9065, 9065, 9065, 9065, 9065, 9065,
+     9065, 9065, 9065, 9065, 9065, 9065, 9066, 9066, 9066, 9066,
+     9066, 9066, 9066, 9066, 8398, 9066, 9066, 9066, 9066, 8398,
+     9066, 9066, 9066, 9066, 9066, 9066, 9066, 9066, 9066, 9066,
+
+     9066, 9066, 9066, 9066, 9066, 9066, 9066, 9066, 9066, 9066,
+     9066, 9066, 9066, 9066, 9066, 9066, 9066, 9066, 9066, 8398,
+     8398, 9066, 9066, 9066, 9066, 9066, 9066, 9066, 9066, 8398,
+     9037, 9038, 9038, 9065, 9065, 9065, 9065, 9065, 9065, 9065,
+     9065, 9065, 9065, 9065, 9065, 9065, 9065, 9067, 8398, 8398,
+     5850, 9065, 9065, 9065, 9065, 9065, 9065, 9065, 9065, 9065,
+     9065, 9065, 9065, 9066, 9066, 9066, 9066, 9066, 9066, 9066,
+     9066, 9066, 9066, 9066, 9066, 9066, 9066, 8398, 9067, 5878,
+     9066, 9066, 9066, 9066, 9066, 9066, 9066, 9066, 9066, 9066,
+     9066, 9066, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 9065, 9065, 9065, 9065, 9065, 9065, 9065,
+     9065, 9065, 9065, 9065, 9065, 9065, 9065, 9065, 9065, 9065,
+     9065, 9065, 9065, 9065, 9065, 9065, 9065, 9065, 9065, 9066,
+     9066, 9066, 9066, 9066, 9066, 9066, 9066, 9066, 9066, 9066,
+     9066, 9066, 9066, 9066, 9066, 9066, 9066, 9066, 9066, 9066,
+
+     9066, 9066, 9066, 9066, 9066, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 9065, 9065, 9065,
+     9065, 9065, 9065, 9065, 9065, 9065, 9065, 9065, 9065, 9065,
+     9065, 9065, 9065, 9065, 9065, 9065, 9065, 9065, 9065, 9065,
+     9065, 9065, 9065, 9065, 9066, 9066, 9066, 9066, 9066, 9066,
+
+     9066, 9066, 9066, 9066, 9066, 9066, 9066, 9066, 9066, 9066,
+     9066, 9066, 9066, 9066, 9066, 9066, 9066, 9066, 9066, 9066,
+     9066, 8398, 9037, 9038, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 9065, 9065, 9065, 9065, 9065, 9065,
+     9065, 9065, 9065, 9065, 9065, 9065, 9065, 9065, 9065, 9065,
+     9065, 9065, 9065, 9065, 9065, 9065, 9065, 9065, 9065, 9065,
+     9066, 9066, 9066, 9066, 9066, 9066, 9066, 9066, 9066, 9066,
+     9066, 9066, 9066, 9066, 9066, 9066, 9066, 9066, 9066, 9066,
+
+     9066, 9066, 9066, 9066, 9066, 9066, 9065, 9065, 9066, 9066,
+     8398, 9037, 9037, 9038, 9038, 8398, 9068, 9068, 8398, 8398,
+     8398, 8398, 8398, 8398, 9069, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 9070, 8398, 8398, 8398, 8398, 8398, 8398, 9071,
+     9071, 9071, 9071, 9071, 9071, 8398, 8398, 9071, 9071, 8398,
+     8398, 9071, 8398, 9071, 8398, 8398, 9071, 9071, 8398, 9071,
+     9071, 9071, 9071, 9071, 8398, 8398, 9071, 6282, 9071, 8398,
+
+     8398, 8398, 9071, 9071, 9071, 9071, 9071, 9071, 8398, 8398,
+     8398, 8398, 8398, 8398, 9072, 8398, 9073, 9074, 9074, 9075,
+     9075, 8398, 9076, 9077, 8398, 9078, 9078, 9078, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 9079,
+     8398, 9079, 9079, 9079, 9079, 9079, 9079, 9079, 9037, 9037,
+     9037, 9037, 9037, 8398, 9037, 9037, 9037, 9037, 8398, 9037,
+     9037, 9037, 9037, 8398, 9037, 9037, 9037, 9037, 9037, 9037,
+     9037, 9037, 9037, 9037, 9037, 9037, 9037, 9037, 9037, 9037,
+     9037, 9037, 9037, 8398, 9037, 9037, 9037, 9038, 9038, 9038,
+
+     9038, 9038, 9038, 9038, 9038, 9038, 8398, 9038, 9038, 9038,
+     9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038,
+     9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038,
+     9038, 9038, 9038, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 9080, 8398, 9080, 9080, 9080, 9080, 9080, 9080,
+     9080, 9081, 9081, 9081, 8398, 9081, 9081, 9081, 9081, 9081,
+     9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081,
+     9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081,
+
+     9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081,
+     9081, 9081, 9081, 9081, 9081, 9082, 9082, 9082, 9082, 9082,
+     9082, 9082, 9082, 9082, 9082, 8398, 9082, 9082, 9082, 9082,
+     9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082,
+     9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082,
+     9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 8398,
+     9038, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081,
+     9081, 9081, 9081, 8398, 9081, 9081, 9081, 9081, 9081, 9081,
+     9081, 9081, 9081, 9081, 9082, 9082, 9082, 9082, 9082, 9082,
+     9082, 9082, 9082, 9082, 9082, 9082, 8398, 9082, 9082, 9082,
+
+     9082, 9082, 9082, 9082, 9082, 9082, 9082, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 9081, 9081,
+     9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081,
+     9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081,
+     9081, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082,
+     9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082,
+
+     9082, 9082, 9082, 9082, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 9081, 8398, 9081,
+     9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081,
+     9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081,
+     9081, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082,
+     9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082,
+
+     9082, 9082, 9082, 9082, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081,
+     9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081,
+     9081, 9081, 9081, 9082, 9082, 9082, 9082, 9082, 9082, 9082,
+     9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082,
+     9082, 9082, 9082, 9082, 9082, 9082, 9081, 9081, 9082, 9082,
+     8398, 9037, 9037, 9038, 9038, 8398, 9083, 8398, 8398, 8398,
+     8398, 8398, 9084, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 9085, 9085, 9085, 9085, 9085, 8398, 8398, 8398,
+     9085, 9085, 8398, 9085, 9085, 8398, 8398, 8398, 8398, 9085,
+     8398, 8398, 9085, 9085, 9085, 8398, 9085, 9085, 8398, 8398,
+     9085, 8398, 9085, 9085, 8398, 9085, 8398, 9086, 8398, 9087,
+     8398, 6971, 8398, 9088, 8398, 9089, 9089, 9089, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 9079, 9079, 8398, 9079, 8398,
+
+     9079, 9079, 9079, 9037, 9037, 8398, 9037, 9037, 9037, 9037,
+     9037, 8398, 9037, 9037, 9037, 9037, 9037, 9037, 9037, 9037,
+     9037, 9037, 9037, 9037, 9037, 9037, 9037, 9037, 9037, 9037,
+     9037, 8398, 9037, 9037, 9037, 9037, 9037, 9038, 9038, 9038,
+     9038, 9038, 9038, 9038, 8398, 9038, 9038, 9038, 9038, 9038,
+     9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038,
+     9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 9080, 9080, 8398, 9080, 8398, 9080, 9080,
+
+     9080, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081,
+     9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081,
+     9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081,
+     9081, 9081, 9081, 9081, 9081, 9082, 9082, 9082, 9082, 9082,
+     9082, 8398, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082,
+     9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082,
+     9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082,
+     8398, 9038, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081,
+     9081, 9081, 6574, 9081, 9081, 9081, 9081, 9081, 9081, 9082,
+     9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 6597,
+
+     9082, 9082, 9082, 9082, 9082, 9082, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 9081, 9081, 9081,
+     9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081,
+     9081, 9081, 9081, 9081, 9082, 9082, 9082, 9082, 9082, 9082,
+     9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082,
+     9082, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 9081, 9081, 9081,
+     9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081,
+     9081, 9081, 9081, 9081, 9082, 9082, 9082, 9082, 9082, 9082,
+     9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082,
+     9082, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 9081, 9081, 9081, 9081, 9081, 9081,
+     9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081,
+
+     9081, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082,
+     9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9081, 9081,
+     9082, 9082, 9037, 8398, 9038, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 9084, 8398, 6895, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 9085, 9085, 9085, 8398,
+     9085, 8398, 8398, 8398, 9085, 9085, 9085, 8398, 9085, 9085,
+     9085, 9085, 9085, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 9087, 6972, 8398, 9089, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 9079, 8398, 9079, 9079, 9079, 9079,
+     9037, 9037, 9037, 9037, 9037, 9037, 8398, 8398, 9037, 9037,
+     9037, 8398, 9037, 9037, 9037, 9037, 9037, 9037, 9037, 8398,
+     9037, 9037, 8398, 9037, 8398, 9037, 9037, 9037, 9037, 9037,
+     9037, 9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038,
+     9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038, 9038,
+     9038, 9038, 9038, 9038, 9038, 9038, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 9080, 8398, 9080, 9080, 9080, 9080, 9081, 9081,
+
+     9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081,
+     9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081, 9081,
+     9081, 9081, 9081, 9081, 9081, 9081, 9082, 9082, 9082, 9082,
+     9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082,
+     9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082,
+     9082, 9082, 9082, 9082, 8398, 8398, 9081, 9081, 9081, 9081,
+     9081, 9081, 9081, 8398, 9081, 9081, 7626, 9082, 9082, 9082,
+     9082, 9082, 9082, 9082, 8398, 9082, 9082, 7654, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 9081, 9081, 9081, 9081, 9081,
+     9081, 9081, 9081, 9082, 9082, 9082, 9082, 9082, 9082, 9082,
+     9082, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 9081, 9081, 9081, 9081, 9081, 9081, 9081,
+     9081, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 9081, 9081, 9081, 9081, 9081,
+     9081, 9081, 9081, 9082, 9082, 9082, 9082, 9082, 9082, 9082,
+
+     9082, 9081, 9082, 8398, 9090, 8398, 8398, 8398, 9090, 8398,
+     8398, 8398, 8398, 8398, 9091, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 9092, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 9093, 9093, 9093, 8398, 8398, 8398,
+     8398, 9093, 8398, 8398, 8398, 8398, 8398, 9093, 8398, 8398,
+     9093, 9093, 9093, 8398, 8398, 8398, 8398, 9094, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 9095,
+     9095, 9095, 9096, 9097, 9097, 8398, 8398, 9097, 9097, 8398,
+     9097, 9097, 9097, 8398, 9097, 9097, 8398, 9097, 8398, 9097,
+     9097, 9097, 9097, 8398, 9097, 8398, 9098, 9098, 9098, 9098,
+
+     8398, 9098, 9098, 9098, 9098, 9098, 9098, 9098, 9098, 9098,
+     9098, 8398, 9098, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 9099, 9099, 9099, 9100, 9081, 9081,
+     9081, 9081, 8398, 9081, 9081, 9081, 9081, 9081, 9081, 9081,
+     9081, 9081, 9081, 8398, 9081, 9082, 9082, 9082, 9082, 8398,
+     9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082, 9082,
+     8398, 9082, 8398, 9081, 7930, 9081, 8398, 9082, 7947, 9082,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 9081, 7930, 9081, 9082, 7947, 9082, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 9081, 7930, 9081, 9082, 7947,
+     9082, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 9081,
+     7930, 9081, 9082, 7947, 9082, 8398, 8398, 8398, 8398, 9101,
+     8398, 8398, 8398, 8398, 8398, 8398, 9102, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 9093, 9103, 9104,
+     9093, 8398, 9093, 9093, 9093, 9105, 8398, 8398, 8398, 8398,
+     8398, 8398, 9106, 8398, 9107, 9107, 9097, 8398, 9097, 9097,
+     8398, 8398, 8398, 8398, 9097, 8398, 9097, 9097, 9097, 9097,
+     8398, 9098, 8398, 9098, 9098, 8398, 9098, 9098, 9098, 9098,
+     9098, 8398, 8398, 8398, 8398, 9099, 8398, 9100, 9100, 9081,
+
+     9081, 9081, 8398, 9081, 9081, 9081, 9081, 9081, 9082, 8398,
+     9082, 9082, 8398, 9082, 9082, 9082, 9082, 9082, 8101, 8111,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8031, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 9104, 8398, 9093, 9093, 8398, 8398, 8398, 8398,
+     8398, 8398, 9097, 9097, 9097, 9097, 8398, 9097, 8398, 9098,
+     9098, 9098, 9098, 9098, 8398, 9081, 9081, 9081, 9081, 9081,
+     8398, 9082, 9082, 9082, 9082, 9082, 8398, 8031, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 9093, 8398, 8398, 9097,
+     9097, 8398, 9097, 9097, 9098, 9098, 9098, 9098, 9081, 9081,
+
+     9081, 9081, 9082, 9082, 9082, 9082, 8031, 8398, 8398, 8398,
+     8398, 8398, 8398, 9093, 9097, 9097, 9097, 9097, 9098, 9098,
+     9098, 9098, 9081, 9081, 9081, 9081, 9082, 9082, 9082, 9082,
+     8031, 8398, 8398, 8398, 8398, 8398, 9097, 8398, 9097, 8398,
+     9098, 8398, 9098, 9081, 9081, 9082, 8398, 9082, 8031, 8398,
+     8398, 8398, 8398, 8398, 9097, 9097, 9098, 9098, 9081, 9081,
+     9082, 9082, 8031, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8031, 8398, 8031, 8398, 8031, 8398, 8031, 8398, 8031, 8398,
+     8031, 8398, 8031, 8398, 8031, 8398, 8031, 8398, 8031, 8398,
+     8031, 8398, 8031, 8398, 8031, 8398, 8031, 8398, 8031, 8398,
+
+     8031, 8398, 8031, 8398, 8031, 8398, 8031, 8398, 8031, 8398,
+     8031, 8398, 8031, 8398, 8031, 8398, 8031, 8398, 8031, 8398,
+     8031, 8398, 8031, 8398, 8031, 8398, 8031, 8398, 8031, 8398,
+     8031, 8398, 8031, 8398, 8031, 8398, 8031, 8398, 8031, 8398,
+     8031, 8398, 8031, 8398, 8031, 8398, 8031, 8398, 8031, 8398,
+     8031, 8398, 8031, 8398, 8031, 8398, 8031, 8398, 8031, 8398,
+     8031, 8398, 8031, 8398, 8031, 8398, 8031, 8398, 8031, 8398,
+     8031, 8398, 8031, 8398, 8031, 8398, 8031, 8398, 8031, 8398,
+     8031, 8398, 8031, 8398, 8031, 8398, 8031, 8398, 8031, 8398,
+     8031, 8398, 8031, 8398, 8031, 8398, 8031,    0, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 8398
+    } ;
+
+static yyconst short int yy_nxt[42194] =
+    {   0,
+     8398,  313, 8398,  314, 1407, 1408,  720,  315,  316,  720,
+      313,  317,  314, 1662, 1663, 8398,  315,  316,  721,  318,
+      317, 1397, 1405,  722, 1670, 1671, 1398, 1406,  318,  312,
+      313,  312,  314,  312,  312,  312,  315,  316,  319,  312,
+      317,  312,  312,  312,  312,  312,  312,  312,  318,  312,
+      312,  312,  312,  312,  312,  312,  312,  312,  312,  320,
+      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
+      320,  320,  320,  320,  320,  320,  312,  312,  312,  320,
+      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
+      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
+
+      320,  320,  320,  320,  320,  312,  312,  312,  313, 1427,
+      314, 1439, 1427, 1588,  315,  316, 1440,  313,  317,  314,
+     1397, 3909, 1589,  315,  316, 1398,  318,  317, 1672, 1673,
+      322,  323,  324,  323,  323,  318,  325,  326, 1465,  754,
+      327, 1465,  754,  322,  323,  324,  323,  323,  328,  325,
+      326,  755,  358,  327,  314, 3910,  756,  974,  359,  360,
+      974,  328,  361, 1400, 1501,  391, 1400,  314, 1501,  755,
+      362,  392,  393, 1401,  756,  394,  363,  329,  364, 1466,
+      395, 2537, 1467,  396, 1438, 1438, 1438, 1438,  397, 2537,
+      329,  312,  313,  330,  331,  332,  330,  312,  315,  316,
+
+      333,  312,  317,  312,  312,  312,  312,  312,  312,  334,
+      318,  312,  312,  312,  335,  336,  312,  312,  312,  312,
+      312,  337,  337,  337,  337,  337,  337,  337,  337,  337,
+      337,  337,  337,  337,  337,  337,  337,  337,  312,  312,
+      312,  337,  337,  337,  337,  337,  337,  337,  337,  337,
+      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
+      337,  337,  337,  337,  337,  337,  337,  338,  312,  339,
+      312,  313,  340,  341,  342,  340,  312,  315,  316,  343,
+      344,  317,  345,  312,  344,  346,  347,  346,  312,  348,
+      312,  312,  312,  349,  344,  350,  344,  312,  312,  351,
+
+      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
+      352,  352,  352,  352,  352,  352,  352,  345,  312,  312,
+      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
+      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
+      352,  352,  352,  352,  352,  352,  338,  312,  353,  312,
+      313,  312,  314,  312,  312,  312,  315,  316,  354,  312,
+      317,  312,  355,  312,  312,  312,  312,  312,  318,  312,
+      312,  312,  312,  312,  312,  312,  312,  312,  312,  356,
+      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
+      356,  356,  356,  356,  356,  356,  312,  312,  312,  356,
+
+      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
+      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
+      356,  356,  356,  356,  356,  312,  312,  312,  358, 1711,
+      314, 1397, 1397, 1712,  359,  360, 1398, 1398,  361, 1507,
+     1428, 1428, 1428, 1428, 1508, 2551,  362, 1429, 1506, 1506,
+     1506, 1506,  363, 2552,  364,  312,  313,  365,  366,  367,
+      365,  312,  315,  316,  368,  312,  317,  312,  312,  312,
+      346,  369,  346,  312,  348,  312,  312,  312,  370,  336,
+      371,  312,  369,  312,  351,  372,  372,  372,  372,  372,
+      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
+
+      372,  372,  312,  312,  312,  372,  372,  372,  372,  372,
+      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
+      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
+      372,  373,  312,  312,  375,  376,  377,  376,  376, 1601,
+      378,  379, 1601, 1495,  380, 3911, 1495,  375,  376,  377,
+      376,  376,  381,  378,  379, 1552,  313,  380,  314, 1551,
+     1553, 1395,  384,  316, 1568,  381,  385,  386, 1405, 1569,
+      313,  387,  314, 1406,  318, 1648,  384,  316, 1648,  388,
+      385,  386, 1397, 1395,  391,  387,  314, 1398,  318, 1603,
+      392,  393, 1397,  388,  394, 1496, 1397, 1398,  382,  395,
+
+     3912, 1398,  396,  437,  383,  438, 1685,  397, 1686,  439,
+      440,  382,  437,  441,  438, 1581, 2515,  383,  439,  440,
+     1582,  442,  441, 1403, 1403, 1403, 1403,  443, 1395, 1604,
+      442,  389, 1446, 1446, 1446, 1446,  443, 2575, 2575, 1447,
+     1404, 1573, 1573, 1573, 1573,  389,  312,  313,  398,  399,
+      400,  398,  312,  315,  401,  402,  403,  317,  404,  312,
+      403,  405,  406,  405,  407,  408,  312,  312,  312,  409,
+      410,  411,  412,  312,  413,  414,  415,  415,  415,  415,
+      415,  415,  415,  415,  415,  415,  415,  416,  415,  415,
+      415,  415,  415,  417,  312,  312,  418,  419,  415,  420,
+
+      421,  422,  415,  415,  415,  423,  424,  425,  426,  427,
+      415,  428,  415,  429,  430,  431,  432,  433,  415,  415,
+      415,  415,  434,  312,  435,  312,  313,  444,  445,  444,
+      444,  312,  315,  316,  446,  312,  317,  312,  312,  312,
+      312,  312,  312,  312,  318,  312,  312,  312,  447,  312,
+      312,  312,  312,  312,  312,  448,  448,  448,  448,  448,
+      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
+      448,  448,  312,  312,  312,  448,  448,  448,  448,  448,
+      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
+      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
+
+      448,  312,  312,  449,  312,  313,  450,  451,  450,  450,
+      312,  315,  316,  452,  312,  317,  312,  312,  312,  312,
+      453,  312,  312,  454,  312,  312,  312,  312,  312,  312,
+      455,  312,  312,  312,  456,  456,  456,  456,  456,  456,
+      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
+      456,  457,  312,  312,  456,  456,  456,  456,  456,  456,
+      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
+      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
+      312,  312,  312,  313,  450,  451,  450,  450, 1607,  315,
+      316, 1633, 1634,  317, 1633, 2819,  313,  450,  451,  450,
+
+      450,  458,  315,  316, 1581,  313,  317,  314, 1397, 1582,
+     2854,  315,  459, 1398,  458,  317,  460, 1605, 2537,  313,
+      461,  314, 1606,  318, 2789,  315,  459,  462,  463,  317,
+      460, 2537, 2437,  476,  461,  314, 1609,  318, 1905,  477,
+      478,  462,  463,  479,  480,  481,  476, 1648,  314, 1651,
+     1648,  482,  477,  478, 1652, 1660,  479,  480,  481,  484,
+     1661,  485, 2790, 1905,  482,  486,  487, 1511,  484,  488,
+      485, 1665, 2413, 1512,  486,  487, 1666,  489,  488, 1513,
+      461, 1677,  490, 2307, 1677, 2308,  489, 1403, 1403, 1403,
+     1403,  490, 3915, 1678,  461,  465,  466,  467,  466,  466,
+
+     1698,  468,  469, 1698, 1404,  470,  471,  472, 1641, 1642,
+      473, 1641, 1699,  474,  465,  466,  467,  466,  466, 1995,
+      468,  469, 1995, 1651,  470,  471,  472, 1646, 1668,  473,
+     1646, 1996,  474, 1647,  491, 1546, 1546, 1546, 1546, 2627,
+     2628, 3916, 1547,  491,  464,  465,  492,  493,  492,  492,
+      464,  468,  469,  494,  464,  470,  464,  464,  464,  464,
+      495,  464,  464,  496,  464,  464,  464,  495,  495,  464,
+      497,  464,  464,  464,  498,  498,  498,  498,  498,  498,
+      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
+      498,  464,  464,  464,  498,  498,  498,  499,  498,  498,
+
+      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
+      498,  500,  498,  501,  498,  502,  498,  498,  498,  498,
+      495,  464,  464,  504, 2419,  505, 1397, 1680, 2680,  506,
+      507, 1398, 1681,  508,  509, 3917, 1656, 2681,  504, 1656,
+      505,  510, 1657, 2419,  506,  507,  511,  512,  508,  509,
+     2819, 1879, 1676,  514, 1395,  314,  510, 2846, 1683,  515,
+      516,  511,  512,  517, 2216, 1395,  514, 2005,  314, 1687,
+     2005,  518,  515,  516, 1688,  313,  517,  314, 1693, 2006,
+     2803,  315,  316, 1694,  518,  317, 1693, 1397,  313, 2216,
+      314, 1701, 1398,  318,  315,  316, 2804, 2379,  317,  519,
+
+     2379,  520, 1583, 1583, 1583, 1583,  318, 1409, 1410, 1410,
+     1409, 1734,  519, 1735,  520,  522,  523,  524,  525,  523,
+     1584,  526,  527, 1411,  578,  528,  579, 1706, 1412, 1736,
+      580,  581, 1707,  529,  582, 1709, 1685,  583, 1686,  578,
+     1710,  579,  584,  530, 2269,  580,  581, 2269, 1716,  582,
+     1721,  576,  583, 1717, 1397, 1722,  578,  584,  579, 1398,
+     1397, 2270,  586,  581,  576, 1398,  587, 3921, 1732,  583,
+      578,  585,  579, 1733,  584, 2382,  586,  581, 2382, 1740,
+      587, 1413, 1740,  583, 1741, 3922,  585, 1799,  584, 1905,
+      531,  532,  522,  523,  524,  525,  523, 1737,  526,  527,
+
+     1737, 1397,  528,  585, 1397,  588, 1806,  560, 1740, 1868,
+      529,  589,  590, 1741, 1905,  573, 2738,  585, 2739,  588,
+      530,  560, 1740,  591, 1738,  589,  590, 1799,  592,  573,
+     1715, 1395, 1395,  565, 1395, 3927, 2038,  591,  595, 2038,
+      596,  597,  592, 1738,  598,  599, 2777,  565,  600, 1471,
+     1471, 1471, 1471, 2525, 2039, 2778,  601, 1434, 1434, 1434,
+     1434, 1410, 1410, 1410, 1410, 1395, 1472,  531,  532,  522,
+      523,  524,  525,  523, 3928,  526,  527, 1411, 1433,  528,
+      593, 2385, 1412, 2683, 2385,  602,  595,  529,  596,  597,
+     2894, 2684,  598,  599,  593, 1743,  600,  530, 8398,  313,
+
+     2175,  314, 1740, 2175,  601,  315,  316, 1904,  313,  317,
+      314, 2894, 2176, 8398,  315,  316, 1899,  318,  317, 1899,
+     2498,  604,  605,  314, 2498,  605,  318,  606,  607, 1744,
+     2588,  608, 8398,  602,  609, 1418, 1418, 1418, 1418,  610,
+     2589, 2819, 1419, 1900,  531,  533,  522,  523,  524,  525,
+      523, 1411,  526,  527, 1744, 2388,  528, 2842, 2388,  604,
+      605,  314, 1900,  605,  529,  606,  607, 1978, 1979,  608,
+     1978, 1740,  609,  612,  530,  613, 1948,  610, 2784,  614,
+      615, 1743,  612,  616,  613, 1740, 2599, 2785,  614,  615,
+     1949,  617,  616, 1397, 1397,  313, 2600,  314, 1398, 1398,
+
+      617,  315,  316, 2701, 2701,  317, 1598, 1598, 1598, 1598,
+      313, 1421,  314,  318, 1397, 1744,  315,  316, 3929, 1806,
+      317,  531,  533,  522,  523,  524,  525,  523,  318,  526,
+      527, 1397,  313,  528,  314, 2425, 2115, 1395,  315,  316,
+     1744,  529,  317,  620,  621, 2786,  313, 3008,  314, 1743,
+      318,  534,  315,  316, 2722, 2722,  317,  620,  621, 1410,
+     1410, 1410, 1410, 1395,  318, 2307,  313, 2308,  314, 1397,
+      618,  619,  315,  316, 1398, 1411,  317,  649,  650, 2174,
+     1412, 1395, 1395, 1905,  318,  618,  619,  638,  639,  640,
+      639,  639, 1395,  641,  642, 2728, 2728,  643,  531,  535,
+
+      522,  523,  524,  525,  523,  644,  526,  527, 1905, 2511,
+      528,  645, 2511,  646, 1432, 1432, 1432, 1432,  529,  638,
+      639,  640,  639,  639, 1791,  641,  642, 1791,  534,  643,
+     2021, 2022,  313, 2021,  314, 1433, 1792,  644,  315,  316,
+     1512, 1793,  317,  645, 1501,  646, 1513,  313, 1501,  314,
+      318, 1738, 2017,  315,  316, 2017,  647,  317,  648, 2018,
+     1502, 1502, 1502, 1502, 2019,  318, 3754, 1503, 3755, 1397,
+     1738,  647, 1504,  648, 1398,  531,  535,  312,  313,  312,
+      314,  312,  312,  312,  315,  316,  536,  312,  317,  312,
+      312,  312,  312,  312,  312,  312,  318,  312,  312,  312,
+
+      312,  537,  312,  312,  312,  312,  312,  538,  538,  538,
+      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
+      538,  538,  538,  538,  312,  312,  312,  538,  538,  538,
+      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
+      539,  538,  538,  538,  538,  538,  538,  538,  538,  538,
+      538,  538,  538,  312,  312,  312,  312,  313,  540,  541,
+      540,  540,  312,  315,  316,  542,  312,  317,  312,  312,
+      312,  312,  312,  312,  312,  318,  312,  312,  312,  543,
+      312,  312,  312,  312,  312,  312,  544,  544,  544,  544,
+      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
+
+      544,  544,  544,  312,  312,  312,  544,  544,  544,  544,
+      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
+      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
+      544,  544,  312,  312,  545,  312,  313,  546,  547,  546,
+      546,  312,  315,  316,  548,  312,  317,  312,  312,  312,
+      312,  312,  312,  312,  318,  312,  312,  312,  549,  312,
+      312,  312,  312,  312,  312,  550,  550,  550,  550,  550,
+      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
+      550,  550,  312,  551,  312,  550,  550,  550,  550,  550,
+      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
+
+      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
+      550,  312,  312,  552,  312,  313,  312,  553,  312,  312,
+      312,  315,  316,  554,  312,  317,  312,  312,  312,  312,
+      312,  312,  312,  318,  312,  312,  312,  312,  312,  312,
+      312,  312,  312,  312,  555,  555,  555,  555,  555,  555,
+      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
+      555,  312,  556,  312,  555,  555,  555,  555,  555,  555,
+      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
+      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
+      312,  312,  312,  558,  559,  560, 2793,  559, 1869,  561,
+
+      562, 1869,  313,  563,  314, 1551, 2794, 1395,  315,  316,
+     1870,  564,  317,  649,  650, 2395,  652, 2396,  314, 2161,
+      318,  565,  653,  654, 2162, 1872,  655, 3930, 1395, 1395,
+     1431, 1432, 1432, 1431,  656,  652, 2431,  314, 1397, 2431,
+      566,  653,  654, 1398, 1873,  655, 2432, 3005,  664,  312,
+      665, 1433,  312,  656,  666,  667, 2778, 2683,  668, 1720,
+     1395, 1395,  657, 1395,  658, 2684,  669, 2789,  567,  568,
+      558,  569,  560, 1397,  569, 2768,  561,  570, 2178, 2771,
+      563,  657, 2165,  658,  313, 2165,  659, 2166,  564, 2526,
+      315,  316, 2526,  313,  317,  659, 1397,  660,  565,  315,
+
+      316, 1398,  661,  317, 1413, 2790,  660, 1598, 1598, 1598,
+     1598,  661,  662, 1473, 1473, 1473, 1473,  566,  664,  312,
+      665,  662,  312, 3932,  666,  667, 2170, 2171,  668, 2170,
+     1474,  662,  681, 2814,  682, 3017,  669, 2815,  683,  684,
+      662, 1946,  685, 2754, 1946,  567,  568,  558,  559,  571,
+      686,  559, 1427,  572,  562, 1427, 1427,  573, 1947, 1427,
+      671,  312,  672, 2732,  312,  574,  673,  674, 1900, 2819,
+      675, 1451, 1451, 1451, 1451,  565, 2857, 2186,  676,  671,
+      312,  672, 2187,  312, 2819,  673,  674, 1900, 2732,  675,
+     3812, 2186, 1452,  681,  575,  682, 2208,  676, 1795,  683,
+
+      684, 1795,  689,  685,  314, 1662, 1663,  687,  690,  691,
+     1796,  686,  692, 1797, 1798, 1739, 1461, 1461, 1461, 1461,
+      693, 2819,  566,  566,  558,  559,  571, 3819,  559, 2055,
+      572,  562, 1462,  689,  573,  314, 2214, 1464, 2056,  690,
+      691, 2215,  574,  692, 1670, 1671, 1414, 1414, 1414, 1414,
+     2055,  693,  565, 1415,  694, 1432, 1432, 1432, 1432,  758,
+     2899,  771, 1435, 2056, 2902,  762,  763, 1412,  687,  764,
+     2214,  575,  313, 2763,  825, 2267, 1433,  772,  315,  316,
+     3936, 1465,  317,  773, 1465,  694,  313,  774,  825, 1705,
+      318, 1395,  315,  316, 1465, 1395,  317, 1465, 2763,  566,
+
+      566,  623,  624,  625,  318,  624,  774,  626,  627, 3937,
+      758,  628,  771, 2271,  629, 3512,  762,  763, 2272,  630,
+      764, 1397, 1417, 3512, 1795,  631, 1398, 1795,  772,  632,
+     2585, 1437, 1743, 2586,  773, 1395, 1796, 1395,  774, 1797,
+     1798, 1874, 1443, 1443, 1443, 1443, 1672, 1673,  633,  623,
+      634,  625, 1444,  634, 2745,  626,  627,  774,  832,  628,
+      314, 2924,  635, 1433,  833,  834, 1744,  636,  835, 2282,
+      836, 2925,  832,  631,  314, 2761,  837,  632,  833,  834,
+     2179, 2180,  835, 2179,  836, 1564, 1564, 1564, 1564, 1397,
+      837, 1744, 1565, 3938, 1398, 2282,  633,  312,  313,  312,
+
+      314,  312,  312,  312,  315,  316,  677,  312,  317,  312,
+      312,  312,  312,  312,  312,  312,  318,  312,  312,  312,
+      312,  678,  312,  312,  312,  312,  312,  679,  679,  679,
+      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
+      679,  679,  679,  679,  312,  312,  312,  679,  679,  679,
+      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
+      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
+      679,  679,  679,  312,  312,  312,  696,  697,  698,  697,
+      699, 2597,  700,  701, 2598,  807,  702,  808, 2786,  703,
+     2787,  809,  810,  704,  705,  811,  812, 1397,  813,  807,
+
+     2788,  808, 1398,  814,  706,  809,  810, 2955, 2629,  811,
+      812, 2630,  813, 1608, 1608, 1608, 1608,  814, 1471, 1471,
+     1471, 1471, 2305,  706,  696,  697,  698,  697,  699, 3206,
+      700,  701,  815, 2309,  702, 1472, 2696,  703, 2310, 2696,
+     2955,  704,  705,  865,  866,  867,  815,  866,  816,  868,
+      869, 1648,  706,  870, 1648, 2995,  871, 1591, 1591, 1591,
+     1591,  872,  816, 1597, 1598, 1598, 1597, 1648, 1592, 1599,
+     1648,  706,  707,  708,  709,  710,  707,  709,  707,  711,
+      712,  707,  707,  713,  707,  707,  714,  707,  707,  707,
+      707,  715,  716,  716,  716,  707,  707,  717,  707,  707,
+
+      707,  718,  716,  716,  716,  716,  716,  716,  716,  716,
+      716,  716,  716,  716,  716,  716,  716,  716,  716,  707,
+      719,  707,  716,  716,  716,  716,  716,  716,  716,  716,
+      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
+      716,  716,  716,  716,  716,  716,  716,  716,  707,  707,
+      707,  724,  725,  726, 1676,  725, 1395,  727,  728, 2330,
+     2331,  729, 2330, 2779,  730, 3021, 2780, 1395,  731,  732,
+      865,  866,  867, 1397,  866,  733,  868,  869, 1398,  734,
+      870, 3022, 2955,  871, 1702, 1702, 1702, 1702,  872, 2986,
+     1473, 1473, 1473, 1473, 1471, 1471, 1471, 1471,  735,  724,
+
+      736,  737,  738,  736, 2593,  727,  728, 1474,  874,  729,
+      314, 1472,  739, 2594,  875,  876,  731,  740,  877, 2595,
+      878,  879,  874,  733,  314, 2819,  880,  734,  875,  876,
+     2156, 2157,  877, 2156,  878,  879, 1623, 1623, 1623, 1623,
+      880, 2819, 2158, 1624, 2839, 3824,  735,  741,  742,  743,
+      744,  741,  743,  741,  745,  746,  741,  741,  747,  741,
+      741,  748,  741,  741,  741,  741,  749,  750,  750,  750,
+      741,  741,  751,  741,  741,  741,  752,  750,  750,  750,
+      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
+      750,  750,  750,  750,  741,  753,  741,  750,  750,  750,
+
+      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
+      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
+      750,  750,  750,  741,  741,  741,  758,  759,  760,  761,
+      759, 2819,  762,  763, 2840,  882,  764,  883, 2000, 2001,
+     3941,  884,  885, 2001,  765,  886, 2955, 1397,  887,  882,
+      766,  883, 1398,  888,  767,  884,  885, 1633, 1634,  886,
+     1633, 3086,  887, 1702, 1702, 1702, 1702,  888, 2001, 1473,
+     1473, 1473, 1473,  768,  758,  769,  760,  761,  769, 2055,
+      762,  763, 1581,  890,  764,  891, 1474, 1582, 2116,  892,
+      893, 2367,  770,  894, 3945, 2819, 2368,  890,  766,  891,
+
+     2055,  895,  767,  892,  893, 1641, 1642,  894, 1641, 1635,
+     1635, 1635, 1635, 2116, 2858,  895, 1636, 1729, 1730, 1729,
+     1730,  768,  312,  313,  775,  776,  775,  775,  312,  315,
+      316,  777,  312,  317,  312,  312,  778,  312,  312,  312,
+      312,  318,  312,  312,  312,  779,  312,  312,  312,  312,
+      312,  312,  780,  780,  780,  780,  780,  780,  780,  780,
+      780,  780,  780,  780,  780,  780,  780,  780,  780,  312,
+      781,  312,  780,  780,  780,  780,  780,  780,  780,  780,
+      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
+      780,  780,  780,  780,  780,  780,  780,  780,  312,  312,
+
+      782,  312,  313,  783,  784,  783,  783,  312,  315,  316,
+      785,  312,  317,  312,  312,  778,  312,  312,  312,  312,
+      318,  312,  312,  312,  786,  312,  312,  312,  312,  312,
+      312,  787,  787,  787,  787,  787,  787,  787,  787,  787,
+      787,  787,  787,  787,  787,  787,  787,  787,  312,  781,
+      312,  787,  787,  787,  787,  787,  787,  787,  787,  787,
+      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
+      787,  787,  787,  787,  787,  787,  787,  312,  312,  788,
+      312,  313,  789,  790,  312,  789,  312,  791,  316,  312,
+      312,  317,  312,  312,  792, 2955,  312, 1800,  312,  794,
+
+     1800, 3057, 2819,  795,  312,  312,  312,  312,  312,  312,
+     8398, 2001,  313, 2800,  314, 2001, 2367, 3058,  315,  316,
+     1801, 2370,  317,  899, 1802, 2843, 2801,  312,  796,  312,
+      318,  313, 2420,  314, 2371, 2420, 3951,  315,  316, 2372,
+     2001,  317,  899, 1802, 2421, 1453, 1454, 1454, 1453,  318,
+     2299, 2300, 1455, 3104, 3105, 2300,  312,  312,  312,  312,
+      313,  789,  790,  312,  789,  312,  791,  316,  312,  312,
+      317,  312,  312,  792, 2373,  312, 2375,  312,  794, 2374,
+     2300, 2376,  795,  312,  312,  312,  312,  312,  312, 2377,
+     2506,  313, 1395,  314, 2378, 1397, 1395,  315,  316, 8398,
+
+     2002,  317, 1457,  900, 2001, 2868,  312,  796,  312,  318,
+      313, 2447,  314, 1397, 2447, 2819,  315,  316, 1398, 1458,
+      317, 2789,  900, 1870, 1459, 1459, 1459, 1459,  318, 2001,
+     2868, 1455, 3181, 3182, 3847,  312,  312,  312,  312,  313,
+      797,  798,  312,  797,  312,  799,  316,  312,  312,  317,
+      312,  312,  800, 2796,  312, 2209,  312,  802, 2209, 2790,
+     3009,  803,  312,  804,  312,  312,  312,  312, 1397, 1397,
+      920, 2791,  921, 1398, 1398, 2792,  922,  923, 2210, 2389,
+      924, 1457, 2211,  925, 2390,  312,  805,  312,  926, 2781,
+      906,  907,  908, 2819,  907, 3952,  909,  910, 8398, 2782,
+
+      911, 2211, 2783,  912, 1730, 1730, 1730, 1730,  913, 1730,
+     1730, 1730, 1730, 3838,  312,  312,  312,  312,  313,  797,
+      798,  312,  797,  312,  799,  316,  312,  312,  317,  312,
+      312,  800, 3953,  312, 1397,  312,  802,  914, 2890, 1398,
+      803,  312,  804,  312,  312,  312,  312, 2406, 2795,  920,
+     2796,  921, 2407, 8398, 2300,  922,  923, 2797, 2300,  924,
+     2200, 2890,  925, 2200,  312,  805,  312,  926,  313, 2890,
+      314, 2932, 2201, 2515,  315,  316,  927, 2202,  317, 1859,
+     1858, 1859, 1859, 2300, 2933, 1395,  318, 2100, 2099, 2100,
+     2100, 3954, 2890,  312,  312,  312,  312,  313,  817,  818,
+
+      817,  817,  312,  315,  316,  819,  312,  317,  312,  820,
+      312,  312,  312,  312,  312,  318,  312,  312,  312,  821,
+      312,  312,  312,  312,  312,  312,  822,  822,  822,  822,
+      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
+      822,  822,  822,  312,  312,  312,  822,  822,  822,  822,
+      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
+      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
+      822,  822,  312,  312,  823,  807,  824,  825, 1397,  824,
+     2948,  809,  810, 1398, 2949,  811, 2314, 2315,  906,  907,
+      908, 2315,  907,  814,  909,  910, 3955,  313,  911,  314,
+
+      826,  912, 2819,  315,  316,  927,  913,  317, 1476, 1476,
+     1476, 1476,  929, 2834,  930,  318, 2315, 2911,  931,  932,
+     2912, 1400,  933, 2393, 1400,  934,  990,  827,  991, 1478,
+      935, 1401,  992,  993, 1397,  914,  994, 1397, 2819, 2397,
+      936, 2841, 2418,  828,  995,  829, 1476, 1476, 1476, 1476,
+      830,  807,  824,  825, 2842,  824, 2819,  809,  810,  937,
+     1677,  811, 3829, 1677,  929,  938,  930, 1478,  938,  814,
+      931,  932, 1678,  961,  933,  962,  826,  939, 2955,  963,
+      964, 2978,  940,  965, 1555, 1555, 1555, 1555,  976, 3006,
+      977,  966,  936, 2819,  978,  979, 2855,  967,  980, 2426,
+
+     2856,  968, 2783,  827, 2427, 1556,  981,  990, 3094,  991,
+     1397,  937,  982,  992,  993, 1398, 2819,  994, 2440,  828,
+      969,  829, 3850, 2441, 3095,  995,  830,  312,  313,  312,
+      314,  312,  312,  312,  315,  316,  838,  312,  317,  312,
+      312,  778,  312,  312,  312,  312,  318,  312,  312,  312,
+      312,  312,  312,  312,  312,  312,  312,  839,  839,  839,
+      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
+      839,  839,  839,  839,  312,  312,  312,  839,  839,  839,
+      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
+      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
+
+      839,  839,  839,  312,  312,  312,  312,  313,  312,  314,
+      312,  312,  312,  315,  316,  840,  312,  317,  312,  312,
+      778,  312,  312,  312,  312,  318,  312,  312,  312,  312,
+      312,  312,  312,  312,  312,  312,  841,  841,  841,  841,
+      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
+      841,  841,  841,  312,  312,  312,  841,  841,  841,  841,
+      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
+      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
+      841,  841,  312,  312,  312,  312,  313,  312,  314,  312,
+      312,  312,  315,  316,  842,  312,  317,  312,  312,  312,
+
+      312,  312,  312,  312,  318,  312,  312,  312,  312,  312,
+      312,  312,  312,  312,  312,  843,  843,  843,  843,  843,
+      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
+      843,  843,  312,  312,  312,  843,  843,  843,  843,  843,
+      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
+      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
+      843,  312,  312,  312,  845,  846,  847, 1397,  846, 3007,
+      848,  849, 1398,  961,  850,  962, 1397,  851, 2785,  963,
+      964, 1398,  852,  965, 1423, 1423, 1423, 1423,  853, 3306,
+     3307,  966,  854, 1403, 1403, 1403, 1403,  967, 1397, 1397,
+
+     1411,  968, 2819, 1398, 2450, 1412, 1425, 1426, 2820, 2819,
+     1404,  855,  845,  856,  857,  858,  856, 2821,  848,  849,
+      969,  976,  850,  977, 2455,  859, 3851,  978,  979, 2456,
+      860,  980, 1514, 1514, 1514, 1514,  861, 3496, 3496,  981,
+      862, 1403, 1403, 1403, 1403,  982, 2459, 1980, 1980, 1980,
+     1980, 2460, 2467, 1478, 1981, 1516, 3956, 2468, 1404,  863,
+      312,  313,  312,  896,  312,  312,  312,  315,  316,  897,
+      312,  317,  312,  312,  312,  312,  312,  312,  312,  318,
+      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
+      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
+
+      898,  898,  898,  898,  898,  898,  898,  312,  312,  312,
+      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
+      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
+      898,  898,  898,  898,  898,  898,  312,  312,  312,  312,
+      313,  312,  901,  312,  312,  312,  315,  316,  902,  312,
+      317,  312,  312,  778,  312,  312,  312,  312,  318,  312,
+      312,  312,  312,  312,  312,  312,  312,  312,  312,  903,
+      903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
+      903,  903,  903,  903,  903,  903,  312,  904,  312,  903,
+      903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
+
+      903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
+      903,  903,  903,  903,  903,  312,  312,  312,  312,  313,
+      312,  915,  312,  312,  312,  315,  316,  916,  312,  317,
+      312,  312,  917,  312,  312,  312,  312,  318,  312,  312,
+      312,  312,  312,  312,  312,  312,  312,  312,  918,  918,
+      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
+      918,  918,  918,  918,  918,  312,  312,  312,  918,  918,
+      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
+      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
+      918,  918,  918,  918,  312,  312,  312,  942,  943,  944,
+
+     1397,  943, 2810,  945,  946, 1398,  313,  947,  314, 2819,
+      948, 2811,  315,  316,  949,  950,  317, 2919, 1397, 2920,
+      313,  951,  314, 1398,  318,  952,  315,  316, 2833, 2921,
+      317, 1397, 1555, 1555, 1555, 1555, 1398, 3037,  318, 3477,
+     1471, 1471, 1471, 1471,  953,  942,  954,  955,  956,  954,
+     3038,  945,  946, 1556, 1039,  947,  314, 1472,  957, 3957,
+     1040, 1041,  949,  958, 1042, 3477, 1043, 3025, 1039,  951,
+      314, 1397, 1044,  952, 1040, 1041, 1398, 3026, 1042, 2924,
+     1043, 1992, 1992, 1992, 1992, 1397, 1044, 2950, 1993, 3033,
+     1398, 2951,  959,  741,  742,  970,  744,  741,  970,  741,
+
+      745,  746,  741,  741,  747,  741,  741,  748,  741,  741,
+      741,  741,  749,  750,  750,  750,  741,  741,  971,  741,
+      741,  741,  972,  750,  750,  750,  750,  750,  750,  750,
+      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
+      741,  973,  741,  750,  750,  750,  750,  750,  750,  750,
+      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
+      750,  750,  750,  750,  750,  750,  750,  750,  750,  741,
+      741,  741,  312,  313,  312,  983,  312,  312,  312,  984,
+      316,  312,  312,  317,  312,  312,  778, 2501,  312, 2508,
+      312,  986, 2502, 2908, 2509,  987,  312,  312,  312,  312,
+
+      312,  312, 2909, 2923, 1561, 1561, 1561, 1561,  313, 2910,
+      314, 8398, 2315, 3051,  315,  316, 2315, 3052,  317,  312,
+      988,  312,  313, 1065,  314, 1556,  318, 1563,  315,  316,
+     3958, 1066,  317, 1023, 1024, 1454, 1454, 1454, 1454, 3053,
+      318, 2315, 1455, 3054, 1804, 1804, 1804, 1804,  312,  312,
+      312,  312,  313,  312,  983,  312,  312,  312,  984,  316,
+      312,  312,  317,  312,  312,  778, 2516,  312, 1025,  312,
+      986, 2517, 3170, 3959,  987,  312,  312,  312,  312,  312,
+      312, 1571, 1571, 1571, 1571, 2819, 2527,  313, 3171,  314,
+     1805, 2528, 1457,  315,  316, 1572, 2834,  317,  312,  988,
+
+      312,  313, 1065,  314, 3294,  318, 2835,  315,  316, 8398,
+     1066,  317, 1023, 1024, 2819, 8398, 8398, 8398, 8398,  318,
+     3295, 2856, 8398, 2258, 2257, 2258, 2258,  312,  312,  312,
+      312,  313,  312,  996,  312,  312,  312,  997,  316,  312,
+      312,  317,  312,  312,  998, 2535,  312, 1025,  312, 1000,
+     2536, 3508, 3508, 1001,  312,  312,  312,  312,  312,  312,
+     3960, 1397, 1078, 2890, 1079, 8398, 2301, 2955, 1080, 1081,
+     2300, 3107, 1082, 1514, 1514, 1514, 1514,  312, 1002,  312,
+     1083, 1078, 1400, 1079, 3108, 1400, 2890, 1080, 1081, 8398,
+     2982, 1082, 1401, 2568, 1478, 2300, 1516, 2955, 2569, 1083,
+
+     2213, 2213, 2213, 2213, 3079, 3961,  312,  312,  312,  312,
+      313,  312,  996,  312,  312,  312,  997,  316,  312,  312,
+      317,  312,  312,  998, 2576,  312, 1522,  312, 1000, 2577,
+     1523, 3962, 1001,  312,  312,  312,  312,  312,  312, 2955,
+     1397, 1085, 2979, 1086, 8398, 2316, 1805, 1087, 1088, 2315,
+     3184, 1089, 1514, 1514, 1514, 1514,  312, 1002,  312, 1090,
+     1085, 1400, 1086, 3185, 1400, 2204, 1087, 1088, 2204, 1495,
+     1089, 1401, 1495, 1478, 2315, 1516, 2955, 2205, 1090, 2578,
+     2206, 2207, 2185, 3224, 2579,  312,  312,  312,  312,  313,
+      312,  314,  312,  312,  312, 1003,  316,  312,  312,  317,
+
+      312,  312,  778, 2723,  312, 2952,  312, 1005, 2724, 1529,
+     2953, 1006,  312,  312,  312,  312,  312,  312, 2321, 2322,
+     1092, 1496, 1093, 2322, 2955, 2553, 1094, 1095, 2553, 2554,
+     1096, 1514, 1514, 1514, 1514,  312, 1006,  312, 1097, 1092,
+     2806, 1093, 2555, 2807, 2449, 1094, 1095, 2449, 2322, 1096,
+     1698, 3733, 1478, 1698, 1516, 2809, 1898, 1097, 8398, 2322,
+     3734, 2202, 1699, 2322,  312,  312,  312,  312,  313,  312,
+      314,  312,  312,  312, 1003,  316,  312,  312,  317,  312,
+      312,  778, 3055,  312, 1536,  312, 1005, 3056, 2322, 2603,
+     1006,  312,  312,  312,  312,  312,  312, 2604, 3124, 1099,
+
+     2819, 1100, 2605, 3125, 2685, 1101, 1102, 2685, 2686, 1103,
+     1473, 1473, 1473, 1473,  312, 1006,  312, 1104, 1099, 2822,
+     1100, 2687, 2823, 1646, 1101, 1102, 1646, 1474, 1103, 1647,
+     2031, 2031, 2031, 2031, 2955, 2955, 1104, 2032, 2357, 2357,
+     2357, 2357, 3351,  312,  312,  312,  312,  313,  312, 1007,
+      312,  312,  312,  315,  316, 1008,  312,  317,  312,  312,
+      778,  312,  312,  312,  312,  318,  312,  312,  312,  312,
+      312,  312,  312,  312,  312,  312, 1009, 1009, 1009, 1009,
+     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
+     1009, 1009, 1009,  312, 1010,  312, 1009, 1009, 1009, 1009,
+
+     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
+     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
+     1009, 1009,  312,  312,  312, 1011, 1012, 1013, 1014, 1013,
+     1013, 1011, 1015, 1016, 1017, 1011, 1018, 1011, 1011, 1011,
+     1011, 1011, 1011, 1011, 1019, 1011, 1011, 1011, 1020, 1011,
+     1011, 1011, 1011, 1011, 1011, 1021, 1021, 1021, 1021, 1021,
+     1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021,
+     1021, 1021, 1011, 1011, 1011, 1021, 1021, 1021, 1021, 1021,
+     1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021,
+     1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021,
+
+     1021, 1011, 1011, 1022, 1026, 1027, 1026, 1028, 1026, 1026,
+     1026, 1029, 1030, 1031, 1026, 1032, 1026, 1026, 1026, 1026,
+     1026, 1026, 1026, 1033, 1026, 1026, 1026, 1026, 1034, 1026,
+     1026, 1026, 1026, 1026, 1035, 1035, 1035, 1035, 1035, 1035,
+     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
+     1035, 1026, 1026, 1026, 1035, 1035, 1035, 1035, 1035, 1035,
+     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
+     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
+     1034, 1026, 1026,  465,  466,  467,  466,  466, 2052,  468,
+      469, 2052, 3120,  470, 1036, 1037, 3121, 3741,  473, 2789,
+
+     1870,  474,  465,  466,  467,  466,  466, 2735,  468,  469,
+     2735, 2053,  470, 1036, 1037, 2054, 2819,  473, 2789, 2736,
+      474, 1046, 1047, 1048, 1047, 1047, 2810, 1049, 1050, 3019,
+     3830, 1051, 1052, 1053, 2054, 2811, 1054, 2790, 2819, 1055,
+     1046, 1047, 1048, 1047, 1047, 2812, 1049, 1050, 4018, 2832,
+     1051, 1052, 1053, 2833, 3019, 1054, 2790, 2819, 1055,  312,
+      313, 1056, 1057, 1056, 1056,  312,  315,  316, 1058, 1059,
+      317,  312,  312, 1059,  312, 1060,  312,  312, 1061,  312,
+      312,  312,  312, 1062,  312, 1063,  312,  312,  312, 1064,
+     1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064,
+
+     1064, 1064, 1064, 1064, 1064, 1064,  312,  312,  312, 1064,
+     1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064,
+     1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064,
+     1064, 1064, 1064, 1064, 1064,  312,  312,  312, 1068, 1069,
+     1070, 3309, 1069, 2955, 1071, 1072, 2003, 2004, 1073, 2003,
+     2955, 1068, 1069, 1070, 3310, 1069, 1074, 1071, 1072, 2010,
+     2011, 1073, 8398, 2001, 2011, 3428, 1075, 2001, 2012, 1076,
+     1115, 1116,  314, 3075, 1116, 2819, 1117, 1118, 2844, 1075,
+     1119, 1571, 1571, 1571, 1571, 1075, 3097, 1656, 1120, 2011,
+     1656, 2955, 2001, 1657, 2845, 1572, 3098, 3963, 1075, 1105,
+
+     1106, 1107,  314, 1105, 1107, 1105, 1108, 1109, 1110, 1105,
+     1111, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1112, 1105,
+     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1113,
+     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
+     1113, 1113, 1113, 1113, 1113, 1113, 1105, 1105, 1105, 1113,
+     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
+     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
+     1113, 1113, 1113, 1113, 1113, 1105, 1105, 1105, 1115, 1116,
+      314, 3407, 1116, 3122, 1117, 1118, 2685, 3123, 1119, 2685,
+     2686, 1122, 1123,  314, 3408, 1123, 1120, 1124, 1125, 2302,
+
+     2303, 1126, 2302, 2687, 1122, 1123,  314, 3202, 1123, 1127,
+     1124, 1125, 3203, 2819, 1126, 8398, 2300, 1129, 1130, 1131,
+     2300, 1130, 1127, 1132, 1133, 4019, 2829, 1134, 2830, 1926,
+     1129, 1130, 1131, 3114, 1130, 1135, 1132, 1133, 2831, 2819,
+     1134, 2436, 2436, 2436, 2436, 2300, 3013, 3115, 1135,  312,
+      313,  312,  314,  312,  312,  312,  315,  316,  312,  312,
+      317,  312,  312,  312,  312,  312,  312,  312,  318,  312,
+      312,  312,  312,  312,  312,  312,  312,  312,  312, 1136,
+     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
+     1136, 1136, 1136, 1136, 1136, 1136,  312,  312,  312, 1136,
+
+     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
+     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
+     1136, 1136, 1136, 1136, 1136,  312,  312,  312, 1138, 2819,
+     1139, 2056, 2824, 2955, 1140, 1141, 2996, 1138, 1142, 1139,
+     2997, 1143, 2825, 1140, 1141, 2826, 1144, 1142, 2955, 1737,
+     1143,  313, 1737,  314, 3971, 1144, 2056,  315,  316, 1397,
+      313,  317,  314, 8398, 2013, 3393,  315,  316, 2011,  318,
+      317, 2863, 8398, 1146, 2863,  314, 1738, 2864,  318, 1147,
+     1148, 3394, 1146, 1149,  314, 8398, 2011, 3741, 1147, 1148,
+     2011, 1150, 1149, 2011, 8398, 1738, 2819, 1151, 3742, 1152,
+
+     1150, 2819, 2836, 1154, 2837, 1155, 1151, 3011, 1152, 1156,
+     1157, 2838, 1154, 1158, 1155, 2011, 2821, 2034, 1156, 1157,
+     2034, 1159, 1158, 2685, 1397, 1162, 2685, 1155, 8398, 2323,
+     1159, 1163, 1164, 2322, 2916, 1165, 1166, 1167, 2917, 2927,
+     2730, 2035, 1162, 1168, 1155, 3034, 3035, 2918, 1163, 1164,
+     1160, 3327, 1165, 1166, 1167, 1170, 3328, 1155, 2322, 1160,
+     1168, 1163, 1171, 3198, 1170, 1165, 1155, 3199, 2036, 2806,
+     1163, 1171, 2807, 1168, 1165, 1616, 1616, 1616, 1616, 1172,
+     3768, 1173, 1168, 2808, 2809, 1175, 2037, 1176, 1172, 3200,
+     1173, 1177, 1178, 3201, 2955, 1179, 1617, 2980, 1180, 1514,
+
+     1514, 1514, 1514, 1181, 2913, 1175, 1183, 1176, 3547, 1183,
+     2981, 1177, 1178, 1182, 2914, 1179, 3548, 2915, 1184, 1186,
+     1478, 1187, 1516, 1181, 2280, 1188, 1189, 2280, 1186, 1190,
+     1187, 2955, 1182, 1182, 1188, 1189, 1870, 1191, 1190, 2944,
+     1616, 1616, 1616, 1616, 3168, 3000, 1191, 1192, 2945, 1519,
+     3001, 2281, 1182, 1194, 1195, 1196, 1192, 1195, 2946, 1197,
+     1198, 1617, 3424, 1199, 1200, 1201, 1192, 3425, 3773, 3168,
+     2281, 1202, 1194, 1195, 1196, 1192, 1195, 2819, 1197, 1198,
+     3012, 3169, 1199, 1200, 1201, 1204, 1205, 1206, 1205, 1205,
+     1202, 1163, 1207, 2826, 3468, 1208, 1209, 1210, 1204, 1205,
+
+     1206, 1205, 1205, 1211, 1163, 1207, 3169, 3038, 1208, 1209,
+     1210, 2955, 1654, 1654, 1654, 1654, 1211, 1170, 1205, 1206,
+     1205, 1205, 2819, 1163, 1207, 3016, 3231, 1208, 1209, 1655,
+     2058, 1497, 1497, 1497, 1497, 1211, 2865, 2866, 1498, 2865,
+     2955, 1212, 2789, 1213, 1170, 1205, 1206, 1205, 1205, 2058,
+     1163, 1207, 1478, 2428, 1208, 1209, 2819, 2429, 1616, 1616,
+     1616, 1616, 1211, 3220, 1514, 1514, 1514, 1514, 1212, 2430,
+     1213, 1215, 1216, 1217, 1216, 1216, 3849, 1218, 1219, 1617,
+     2790, 1220, 1221, 1222, 1228, 1478,  314, 1516, 3173, 1223,
+     1229, 1230, 2922, 2819, 1231, 1224, 2923, 1225, 3174, 1228,
+
+     1232,  314, 1233, 2819, 3814, 1229, 1230, 1500, 2924, 1231,
+     2827, 2867, 1517, 1795, 2867, 1232, 1795, 1233, 3180, 2828,
+     1235, 1236, 1237, 1792, 1236, 1796, 1238, 1239, 1797, 1798,
+     1240, 2955, 2955, 1241, 2436, 2436, 2436, 2436, 1242, 1226,
+     1215, 1216, 1217, 1216, 1216, 2819, 1218, 1219, 1243, 4011,
+     1220, 1221, 1222, 2837, 3347, 1235, 1244, 1237, 1223, 1244,
+     3015, 1238, 1239, 2955, 1224, 1240, 1225, 1243, 1245, 1514,
+     1514, 1514, 1514, 1246, 2972, 1235, 1236, 1247, 2926, 1236,
+     2927, 1238, 1239, 1243, 2973, 1240, 2928, 2929, 1241, 2955,
+     1478, 2955, 1516, 1242, 2442, 2442, 2442, 2442, 1626, 1626,
+
+     1626, 1626, 1243, 1248, 3358, 1235, 1244, 1247, 1226, 1244,
+     2959, 1238, 1239, 2960, 1275, 1240, 1276, 1518, 1245, 1627,
+     1277, 1278, 1248, 1246, 1279, 1280, 1281, 3298, 1275, 2819,
+     1276, 3777, 1282, 1248, 1277, 1278, 3013, 3299, 1279, 1280,
+     1281, 2339, 2339, 2339, 2339, 2828, 1282, 3023, 2340, 3899,
+     3024, 3900, 1248,  312,  313,  312,  314,  312,  312,  312,
+      315,  316,  312,  312,  317,  312,  312,  312,  312,  312,
+      312,  312,  318,  312,  312,  312,  312,  312,  312,  312,
+      312,  312,  312, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
+     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
+
+      312,  312,  312, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
+     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
+     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,  312,
+      312,  312, 1251, 1252, 1253, 1252, 1252, 2955, 1254, 1255,
+     2998, 2819, 1256, 1257, 2999, 3027, 1264, 1258, 1265, 3028,
+     1259, 2014, 1266, 1267, 2819, 1260, 1268, 2826, 3029, 1269,
+     1261, 2851, 8398, 2011, 1270, 2819, 1264, 2011, 1265, 2935,
+     2852, 8398, 1266, 1267, 2860, 2955, 1268, 2860, 3072, 1269,
+     2853, 1264, 2936, 1265, 1270, 2937, 2835, 1272, 1267, 2861,
+     2862, 1273, 2011, 1271, 1269, 1626, 1626, 1626, 1626, 1270,
+
+     2116, 1514, 1514, 1514, 1514, 8398, 3798, 1262, 1251, 1252,
+     1253, 1252, 1252, 1271, 1254, 1255, 1627, 2955, 1256, 1257,
+     8398, 2955, 1478, 1258, 1516, 2116, 1259, 1264, 1271, 1265,
+     2967, 1260, 2968, 1272, 1267, 1601, 1261, 1273, 1601, 8398,
+     1269, 1284, 2969, 1285, 3442, 1270, 3143, 1286, 1287, 3143,
+     1284, 1288, 1285, 2697, 2697, 2697, 1286, 1287, 2863, 1289,
+     1288, 2863, 1527, 1293, 2864, 1294, 2819, 3323, 1289, 1295,
+     1296, 3324, 2867, 1297, 1271, 2867, 1611, 1611, 1611, 1611,
+     1293, 1298, 1294, 1262, 1792, 1299, 1295, 1296, 2823, 1326,
+     1297, 1327, 1612, 2819, 3731, 1328, 1329, 1614, 1298, 1330,
+
+     2955, 2924, 1299, 1326, 2746, 1327, 2829, 1331, 3014, 1328,
+     1329, 3305, 2464, 1330, 1395, 3452, 1290, 1291, 1395, 2756,
+     3003, 1331, 1395, 1395, 1395, 1290, 1291,  312,  313,  312,
+      314,  312,  312,  312,  315,  316, 1300,  312,  317,  312,
+      312,  312,  312,  312,  312,  312,  318,  312,  312,  312,
+      312,  312,  312,  312,  312,  312,  312, 1301, 1301, 1301,
+     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
+     1301, 1301, 1301, 1301,  312,  312,  312, 1301, 1301, 1301,
+     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
+     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
+
+     1301, 1301, 1301,  312,  312,  312,  312,  313,  312,  314,
+      312,  312,  312,  315,  316, 1302,  312,  317,  312,  312,
+      312,  312,  312,  312,  312,  318,  312,  312,  312,  312,
+     1303,  312,  312,  312,  312,  312, 1304, 1304, 1304, 1304,
+     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
+     1304, 1304, 1304,  312,  312,  312, 1304, 1304, 1304, 1304,
+     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
+     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
+     1304, 1304,  312,  312,  312,  312,  313,  312,  314,  312,
+      312,  312,  315,  316, 1305,  312,  317,  312,  312,  312,
+
+      312,  312,  312,  312,  318,  312,  312,  312,  312, 1306,
+      312,  312,  312,  312,  312, 1307, 1307, 1307, 1307, 1307,
+     1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307,
+     1307, 1307,  312,  312,  312, 1307, 1307, 1307, 1307, 1307,
+     1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307,
+     1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307,
+     1307,  312,  312,  312,  312,  313, 1308, 1309, 1308, 1308,
+      312,  315,  316, 1310,  312,  317,  312,  312,  312,  312,
+      312,  312,  312,  318,  312,  312,  312,  312,  312,  312,
+      312,  312,  312,  312, 1311, 1311, 1311, 1311, 1311, 1311,
+
+     1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311,
+     1311,  312,  312,  312, 1311, 1311, 1311, 1311, 1311, 1311,
+     1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311,
+     1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311,
+      312,  312,  312,  312,  313,  312,  314,  312,  312,  312,
+      315,  316, 1312,  312,  317,  312,  312,  312,  312,  312,
+      312,  312,  318,  312,  312,  312,  312,  312,  312,  312,
+      312,  312,  312, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
+     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
+      312,  312,  312, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
+
+     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
+     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,  312,
+      312,  312, 1315, 2806, 1316, 2819, 2819, 2955, 1317, 1318,
+     2964, 3269, 1319, 2847, 2965, 1315, 2848, 1316, 2809, 3837,
+     1320, 1317, 1318, 2966, 1335, 1319,  314, 2849, 2850, 3293,
+     1336, 1337, 2955, 1320, 1338, 1705, 3269, 1395, 1335, 2955,
+      314, 1395, 1339, 2972, 1336, 1337, 2992, 1340, 1338, 1626,
+     1626, 1626, 1626, 3069, 3293, 2993, 1339, 1354, 1321, 1355,
+     2955, 1340, 3897, 1356, 1357, 2994, 1354, 1358, 1355, 1322,
+     1627, 1321, 1356, 1357, 3091, 1359, 1358, 1323, 1324, 3092,
+
+     3752, 1395, 1322, 1395, 1359, 2442, 2442, 2442, 2442, 3753,
+     1323, 1324,  312,  313,  312,  314,  312,  312,  312,  315,
+      316, 1332,  312,  317,  312,  312,  312,  312,  312,  312,
+      312,  318,  312,  312,  312,  312,  312,  312,  312,  312,
+      312,  312, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,
+     1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,  312,
+      312,  312, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,
+     1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,
+     1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,  312,  312,
+      312, 1341, 1342, 1343,  451, 1343, 1343, 1341, 1344, 1345,
+
+     1346, 1341, 1347, 1341, 1341, 1341, 1341, 1348, 1341, 1341,
+     1349, 1341, 1341, 1341, 1341, 1350, 1341, 1341, 1341, 1341,
+     1341, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1341, 1341,
+     1341, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
+     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1352, 1341, 1341,
+      312,  313,  312,  314,  312,  312,  312,  315,  316, 1360,
+      312,  317, 1361,  312,  312,  312,  312,  312,  312,  318,
+      312,  312,  312, 1362, 1363,  312,  312,  312,  312,  312,
+
+     1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364,
+     1364, 1364, 1364, 1364, 1364, 1364, 1364,  312,  312,  312,
+     1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364,
+     1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364,
+     1364, 1364, 1364, 1364, 1364, 1364, 1365,  312,  312, 1367,
+     2955, 1368, 2819, 2961, 2955, 1369, 1370, 3217, 1367, 1371,
+     1368, 1372, 3371, 2962, 1369, 1370, 2963, 1373, 1371, 2955,
+     1372, 1438, 1438, 1438, 1438, 3983, 1373,  312,  313,  312,
+      314,  312,  312,  312,  315,  316, 1374,  312,  317, 1375,
+      312,  312,  312,  312,  312, 1376,  318,  312,  312,  312,
+
+     1377, 1363,  312,  312,  312,  312,  312, 1378, 1378, 1378,
+     1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378,
+     1378, 1378, 1378, 1378,  312,  312,  312, 1378, 1378, 1378,
+     1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378,
+     1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378,
+     1378, 1378, 1378, 1365,  312,  312, 1380, 2955, 1381, 3396,
+     2983, 3514, 1382, 1383, 2955, 1380, 1384, 1381, 1385, 3397,
+     2956, 1382, 1383, 2984, 1386, 1384, 2985, 1385,  313, 2957,
+      314, 2924, 3515, 1386,  315,  316, 2958,  313,  317,  314,
+     3040, 3403, 1795,  315,  316, 1795,  318,  317, 2486, 2486,
+
+     2486, 2486, 1387, 3041, 1796,  318, 3042, 1797, 1798, 1874,
+     2487, 1387,  312,  313,  312,  314,  312,  312,  312,  315,
+      316, 1388,  312,  317,  312,  312,  312,  312,  312,  312,
+      312,  318,  312,  312,  312,  312,  312,  312,  312,  312,
+      312,  312, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
+     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,  312,
+      312,  312, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
+     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
+     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1389,  312,  312,
+      312,  312,  313,  312,  314,  312,  312,  312,  315,  316,
+
+     1390,  312,  317,  312,  312,  312,  312,  312,  312,  312,
+      318,  312,  312,  312,  312,  312,  312,  312,  312,  312,
+      312, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391,
+     1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391,  312,  312,
+      312, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391,
+     1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391,
+     1391, 1391, 1391, 1391, 1391, 1391, 1391,  312,  312,  312,
+      313, 2919,  314, 3030, 3606, 3296,  315,  316, 3297,  313,
+      317,  314, 1392, 3031, 1648,  315,  316, 1648,  318,  317,
+     3607, 1392, 1514, 1514, 1514, 1514, 4026,  318, 1514, 1514,
+
+     1514, 1514, 2718, 2718, 2718, 1700, 1700, 1700, 1700, 2865,
+     2866, 1393, 2865, 1478, 1394, 1516, 2919, 1699, 3030, 1478,
+     1393, 1516, 1692, 1394, 1475, 1476, 1476, 1475, 3178, 2525,
+     1477, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 2819,
+     2955, 1395, 2416, 1524, 1395, 1478, 1514, 1514, 1514, 1514,
+     3836, 1479, 1478, 1525, 1516, 1395, 1478, 1520, 1516, 3059,
+     1521, 4027, 3060, 1526, 1715, 1395, 1395, 1478, 1395, 1516,
+     1395, 2955, 1480, 1481, 3087, 1482, 1483, 1484, 3088, 1528,
+     2955, 1485, 1486, 1487, 1488, 1489, 3204, 1490, 1530, 1395,
+     1491, 1492, 1493, 1494, 2955, 1533, 4028, 1531, 1514, 1514,
+
+     1514, 1514, 3205, 1532, 1514, 1514, 1514, 1514, 2955, 1514,
+     1514, 1514, 1514, 1514, 1514, 1514, 1514, 3471, 2405, 1478,
+     1395, 1516, 3215, 3216, 1395, 1478, 2746, 1516, 1395, 4029,
+     1478, 3325, 1516, 3004, 1478, 3326, 1516, 1514, 1514, 1514,
+     1514, 2756, 3003, 1555, 1555, 1555, 1555, 3521, 3521, 2789,
+     1557, 1574, 1574, 1574, 1574, 1720, 1395, 1395, 1478, 1395,
+     1516, 1537, 1539, 1534, 1556, 1395, 1535, 3531, 3531, 3760,
+     1596, 1538, 1395, 1395, 1541, 1575, 1395, 1395, 3761, 1542,
+     1395, 1540, 1574, 1574, 1574, 1574, 1543, 2790, 1395, 1611,
+     1611, 1611, 1611, 2939, 1544, 3047, 4030, 2940, 1395, 1545,
+
+     2941, 2216, 1576, 3179, 3048, 1612, 1575, 1645, 2955, 1395,
+     1614, 2942, 2943, 1395, 3049, 3446, 1577, 1395, 1578, 1559,
+     1579, 1616, 1616, 1616, 1616, 1395, 2216, 2796, 1618, 1626,
+     1626, 1626, 1626, 1576, 3473, 1395, 1628, 2819, 1615, 1691,
+     1395, 1395, 1617, 1395, 2851, 1395, 1395, 1577, 4031, 1578,
+     1627, 1579, 1395, 2852, 1395, 2955, 1728, 1395, 1395, 2955,
+     1395, 3329, 3061, 1395, 1862, 1863, 1864, 1862, 1901, 1395,
+     3392, 1901, 3062, 1395, 1395, 2955, 1865, 3330, 3343, 1866,
+     1867, 1803, 1395, 1395, 4032, 1903, 1395, 1901, 1902, 1902,
+     1901, 2358, 2358, 2358, 2358, 3392, 3420, 1620, 2359, 2360,
+
+     3421, 3472, 4036, 2360, 1903, 1630, 1745, 1746, 1746, 1746,
+     1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746,
+     1746, 1746, 1746, 1746, 3472, 1747, 3923, 1746, 1748, 1749,
+     1750, 1751, 1752, 1753, 1746, 1754, 1755, 1746, 1756, 1757,
+     1758, 1759, 1760, 1746, 1761, 1762, 1763, 1764, 1765, 1766,
+     1767, 1746, 1746, 1768, 1769, 1747, 1770, 1770, 1770, 1770,
+     1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770,
+     1770, 1770, 1770, 3925, 1745, 3926, 1770, 1771, 1772, 1773,
+     1774, 1775, 1776, 1770, 1777, 1778, 1770, 1779, 1780, 1781,
+     1782, 1783, 1770, 1784, 1785, 1786, 1787, 1788, 1789, 1790,
+
+     1770, 1770, 1768, 1769, 1743, 1857, 1858, 1859, 1857, 1897,
+     3512, 4037, 1897, 1901, 1902, 1902, 1901, 1860, 2955, 2955,
+     3116, 1898, 1793, 3512, 3426, 2974, 1793, 2975, 1801, 3117,
+     1903, 1807, 1802, 2976, 2977, 4038, 1872, 1808, 1809, 3118,
+     3427, 1810, 1811, 1969, 1969, 1969, 1969, 2355, 2355, 2355,
+     2355, 1802, 1807, 3535, 3535, 1873, 2558, 2558, 2558, 2558,
+     3466, 2356, 1808, 1809, 1970, 3467, 1444, 1810, 1811, 1812,
+     1813, 1813, 1813, 1813, 1813, 1813, 1813, 1813, 1813, 1813,
+     1813, 1813, 1813, 1813, 1813, 1813, 1813, 3950, 1814, 2939,
+     1813, 1815, 1816, 1817, 1818, 1819, 1820, 1813, 1821, 1822,
+
+     1813, 1823, 1824, 1825, 1826, 1827, 1813, 1828, 1829, 1830,
+     1831, 1832, 1833, 1834, 1813, 1813, 1835, 1769, 1814, 1836,
+     1836, 1836, 1836, 1836, 1836, 1836, 1836, 1836, 1836, 1836,
+     1836, 1836, 1836, 1836, 1836, 1836, 4039, 1812, 4043, 1836,
+     1837, 1838, 1839, 1840, 1841, 1842, 1836, 1843, 1844, 1836,
+     1845, 1846, 1847, 1848, 1849, 1836, 1850, 1851, 1852, 1853,
+     1854, 1855, 1856, 1836, 1836, 1835, 1769, 1875, 2955, 1876,
+     1877, 1878, 1879, 4044, 2955, 1880, 2975, 3073, 1746, 1881,
+     1746, 1882, 3070, 3071, 1883, 1884, 1746, 1885, 1746, 1886,
+     3074, 1887, 1888, 1889, 1890, 1978, 1979, 1891, 1978, 3510,
+
+     1770, 1892, 1770, 1893, 3511, 2819, 1894, 1895, 1770, 1896,
+     1770, 1906, 2355, 2355, 2355, 2355, 3852, 2955, 1969, 1969,
+     1969, 1969, 1506, 1506, 1506, 1506, 2356, 1983, 1983, 1983,
+     1983, 3341, 3342, 1907, 1908, 1909, 1910, 1911, 1912, 1970,
+     1913, 1914, 4046, 1915, 1813, 1916, 1917, 1918, 1984, 1919,
+     1920, 1921, 1922, 1923, 1924, 1925, 3110, 3134, 1926, 8398,
+     1906, 3134, 3714, 1927, 1928, 1929, 1930, 1931, 1932, 3111,
+     1933, 1934, 3112, 1935, 1836, 1936, 1937, 1938, 4047, 1939,
+     1940, 1941, 1942, 1943, 1944, 1945, 3134, 3714, 1926, 8398,
+     1950, 1951, 1952, 1953, 1954, 1955, 3367, 1956, 1957, 2780,
+
+     1958, 3099, 1959, 1960, 1961, 3100, 1962, 1963, 1964, 1965,
+     1966, 1967, 1968, 2819, 3101, 1926, 1969, 1969, 1969, 1969,
+     3476, 3630, 3631, 1971, 1969, 1969, 1969, 1969, 1983, 1983,
+     1983, 1983, 1983, 1983, 1983, 1983, 2789, 1970, 2537, 1985,
+     1989, 1983, 1983, 1989, 2789, 1970, 2537, 1977, 3748, 1984,
+     1990, 2015, 2016, 1984, 2015, 3602, 2024, 2024, 2024, 2024,
+     3603, 1984, 2024, 2024, 2024, 2024, 3032, 8398, 2011, 3748,
+     3044, 2955, 2011, 3045, 2790, 2955, 8398, 2025, 2024, 2024,
+     2024, 2024, 2790, 2025, 3046, 2026, 2024, 2024, 2024, 2024,
+     3213, 3977, 1973, 2098, 2099, 2100, 2098, 2011, 3304, 2025,
+
+     2256, 2257, 2258, 2256, 2819, 2101, 1795, 2025, 1987, 1795,
+     2102, 2847, 2259, 2955, 2848, 3194, 2103, 2260, 1796, 4010,
+     2104, 1797, 1798, 2210, 3195, 3130, 2850, 2211, 3130, 2325,
+     2325, 2325, 2325, 3789, 3196, 1990, 2326, 2003, 2004, 2105,
+     2003, 2610, 2610, 2610, 2610, 3790, 2261, 2327, 2327, 2327,
+     2328, 2611, 2819, 1504, 2028, 2057, 1813, 1813, 1813, 1813,
+     1813, 1813, 1813, 1813, 1813, 1813, 1813, 1813, 1813, 1813,
+     1813, 1813, 1813, 3823, 2058, 4048, 1813, 2059, 2060, 2061,
+     2062, 2063, 2064, 1813, 2065, 2066, 1813, 2067, 1813, 2068,
+     2069, 2070, 1813, 2071, 2072, 2073, 2074, 2075, 2076, 2077,
+
+     1813, 1813, 2078, 2058, 1471, 1471, 1471, 1471, 3630, 3637,
+     2332, 2332, 2332, 2332, 2819, 2332, 2332, 2332, 2332, 2000,
+     2001, 1472, 2057, 3815, 2001, 2079, 2080, 2081, 2082, 2083,
+     2084, 2333, 2085, 2086, 3032, 2087, 2333, 2088, 2089, 2090,
+     2819, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2837, 2001,
+     2078, 2106, 2107, 2108, 2106, 3370, 2819, 2955, 2295, 3012,
+     3063, 2295, 2955, 2109, 3064, 2987, 2110, 2111, 1874, 2988,
+     1898, 2819, 2989, 3065, 2112, 1793, 2955, 4021, 2113, 1473,
+     1473, 1473, 1473, 2990, 2991, 2281, 2332, 2332, 2332, 2332,
+     3236, 2015, 2016, 2334, 2015, 3237, 1474, 2114, 2117, 2118,
+
+     2119, 2120, 2121, 2122, 2281, 2123, 2124, 2333, 2125, 3175,
+     2126, 2127, 2128, 3176, 2129, 2130, 2131, 2132, 2133, 2134,
+     2135, 3032, 3177, 2136, 2137, 2138, 2139, 2140, 2141, 2142,
+     2038, 2143, 2144, 2038, 2145, 3422, 2146, 2147, 2148, 3423,
+     2149, 2150, 2151, 2152, 2153, 2154, 2155, 3581, 2039, 2136,
+     2188, 2262, 2263, 2264, 2262, 3581, 2955, 2332, 2332, 2332,
+     2332, 2891, 2336, 2265, 2891, 2955, 2110, 2111, 2212, 1747,
+     3984, 3738, 3083, 2189, 2190, 2191, 1878, 1879, 2333, 2192,
+     1880, 3084, 2317, 2318, 1881, 2317, 2892, 3739, 2498, 2193,
+     1884, 3085, 2498, 2955, 1767, 1747, 3089, 2266, 8398, 2315,
+
+     3090, 2893, 2955, 2315, 2358, 2358, 2358, 2358, 8398, 2001,
+     2537, 2359, 2360, 2001, 2188, 2967, 2360, 3066, 2194, 2195,
+     2196, 1889, 1890, 2537, 2197, 2198, 2893, 3067, 2315, 1892,
+     2483, 2483, 2483, 2483, 2199, 1895, 4051, 2484, 2001, 1790,
+     2217, 2218, 2219, 2220, 2221, 2222, 2038, 2223, 2224, 2038,
+     2225, 2498, 2226, 2227, 2228, 2498, 2229, 2230, 2231, 2232,
+     2233, 2234, 2235, 4052, 2039, 2236, 2237, 2238, 2239, 2240,
+     2241, 2242, 3856, 2243, 2244, 2789, 2245, 3137, 2246, 2247,
+     2248, 3137, 2249, 2250, 2251, 2252, 2253, 2254, 2255, 3581,
+     2955, 2236, 2273, 2422, 2422, 2422, 2422, 3856, 2352, 2352,
+
+     2352, 2352, 3581, 4053, 2955, 2421, 3137, 3232, 2353, 3331,
+     2417, 3233, 3332, 2790, 1907, 1908, 1909, 1910, 1911, 2274,
+     2354, 1913, 1914, 2955, 1915, 2922, 2275, 2276, 1918, 3032,
+     1919, 1920, 1921, 1922, 1923, 1924, 1925, 3363, 2955, 1926,
+     2273, 3218, 3364, 1927, 1928, 1929, 1930, 1931, 2277, 2955,
+     1933, 1934, 3439, 1935, 3219, 2278, 2279, 1938, 2819, 1939,
+     1940, 1941, 1942, 1943, 1944, 1945, 2837, 1995, 1926, 1745,
+     1995, 2955, 2354, 3475, 3076, 2342, 2342, 2342, 2342, 1996,
+     4054, 3582, 2366, 1395, 1395, 2343, 1395, 3077, 1747, 3582,
+     3078, 1748, 2283, 2284, 1877, 1878, 1879, 2344, 2285, 2286,
+
+     1395, 1756, 4055, 1800, 4056, 1882, 1800, 2287, 2288, 1884,
+     1395, 1885, 1766, 1767, 1747, 8398, 8398, 8398, 8398, 3187,
+     2345, 2955, 8398, 8398, 3207, 2379, 1801, 8398, 2379, 1395,
+     1802, 2789, 3188, 1745, 3208, 3189, 1771, 2289, 2290, 1888,
+     1889, 1890, 2165, 2291, 2292, 2165, 1779, 2166, 2955, 1802,
+     1893, 3209, 2293, 2294, 1895, 3210, 1896, 1789, 1790, 2358,
+     2358, 2358, 2358, 3582, 3211, 2955, 2359, 2360, 3032, 2790,
+     2955, 2360, 2399, 2399, 2399, 2399, 3582, 2411, 2967, 1395,
+     3066, 2970, 2400, 1395, 2919, 2971, 3030, 1395, 1395, 1395,
+     3212, 2005, 4057, 2401, 2005, 1395, 3303, 2402, 2435, 1395,
+
+     1395, 1395, 1395, 2006, 1395, 1395, 3939, 3940, 1395, 1395,
+     1395, 2438, 2438, 2438, 2438, 2955, 1395, 1403, 1403, 1403,
+     1403, 1403, 1403, 1403, 1403, 2919, 2972, 3030, 2439, 1471,
+     1471, 1471, 1471, 2819, 1404, 3897, 3214, 3401, 1404, 1473,
+     1473, 1473, 1473, 2471, 3898, 1395, 1472, 2021, 2022, 1395,
+     2021, 2017, 3369, 1395, 2017, 2823, 1474, 2483, 2483, 2483,
+     2483, 1395, 3594, 2019, 2484, 8398, 8398, 8398, 8398, 4058,
+     3595, 4059, 8398, 2490, 2490, 2490, 2490, 1403, 1403, 1403,
+     1403, 1471, 1471, 1471, 1471, 1473, 1473, 1473, 1473, 2491,
+     2520, 2520, 2520, 2520, 1404, 3641, 3267, 3268, 1472, 3267,
+
+     3642, 2955, 1474, 1403, 1403, 1403, 1403, 1409, 1410, 1410,
+     1409, 2522, 2972, 1410, 1410, 1410, 1410, 3300, 1395, 1395,
+     1404, 3301, 3340, 1411, 1418, 1418, 1418, 1418, 1412, 1411,
+     3302, 1419, 2819, 2789, 1412, 1414, 1414, 1414, 1414, 4060,
+     1411, 1423, 1423, 1423, 1423, 2539, 2539, 2539, 2539, 8398,
+     2001, 3480, 2540, 3835, 2001, 3480, 1412, 1411, 1418, 1418,
+     1418, 1418, 1412, 1425, 1426, 1419, 8398, 8398, 8398, 8398,
+     4061, 2790, 2955, 8398, 1411, 2542, 2542, 2542, 2542, 2001,
+     3480, 1413, 8398, 2544, 2544, 2544, 2544, 3339, 3579, 2819,
+     2545, 1411, 2547, 2547, 2547, 2547, 3839, 3580, 3580, 1415,
+
+     1421, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1428,
+     1428, 1428, 1428, 1412, 2955, 3731, 1429, 1411, 2789, 3732,
+     2955, 1411, 1412, 1425, 1426, 2972, 1412, 1425, 1426, 8398,
+     8398, 8398, 8398, 3709, 1421, 3436, 8398, 2548, 2548, 2548,
+     2548, 3709, 8398, 1431, 1432, 1432, 1431, 3726, 1432, 1432,
+     1432, 1432, 1434, 1434, 1434, 1434, 2790, 3727, 2017, 1425,
+     1426, 2017, 2382, 1899, 1433, 2382, 1899, 3483, 1417, 1433,
+     2019, 3483, 3402, 1433, 1443, 1443, 1443, 1443, 1446, 1446,
+     1446, 1446, 3697, 4098, 1444, 1447, 2556, 2556, 2556, 2556,
+     1900, 3698, 3698, 1435, 1791, 1433, 3483, 1791, 1443, 1443,
+
+     1443, 1443, 1443, 1443, 1443, 1443, 1792, 1433, 1444, 1900,
+     3768, 1793, 1444, 1446, 1446, 1446, 1446, 1413, 3769, 1433,
+     1447, 1738, 2927, 1433, 8398, 8398, 8398, 8398, 3404, 3405,
+     3789, 8398, 1451, 1451, 1451, 1451, 1453, 1454, 1454, 1453,
+     1738, 3319, 4020, 1455, 1454, 1454, 1454, 1454, 2955, 2385,
+     3320, 1455, 2385, 1452, 8398, 8398, 8398, 8398, 2955, 3966,
+     3321, 8398, 1437, 1461, 1461, 1461, 1461, 1461, 1461, 1461,
+     1461, 3777, 3457, 1459, 1459, 1459, 1459, 3458, 2955, 1462,
+     1455, 3234, 3398, 1462, 1464, 3235, 3399, 3778, 1464, 2562,
+     2562, 2562, 2562, 1457, 4099, 3400, 2563, 1571, 1571, 1571,
+
+     1571, 1457, 1461, 1461, 1461, 1461, 1573, 1573, 1573, 1573,
+     1458, 1572, 3709, 1461, 1461, 1461, 1461, 2819, 8398, 1471,
+     1471, 1471, 1471, 1464, 3855, 3709, 2819, 2561, 8398, 1462,
+     1457, 3813, 1495, 3312, 1464, 1495, 1472, 1473, 1473, 1473,
+     1473, 2581, 2581, 2581, 2581, 2955, 3313, 8398, 2789, 3314,
+     2606, 2606, 2606, 2975, 1474, 2580, 2581, 2581, 2580, 3437,
+     3438, 1477, 1478, 1926, 1497, 1497, 1497, 1497, 1514, 1514,
+     1514, 1514, 1546, 1546, 1546, 1546, 1478, 2170, 2171, 1547,
+     2170, 2955, 1479, 2955, 1496, 1478, 2790, 2955, 3996, 1478,
+     3228, 1516, 3416, 1502, 1502, 1502, 1502, 2819, 2970, 3229,
+
+     2608, 3417, 3068, 1480, 1481, 1504, 1482, 1483, 1484, 3230,
+     3828, 3418, 1485, 1486, 1487, 1488, 1489, 2955, 1490, 2819,
+     3333, 1491, 1492, 1493, 1494, 2612, 2612, 2612, 2612, 2617,
+     3334, 2621, 2617, 2618, 2621, 2622, 2613, 2614, 3853, 3913,
+     4100, 2619, 2625, 2625, 2625, 2625, 2616, 3914, 2623, 1498,
+     1514, 1514, 1514, 1514, 3344, 2819, 2620, 3345, 2624, 1514,
+     1514, 1514, 1514, 1478, 1514, 1514, 1514, 1514, 3831, 2955,
+     3346, 1478, 3359, 1516, 2819, 2620, 3360, 2624, 3265, 3845,
+     1478, 3265, 1516, 2269, 3266, 1478, 2269, 1516, 1514, 1514,
+     1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
+
+     2270, 2632, 2633, 1514, 1514, 1514, 1514, 2955, 4101, 1478,
+     3361, 1516, 2819, 1478, 3362, 1516, 4102, 1478, 1500, 1516,
+     1514, 1514, 1514, 1514, 1478, 3844, 1516, 1514, 1514, 1514,
+     1514, 3410, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
+     2506, 1478, 1395, 1516, 3411, 2636, 1395, 3412, 1478, 2955,
+     1516, 2634, 3335, 1478, 2637, 1516, 3336, 1478, 2635, 1516,
+     1514, 1514, 1514, 1514, 2819, 3337, 1514, 1514, 1514, 1514,
+     1555, 1555, 1555, 1555, 2638, 3729, 1514, 1514, 1514, 1514,
+     3843, 1478, 2174, 1516, 1395, 3730, 2789, 1478, 2640, 1516,
+     2819, 1556, 1728, 2639, 1395, 1395, 1395, 1478, 4106, 1516,
+
+     1546, 1546, 1546, 1546, 2641, 1395, 3846, 1547, 2819, 1395,
+     1395, 2642, 3848, 1514, 1514, 1514, 1514, 2645, 1514, 1514,
+     1514, 1514, 2955, 2643, 2790, 2646, 3591, 2644, 2648, 1514,
+     1514, 1514, 1514, 2647, 1478, 2967, 1516, 3066, 3592, 1478,
+     3032, 1516, 3593, 1514, 1514, 1514, 1514, 3338, 2179, 2180,
+     1478, 2179, 1516, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
+     1514, 3857, 1946, 2649, 1478, 1946, 1516, 1514, 1514, 1514,
+     1514, 4107, 2156, 2157, 1478, 2156, 1516, 3858, 1478, 1947,
+     1516, 2651, 3486, 3731, 2158, 2650, 3486, 3866, 1478, 1900,
+     1516, 1573, 1573, 1573, 1573, 1514, 1514, 1514, 1514, 1514,
+
+     1514, 1514, 1514, 1514, 1514, 1514, 1514, 4108, 1900, 2175,
+     2652, 3486, 2175, 2653, 2654, 3923, 1478, 2656, 1516, 2655,
+     1478, 2176, 1516, 2395, 1478, 2396, 1516, 1514, 1514, 1514,
+     1514, 3924, 1514, 1514, 1514, 1514, 1395, 1514, 1514, 1514,
+     1514, 1514, 1514, 1514, 1514, 2819, 2865, 2866, 1478, 2865,
+     1516, 3825, 2659, 1478, 2658, 1516, 2010, 2011, 1478, 2657,
+     1516, 2011, 1478, 2867, 1516, 2012, 2867, 2819, 2660, 1514,
+     1514, 1514, 1514, 4109, 2847, 1792, 1514, 1514, 1514, 1514,
+     1514, 1514, 1514, 1514, 3179, 4113, 2011, 2661, 3191, 2850,
+     1478, 3192, 1516, 2860, 2663, 2662, 2860, 1478, 2664, 1516,
+
+     3860, 1478, 3193, 1516, 8398, 8398, 8398, 8398, 2861, 2862,
+     3861, 8398, 2668, 2668, 2668, 2668, 4114, 1561, 1561, 1561,
+     1561, 3871, 1564, 1564, 1564, 1564, 3756, 3904, 2665, 1565,
+     2671, 2671, 2671, 2671, 3872, 1516, 3905, 1557, 1556, 2667,
+     1563, 2666, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
+     2955, 1556, 1564, 1564, 1564, 1564, 4062, 2621, 3729, 1565,
+     2621, 2676, 2955, 1556, 3756, 1563, 3756, 1556, 3865, 1563,
+     8398, 8398, 8398, 8398, 2677, 3982, 2955, 8398, 2672, 2672,
+     2672, 2672, 2617, 3355, 2624, 2617, 2674, 1574, 1574, 1574,
+     1574, 3892, 3356, 4115, 2675, 1583, 1583, 1583, 1583, 8398,
+
+     2011, 1563, 3357, 2624, 2011, 4116, 1559, 2388, 8398, 2620,
+     2388, 1575, 3892, 1584, 1583, 1583, 1583, 1583, 2688, 2688,
+     2688, 2688, 1591, 1591, 1591, 1591, 3888, 2955, 2620, 2011,
+     3429, 3889, 1584, 1592, 2694, 2694, 2694, 2694, 1576, 1596,
+     3430, 1395, 1395, 4117, 2695, 1395, 1395, 2955, 2955, 1395,
+     3221, 3453, 1577, 4118, 1578, 3454, 1579, 1395, 1597, 1598,
+     1598, 1597, 2511, 3222, 1599, 2511, 3223, 1395, 1598, 1598,
+     1598, 1598, 2702, 2703, 2704, 2702, 1608, 1608, 1608, 1608,
+     1611, 1611, 1611, 1611, 1611, 1611, 1611, 1611, 2708, 2708,
+     2708, 2708, 2955, 8398, 2011, 2709, 1612, 2425, 2011, 1395,
+
+     1612, 1614, 8398, 3992, 1926, 1614, 1611, 1611, 1611, 1611,
+     1611, 1611, 1611, 1611, 1395, 1395, 1616, 1616, 1616, 1616,
+     3707, 2955, 1612, 2011, 3455, 1395, 1612, 1614, 3456, 3708,
+     3708, 1614, 1616, 1616, 1616, 1616, 1926, 1617, 1623, 1623,
+     1623, 1623, 2819, 2706, 1395, 1624, 4121, 2712, 2712, 2712,
+     2712, 3833, 2955, 1617, 1618, 1616, 1616, 1616, 1616, 1623,
+     1623, 1623, 1623, 3834, 4122, 2967, 1624, 3066, 1617, 2819,
+     2711, 8398, 8398, 8398, 8398, 3825, 1617, 3434, 8398, 1626,
+     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1635, 1635, 1635,
+     1635, 3826, 2939, 3893, 1636, 2714, 2714, 2714, 2714, 3884,
+
+     1627, 3946, 1628, 3885, 1627, 1626, 1626, 1626, 1626, 2955,
+     1635, 1635, 1635, 1635, 3893, 3978, 1627, 1636, 8398, 8398,
+     8398, 8398, 1645, 1620, 1395, 8398, 1627, 2955, 1395, 1691,
+     1395, 1395, 1395, 1395, 1654, 1654, 1654, 1654, 2955, 4123,
+     1395, 3440, 1395, 1700, 1700, 1700, 1700, 1395, 3965, 2526,
+     1395, 1655, 2526, 1395, 3441, 1699, 1700, 1700, 1700, 1700,
+     1702, 1702, 1702, 1702, 1729, 1730, 1729, 1730, 4124, 1395,
+     4125, 1630, 1730, 1730, 1730, 1730, 1395, 2889, 2889, 2889,
+     2889, 1859, 1858, 1859, 1859, 1859, 1858, 1859, 1859, 1901,
+     1902, 1902, 1901, 1862, 1863, 1864, 1862, 1395, 1395, 2745,
+
+     2746, 2747, 2748, 2749, 2750, 1865, 1903, 2751, 1866, 1867,
+     2752, 2753, 2754, 2755, 1926, 2756, 2757, 2758, 2759, 2760,
+     2761, 2765, 2766, 2767, 2768, 2769, 3772, 2770, 2771, 4126,
+     2772, 1969, 1969, 1969, 1969, 3773, 2299, 2300, 2773, 3774,
+     2774, 2300, 2775, 2869, 2870, 2871, 2872, 2873, 2874, 2955,
+     2875, 2876, 1970, 2877, 2752, 2878, 2879, 2880, 3967, 2881,
+     2882, 2883, 2884, 2885, 2886, 2887, 2300, 2955, 2888, 2896,
+     2897, 2898, 2899, 2900, 3781, 2901, 2902, 3781, 2903, 1857,
+     1858, 1859, 1857, 4006, 2302, 2303, 2904, 2302, 2905, 4127,
+     2906, 1860, 3002, 1858, 1859, 3002, 1793, 1862, 1863, 1864,
+
+     1862, 2955, 1801, 2955, 3348, 2955, 1802, 2861, 2862, 1865,
+     3964, 1869, 1866, 1867, 1869, 1897, 3985, 3349, 1897, 1795,
+     3350, 2955, 1795, 1870, 3443, 1802, 2896, 1898, 3020, 2899,
+     2900, 1796, 1793, 2902, 1797, 1798, 1874, 3444, 1872, 2955,
+     3445, 2955, 1872, 2904, 3068, 4128, 2420, 2906, 3080, 2420,
+     2955, 3081, 1969, 1969, 1969, 1969, 2204, 1873, 2421, 2204,
+     3972, 1873, 3082, 1980, 1980, 1980, 1980, 2955, 2205, 4007,
+     1981, 2206, 2207, 1970, 2955, 1977, 3126, 3126, 3126, 3126,
+     4090, 3993, 2955, 1971, 1969, 1969, 1969, 1969, 1980, 1980,
+     1980, 1980, 4129, 2317, 2318, 1981, 2317, 1970, 2955, 8398,
+
+     8398, 8398, 8398, 3976, 3978, 1970, 8398, 1977, 1983, 1983,
+     1983, 1983, 1989, 1983, 1983, 1989, 1992, 1992, 1992, 1992,
+     3979, 2955, 1990, 1993, 3128, 3128, 3128, 3128, 3796, 1984,
+     4065, 1985, 3797, 1984, 1989, 1983, 1983, 1989, 1989, 1983,
+     1983, 1989, 3798, 2955, 1990, 1984, 3213, 3304, 1990, 3733,
+     3225, 3316, 1973, 3226, 3317, 1984, 4130, 3868, 3869, 1984,
+     1992, 1992, 1992, 1992, 3227, 3318, 1977, 1993, 8398, 8398,
+     8398, 8398, 2819, 2789, 2955, 8398, 2024, 2024, 2024, 2024,
+     2024, 2024, 2024, 2024, 2031, 2031, 2031, 2031, 4074, 3821,
+     4131, 2032, 3141, 3141, 3141, 3141, 2789, 2025, 2955, 2026,
+
+     1987, 2025, 2024, 2024, 2024, 2024, 2955, 2031, 2031, 2031,
+     2031, 2790, 2955, 2025, 2032, 8398, 8398, 8398, 8398, 3991,
+     4080, 2034, 8398, 2025, 2034, 2052, 2431, 3435, 2052, 2431,
+     2098, 2099, 2100, 2098, 2790, 2955, 2432, 1870, 2100, 2099,
+     2100, 2100, 2101, 2863, 2955, 2035, 2863, 2102, 2053, 2864,
+     3068, 3465, 2054, 2103, 3440, 2012, 2819, 2104, 2100, 2099,
+     2100, 2100, 2200, 2955, 4000, 2200, 3339, 3441, 2028, 3816,
+     3352, 2054, 2036, 3353, 2201, 2280, 2105, 3817, 2280, 2202,
+     2330, 2331, 3402, 2330, 3354, 2447, 3414, 1870, 2447, 3192,
+     2037, 3149, 3150, 3151, 3152, 3153, 3154, 1870, 3155, 3156,
+
+     3415, 3157, 2281, 3158, 3159, 3160, 3139, 3161, 3162, 3163,
+     3164, 3165, 3166, 3167, 4132, 2955, 2078, 2106, 2107, 2108,
+     2106, 2281, 3449, 2955, 3291, 2099, 2100, 3291, 4005, 2109,
+     2987, 3450, 2110, 2111, 1874, 2765, 3292, 3366, 2768, 2769,
+     2112, 3451, 2771, 2204, 2113, 2955, 2204, 3262, 3470, 8398,
+     2300, 3263, 2773, 2955, 2300, 2205, 2775, 2819, 2206, 2207,
+     3818, 3074, 2955, 2114, 3239, 3240, 3241, 3242, 3243, 3244,
+     3264, 3245, 3246, 4009, 3247, 4016, 3248, 3249, 3250, 2300,
+     3251, 3252, 3253, 3254, 3255, 3256, 3257, 4133, 2955, 2136,
+     3259, 2099, 2100, 3259, 3711, 2106, 2107, 2108, 2106, 2258,
+
+     2257, 2258, 2258, 3712, 3712, 3260, 3261, 2109, 3994, 3995,
+     2110, 2111, 8398, 3262, 3939, 4045, 2955, 3263, 2112, 3431,
+     3947, 3948, 2113, 3432, 3461, 2257, 2258, 3461, 3949, 4134,
+     2209, 2685, 3433, 2209, 2685, 3549, 3264, 4135, 2819, 3260,
+     3261, 2114, 3270, 3271, 3272, 3273, 3274, 3275, 3550, 3276,
+     3277, 3816, 3278, 2210, 3279, 3280, 3281, 2211, 3282, 3283,
+     3284, 3285, 3286, 3287, 3288, 2955, 2819, 3289, 3435, 3827,
+     3462, 2449, 3447, 2955, 2449, 3226, 2211, 3373, 3374, 3375,
+     3376, 3377, 3378, 1898, 3379, 3380, 3448, 3381, 2202, 3382,
+     3383, 3384, 2971, 3385, 3386, 3387, 3388, 3389, 3390, 3391,
+
+     4136, 4137, 2236, 2256, 2257, 2258, 2256, 2262, 2263, 2264,
+     2262, 2258, 2257, 2258, 2258, 2259, 2416, 2888, 1395, 2265,
+     2260, 3878, 2110, 2111, 8398, 2867, 2210, 4138, 2867, 1395,
+     2211, 2262, 2263, 2264, 2262, 3879, 3756, 1792, 3464, 2257,
+     2258, 3464, 2819, 2265, 1395, 3854, 2110, 2111, 8398, 2261,
+     2259, 4141, 2896, 2266, 3020, 2295, 2900, 4147, 2295, 8398,
+     2300, 2314, 2315, 1395, 2300, 2863, 2315, 1898, 2863, 2904,
+     8398, 2315, 1793, 2906, 3756, 2315, 3756, 2266, 8398, 2315,
+     2321, 2322, 2281, 2315, 3462, 2322, 3886, 8398, 2322, 2300,
+     3887, 2315, 2322, 8398, 2322, 3933, 2955, 2078, 2322, 2553,
+
+     2315, 2281, 2553, 2325, 2325, 2325, 2325, 3934, 2315, 3935,
+     2322, 2325, 2325, 2325, 2325, 4013, 3561, 2322, 2326, 2325,
+     2325, 2325, 2325, 2322, 2328, 2863, 2326, 2955, 2863, 2327,
+     2327, 2327, 2328, 2332, 2332, 2332, 2332, 2327, 2327, 2327,
+     2328, 2325, 2325, 2325, 2325, 4148, 4014, 4025, 2326, 2332,
+     2332, 2332, 2332, 2955, 2333, 2332, 2332, 2332, 2332, 3489,
+     3489, 3489, 2328, 4151, 2339, 2339, 2339, 2339, 4025, 4087,
+     2333, 2340, 3491, 3491, 3491, 3491, 2333, 2955, 2955, 2334,
+     2339, 2339, 2339, 2339, 4017, 2987, 4154, 2340, 8398, 8398,
+     8398, 8398, 2955, 2333, 4001, 8398, 2342, 2342, 2342, 2342,
+
+     2352, 2352, 2352, 2352, 2685, 2735, 2343, 2685, 2735, 4091,
+     2353, 2355, 2355, 2355, 2355, 2819, 3781, 2736, 2344, 3781,
+     3840, 2730, 2354, 4158, 3841, 2356, 2357, 2357, 2357, 2357,
+     2357, 2357, 2357, 2357, 3842, 2358, 2358, 2358, 2358, 4049,
+     3862, 2345, 2359, 2360, 3863, 4164, 4050, 2360, 2336, 8398,
+     8398, 8398, 8398, 3864, 2819, 4024, 8398, 8398, 2366, 1395,
+     1395, 8398, 1395, 2358, 2358, 2358, 2358, 4174, 4024, 2955,
+     2359, 2360, 3970, 3842, 2354, 2360, 1395, 2399, 2399, 2399,
+     2399, 3500, 3500, 3500, 3500, 4175, 1395, 2400, 3501, 2405,
+     2411, 1395, 1395, 3502, 2867, 1395, 1395, 2867, 2401, 1395,
+
+     1395, 1395, 1395, 3179, 3781, 1395, 1792, 3781, 1395, 2422,
+     2422, 2422, 2422, 2422, 2422, 2422, 2422, 2436, 2436, 2436,
+     2436, 2421, 2435, 1395, 1395, 1395, 1395, 3522, 1395, 1395,
+     3522, 3523, 1395, 1395, 1395, 2955, 1395, 2955, 3987, 3523,
+     1395, 2438, 2438, 2438, 2438, 2442, 2442, 2442, 2442, 3525,
+     2819, 3880, 3525, 3526, 3524, 4142, 4083, 2464, 2439, 1395,
+     3881, 3613, 3918, 1395, 3613, 4143, 3526, 1395, 1395, 1395,
+     3882, 3919, 2471, 3524, 1395, 3920, 3527, 2955, 1395, 2606,
+     2606, 2606, 1395, 2955, 2483, 2483, 2483, 2483, 4012, 2867,
+     1395, 2484, 2867, 2955, 4064, 3527, 8398, 8398, 8398, 8398,
+
+     4082, 1792, 2955, 8398, 2486, 2486, 2486, 2486, 2486, 2486,
+     2486, 2486, 2486, 2486, 2486, 2486, 2487, 2955, 2865, 2866,
+     2487, 2865, 4073, 4063, 2487, 2490, 2490, 2490, 2490, 2490,
+     2490, 2490, 2490, 2558, 2558, 2558, 2558, 3539, 3539, 3539,
+     3539, 2491, 2955, 1444, 3540, 2491, 4008, 1395, 1395, 3541,
+     2490, 2490, 2490, 2490, 3545, 3545, 3545, 3545, 2520, 2520,
+     2520, 2520, 2520, 2520, 2520, 2520, 2491, 4176, 3546, 2520,
+     2520, 2520, 2520, 3555, 3555, 3555, 3555, 2860, 2891, 2522,
+     2860, 2891, 2955, 2522, 2539, 2539, 2539, 2539, 2955, 3068,
+     2522, 2540, 2861, 2862, 1412, 1425, 1426, 8398, 8398, 8398,
+
+     8398, 4066, 2955, 2892, 8398, 2548, 2548, 2548, 2548, 2542,
+     2542, 2542, 2542, 2542, 2542, 2542, 2542, 2544, 2544, 2544,
+     2544, 2955, 3942, 4068, 2545, 1411, 3943, 1425, 1426, 1411,
+     8398, 8398, 8398, 8398, 3968, 4177, 3944, 8398, 2547, 2547,
+     2547, 2547, 3969, 4178, 2955, 1415, 2548, 2548, 2548, 2548,
+     2548, 2548, 2548, 2548, 1443, 1443, 1443, 1443, 3874, 1412,
+     2556, 2556, 2556, 2556, 1444, 4072, 2955, 1435, 1425, 1426,
+     4182, 3875, 1425, 1426, 3876, 1433, 2558, 2558, 2558, 2558,
+     4183, 1433, 3565, 3565, 3565, 3565, 1444, 4079, 4139, 3566,
+     1461, 1461, 1461, 1461, 2562, 2562, 2562, 2562, 2955, 2863,
+
+     2955, 2563, 2863, 3567, 4140, 2864, 1462, 1461, 1461, 1461,
+     1461, 1464, 4085, 4184, 1417, 8398, 8398, 8398, 8398, 4086,
+     3994, 4081, 8398, 3573, 3573, 3573, 3573, 4185, 1464, 4189,
+     2563, 3584, 3584, 3584, 3584, 4190, 1437, 2865, 2866, 2617,
+     2865, 4192, 2617, 3615, 3615, 3615, 3615, 2625, 2625, 2625,
+     2625, 4193, 1478, 3570, 1498, 2614, 4149, 4150, 3569, 3583,
+     3584, 3584, 3583, 2955, 2616, 1477, 2620, 2955, 1478, 2610,
+     2610, 2610, 2610, 2955, 3068, 3617, 3617, 3617, 3617, 2611,
+     1478, 1504, 3618, 4084, 4092, 2620, 1479, 1504, 2612, 2612,
+     2612, 2612, 3620, 3620, 3620, 3620, 3939, 4191, 2955, 2613,
+
+     2614, 4015, 3621, 2612, 2612, 2612, 2612, 1480, 1481, 2616,
+     1482, 1483, 1484, 2955, 2613, 2614, 1485, 1486, 1487, 1488,
+     1489, 4194, 1490, 1500, 2616, 1491, 1492, 1493, 1494, 3622,
+     3622, 3622, 3622, 4089, 2617, 3628, 3623, 2617, 3628, 2621,
+     3624, 3632, 2621, 3634, 3632, 2696, 3634, 2955, 2696, 3179,
+     2625, 2625, 2625, 2625, 4144, 3635, 2730, 1498, 4145, 3179,
+     4096, 2620, 3629, 2606, 2606, 2606, 2624, 4146, 2624, 4173,
+     3636, 1478, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
+     2620, 3629, 4040, 2955, 2955, 2624, 3980, 2624, 3981, 3636,
+     4173, 4097, 4197, 1478, 4041, 1516, 4042, 1478, 4198, 1516,
+
+     4199, 3644, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
+     1514, 1514, 1514, 1514, 2955, 4033, 3645, 4067, 1514, 1514,
+     1514, 1514, 4200, 1478, 4034, 1516, 1500, 1478, 4035, 1516,
+     4201, 1478, 4202, 1516, 1514, 1514, 1514, 1514, 3179, 1478,
+     4110, 1516, 1514, 1514, 1514, 1514, 4203, 2955, 1514, 1514,
+     1514, 1514, 4111, 3891, 4112, 1478, 3891, 1516, 1514, 1514,
+     1514, 1514, 4204, 1478, 2078, 1516, 4088, 3646, 4159, 1478,
+     3647, 1516, 2955, 3648, 4205, 4075, 3649, 3650, 2892, 1478,
+     4206, 1516, 4160, 1514, 1514, 1514, 1514, 2688, 2688, 2688,
+     2688, 3651, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
+
+     1514, 1514, 1514, 1514, 1478, 3652, 1516, 4152, 4165, 2955,
+     3653, 3781, 4166, 1478, 3781, 1516, 2955, 1478, 3654, 1516,
+     4153, 1478, 4207, 1516, 1514, 1514, 1514, 1514, 3068, 1514,
+     1514, 1514, 1514, 2955, 4251, 4093, 3655, 1514, 1514, 1514,
+     1514, 1514, 1514, 1514, 1514, 1478, 2955, 1516, 2955, 3657,
+     1478, 3656, 1516, 1514, 1514, 1514, 1514, 2955, 1478, 3658,
+     1516, 4210, 1478, 2136, 1516, 4094, 1514, 1514, 1514, 1514,
+     1514, 1514, 1514, 1514, 1478, 4252, 1516, 1514, 1514, 1514,
+     1514, 3659, 3660, 3693, 3693, 3693, 3693, 1478, 3661, 1516,
+     4255, 1478, 4119, 1516, 1514, 1514, 1514, 1514, 1478, 4120,
+
+     1516, 1514, 1514, 1514, 1514, 2955, 3662, 4195, 4095, 3663,
+     1514, 1514, 1514, 1514, 4196, 1478, 4155, 1516, 3143, 3665,
+     2617, 3143, 1478, 2617, 1516, 1514, 1514, 1514, 1514, 4156,
+     3666, 1478, 4157, 1516, 3664, 1514, 1514, 1514, 1514, 1514,
+     1514, 1514, 1514, 3554, 2955, 2955, 1478, 2620, 1516, 1514,
+     1514, 1514, 1514, 3988, 3213, 4167, 1478, 2955, 1516, 4168,
+     1478, 4258, 1516, 3667, 3668, 3989, 2620, 3990, 3669, 3670,
+     1478, 4218, 1516, 2955, 1514, 1514, 1514, 1514, 1514, 1514,
+     1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
+     4262, 4103, 2955, 3671, 4209, 1478, 3672, 1516, 4208, 1478,
+
+     4104, 1516, 2955, 1478, 4105, 1516, 3673, 1478, 4269, 1516,
+     4169, 1514, 1514, 1514, 1514, 4170, 4224, 3674, 1514, 1514,
+     1514, 1514, 1514, 1514, 1514, 1514, 2668, 2668, 2668, 2668,
+     3130, 3676, 1478, 3130, 1516, 3628, 2955, 3675, 3628, 1478,
+     1990, 1516, 4234, 1478, 3677, 1516, 3290, 3678, 2955, 1516,
+     2668, 2668, 2668, 2668, 2671, 2671, 2671, 2671, 3683, 4236,
+     2955, 1557, 3629, 2672, 2672, 2672, 2672, 2672, 2672, 2672,
+     2672, 3681, 4286, 1516, 3632, 1556, 4231, 3632, 2819, 3679,
+     3634, 3629, 4186, 3634, 2955, 3680, 1563, 3833, 4022, 4217,
+     1563, 2955, 3635, 4179, 4187, 3695, 4188, 3554, 3695, 4023,
+
+     2955, 2624, 4180, 3684, 4002, 4003, 4181, 3636, 2694, 2694,
+     2694, 2694, 4004, 2697, 2697, 2697, 4171, 4235, 2695, 4171,
+     2624, 2702, 2703, 2704, 2702, 2955, 3636, 2955, 4211, 2955,
+     1559, 2704, 2703, 2704, 2704, 2708, 2708, 2708, 2708, 3269,
+     2955, 4172, 2709, 8398, 8398, 8398, 8398, 4226, 4212, 4228,
+     8398, 3701, 3701, 3701, 3701, 1611, 1611, 1611, 1611, 2712,
+     2712, 2712, 2712, 4246, 3269, 3130, 1618, 1612, 3130, 2955,
+     2819, 1612, 1614, 4247, 3705, 1990, 1614, 3705, 3820, 2955,
+     1617, 2714, 2714, 2714, 2714, 2000, 3134, 3821, 1628, 4233,
+     3134, 3822, 2718, 2718, 2718, 3785, 3786, 3787, 3785, 2955,
+
+     4216, 3289, 1627, 3785, 3786, 3787, 3785, 3973, 3703, 3785,
+     3786, 3787, 3785, 8398, 3134, 3134, 3974, 2955, 3134, 2955,
+     3975, 3785, 3786, 3787, 3785, 2955, 3002, 1858, 1859, 3002,
+     3997, 2955, 4240, 2955, 3998, 1620, 4219, 2955, 4223, 4069,
+     2955, 2861, 2862, 3134, 3999, 2955, 4076, 3213, 4070, 2819,
+     2010, 3137, 4071, 4213, 2955, 3137, 3788, 1630, 4077, 2012,
+     4078, 3213, 4214, 4287, 3832, 4242, 4215, 2955, 4161, 4290,
+     3931, 3126, 3126, 3126, 3126, 2955, 2955, 4162, 1971, 4239,
+     3137, 4243, 3986, 3128, 3128, 3128, 3128, 4163, 8398, 3137,
+     1985, 2955, 1970, 3137, 2955, 3994, 4225, 8398, 3141, 3141,
+
+     3141, 3141, 2955, 4220, 1984, 2026, 2955, 2955, 2955, 2955,
+     4227, 4244, 4293, 2955, 4245, 4221, 4229, 4222, 3137, 2025,
+     4241, 4253, 4254, 4230, 4277, 4232, 3213, 4237, 4238, 3291,
+     2099, 2100, 3291, 4248, 4278, 4256, 4266, 4249, 4259, 4270,
+     4272, 3292, 4297, 4271, 4273, 4267, 4250, 1973, 4257, 4277,
+     4279, 4260, 3262, 2136, 4261, 4268, 3263, 4263, 4274, 1987,
+     4264, 4276, 4303, 4275, 4256, 3259, 2099, 2100, 3259, 3265,
+     3265, 4265, 3265, 3265, 2028, 3264, 3266, 4257, 4288, 4289,
+     3260, 3261, 3267, 3268, 3265, 3267, 4244, 3265, 3262, 4280,
+     3267, 3268, 3263, 3267, 4281, 4283, 4291, 4304, 4306, 4284,
+
+     4311, 4305, 4307, 4312, 4282, 4294, 4313, 4276, 4285, 4292,
+     4291, 3264, 3270, 3271, 3272, 3273, 3274, 3275, 4295, 3276,
+     3277, 4296, 3278, 4292, 3279, 3280, 3281, 4300, 3282, 3283,
+     3284, 3285, 3286, 3287, 3288, 3289, 4301, 3289, 4308, 4298,
+     3304, 4314, 4264, 4309, 4310, 4315, 4302, 3291, 2099, 2100,
+     3291, 4316, 4320, 4299, 4321, 4317, 4322, 4323, 4327, 3292,
+     2106, 2107, 2108, 2106, 4318, 4310, 4324, 4328, 4319, 4330,
+     3262, 4331, 2109, 4332, 3263, 2110, 2111, 3304, 4325, 4333,
+     4326, 3939, 4329, 2112, 3304, 4335, 4334, 2113, 4336, 4337,
+     4338, 4339, 4340, 3264, 3304, 4341, 4342, 4343, 4344, 4345,
+
+     2955, 2955, 2955, 2955, 2955, 2955, 2114, 4346, 4350, 2955,
+     2955, 2955, 3339, 4348, 2955, 2955, 2955, 4349, 4352, 4356,
+     2955, 4347, 2955, 2099, 2955, 4358, 2955, 4353, 2955, 2955,
+     4351, 4354, 4355, 4359, 4357, 2955, 4365, 4362, 2955, 2955,
+     4363, 2955, 2955, 2955, 2955, 4360, 3339, 4361, 3994, 4364,
+     3339, 2955, 2955, 2955, 4366, 4368, 2955, 2955, 4367, 4373,
+     4370, 4371, 4369, 2955, 2955, 2955, 2955, 4375, 4378, 4374,
+     2955, 4372, 4381, 3752, 4382, 4383, 3339, 4380, 2819, 4379,
+     2819, 2819, 4376, 4377, 4386, 2867, 4388, 4394, 2867, 4384,
+     3833, 4389, 2236, 4395, 4391, 4398, 4385, 1792, 4392, 4399,
+
+     4387, 4390, 4023, 4396, 4397, 4401, 4402, 4393, 4405, 2236,
+     4411, 4408, 4400, 4406, 4412, 4418, 4419, 4414, 4413, 4403,
+     4409, 4415, 4404, 4416, 4420, 3402, 4421, 4407, 4417, 4422,
+     4410, 4423, 4424, 4427, 4428, 4429, 4418, 4430, 4431, 4434,
+     4435, 4425, 3939, 4436, 4437, 4426, 4438, 4439, 3402, 4440,
+     4432, 3402, 4433, 4442, 4443, 4444, 4441, 4445, 4446, 3402,
+     4447, 4448, 4449, 4450, 4451, 2955, 2955, 2955, 2955, 2955,
+     2955, 4452, 4455, 2955, 2955, 2955, 3435, 2955, 2955, 4461,
+     2955, 4454, 2955, 4457, 2955, 4463, 2955, 4453, 2955, 4464,
+     2955, 4456, 4458, 2955, 4460, 2955, 4459, 4470, 4462, 4467,
+
+     4468, 4465, 2955, 4466, 2955, 2955, 2955, 2955, 3994, 4469,
+     2955, 3435, 4471, 3435, 2955, 4472, 4473, 2955, 2955, 2955,
+     4477, 4479, 2955, 4474, 4475, 2955, 2955, 4476, 4482, 2955,
+     3464, 2257, 2258, 3464, 4478, 3463, 4484, 3435, 4480, 4483,
+     4485, 4481, 2259, 4399, 3461, 2257, 2258, 3461, 4485, 3464,
+     2257, 2258, 3464, 2257, 4486, 4488, 4400, 4490, 4491, 3260,
+     3261, 2259, 4487, 2955, 2955, 4494, 4495, 4496, 4489, 4499,
+     3494, 4493, 2819, 3494, 2819, 3498, 3462, 4492, 4020, 2299,
+     3480, 4497, 4498, 2363, 3480, 4507, 3506, 3506, 4515, 4517,
+     3462, 4494, 4499, 4023, 4516, 3462, 8398, 3480, 2314, 3483,
+
+     4518, 3480, 4516, 3483, 4516, 8398, 3483, 2321, 3486, 3480,
+     3483, 3515, 3486, 8398, 3486, 4505, 3519, 4516, 3486, 3519,
+     2325, 2325, 2325, 2325, 4506, 4506, 3480, 4500, 3483, 4503,
+     4503, 4503, 4503, 3631, 3637, 3483, 2326, 3486, 4501, 4501,
+     4501, 2328, 3529, 3486, 2325, 2325, 2325, 2325, 4513, 3529,
+     2328, 2326, 2325, 2325, 2325, 2325, 3533, 4514, 4514, 2326,
+     3533, 4528, 3489, 3489, 3489, 2328, 4508, 4508, 4508, 4508,
+     3489, 3489, 3489, 2328, 3491, 3491, 3491, 3491, 3502, 2481,
+     3554, 2334, 3500, 3500, 3500, 3500, 3683, 3554, 4532, 3501,
+     8398, 8398, 8398, 8398, 3502, 2333, 4520, 8398, 4509, 4509,
+
+     4509, 4509, 8398, 4533, 4534, 4521, 4521, 3522, 3522, 3525,
+     3522, 3522, 3525, 4523, 3525, 4526, 4537, 3525, 1462, 4511,
+     4543, 3635, 4524, 4524, 4527, 4527, 3539, 3539, 3539, 3539,
+     4544, 3554, 3684, 3540, 3524, 3524, 3527, 3554, 3541, 4545,
+     2551, 3527, 4546, 2573, 8398, 8398, 8398, 8398, 2552, 2573,
+     2336, 8398, 4549, 3524, 3524, 3527, 8398, 4550, 4548, 4548,
+     3527, 2490, 2490, 2490, 2490, 3545, 3545, 3545, 3545, 4531,
+     4531, 4531, 4531, 3555, 3555, 3555, 3555, 2491, 4555, 3546,
+     3555, 3555, 3555, 3555, 2548, 2548, 2548, 2548, 1443, 1443,
+     1443, 1443, 4556, 4557, 1412, 1425, 1426, 4553, 1444, 4558,
+
+     4554, 1412, 1425, 1426, 4559, 4560, 1425, 1426, 4561, 1433,
+     3565, 3565, 3565, 3565, 4562, 4563, 4564, 3566, 4535, 4535,
+     4535, 4535, 4565, 4566, 4567, 4536, 4535, 4535, 4535, 4535,
+     4568, 3567, 4569, 4539, 4539, 4539, 4539, 4570, 4571, 3567,
+     4540, 1461, 1461, 1461, 1461, 4574, 4575, 3567, 1461, 1461,
+     1461, 1461, 3573, 3573, 3573, 3573, 4572, 1462, 4576, 2563,
+     4573, 4577, 1464, 4552, 4552, 4552, 4552, 4578, 4579, 1464,
+     4580, 4581, 4582, 3613, 4584, 4588, 3613, 4595, 4583, 3630,
+     3631, 3630, 3637, 2683, 1478, 4597, 3569, 3615, 3615, 3615,
+     3615, 2684, 4598, 4599, 3569, 3620, 3620, 3620, 3620, 2614,
+
+     4542, 4551, 4552, 4552, 4551, 3621, 4600, 1477, 2616, 3615,
+     3615, 3615, 3615, 3617, 3617, 3617, 3617, 4601, 4602, 4646,
+     3618, 2614, 1478, 4647, 4648, 1504, 4649, 4650, 1479, 4651,
+     2616, 8398, 8398, 8398, 8398, 4652, 4653, 4654, 8398, 3693,
+     3693, 3693, 3693, 8398, 4585, 4585, 4585, 4585, 2699, 1480,
+     1481, 4658, 1482, 1483, 1484, 1639, 2720, 4662, 1485, 1486,
+     1487, 1488, 1489, 2726, 1490, 4587, 4670, 1491, 1492, 1493,
+     1494, 3622, 3622, 3622, 3622, 4671, 3623, 4672, 3623, 4673,
+     3624, 4676, 3624, 8398, 8398, 8398, 8398, 4589, 4589, 4589,
+     8398, 2683, 4677, 4665, 8398, 4591, 4591, 4591, 4591, 2684,
+
+     2617, 3632, 4592, 2617, 3632, 3632, 4678, 1504, 3632, 4679,
+     1514, 1514, 1514, 1514, 4665, 1514, 1514, 1514, 1514, 1514,
+     1514, 1514, 1514, 3693, 3693, 3693, 3693, 2620, 2624, 4666,
+     4667, 1478, 2624, 1516, 3695, 4680, 1478, 3695, 1516, 4655,
+     1478, 4683, 1516, 4668, 4669, 4603, 2620, 2624, 4684, 4685,
+     4686, 2624, 4604, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
+     1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
+     1514, 1514, 1514, 4674, 1478, 4687, 1516, 4688, 1478, 4689,
+     1516, 4605, 1478, 4690, 1516, 4691, 1478, 4693, 1516, 4692,
+     1478, 4675, 1516, 4681, 1514, 1514, 1514, 1514, 4616, 4616,
+
+     4616, 4616, 3705, 4606, 4694, 3705, 4682, 4583, 4695, 4696,
+     1514, 1514, 1514, 1514, 4609, 1478, 4697, 1516, 4698, 1478,
+     3732, 1516, 4607, 1514, 1514, 1514, 1514, 4608, 2699, 4699,
+     4610, 1478, 2720, 1516, 4702, 4703, 4704, 4657, 4657, 2726,
+     3781, 4661, 4661, 3781, 1478, 4705, 1516, 4706, 4664, 4664,
+     4707, 4611, 4612, 4612, 4613, 4613, 4613, 4613, 4612, 4612,
+     4612, 4612, 4612, 4612, 4612, 4612, 4612, 4612, 4612, 4612,
+     4612, 4612, 4617, 4618, 4708, 4614, 4711, 4615, 4612, 4612,
+     4612, 4612, 1514, 1514, 1514, 1514, 4712, 4713, 4620, 1514,
+     1514, 1514, 1514, 1514, 1514, 1514, 1514, 4714, 4715, 4612,
+
+     4612, 4612, 4718, 1478, 4719, 1516, 4700, 4721, 4722, 4700,
+     1478, 4723, 1516, 4724, 1478, 4716, 1516, 1514, 1514, 1514,
+     1514, 1514, 1514, 1514, 1514, 4717, 4727, 4728, 4612, 4612,
+     4612, 4701, 1514, 1514, 1514, 1514, 4730, 4731, 1478, 4619,
+     1516, 4732, 1478, 4733, 1516, 1514, 1514, 1514, 1514, 1514,
+     1514, 1514, 1514, 1478, 4622, 1516, 4734, 4621, 4735, 3781,
+     4736, 4725, 3781, 4737, 4725, 3786, 1478, 4738, 1516, 4739,
+     1478, 4740, 1516, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
+     1514, 4625, 4623, 4624, 3785, 4741, 4742, 3785, 1514, 1514,
+     1514, 1514, 4743, 4744, 1478, 4745, 1516, 4746, 1478, 4747,
+
+     1516, 1514, 1514, 1514, 1514, 4748, 4749, 4626, 4627, 1478,
+     4750, 1516, 1514, 1514, 1514, 1514, 4726, 1514, 1514, 1514,
+     1514, 4751, 1478, 4628, 1516, 1514, 1514, 1514, 1514, 1514,
+     1514, 1514, 1514, 1478, 4752, 1516, 4753, 4630, 1478, 4755,
+     1516, 4754, 4756, 4629, 4757, 4758, 1478, 4759, 1516, 4760,
+     1478, 4761, 1516, 4762, 4631, 4763, 1514, 1514, 1514, 1514,
+     1514, 1514, 1514, 1514, 2819, 4632, 1514, 1514, 1514, 1514,
+     1514, 1514, 1514, 1514, 4633, 4764, 2819, 1478, 4635, 1516,
+     2819, 1478, 4634, 1516, 4808, 4765, 4766, 1478, 2819, 1516,
+     4812, 1478, 2819, 1516, 1514, 1514, 1514, 1514, 1514, 1514,
+
+     1514, 1514, 4779, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
+     1514, 4637, 4771, 4636, 2819, 1478, 2819, 1516, 2819, 1478,
+     4813, 1516, 4639, 4767, 1478, 4638, 1516, 4769, 1478, 4778,
+     1516, 4640, 4725, 2819, 2819, 4725, 1514, 1514, 1514, 1514,
+     4770, 4772, 3701, 3701, 3701, 3701, 3701, 3701, 3701, 3701,
+     2888, 4815, 2819, 4642, 2819, 4641, 4643, 1478, 1612, 1516,
+     4816, 2819, 1612, 1614, 4775, 2819, 4780, 1614, 1611, 1611,
+     1611, 1611, 4777, 4774, 2819, 4644, 2819, 2819, 2819, 2819,
+     2819, 4781, 2819, 4782, 1612, 2819, 4784, 4773, 2819, 1614,
+     4783, 2819, 4787, 2819, 2819, 4788, 4785, 2819, 2819, 2819,
+
+     4790, 4786, 4795, 4645, 2819, 2819, 4789, 2819, 2819, 4793,
+     4798, 4794, 2819, 2819, 2819, 2819, 4791, 4792, 4820, 2819,
+     4806, 2819, 4796, 4684, 4822, 4821, 4797, 4810, 4823, 4799,
+     4805, 4807, 4803, 4809, 4659, 4709, 4709, 4709, 4709, 4709,
+     4709, 4709, 4709, 4709, 4709, 4709, 4709, 4709, 4709, 4709,
+     4709, 4709, 4709, 4709, 4709, 2819, 2819, 4827, 4709, 4709,
+     4709, 4709, 4709, 4709, 4709, 2819, 4811, 4814, 4817, 3781,
+     4828, 4829, 3781, 4830, 4800, 4679, 4824, 4818, 4802, 4801,
+     4832, 4819, 4709, 4709, 4709, 4691, 4804, 4811, 4825, 4692,
+     4826, 2888, 2888, 4694, 4833, 4835, 4836, 4837, 4710, 4831,
+
+     4693, 4834, 4838, 4839, 3866, 4840, 4841, 4842, 4843, 4844,
+     2892, 4709, 4709, 4709, 4720, 4720, 4720, 4720, 4720, 4720,
+     4720, 4720, 4720, 4720, 4720, 4720, 4720, 4720, 4720, 4720,
+     4720, 4720, 4720, 4720, 4847, 4848, 4849, 4720, 4720, 4720,
+     4720, 4720, 4720, 4720, 3891, 4845, 4850, 3891, 4845, 4851,
+     4852, 4853, 4854, 4857, 4858, 4859, 4860, 4847, 4861, 4864,
+     4865, 4720, 4720, 4720, 4862, 4866, 4867, 4868, 4869, 2892,
+     4846, 4870, 2939, 4725, 4863, 4872, 4725, 4873, 4876, 4877,
+     4878, 4879, 4880, 4881, 4882, 4883, 4884, 4885, 4886, 4887,
+     4720, 4720, 4720, 4729, 4729, 4729, 4729, 4729, 4729, 4729,
+
+     4729, 4729, 4729, 4729, 4729, 4729, 4729, 4729, 4729, 4729,
+     4729, 4729, 4729, 4888, 4889, 4890, 4729, 4729, 4729, 4729,
+     4729, 4729, 4729, 4891, 4892, 4893, 2939, 4894, 4871, 4895,
+     4896, 4897, 2939, 4898, 4900, 4901, 4904, 4899, 4902, 4903,
+     4729, 4729, 4729, 4905, 4907, 4908, 4909, 4910, 4906, 4911,
+     4912, 4913, 4915, 4916, 4917, 4918, 2955, 2955, 2955, 4977,
+     2955, 4716, 4725, 4931, 4923, 4725, 4921, 4914, 4922, 4729,
+     4729, 4729, 4720, 4720, 4720, 4720, 4720, 4720, 4720, 4720,
+     4720, 4720, 4720, 4720, 4720, 4720, 4720, 4720, 4720, 4720,
+     4720, 4720, 2955, 2955, 2955, 4720, 4720, 4720, 4720, 4720,
+
+     4720, 4720, 2955, 4919, 2955, 2955, 4925, 2955, 2955, 4926,
+     2955, 4928, 2987, 4920, 4927, 2955, 2955, 4929, 2955, 4720,
+     4768, 4720, 4934, 2955, 4936, 2955, 4930, 4935, 2955, 2955,
+     4938, 2955, 4937, 2955, 2955, 4939, 4940, 2955, 4941, 2955,
+     4942, 4978, 4947, 4944, 4946, 1926, 4981, 4943, 4720, 4720,
+     4720, 4729, 4729, 4729, 4729, 4729, 4729, 4729, 4729, 4729,
+     4729, 4729, 4729, 4729, 4729, 4729, 4729, 4729, 4729, 4729,
+     4729, 2955, 2955, 2955, 4729, 4729, 4729, 4729, 4729, 4729,
+     4729, 2955, 2955, 2955, 2955, 2955, 2955, 4949, 4948, 4950,
+     4945, 2987, 2955, 4954, 2955, 4951, 2955, 4953, 4729, 4776,
+
+     4729, 2955, 4952, 2955, 4955, 2955, 4958, 2955, 4959, 2955,
+     2955, 4956, 2955, 2987, 2955, 4957, 4969, 4982, 4960, 4961,
+     4983, 4984, 4976, 4968, 4974, 4985, 4970, 4729, 4729, 4729,
+     4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
+     4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
+     2955, 2955, 2955, 4855, 4855, 4855, 4855, 4855, 4855, 4855,
+     2955, 2955, 2819, 2955, 3032, 2819, 2955, 4971, 2955, 2819,
+     4963, 4962, 4979, 4764, 4965, 4964, 4980, 4855, 4855, 4855,
+     4966, 4973, 4967, 4972, 4975, 4986, 4987, 4988, 4989, 4990,
+     4991, 4992, 4993, 4856, 4994, 4995, 4996, 4997, 3032, 4998,
+
+     4999, 3032, 5000, 5001, 5002, 5004, 4855, 4855, 4855, 4720,
+     4720, 4720, 4720, 4720, 4720, 4720, 4720, 4720, 4720, 4720,
+     4720, 4720, 4720, 4720, 4720, 4720, 4720, 4720, 4720, 5005,
+     5006, 5007, 4720, 4720, 4720, 4720, 4720, 4720, 4720, 5003,
+     5008, 5011, 5012, 5009, 4906, 5013, 5014, 2955, 2955, 2955,
+     2955, 2955, 5049, 5050, 2955, 5017, 4720, 4720, 4720, 5010,
+     5016, 3068, 5018, 2955, 2955, 2955, 2955, 2955, 5015, 5022,
+     2955, 5019, 5020, 5023, 5024, 2955, 2955, 2955, 2955, 5026,
+     5029, 5033, 5028, 5021, 5048, 4720, 4720, 4720, 4874, 4874,
+     4874, 4874, 4874, 4874, 4874, 4874, 4874, 4874, 4874, 4874,
+
+     4874, 4874, 4874, 4874, 4874, 4874, 4874, 4874, 2955, 2955,
+     2955, 4874, 4874, 4874, 4874, 4874, 4874, 4874, 2955, 2955,
+     2955, 5025, 2955, 2955, 2955, 5030, 5031, 3068, 5027, 5032,
+     2955, 2955, 2955, 5034, 2955, 4874, 4874, 4874, 2955, 2955,
+     5040, 5041, 2955, 3068, 4875, 5035, 5036, 2955, 5051, 5052,
+     5037, 5046, 1926, 5053, 5038, 4964, 5054, 5055, 5042, 5039,
+     5056, 5057, 5045, 5058, 4874, 4874, 4874, 4720, 4720, 4720,
+     4720, 4720, 4720, 4720, 4720, 4720, 4720, 4720, 4720, 4720,
+     4720, 4720, 4720, 4720, 4720, 4720, 4720, 2955, 5059, 5060,
+     4720, 4720, 4720, 4720, 4720, 4720, 4720, 2955, 5061, 5062,
+
+     5063, 5043, 5064, 5047, 1926, 5065, 5066, 1926, 5067, 5068,
+     5069, 5070, 1926, 1926, 4720, 4924, 4720, 5044, 5071, 5072,
+     5073, 5075, 5076, 5077, 5078, 2017, 5079, 5080, 2017, 5081,
+     5082, 5083, 2018, 5084, 2078, 5085, 5074, 2019, 5086, 5087,
+     5091, 5092, 5093, 4720, 4720, 4720, 4874, 4874, 4874, 4874,
+     4874, 4874, 4874, 4874, 4874, 4874, 4874, 4874, 4874, 4874,
+     4874, 4874, 4874, 4874, 4874, 4874, 5094, 5088, 5098, 4874,
+     4874, 4874, 4874, 4874, 4874, 4874, 5089, 5095, 5099, 5100,
+     5090, 5101, 5102, 5103, 2078, 5104, 2078, 5106, 5107, 5096,
+     5108, 5097, 5105, 4874, 4932, 4874, 5109, 5110, 2078, 5111,
+
+     5112, 5113, 4933, 5114, 5115, 5117, 2078, 5118, 5117, 5119,
+     5120, 5121, 3179, 5122, 5123, 5124, 5125, 5126, 5127, 5128,
+     5129, 5130, 4874, 4874, 4874, 5131, 5132, 5133, 3179, 5134,
+     4172, 5135, 3179, 5136, 5137, 5138, 4906, 5139, 3179, 3179,
+     5140, 5141, 5142, 5144, 5145, 5146, 5147, 2955, 2955, 2955,
+     2955, 5178, 2955, 2955, 2955, 2955, 2955, 5179, 5143, 5149,
+     3213, 5150, 2955, 5152, 5155, 5154, 2955, 2955, 5148, 2955,
+     5151, 5153, 2955, 5156, 5159, 2955, 2955, 2955, 5158, 5160,
+     5157, 2955, 5162, 5163, 5161, 2955, 2955, 2955, 2955, 5165,
+     2955, 5166, 3213, 2955, 2955, 2955, 5164, 2955, 2955, 2955,
+
+     2955, 2955, 2955, 2955, 5172, 5170, 2955, 5180, 3213, 5177,
+     2136, 3213, 5167, 5168, 5175, 5171, 5169, 4964, 3213, 5176,
+     5173, 5174, 5181, 5182, 5183, 5184, 5187, 5188, 5189, 5190,
+     5191, 5194, 5195, 5196, 5185, 5197, 5198, 5199, 5186, 2136,
+     5200, 2136, 5192, 5202, 5193, 5203, 5204, 5201, 5205, 5206,
+     5207, 2136, 5208, 5209, 5210, 5211, 5212, 2099, 5213, 5214,
+     5215, 3289, 5216, 5217, 5218, 5219, 5222, 5223, 5224, 5225,
+     5226, 5229, 5230, 5231, 5220, 5232, 5233, 5234, 5221, 5213,
+     3289, 5235, 5227, 3289, 5228, 5237, 5238, 5239, 5236, 5240,
+     5241, 3289, 5242, 5243, 5244, 5245, 5246, 2136, 5247, 5248,
+
+     5249, 5250, 5251, 3304, 5252, 5253, 5254, 5255, 5256, 5257,
+     5258, 5259, 5260, 5261, 5262, 5263, 3304, 5264, 5265, 3304,
+     5266, 5267, 5268, 5269, 5270, 3304, 3304, 5271, 4906, 5272,
+     5273, 5275, 5276, 5277, 5278, 2955, 2955, 2955, 2955, 2955,
+     2955, 2955, 2955, 5281, 2955, 2955, 5274, 5280, 3339, 5284,
+     2955, 5282, 5287, 5286, 2955, 2955, 5279, 2955, 5289, 5283,
+     2955, 5285, 5288, 5290, 2955, 2955, 2955, 5292, 5293, 2955,
+     2955, 5294, 2955, 5295, 2955, 5297, 5291, 3339, 2955, 2955,
+     2955, 5298, 2955, 2955, 2955, 2955, 2955, 2955, 5296, 2955,
+     2955, 5305, 5303, 2955, 2955, 3339, 5311, 5310, 5308, 5301,
+
+     3339, 5299, 5300, 3339, 4964, 5302, 5304, 5306, 5307, 5312,
+     5309, 4754, 2819, 2819, 5314, 5315, 2236, 5316, 5317, 5313,
+     5318, 5319, 5322, 5323, 5324, 5325, 5326, 5329, 5330, 5331,
+     5320, 5332, 5333, 5334, 5321, 2236, 5335, 4801, 5327, 2236,
+     5328, 5337, 5338, 5336, 5339, 5340, 5341, 2236, 5342, 5343,
+     5344, 5345, 5346, 2236, 5347, 5348, 5349, 5350, 3402, 5351,
+     5352, 5353, 5354, 5355, 5356, 5357, 5358, 5359, 5360, 5361,
+     5362, 3402, 5363, 5364, 3402, 5365, 5366, 5367, 5368, 3402,
+     3402, 5369, 5370, 5371, 5373, 5374, 5375, 5376, 2955, 2955,
+     2955, 2955, 2257, 2955, 2955, 2955, 2955, 2955, 5407, 5372,
+
+     5378, 3435, 5379, 2955, 5381, 5384, 5383, 2955, 2955, 5377,
+     2955, 5380, 5382, 2955, 5385, 5388, 2955, 2955, 2955, 5387,
+     5389, 5386, 2955, 5391, 5392, 5390, 2955, 2955, 2955, 2955,
+     5394, 2955, 5395, 3435, 2955, 2955, 2955, 5393, 2955, 2955,
+     2955, 5407, 2955, 2955, 5401, 5399, 2955, 2955, 5408, 3435,
+     5406, 3435, 5408, 5396, 5397, 5400, 5398, 3435, 5403, 5404,
+     5402, 5409, 5405, 5410, 2955, 2955, 5413, 5414, 5415, 2819,
+     2819, 5411, 5418, 2325, 2325, 2325, 2325, 3494, 5427, 3506,
+     4500, 5417, 5003, 5430, 5412, 5431, 3494, 3519, 5416, 5413,
+     3529, 4501, 4501, 4501, 2328, 5421, 5421, 3533, 5418, 2325,
+
+     2325, 2325, 2325, 3506, 2481, 5438, 4500, 4503, 4503, 4503,
+     4503, 5442, 5429, 5429, 2326, 3519, 5443, 4501, 4501, 4501,
+     2328, 5444, 5422, 5445, 5433, 5433, 5423, 2573, 2328, 5424,
+     4508, 4508, 4508, 4508, 4509, 4509, 4509, 4509, 3529, 5425,
+     3533, 5426, 3502, 4509, 4509, 4509, 4509, 5435, 5435, 5437,
+     5437, 2490, 2490, 2490, 2490, 4511, 4531, 4531, 4531, 4531,
+     2551, 2573, 5448, 5449, 4511, 5450, 5451, 2491, 2552, 4535,
+     4535, 4535, 4535, 5439, 5439, 5439, 5439, 5452, 5453, 5455,
+     4536, 4535, 4535, 4535, 4535, 4539, 4539, 4539, 4539, 5456,
+     3567, 5457, 4540, 5458, 3567, 5459, 8398, 8398, 8398, 8398,
+
+     5460, 5461, 3567, 8398, 1461, 1461, 1461, 1461, 5447, 5447,
+     5447, 5447, 5454, 5454, 5454, 5454, 5462, 5463, 5464, 5465,
+     1462, 5466, 5467, 5468, 5469, 1464, 5470, 5471, 5472, 1478,
+     5473, 5475, 5476, 5477, 5478, 5479, 5480, 4595, 5486, 5474,
+     5487, 4585, 4585, 4585, 4585, 4585, 4585, 4585, 4585, 3569,
+     4595, 5488, 5489, 5492, 2582, 5485, 5490, 5441, 5446, 5447,
+     5447, 5446, 4587, 3623, 1477, 5491, 4587, 3624, 2631, 3623,
+     5532, 5533, 5534, 3624, 4589, 4589, 4589, 5535, 2699, 1478,
+     4589, 4589, 4589, 2699, 5542, 1479, 4617, 4591, 4591, 4591,
+     4591, 2720, 2720, 2726, 5481, 5536, 5536, 5536, 5536, 1504,
+
+     2726, 5483, 5483, 5483, 5483, 5546, 1480, 1481, 5547, 1482,
+     1483, 1484, 2613, 5548, 5549, 1485, 1486, 1487, 1488, 1489,
+     5551, 1490, 2616, 5552, 1491, 1492, 1493, 1494, 1514, 1514,
+     1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
+     5553, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1478,
+     5554, 1516, 5555, 1478, 5556, 1516, 5557, 1478, 5558, 1516,
+     5493, 5559, 1478, 5561, 1516, 5562, 1478, 5563, 1516, 5564,
+     5494, 5565, 5498, 5498, 5498, 5498, 8398, 8398, 8398, 8398,
+     5566, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
+     1514, 1514, 1514, 1478, 5497, 1516, 5567, 5568, 5569, 5495,
+
+     5496, 5570, 1478, 5571, 1516, 5572, 1478, 5574, 1516, 5573,
+     1478, 5575, 1516, 1514, 1514, 1514, 1514, 5576, 4616, 4616,
+     4616, 4616, 1514, 1514, 1514, 1514, 5577, 5578, 1514, 1514,
+     1514, 1514, 4725, 5579, 1478, 4725, 1516, 5583, 5501, 1478,
+     5584, 1516, 5537, 1478, 5586, 1516, 5499, 5500, 5587, 1478,
+     5502, 1516, 1514, 1514, 1514, 1514, 5588, 1514, 1514, 1514,
+     1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
+     1514, 1514, 1514, 1478, 5589, 1516, 5590, 4702, 1478, 5504,
+     1516, 4702, 1478, 5591, 1516, 5592, 1478, 5560, 1516, 5503,
+     1478, 5593, 1516, 5594, 1514, 1514, 1514, 1514, 5595, 1514,
+
+     1514, 1514, 1514, 1514, 1514, 1514, 1514, 5596, 5544, 5506,
+     5597, 5544, 5598, 5505, 5507, 1478, 5599, 1516, 4725, 5508,
+     1478, 4725, 1516, 5601, 1478, 5602, 1516, 1514, 1514, 1514,
+     1514, 5603, 5509, 5545, 1514, 1514, 1514, 1514, 5606, 1514,
+     1514, 1514, 1514, 1514, 1514, 1514, 1514, 5608, 1478, 5607,
+     1516, 5511, 5607, 5610, 5611, 1478, 5512, 1516, 5581, 5510,
+     1478, 5581, 1516, 5612, 1478, 5613, 1516, 1514, 1514, 1514,
+     1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
+     1514, 1514, 1514, 4701, 5609, 5614, 5513, 5609, 1478, 5615,
+     1516, 5616, 1478, 5617, 1516, 5620, 1478, 5514, 1516, 5621,
+
+     1478, 5618, 1516, 5622, 5618, 5624, 5515, 5625, 5516, 1514,
+     1514, 1514, 1514, 1514, 1514, 1514, 1514, 5623, 5517, 5626,
+     5623, 5627, 5518, 1514, 1514, 1514, 1514, 5628, 5596, 5629,
+     1478, 5630, 1516, 5635, 1478, 5636, 1516, 5637, 5520, 5638,
+     5519, 5639, 2819, 2888, 1478, 5666, 1516, 1514, 1514, 1514,
+     1514, 5631, 1514, 1514, 1514, 1514, 5526, 5526, 5526, 5526,
+     5521, 5528, 5528, 5528, 5528, 2819, 5632, 5619, 1478, 2819,
+     1516, 2819, 5523, 1478, 5683, 1516, 5673, 1478, 5644, 1516,
+     5522, 5641, 1478, 2819, 1516, 1514, 1514, 1514, 1514, 1514,
+     1514, 1514, 1514, 1514, 1514, 1514, 1514, 2819, 5640, 2819,
+
+     5524, 5525, 8398, 8398, 8398, 8398, 1478, 5643, 1516, 2819,
+     1478, 2819, 1516, 5642, 1478, 5664, 1516, 5538, 5538, 5538,
+     5538, 1611, 1611, 1611, 1611, 2819, 2819, 5539, 2819, 5646,
+     5527, 2819, 2819, 5607, 5645, 5649, 5607, 1612, 5530, 5653,
+     2819, 2819, 1614, 5650, 2819, 5648, 2819, 2819, 2819, 2819,
+     5531, 2819, 5529, 2819, 2819, 5655, 2819, 5654, 2819, 5541,
+     5668, 2819, 5656, 5684, 5659, 2819, 5657, 5667, 5658, 5665,
+     5660, 5662, 2819, 2819, 5661, 5685, 5671, 5669, 5678, 2819,
+     5686, 2888, 5681, 5540, 5543, 5582, 5582, 5582, 5582, 5582,
+     5582, 5582, 5582, 5582, 5582, 5582, 5582, 5582, 5582, 5582,
+
+     5582, 5582, 5582, 5582, 5582, 3749, 3749, 3749, 5582, 5582,
+     5582, 5582, 5582, 5582, 5582, 3749, 3749, 3749, 3749, 3749,
+     3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749,
+     3749, 3749, 5582, 5582, 5582, 3749, 3749, 3749, 3749, 3749,
+     3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749,
+     3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749,
+     3749, 5582, 5582, 5582, 5585, 5585, 5585, 5585, 5585, 5585,
+     5585, 5585, 5585, 5585, 5585, 5585, 5585, 5585, 5585, 5585,
+     5585, 5585, 5585, 5585, 2819, 2819, 2819, 5585, 5585, 5585,
+     5585, 5585, 5585, 5585, 2819, 2819, 2819, 5672, 2819, 5680,
+
+     5688, 5674, 5689, 5690, 5691, 5670, 5643, 5692, 5693, 5682,
+     5679, 5585, 5585, 5585, 5694, 5695, 5675, 5609, 5618, 5623,
+     5609, 5618, 5623, 4725, 5696, 5697, 4725, 5698, 2888, 5699,
+     5700, 2888, 5701, 5702, 5703, 5704, 2888, 2888, 5705, 5706,
+     5585, 5585, 5585, 5600, 5600, 5600, 5600, 5600, 5600, 5600,
+     5600, 5600, 5600, 5600, 5600, 5600, 5600, 5600, 5600, 5600,
+     5600, 5600, 5600, 2819, 2819, 2819, 5600, 5600, 5600, 5600,
+     5600, 5600, 5600, 5707, 5709, 5710, 5711, 5712, 5687, 5714,
+     2890, 5717, 5714, 5718, 5663, 5720, 5721, 5722, 5723, 5708,
+     5600, 5600, 5600, 5724, 4848, 4848, 5725, 5726, 5727, 5728,
+
+     5729, 2890, 5730, 5731, 5715, 5732, 5733, 5734, 5736, 5737,
+     5738, 5739, 5741, 5607, 5742, 5743, 5607, 5744, 5745, 5600,
+     5600, 5600, 5604, 5604, 5604, 5604, 5604, 5604, 5604, 5604,
+     5604, 5604, 5604, 5604, 5604, 5604, 5604, 5604, 5604, 5604,
+     5604, 5604, 5746, 5747, 2939, 5604, 5604, 5604, 5604, 5604,
+     5604, 5604, 5609, 5748, 5749, 5609, 5750, 5751, 5752, 5754,
+     5755, 5756, 5757, 5623, 5758, 5618, 5623, 2939, 5618, 5604,
+     5604, 5604, 5759, 5760, 5761, 5762, 5763, 5764, 5731, 5765,
+     5766, 5605, 5767, 5769, 5770, 5771, 5772, 5773, 5774, 5775,
+     5776, 2955, 5830, 2955, 5831, 5805, 5807, 5768, 5604, 5604,
+
+     5604, 5633, 5633, 5633, 5633, 5633, 5633, 5633, 5633, 5633,
+     5633, 5633, 5633, 5633, 5633, 5633, 5633, 5633, 5633, 5633,
+     5633, 2955, 2955, 2955, 5633, 5633, 5633, 5633, 5633, 5633,
+     5633, 5753, 2955, 2955, 2955, 2955, 5777, 2955, 5778, 5779,
+     5781, 2955, 5782, 5783, 2955, 2955, 2955, 2955, 5633, 5633,
+     5633, 5780, 5787, 2955, 5792, 5788, 5607, 5784, 5789, 5607,
+     5786, 2955, 2955, 2955, 5609, 2955, 2955, 5609, 5814, 2987,
+     5793, 5834, 5795, 5809, 5815, 5835, 2955, 5633, 5633, 5633,
+     5634, 5634, 5634, 5634, 5634, 5634, 5634, 5634, 5634, 5634,
+     5634, 5634, 5634, 5634, 5634, 5634, 5634, 5634, 5634, 5634,
+
+     2955, 5797, 2955, 5634, 5634, 5634, 5634, 5634, 5634, 5634,
+     2955, 2955, 2955, 2955, 2955, 2955, 2955, 5794, 2955, 2955,
+     2955, 5836, 5837, 2955, 2955, 5806, 2955, 5634, 5634, 5634,
+     5796, 5799, 5798, 2955, 2955, 5800, 5803, 5801, 5802, 2955,
+     5810, 5811, 5812, 5618, 5623, 5813, 5618, 5623, 5808, 5823,
+     2955, 3032, 5838, 2987, 5781, 5817, 5634, 5634, 5634, 5600,
+     5600, 5600, 5600, 5600, 5600, 5600, 5600, 5600, 5600, 5600,
+     5600, 5600, 5600, 5600, 5600, 5600, 5600, 5600, 5600, 2819,
+     2955, 5839, 5600, 5600, 5600, 5600, 5600, 5600, 5600, 2955,
+     2955, 5816, 2955, 2955, 2955, 2955, 5824, 5840, 5832, 5818,
+
+     5822, 2955, 2955, 2955, 5827, 2955, 5600, 5647, 5600, 5804,
+     2819, 5841, 5825, 5826, 5819, 5842, 5829, 5843, 5828, 3032,
+     5844, 5845, 5846, 5847, 5852, 3032, 5853, 5854, 5855, 5833,
+     5836, 5856, 5857, 3032, 5858, 5600, 5600, 5600, 5604, 5604,
+     5604, 5604, 5604, 5604, 5604, 5604, 5604, 5604, 5604, 5604,
+     5604, 5604, 5604, 5604, 5604, 5604, 5604, 5604, 5859, 5860,
+     5861, 5604, 5604, 5604, 5604, 5604, 5604, 5604, 5862, 5863,
+     2955, 2955, 2955, 2955, 2955, 2955, 2955, 2955, 5866, 2955,
+     5867, 2955, 5869, 2955, 2955, 5604, 5651, 5604, 5864, 5865,
+     5870, 3068, 5871, 5873, 3068, 5868, 2955, 5652, 2955, 2955,
+
+     5872, 2955, 2955, 2955, 5884, 2955, 5893, 5885, 5887, 5886,
+     5894, 5881, 5874, 3068, 5604, 5604, 5604, 5633, 5633, 5633,
+     5633, 5633, 5633, 5633, 5633, 5633, 5633, 5633, 5633, 5633,
+     5633, 5633, 5633, 5633, 5633, 5633, 5633, 2955, 2955, 2955,
+     5633, 5633, 5633, 5633, 5633, 5633, 5633, 2955, 2955, 2955,
+     2955, 2955, 5895, 2955, 2955, 1926, 5875, 5876, 5882, 2955,
+     2955, 5888, 5889, 5890, 5633, 5676, 5633, 5883, 3068, 5896,
+     5866, 5892, 5877, 5897, 5891, 5898, 5899, 5900, 5901, 1926,
+     5902, 5903, 5904, 5905, 5906, 5907, 1926, 5908, 5909, 5910,
+     5911, 5912, 1926, 5633, 5633, 5633, 5634, 5634, 5634, 5634,
+
+     5634, 5634, 5634, 5634, 5634, 5634, 5634, 5634, 5634, 5634,
+     5634, 5634, 5634, 5634, 5634, 5634, 5913, 5914, 5915, 5634,
+     5634, 5634, 5634, 5634, 5634, 5634, 5916, 5917, 5918, 5919,
+     5920, 5921, 5923, 5920, 5921, 5924, 5925, 5926, 5927, 2078,
+     5928, 5922, 5929, 5634, 5677, 5634, 5930, 5931, 5932, 5933,
+     5934, 5935, 5936, 5937, 5938, 5939, 2078, 5940, 5941, 2078,
+     5942, 5943, 5944, 5945, 2078, 2078, 5946, 5947, 5950, 5951,
+     5952, 5953, 5634, 5634, 5634, 5716, 5716, 5716, 5716, 5716,
+     5716, 5716, 5716, 5716, 5716, 5716, 5716, 5716, 5716, 5716,
+     5716, 5716, 5716, 5716, 5716, 3894, 3894, 3894, 5716, 5716,
+
+     5716, 5716, 5716, 5716, 5716, 3894, 3894, 3894, 3894, 3894,
+     3894, 3894, 3894, 3894, 3894, 3894, 3894, 3894, 3894, 3894,
+     3894, 3894, 5716, 5716, 5716, 3894, 3894, 3894, 3894, 3894,
+     3894, 3894, 3894, 3894, 3894, 3894, 3894, 3894, 3894, 3894,
+     3894, 3894, 3894, 3894, 3894, 3894, 3894, 3894, 3894, 3894,
+     3894, 5716, 5716, 5716, 5719, 5719, 5719, 5719, 5719, 5719,
+     5719, 5719, 5719, 5719, 5719, 5719, 5719, 5719, 5719, 5719,
+     5719, 5719, 5719, 5719, 5948, 4172, 5954, 5719, 5719, 5719,
+     5719, 5719, 5719, 5719, 5117, 5955, 5956, 5117, 3179, 5957,
+     5949, 5958, 5959, 5960, 5961, 5962, 3179, 5963, 5964, 5965,
+
+     5966, 5719, 5719, 5719, 5967, 5968, 3179, 5969, 5970, 4172,
+     5971, 5972, 5973, 3179, 5974, 5975, 5976, 5977, 5978, 5979,
+     2955, 2955, 2955, 2955, 6006, 5997, 6000, 6007, 5984, 5982,
+     5719, 5719, 5719, 5735, 5735, 5735, 5735, 5735, 5735, 5735,
+     5735, 5735, 5735, 5735, 5735, 5735, 5735, 5735, 5735, 5735,
+     5735, 5735, 5735, 2955, 2955, 2955, 5735, 5735, 5735, 5735,
+     5735, 5735, 5735, 2955, 2955, 2955, 2955, 2955, 2955, 5980,
+     5981, 2955, 2955, 3213, 5985, 3213, 5986, 2955, 2955, 2955,
+     5735, 5735, 5735, 5983, 5987, 2955, 2955, 5988, 5989, 2955,
+     2955, 2955, 2955, 5992, 2955, 5998, 5990, 5991, 5994, 5993,
+
+     3213, 2955, 6008, 6001, 6009, 6002, 3213, 5999, 5995, 5735,
+     5735, 5735, 5604, 5604, 5604, 5604, 5604, 5604, 5604, 5604,
+     5604, 5604, 5604, 5604, 5604, 5604, 5604, 5604, 5604, 5604,
+     5604, 5604, 2955, 2955, 2955, 5604, 5604, 5604, 5604, 5604,
+     5604, 5604, 6003, 2955, 6010, 2136, 6011, 6012, 6013, 6004,
+     6014, 5996, 6015, 6016, 6005, 6017, 6018, 6019, 6020, 5604,
+     5604, 5604, 6021, 6022, 2136, 6023, 6024, 2136, 6025, 6026,
+     6027, 5740, 6028, 6029, 2136, 2136, 6030, 6031, 6034, 6035,
+     6036, 6037, 3289, 6038, 6039, 6040, 6041, 3289, 5604, 5604,
+     5604, 5633, 5633, 5633, 5633, 5633, 5633, 5633, 5633, 5633,
+
+     5633, 5633, 5633, 5633, 5633, 5633, 5633, 5633, 5633, 5633,
+     5633, 6032, 6042, 6043, 5633, 5633, 5633, 5633, 5633, 5633,
+     5633, 6044, 6045, 6046, 6047, 6048, 6049, 6033, 6050, 6051,
+     6052, 6053, 3289, 6054, 6055, 3289, 6056, 6059, 5633, 5633,
+     5633, 6057, 6058, 3289, 3289, 6060, 6061, 6062, 6064, 6065,
+     6066, 6067, 6068, 6069, 6070, 6071, 3304, 6072, 6073, 6074,
+     6075, 6076, 6077, 6063, 3304, 6078, 6079, 5633, 5633, 5633,
+     5634, 5634, 5634, 5634, 5634, 5634, 5634, 5634, 5634, 5634,
+     5634, 5634, 5634, 5634, 5634, 5634, 5634, 5634, 5634, 5634,
+     6080, 6081, 6082, 5634, 5634, 5634, 5634, 5634, 5634, 5634,
+
+     6083, 3304, 6084, 6085, 6086, 6070, 6087, 6088, 3304, 6089,
+     6090, 6091, 6092, 6093, 6094, 2955, 2955, 5634, 5634, 5634,
+     2955, 2955, 2955, 2955, 2955, 2955, 2955, 2955, 6097, 2955,
+     6098, 6095, 6096, 6100, 6101, 2955, 6102, 2955, 6113, 6122,
+     6116, 6123, 3339, 6099, 6103, 6104, 5634, 5634, 5634, 5735,
+     5735, 5735, 5735, 5735, 5735, 5735, 5735, 5735, 5735, 5735,
+     5735, 5735, 5735, 5735, 5735, 5735, 5735, 5735, 5735, 2955,
+     2955, 2955, 5735, 5735, 5735, 5735, 5735, 5735, 5735, 2955,
+     2955, 2955, 2955, 2955, 2955, 6105, 3339, 2955, 2955, 6106,
+     6107, 6125, 6126, 2955, 2955, 6110, 5735, 5785, 5735, 6114,
+
+     2955, 6109, 3339, 6111, 6097, 6108, 6112, 2955, 3339, 2955,
+     2955, 6117, 2955, 6115, 2819, 6127, 6128, 2236, 6129, 6119,
+     6118, 6130, 6124, 6121, 6131, 5735, 5735, 5735, 5604, 5604,
+     5604, 5604, 5604, 5604, 5604, 5604, 5604, 5604, 5604, 5604,
+     5604, 5604, 5604, 5604, 5604, 5604, 5604, 5604, 2955, 6132,
+     6133, 5604, 5604, 5604, 5604, 5604, 5604, 5604, 6134, 6135,
+     6136, 6137, 6138, 6120, 6139, 6140, 2236, 6141, 6142, 2236,
+     6143, 6144, 6145, 6146, 2236, 5604, 5790, 5604, 2236, 6147,
+     6148, 6149, 6151, 6152, 6153, 6154, 6155, 5791, 6156, 6157,
+     3402, 6158, 6159, 6160, 6161, 6162, 6163, 6150, 3402, 6164,
+
+     6165, 6166, 6167, 6168, 5604, 5604, 5604, 5633, 5633, 5633,
+     5633, 5633, 5633, 5633, 5633, 5633, 5633, 5633, 5633, 5633,
+     5633, 5633, 5633, 5633, 5633, 5633, 5633, 6169, 3402, 6170,
+     5633, 5633, 5633, 5633, 5633, 5633, 5633, 6171, 6172, 6173,
+     6174, 3402, 6175, 6176, 6177, 6178, 6179, 6180, 2955, 2955,
+     2955, 2955, 2955, 2955, 5633, 5820, 5633, 2955, 2955, 6183,
+     2955, 2955, 2955, 6186, 6181, 6182, 2955, 6185, 6187, 3435,
+     2955, 3435, 6184, 6198, 2955, 6188, 6207, 6189, 2955, 6199,
+     6208, 6201, 6190, 5633, 5633, 5633, 5634, 5634, 5634, 5634,
+     5634, 5634, 5634, 5634, 5634, 5634, 5634, 5634, 5634, 5634,
+
+     5634, 5634, 5634, 5634, 5634, 5634, 2955, 2955, 2955, 5634,
+     5634, 5634, 5634, 5634, 5634, 5634, 2955, 2955, 2955, 2955,
+     2955, 2955, 2955, 6212, 6213, 6191, 6192, 6200, 6194, 2955,
+     6195, 2955, 3435, 5634, 5821, 5634, 2955, 3435, 6196, 6197,
+     6202, 6193, 6203, 2955, 2955, 6204, 2955, 3494, 3494, 6219,
+     6220, 6221, 6222, 6223, 3506, 6206, 3506, 6224, 6205, 6210,
+     3519, 3519, 5634, 5634, 5634, 5848, 5848, 5848, 5849, 5848,
+     5848, 5848, 5848, 5848, 5848, 5848, 5848, 5848, 5848, 5848,
+     5848, 5848, 5848, 5848, 5848, 5850, 5850, 5850, 5848, 5848,
+     5848, 5848, 5848, 5848, 5848, 5850, 5850, 5850, 5850, 5850,
+
+     5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850,
+     5850, 5850, 5848, 5848, 5848, 5850, 5850, 5850, 5850, 5850,
+     5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850,
+     5850, 5850, 5850, 5851, 5850, 5850, 5850, 5850, 5850, 5850,
+     5850, 5848, 5848, 5848, 5848, 5848, 5848, 5849, 5848, 5848,
+     5848, 5848, 5848, 5848, 5848, 5848, 5848, 5848, 5848, 5848,
+     5848, 5848, 5848, 5848, 5878, 5878, 5878, 5848, 5848, 5848,
+     5848, 5848, 5848, 5848, 5878, 5878, 5878, 5878, 5878, 5878,
+     5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878,
+     5878, 5848, 5879, 5848, 5878, 5878, 5878, 5878, 5878, 5878,
+
+     5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878,
+     5878, 5878, 5880, 5878, 5878, 5878, 5878, 5878, 5878, 5878,
+     5848, 5848, 5848, 2955, 6211, 2819, 2819, 6216, 3529, 3529,
+     3533, 3533, 6226, 2325, 2325, 2325, 2325, 6227, 6228, 6231,
+     4500, 6214, 6232, 6209, 6233, 6211, 6235, 6215, 6236, 6237,
+     6216, 6217, 6217, 6217, 2328, 3500, 3500, 3500, 3500, 6238,
+     6239, 6240, 3501, 5439, 5439, 5439, 5439, 3502, 6241, 6242,
+     4536, 1461, 1461, 1461, 1461, 6230, 6230, 6230, 6230, 6234,
+     6234, 6234, 6234, 6243, 3567, 6244, 6245, 1462, 5454, 5454,
+     5454, 5454, 1464, 6246, 6247, 6248, 1478, 6249, 6250, 6251,
+
+     6252, 6253, 6254, 6255, 6256, 6257, 6257, 6257, 6257, 6258,
+     6259, 6260, 6261, 3617, 3617, 3617, 3617, 4595, 6264, 6265,
+     3618, 6266, 6267, 6268, 6269, 1504, 6262, 6262, 6262, 6262,
+     6309, 6225, 6311, 5483, 5483, 5483, 5483, 6316, 6320, 3569,
+     6229, 6230, 6230, 6229, 2613, 6321, 1477, 2616, 5483, 5483,
+     5483, 5483, 6322, 5499, 2616, 1514, 1514, 1514, 1514, 2613,
+     6323, 1478, 6324, 1514, 1514, 1514, 1514, 1479, 6326, 2616,
+     5536, 5536, 5536, 5536, 6327, 6328, 1478, 6329, 1516, 5527,
+     5538, 5538, 5538, 5538, 1478, 6270, 1516, 6330, 1480, 1481,
+     5539, 1482, 1483, 1484, 6331, 6271, 6332, 1485, 1486, 1487,
+
+     1488, 1489, 6333, 1490, 6334, 6335, 1491, 1492, 1493, 1494,
+     1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
+     1514, 1514, 5498, 5498, 5498, 5498, 1514, 1514, 1514, 1514,
+     6336, 1478, 6337, 1516, 6338, 1478, 6339, 1516, 6340, 1478,
+     6341, 1516, 6342, 1478, 6343, 1516, 6310, 1478, 6344, 1516,
+     6330, 6276, 6276, 6276, 6276, 1514, 1514, 1514, 1514, 6319,
+     6345, 6277, 6319, 6272, 1514, 1514, 1514, 1514, 6346, 6274,
+     5607, 6273, 1478, 5607, 1516, 6347, 1478, 6348, 1516, 1514,
+     1514, 1514, 1514, 5609, 5545, 1478, 5609, 1516, 6280, 6280,
+     6280, 6280, 6275, 6281, 1514, 1514, 1514, 1514, 5623, 4701,
+
+     1478, 5623, 1516, 6283, 6283, 6283, 6283, 6350, 6353, 1478,
+     5581, 1516, 6354, 5581, 6355, 1478, 6356, 1516, 6357, 6358,
+     6359, 6278, 2647, 6360, 1478, 6361, 1516, 1514, 1514, 1514,
+     1514, 6285, 6285, 6285, 6285, 4701, 6279, 1514, 1514, 1514,
+     1514, 1514, 1514, 1514, 1514, 6362, 6363, 6282, 1478, 6365,
+     1516, 6366, 6286, 6364, 1516, 6367, 6364, 6368, 1478, 6370,
+     1516, 6371, 1478, 6372, 1516, 6289, 6289, 6289, 6289, 1514,
+     1514, 1514, 1514, 6373, 6375, 6378, 6284, 1514, 1514, 1514,
+     1514, 1514, 1514, 1514, 1514, 6379, 1478, 6380, 1516, 6381,
+     1478, 6382, 1516, 1514, 1514, 1514, 1514, 6383, 1478, 6384,
+
+     1516, 6385, 1478, 5607, 1516, 5609, 5607, 6288, 5609, 6287,
+     1514, 1514, 1514, 1514, 1478, 6386, 1516, 6295, 6295, 6295,
+     6295, 6374, 6290, 6387, 6374, 6376, 6291, 1514, 1514, 1514,
+     1514, 1478, 6377, 1516, 6292, 6388, 5618, 6389, 6296, 5618,
+     1516, 1514, 1514, 1514, 1514, 6390, 5623, 6391, 1478, 5623,
+     1516, 6300, 6300, 6300, 6300, 6301, 6301, 6301, 6301, 6392,
+     6293, 6393, 1478, 6395, 1516, 1514, 1514, 1514, 1514, 6396,
+     6394, 6397, 1478, 6394, 1516, 2819, 1478, 6294, 1516, 2819,
+     6298, 6398, 2819, 6297, 6434, 6435, 1478, 6404, 1516, 1514,
+     1514, 1514, 1514, 1514, 1514, 1514, 1514, 5526, 5526, 5526,
+
+     5526, 5528, 5528, 5528, 5528, 2819, 2819, 6299, 2819, 2819,
+     1478, 2819, 1516, 6411, 1478, 6399, 1516, 6406, 1478, 6436,
+     1516, 6402, 1478, 2819, 1516, 1514, 1514, 1514, 1514, 6302,
+     6400, 2819, 6303, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
+     1514, 6364, 6401, 6304, 6364, 6437, 1478, 6403, 1516, 5536,
+     5536, 5536, 5536, 6305, 1478, 2819, 1516, 2819, 1478, 2819,
+     1516, 6312, 6312, 6312, 6312, 5538, 5538, 5538, 5538, 2819,
+     6405, 6313, 6408, 2819, 6421, 5539, 6314, 6314, 6314, 6314,
+     8398, 8398, 8398, 8398, 6409, 2819, 8398, 2819, 6410, 2819,
+     8398, 6374, 6307, 2819, 6374, 2819, 6308, 6306, 1611, 1611,
+
+     1611, 1611, 6418, 6413, 2819, 6415, 2819, 6412, 2819, 6416,
+     6414, 2819, 2819, 2819, 1612, 2819, 2819, 2819, 6423, 1614,
+     6420, 6417, 6424, 2819, 6419, 2819, 2819, 2819, 2819, 6438,
+     6429, 6422, 6425, 6428, 6430, 6439, 6432, 2819, 6426, 6315,
+     6440, 6441, 6442, 6443, 2888, 6444, 6427, 6317, 6349, 6349,
+     6349, 6349, 6349, 6349, 6349, 6349, 6349, 6349, 6349, 6349,
+     6349, 6349, 6349, 6349, 6349, 6349, 6349, 6349, 3749, 3749,
+     3749, 6349, 6349, 6349, 6349, 6349, 6349, 6349, 3749, 3749,
+     3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749,
+     3749, 3749, 3749, 3749, 3749, 6349, 6349, 6349, 3749, 3749,
+
+     3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749,
+     3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749, 3749,
+     3749, 3749, 3749, 3749, 6349, 6349, 6349, 6351, 6351, 6351,
+     6351, 6351, 6351, 6351, 6351, 6351, 6351, 6351, 6351, 6351,
+     6351, 6351, 6351, 6351, 6351, 6351, 6351, 2819, 2819, 6445,
+     6351, 6351, 6351, 6351, 6351, 6351, 6351, 6446, 6447, 6448,
+     6449, 2888, 6450, 6451, 6452, 6453, 6454, 6455, 6431, 6433,
+     6456, 6457, 6458, 6459, 6351, 6351, 6351, 6460, 6461, 5715,
+     6394, 6463, 6466, 6394, 6467, 6468, 6352, 6469, 6470, 6471,
+     6472, 6473, 6474, 2939, 6475, 6476, 6477, 6475, 6364, 6478,
+
+     6479, 6364, 6480, 6351, 6351, 6351, 6369, 6369, 6369, 6369,
+     6369, 6369, 6369, 6369, 6369, 6369, 6369, 6369, 6369, 6369,
+     6369, 6369, 6369, 6369, 6369, 6369, 2819, 6481, 6482, 6369,
+     6369, 6369, 6369, 6369, 6369, 6369, 5714, 6483, 6484, 5714,
+     6485, 6486, 6487, 6374, 6488, 6489, 6374, 6491, 6492, 6493,
+     6494, 6495, 6490, 6369, 6369, 6369, 6496, 6497, 6498, 6499,
+     6500, 5715, 6501, 6502, 6503, 2939, 6504, 6505, 6506, 6507,
+     6508, 6509, 6394, 6510, 6511, 6394, 6512, 6513, 6514, 6515,
+     6560, 6377, 6369, 6369, 6369, 6369, 6369, 6369, 6369, 6369,
+     6369, 6369, 6369, 6369, 6369, 6369, 6369, 6369, 6369, 6369,
+
+     6369, 6369, 6369, 6369, 6369, 2955, 2955, 2955, 6369, 6369,
+     6369, 6369, 6369, 6369, 6369, 2955, 6517, 2955, 2955, 2955,
+     2955, 6516, 2955, 6522, 6518, 2987, 2955, 2955, 6525, 2955,
+     2955, 2955, 6369, 6407, 6369, 6520, 6519, 2955, 6521, 6523,
+     6524, 2955, 6527, 2955, 2955, 2955, 6529, 2955, 6531, 6533,
+     6537, 6528, 6530, 2955, 6539, 6535, 6534, 6562, 6544, 3032,
+     6563, 6369, 6369, 6369, 6462, 6462, 6462, 6462, 6462, 6462,
+     6462, 6462, 6462, 6462, 6462, 6462, 6462, 6462, 6462, 6462,
+     6462, 6462, 6462, 6462, 3894, 3894, 3894, 6462, 6462, 6462,
+     6462, 6462, 6462, 6462, 3894, 3894, 3894, 3894, 3894, 3894,
+
+     3894, 3894, 3894, 3894, 3894, 3894, 3894, 3894, 3894, 3894,
+     3894, 6462, 6462, 6462, 3894, 3894, 3894, 3894, 3894, 3894,
+     3894, 3894, 3894, 3894, 3894, 3894, 3894, 3894, 3894, 3894,
+     3894, 3894, 3894, 3894, 3894, 3894, 3894, 3894, 3894, 3894,
+     6462, 6462, 6462, 6464, 6464, 6464, 6464, 6464, 6464, 6464,
+     6464, 6464, 6464, 6464, 6464, 6464, 6464, 6464, 6464, 6464,
+     6464, 6464, 6464, 2955, 2955, 2955, 6464, 6464, 6464, 6464,
+     6464, 6464, 6464, 2955, 2955, 2955, 2955, 2955, 6564, 6565,
+     6536, 2955, 6538, 6541, 6545, 6532, 2955, 6566, 2955, 6540,
+     6464, 6464, 6464, 6546, 6542, 6543, 6475, 6364, 6374, 6475,
+
+     6364, 6374, 6465, 6547, 2955, 2955, 2955, 6550, 2955, 6567,
+     6551, 6568, 6552, 6553, 6569, 6394, 6570, 2987, 6394, 6464,
+     6464, 6464, 6369, 6369, 6369, 6369, 6369, 6369, 6369, 6369,
+     6369, 6369, 6369, 6369, 6369, 6369, 6369, 6369, 6369, 6369,
+     6369, 6369, 2955, 2955, 2955, 6369, 6369, 6369, 6369, 6369,
+     6369, 6369, 2955, 2955, 2955, 2955, 6571, 2955, 2955, 2955,
+     2955, 2955, 6572, 2819, 6573, 5849, 2819, 6558, 6548, 6369,
+     6369, 6369, 6549, 6556, 6554, 6555, 6559, 6561, 6414, 6557,
+     6574, 6575, 6576, 6577, 3032, 3032, 6578, 6579, 6580, 6581,
+     6582, 6583, 6584, 2955, 5849, 6597, 6608, 1926, 6369, 6369,
+
+     6369, 6369, 6369, 6369, 6369, 6369, 6369, 6369, 6369, 6369,
+     6369, 6369, 6369, 6369, 6369, 6369, 6369, 6369, 6369, 6369,
+     6369, 2955, 2955, 2955, 6369, 6369, 6369, 6369, 6369, 6369,
+     6369, 6585, 2955, 2955, 2955, 2955, 2955, 6588, 2955, 2955,
+     3068, 2955, 6586, 2955, 2955, 2955, 6589, 6590, 6369, 6526,
+     6369, 6587, 2955, 6592, 6595, 2955, 6594, 6591, 2955, 2955,
+     6596, 6593, 2955, 2955, 6609, 6610, 3068, 6599, 6598, 6601,
+     6611, 6612, 3068, 6600, 6613, 6614, 6606, 6369, 6369, 6369,
+     5848, 5848, 5848, 5849, 5848, 5848, 5848, 5848, 5848, 5848,
+     5848, 5848, 5848, 5848, 5848, 5848, 5848, 5848, 5848, 5848,
+
+     5850, 5850, 5850, 5848, 5848, 5848, 5848, 5848, 5848, 5848,
+     5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850,
+     5850, 5850, 5850, 5850, 5850, 5850, 5850, 5848, 5848, 5848,
+     5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850,
+     5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850,
+     5850, 5850, 5850, 5850, 5850, 5850, 5848, 5848, 5848, 5848,
+     5848, 5848, 5849, 5848, 5848, 5848, 5848, 5848, 5848, 5848,
+     5848, 5848, 5848, 5848, 5848, 5848, 5848, 5848, 5848, 5878,
+     5878, 5878, 5848, 5848, 5848, 5848, 5848, 5848, 5848, 5878,
+     5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878,
+
+     5878, 5878, 5878, 5878, 5878, 5878, 5848, 5879, 5848, 5878,
+     5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878,
+     5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878,
+     5878, 5878, 5878, 5878, 5878, 5848, 5848, 5848, 2955, 2955,
+     6615, 2955, 2955, 2955, 6616, 6617, 6618, 6619, 6620, 6621,
+     6622, 6623, 1926, 1926, 6624, 6603, 6604, 6625, 6626, 6602,
+     6627, 6605, 6628, 6629, 6607, 6630, 6631, 5920, 5921, 6632,
+     5920, 5921, 6633, 6634, 6635, 2078, 6636, 6637, 5922, 6638,
+     6639, 6640, 6641, 2078, 6642, 6643, 6644, 6645, 6646, 6647,
+     2078, 6648, 6649, 6650, 6651, 6652, 2078, 6653, 6654, 6655,
+
+     6656, 6657, 6658, 6659, 3179, 6660, 6661, 6662, 6663, 6664,
+     6665, 6666, 6667, 6668, 6669, 6670, 6671, 6672, 6673, 6674,
+     3179, 3179, 6675, 6676, 6677, 6678, 6679, 6680, 6681, 2955,
+     2955, 2955, 2955, 2955, 2955, 2955, 2955, 2955, 6682, 6685,
+     2955, 2955, 2955, 2955, 2955, 2955, 6686, 2955, 6684, 3213,
+     6683, 6689, 6692, 6687, 2955, 6696, 6688, 6691, 2955, 6690,
+     6693, 2955, 6694, 6695, 2955, 2955, 2955, 2955, 2955, 6697,
+     2955, 3213, 6698, 2955, 6705, 6706, 6707, 6708, 2136, 6709,
+     6710, 6701, 3213, 6700, 6711, 6699, 6703, 6702, 6712, 6713,
+     6714, 6704, 2136, 6715, 6716, 6717, 6718, 6719, 6720, 2136,
+
+     6721, 6722, 6723, 6707, 6724, 6725, 2136, 6726, 6727, 6728,
+     6729, 6730, 6731, 6732, 6733, 6734, 3289, 6735, 6736, 6737,
+     6738, 6739, 6740, 3289, 6741, 6742, 6743, 6744, 6745, 6746,
+     3289, 6747, 6748, 6749, 6750, 6751, 3289, 6752, 6753, 6754,
+     6755, 6756, 6757, 6758, 3304, 6759, 6759, 6759, 6759, 6760,
+     6761, 6762, 6763, 6764, 6765, 6766, 6767, 6768, 6769, 6770,
+     6771, 6772, 6773, 6774, 3304, 3304, 6775, 6776, 6777, 6778,
+     6779, 6780, 6781, 2955, 2955, 6759, 6759, 6759, 6759, 2955,
+     2955, 2955, 6782, 2955, 2955, 2955, 6785, 2955, 2955, 2955,
+     2955, 2955, 2955, 3339, 2955, 2819, 6784, 6786, 6783, 2955,
+
+     6787, 2955, 6792, 6789, 6788, 6791, 6794, 6790, 6793, 2955,
+     6795, 6796, 2955, 2955, 2955, 2955, 6797, 2955, 2955, 2955,
+     6798, 2955, 3339, 2955, 6805, 6806, 6807, 2236, 6808, 6809,
+     6810, 6800, 6801, 3339, 6811, 6799, 6803, 6802, 6812, 6813,
+     6804, 2236, 6814, 6815, 6816, 6817, 6818, 6819, 2236, 6820,
+     6821, 6822, 6823, 6824, 2236, 6825, 6826, 6827, 6828, 6829,
+     6830, 6831, 3402, 6832, 6833, 6834, 6835, 6836, 6837, 6838,
+     6839, 6840, 6841, 6842, 6843, 6844, 6845, 6846, 3402, 3402,
+     6847, 6848, 6849, 6850, 6851, 6852, 6853, 2955, 2955, 2955,
+     2955, 2955, 2955, 2955, 2955, 2955, 6854, 6857, 2955, 2955,
+
+     2955, 2955, 2955, 2955, 6858, 2955, 6856, 3435, 6855, 6861,
+     6864, 6859, 2955, 6868, 6860, 6863, 2955, 6862, 6865, 2955,
+     6866, 6867, 2955, 2955, 2955, 2955, 2955, 6869, 2955, 3435,
+     6870, 2955, 6877, 6878, 2955, 6881, 2955, 6882, 6883, 6873,
+     3435, 6872, 2819, 6871, 6875, 6874, 2819, 6886, 6887, 6876,
+     6888, 6879, 6880, 6885, 2325, 2325, 2325, 2325, 6889, 6890,
+     6891, 4500, 6892, 6894, 6884, 6897, 6898, 6899, 6886, 6900,
+     3595, 6901, 6217, 6217, 6217, 2328, 2325, 2325, 2325, 2325,
+     6902, 6905, 6908, 4500, 1461, 1461, 1461, 1461, 6896, 6896,
+     6896, 6896, 6909, 6911, 6217, 6217, 6217, 2328, 6912, 6913,
+
+     1462, 6234, 6234, 6234, 6234, 1464, 6914, 6915, 6919, 1478,
+     6903, 6903, 6903, 6903, 6904, 6904, 6904, 6904, 6922, 6923,
+     6924, 6906, 6906, 6906, 6906, 6910, 6910, 6910, 6910, 6920,
+     6920, 6920, 6920, 6257, 6257, 6257, 6257, 6893, 6895, 6896,
+     6896, 6895, 6907, 6925, 1477, 6916, 6916, 6916, 6916, 6921,
+     6921, 6921, 6921, 6926, 6262, 6262, 6262, 6262, 6927, 1478,
+     6262, 6262, 6262, 6262, 6928, 1479, 6917, 6929, 6930, 6931,
+     6932, 6932, 6932, 6932, 6943, 2616, 6958, 6314, 6314, 6314,
+     6314, 2616, 6946, 6946, 6946, 6946, 1480, 1481, 6967, 1482,
+     1483, 1484, 6968, 6969, 5545, 1485, 1486, 1487, 1488, 1489,
+
+     6971, 1490, 6974, 2582, 1491, 1492, 1493, 1494, 6976, 6977,
+     6978, 6918, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
+     6979, 6980, 6981, 6302, 1514, 1514, 1514, 1514, 1514, 1514,
+     1514, 1514, 6982, 1478, 6983, 1516, 6984, 1478, 6985, 1516,
+     1514, 1514, 1514, 1514, 6986, 1478, 6987, 1516, 6988, 1478,
+     6989, 1516, 6364, 6933, 6990, 6364, 6934, 6938, 6938, 6938,
+     6938, 1478, 6991, 1516, 6276, 6276, 6276, 6276, 6939, 6939,
+     6939, 6939, 6992, 6940, 6277, 6993, 6319, 6940, 1478, 6319,
+     1516, 1514, 1514, 1514, 1514, 1478, 6994, 1516, 6995, 6935,
+     1514, 1514, 1514, 1514, 6936, 6280, 6280, 6280, 6280, 6996,
+
+     6281, 5545, 1478, 6394, 1516, 6997, 6394, 6937, 6999, 7001,
+     7002, 1478, 7003, 1516, 7004, 7005, 1478, 7007, 1516, 6283,
+     6283, 6283, 6283, 6285, 6285, 6285, 6285, 1514, 1514, 1514,
+     1514, 6947, 6947, 6947, 6947, 6956, 6956, 6956, 6956, 7008,
+     1478, 7009, 1516, 6941, 6286, 7010, 1516, 7011, 1478, 7013,
+     1516, 7014, 1478, 7015, 1516, 7016, 2582, 6942, 4612, 4612,
+     4613, 4613, 4613, 4613, 4612, 4612, 4612, 4612, 4612, 4612,
+     4612, 4612, 4612, 4612, 4612, 4612, 4612, 4612, 6945, 7006,
+     7017, 4614, 7006, 4615, 4612, 4612, 4612, 4612, 6948, 6948,
+     6948, 6948, 6289, 6289, 6289, 6289, 6949, 6949, 6949, 6949,
+
+     1514, 1514, 1514, 1514, 7018, 4612, 4612, 4612, 6944, 6296,
+     7019, 1516, 7020, 1478, 7021, 1516, 7022, 1478, 7023, 1516,
+     7024, 1478, 7025, 1516, 6951, 6951, 6951, 6951, 7026, 1514,
+     1514, 1514, 1514, 7027, 4612, 4612, 4612, 7028, 1514, 1514,
+     1514, 1514, 7030, 6364, 7029, 6952, 6364, 1516, 7031, 7033,
+     1478, 6950, 1516, 6295, 6295, 6295, 6295, 6374, 7029, 1478,
+     6374, 1516, 1514, 1514, 1514, 1514, 6959, 6959, 6959, 6959,
+     6314, 6314, 6314, 6314, 6296, 7034, 1516, 6300, 6300, 6300,
+     6300, 7032, 2792, 1478, 7032, 1516, 6954, 6960, 7035, 1516,
+     6953, 6955, 6301, 6301, 6301, 6301, 6394, 7036, 1478, 6394,
+
+     1516, 1514, 1514, 1514, 1514, 6962, 6962, 6962, 6962, 1514,
+     1514, 1514, 1514, 1478, 7037, 1516, 2819, 2819, 2819, 6918,
+     7040, 6957, 1478, 7038, 1516, 7046, 1478, 7070, 1516, 2888,
+     1478, 7071, 1516, 7072, 1514, 1514, 1514, 1514, 6965, 6965,
+     6965, 6965, 1514, 1514, 1514, 1514, 6312, 6312, 6312, 6312,
+     6312, 6312, 6312, 6312, 6961, 1478, 6313, 1516, 2819, 1478,
+     6313, 1516, 6963, 1478, 2819, 1516, 1611, 1611, 1611, 1611,
+     7006, 2819, 2819, 7006, 2819, 7043, 2819, 7039, 2819, 2819,
+     7073, 2819, 1612, 7041, 2819, 2819, 7074, 1614, 7049, 7047,
+     2819, 7053, 7048, 7042, 7044, 6966, 2819, 6964, 2819, 7051,
+
+     2819, 7050, 2819, 7052, 7056, 7055, 2819, 7054, 2819, 7057,
+     2819, 7060, 7075, 7059, 7076, 7058, 2819, 6970, 6972, 6972,
+     6973, 6973, 6972, 6973, 6972, 6972, 6972, 6972, 6972, 6972,
+     6972, 6972, 6973, 6972, 6972, 6972, 6972, 6973, 2819, 2819,
+     2819, 6972, 6972, 6973, 6972, 6972, 6972, 6972, 2819, 2819,
+     7064, 2819, 2819, 2819, 7061, 7062, 7077, 2819, 7078, 2833,
+     7080, 7065, 7081, 7063, 7067, 6972, 6973, 6972, 2819, 7062,
+     6985, 7032, 7066, 7068, 7032, 7069, 6364, 7079, 7082, 6364,
+     7083, 7084, 7085, 2888, 7086, 7087, 6394, 7088, 7089, 6394,
+     7090, 7091, 7092, 7093, 6972, 6972, 6972, 6998, 6998, 6998,
+
+     6998, 6998, 6998, 6998, 6998, 6998, 6998, 6998, 6998, 6998,
+     6998, 6998, 6998, 6998, 6998, 6998, 6998, 2819, 7094, 7095,
+     6998, 6998, 6998, 6998, 6998, 6998, 6998, 7097, 7099, 7100,
+     7101, 7102, 7103, 7006, 6475, 7104, 7006, 6475, 7105, 7106,
+     7107, 2939, 2939, 7108, 6998, 6998, 6998, 7109, 7110, 7111,
+     7112, 7113, 7114, 7115, 7116, 7117, 7118, 7119, 7120, 7121,
+     7122, 7123, 7124, 7125, 7127, 7128, 7129, 7130, 7032, 7131,
+     7132, 7032, 2923, 6998, 6998, 6998, 7000, 7000, 7000, 7000,
+     7000, 7000, 7000, 7000, 7000, 7000, 7000, 7000, 7000, 7000,
+     7000, 7000, 7000, 7000, 7000, 7000, 7126, 7133, 2939, 7000,
+
+     7000, 7000, 7000, 7000, 7000, 7000, 2939, 7134, 2939, 7135,
+     7126, 2955, 2955, 2955, 2955, 2955, 7138, 2955, 7136, 2955,
+     7141, 2955, 2955, 7000, 7000, 7000, 2955, 2955, 2987, 7006,
+     2955, 7137, 7006, 7139, 7143, 2955, 2955, 7140, 2955, 2987,
+     7171, 7144, 7162, 7148, 2955, 7147, 7145, 7149, 2955, 7146,
+     7173, 7150, 7000, 7000, 7000, 7012, 7012, 7012, 7012, 7012,
+     7012, 7012, 7012, 7012, 7012, 7012, 7012, 7012, 7012, 7012,
+     7012, 7012, 7012, 7012, 7012, 2955, 2955, 2955, 7012, 7012,
+     7012, 7012, 7012, 7012, 7012, 2955, 7153, 2955, 7151, 2955,
+     7154, 7152, 2955, 2955, 2955, 7156, 2955, 7158, 2955, 2955,
+
+     7157, 2955, 7012, 7012, 7012, 7161, 2955, 2955, 7155, 2955,
+     7032, 2955, 2955, 7032, 7160, 2955, 2955, 7159, 2955, 7161,
+     7165, 7163, 7164, 2971, 7174, 2987, 2987, 7166, 7169, 7168,
+     7175, 7012, 7012, 7012, 7012, 7012, 7012, 7012, 7012, 7012,
+     7012, 7012, 7012, 7012, 7012, 7012, 7012, 7012, 7012, 7012,
+     7012, 7012, 7012, 7012, 2955, 2819, 2955, 7012, 7012, 7012,
+     7012, 7012, 7012, 7012, 2955, 2955, 7176, 3032, 3032, 7177,
+     7178, 7179, 7170, 7180, 7167, 7181, 7172, 7182, 7184, 7185,
+     7186, 7012, 7045, 7012, 3032, 7187, 3032, 3032, 7188, 3032,
+     2987, 7189, 2955, 2955, 2955, 7191, 7193, 2955, 2955, 2955,
+
+     2955, 3068, 7197, 7198, 2955, 7207, 3068, 7201, 7194, 7208,
+     7012, 7012, 7012, 7096, 7096, 7096, 7096, 7096, 7096, 7096,
+     7096, 7096, 7096, 7096, 7096, 7096, 7096, 7096, 7096, 7096,
+     7096, 7096, 7096, 2955, 2955, 2955, 7096, 7096, 7096, 7096,
+     7096, 7096, 7096, 2955, 2955, 2955, 2955, 2955, 2955, 2955,
+     2955, 7209, 7190, 2955, 7210, 3068, 7192, 7195, 7199, 7204,
+     7096, 7096, 7096, 7196, 3068, 7202, 2955, 7203, 1926, 7205,
+     2955, 1926, 7211, 7212, 1926, 3068, 3068, 7206, 7213, 7214,
+     7215, 7216, 7217, 7218, 7219, 1926, 7220, 1926, 1926, 7096,
+     7096, 7096, 7098, 7098, 7098, 7098, 7098, 7098, 7098, 7098,
+
+     7098, 7098, 7098, 7098, 7098, 7098, 7098, 7098, 7098, 7098,
+     7098, 7098, 7221, 1926, 7222, 7098, 7098, 7098, 7098, 7098,
+     7098, 7098, 7223, 7224, 7225, 2078, 7226, 7227, 7228, 7229,
+     7230, 7231, 7232, 7233, 7234, 7235, 7236, 7237, 7238, 7098,
+     7098, 7098, 7239, 7240, 2078, 2078, 7241, 7242, 7243, 7244,
+     7245, 7246, 7247, 7248, 7249, 7250, 7251, 3179, 3179, 7252,
+     7253, 7254, 7255, 7256, 7257, 7258, 7259, 7260, 7098, 7098,
+     7098, 7012, 7012, 7012, 7012, 7012, 7012, 7012, 7012, 7012,
+     7012, 7012, 7012, 7012, 7012, 7012, 7012, 7012, 7012, 7012,
+     7012, 7261, 3179, 7262, 7012, 7012, 7012, 7012, 7012, 7012,
+
+     7012, 3179, 3179, 7263, 3179, 7264, 2955, 2955, 2955, 2955,
+     7266, 2955, 7268, 2955, 2955, 2955, 2955, 7282, 7012, 7012,
+     7012, 3213, 2955, 2955, 7269, 7265, 7272, 2955, 7270, 2955,
+     7267, 3213, 7273, 7271, 2955, 2955, 2955, 7274, 7275, 7276,
+     2136, 7283, 3213, 7280, 7284, 7285, 7286, 7012, 7012, 7012,
+     7012, 7012, 7012, 7012, 7012, 7012, 7012, 7012, 7012, 7012,
+     7012, 7012, 7012, 7012, 7012, 7012, 7012, 7012, 7012, 7012,
+     2955, 2955, 2955, 7012, 7012, 7012, 7012, 7012, 7012, 7012,
+     2955, 2955, 2955, 7279, 2955, 6759, 6759, 6759, 6759, 7281,
+     7277, 7278, 7287, 3213, 7288, 3213, 7289, 7012, 7142, 7012,
+
+     7290, 7291, 7292, 7293, 7294, 7295, 7296, 3213, 7297, 2136,
+     2136, 7298, 7299, 7300, 7301, 7302, 7303, 7304, 7305, 3289,
+     7306, 7307, 7308, 7309, 7310, 7311, 7012, 7012, 7012, 5848,
+     5848, 5848, 5849, 5848, 5848, 5848, 5848, 5848, 5848, 5848,
+     5848, 5848, 5848, 5848, 5848, 5848, 5848, 5848, 5848, 5850,
+     5850, 5850, 5848, 5848, 5848, 5848, 5848, 5848, 5848, 5850,
+     5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850,
+     5850, 5850, 5850, 5850, 5850, 5850, 5848, 5848, 5848, 5850,
+     7183, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850,
+     5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850,
+
+     5850, 5850, 5850, 5850, 5850, 5848, 5848, 5848, 5848, 5848,
+     5848, 5849, 5848, 5848, 5848, 5848, 5848, 5848, 5848, 5848,
+     5848, 5848, 5848, 5848, 5848, 5848, 5848, 5848, 5878, 5878,
+     5878, 5848, 5848, 5848, 5848, 5848, 5848, 5848, 5878, 5878,
+     5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878,
+     5878, 5878, 5878, 5878, 5878, 5848, 5879, 5848, 5878, 7200,
+     5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878,
+     5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878,
+     5878, 5878, 5878, 5878, 5848, 5848, 5848, 7312, 7313, 7314,
+     7315, 7316, 7317, 7318, 7319, 7320, 3289, 3289, 7321, 7322,
+
+     7323, 7324, 7325, 7326, 7327, 7328, 6759, 6759, 6759, 6759,
+     7329, 7330, 7331, 3304, 3304, 7332, 7333, 7334, 7335, 7336,
+     7337, 7338, 7339, 7340, 7341, 3304, 7342, 3304, 3304, 7343,
+     3304, 7344, 2955, 2955, 2955, 2955, 7346, 2955, 7348, 2955,
+     2955, 2955, 2955, 2955, 2955, 2955, 3339, 7352, 7353, 2955,
+     2955, 7345, 7349, 7350, 2955, 2955, 7347, 3339, 7354, 7351,
+     2955, 2955, 3339, 7355, 7356, 2955, 7359, 2955, 2955, 7357,
+     7358, 2955, 2955, 7362, 2236, 7363, 3339, 7364, 7365, 7361,
+     3339, 7366, 7367, 7368, 7360, 7369, 7370, 7371, 7372, 7373,
+     7374, 7375, 7376, 7377, 2236, 2236, 7378, 3339, 7379, 7380,
+
+     7381, 7382, 7383, 7384, 7385, 7386, 7387, 7388, 3402, 3402,
+     7389, 7390, 7391, 7392, 7393, 7394, 7395, 7396, 7397, 7398,
+     3402, 7399, 3402, 3402, 7400, 3402, 7401, 2955, 2955, 2955,
+     2955, 7403, 2955, 7405, 2955, 2955, 2955, 2955, 2955, 2955,
+     2955, 3435, 7409, 7410, 2955, 2955, 7402, 7406, 7407, 2955,
+     2955, 7404, 3435, 7411, 7408, 2955, 2955, 3435, 7412, 7413,
+     2955, 7416, 2955, 2955, 7414, 7415, 2955, 2955, 7419, 7420,
+     2955, 3435, 7423, 7421, 7418, 3435, 7424, 2955, 2819, 7417,
+     7422, 7427, 2819, 7429, 7430, 7431, 7432, 7433, 1461, 1461,
+     1461, 1461, 3435, 7435, 7438, 7425, 7426, 7437, 7437, 7437,
+
+     7437, 7439, 7440, 7442, 1462, 7441, 7441, 7441, 7441, 1464,
+     7443, 6903, 6903, 6903, 6903, 7444, 7448, 7452, 1478, 6904,
+     6904, 6904, 6904, 6906, 6906, 6906, 6906, 6946, 6946, 6946,
+     6946, 7445, 7445, 7445, 7445, 7453, 7446, 7446, 7446, 7446,
+     6910, 6910, 6910, 6910, 6907, 7447, 7447, 7447, 7447, 7434,
+     7436, 7437, 7437, 7436, 7454, 7458, 1477, 6917, 7449, 7449,
+     7449, 7449, 6916, 6916, 6916, 6916, 6956, 6956, 6956, 6956,
+     7459, 1478, 7455, 7455, 7455, 7455, 7461, 1479, 7462, 7450,
+     7463, 7465, 7466, 6917, 6920, 6920, 6920, 6920, 6921, 6921,
+     6921, 6921, 7473, 7456, 7457, 7457, 7457, 7457, 1480, 1481,
+
+     7474, 1482, 1483, 1484, 7493, 7495, 7499, 1485, 1486, 1487,
+     1488, 1489, 4673, 1490, 7500, 7501, 1491, 1492, 1493, 1494,
+     7460, 7460, 7460, 7460, 7451, 7502, 7503, 7504, 6918, 7464,
+     7464, 7464, 7464, 6932, 6932, 6932, 6932, 1514, 1514, 1514,
+     1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
+     1514, 1514, 1514, 7470, 7470, 7470, 7470, 7505, 1478, 7506,
+     1516, 7507, 1478, 7508, 1516, 7509, 1478, 7510, 1516, 7511,
+     1478, 7512, 1516, 7513, 1478, 3732, 1516, 6938, 6938, 6938,
+     6938, 7514, 7467, 6939, 6939, 6939, 6939, 7513, 6940, 7515,
+     7517, 7518, 6940, 1514, 1514, 1514, 1514, 7519, 1478, 7520,
+
+     1516, 7472, 7472, 7472, 7472, 7469, 1514, 1514, 1514, 1514,
+     7032, 7521, 7468, 7032, 1478, 7522, 1516, 1514, 1514, 1514,
+     1514, 7523, 1478, 7006, 1516, 7524, 7006, 1478, 7525, 1516,
+     6946, 6946, 6946, 6946, 6947, 6947, 6947, 6947, 1478, 7526,
+     1516, 6948, 6948, 6948, 6948, 7529, 6949, 6949, 6949, 6949,
+     1514, 1514, 1514, 1514, 7471, 1478, 7530, 1516, 6951, 6951,
+     6951, 6951, 6296, 7527, 1516, 7531, 7527, 1478, 7475, 1516,
+     7476, 1478, 7533, 1516, 7478, 7478, 7478, 7478, 7534, 6952,
+     7535, 1516, 7536, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
+     1514, 1514, 1514, 1514, 1514, 2582, 6956, 6956, 6956, 6956,
+
+     7537, 7538, 7528, 7477, 1478, 7528, 1516, 7539, 1478, 7541,
+     1516, 2792, 1478, 7542, 1516, 1514, 1514, 1514, 1514, 7546,
+     7484, 7484, 7484, 7484, 7451, 1514, 1514, 1514, 1514, 6959,
+     6959, 6959, 6959, 7547, 7532, 7548, 1478, 7532, 1516, 7549,
+     7480, 2582, 7479, 7481, 7540, 7550, 1478, 7540, 1516, 7551,
+     6960, 7577, 1516, 7485, 7485, 7485, 7485, 6962, 6962, 6962,
+     6962, 7491, 7491, 7491, 7491, 1514, 1514, 1514, 1514, 6965,
+     6965, 6965, 6965, 2819, 1478, 2819, 7486, 7482, 1478, 7578,
+     1516, 7579, 1478, 7580, 1516, 2819, 1478, 7483, 1516, 7553,
+     1478, 7566, 1516, 7492, 7492, 7492, 7492, 7494, 7494, 7494,
+
+     7494, 1611, 1611, 1611, 1611, 2819, 7545, 2819, 7487, 7545,
+     7488, 7555, 7032, 2819, 1478, 7032, 1516, 1612, 7476, 2819,
+     2819, 2819, 1614, 7489, 7554, 1493, 7490, 2819, 2819, 2819,
+     7552, 2819, 2819, 7561, 7557, 2819, 7556, 2819, 7564, 2819,
+     7565, 7558, 7562, 7567, 7560, 7563, 2819, 7559, 2888, 2888,
+     7581, 7582, 7569, 7573, 7496, 7497, 7497, 7498, 7498, 7497,
+     7498, 7497, 7497, 7497, 7497, 7497, 7497, 7497, 7497, 7498,
+     7497, 7497, 7497, 7497, 7498, 1689, 1689, 1689, 7497, 7497,
+     7498, 7497, 7497, 7497, 7497, 1689, 1689, 1689, 1689, 1689,
+     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
+
+     1689, 1689, 7497, 7498, 7497, 1689, 1689, 1689, 1689, 1689,
+     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
+     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
+     1689, 7497, 7497, 7497, 1689, 1689, 8398, 8398, 1689, 8398,
+     1689, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 8398, 1689,
+     1689, 1689, 1689, 8398, 2819, 2819, 2819, 1689, 1689, 8398,
+     1689, 1689, 1689, 1689, 2819, 2819, 2819, 7572, 2888, 7583,
+     7584, 7568, 2819, 7585, 7586, 7587, 7571, 7588, 7589, 7574,
+     7576, 1689, 8398, 1689, 7543, 3866, 7590, 7543, 7527, 7528,
+     2833, 7527, 7528, 7032, 7575, 2888, 7032, 7532, 7540, 7543,
+
+     7532, 7540, 7543, 7545, 2888, 7591, 7545, 2888, 7592, 7593,
+     1689, 1689, 1689, 7516, 7516, 7516, 7516, 7516, 7516, 7516,
+     7516, 7516, 7516, 7516, 7516, 7516, 7516, 7516, 7516, 7516,
+     7516, 7516, 7516, 7544, 2819, 2819, 7516, 7516, 7516, 7516,
+     7516, 7516, 7516, 2819, 2819, 2819, 7595, 7596, 7570, 2819,
+     7597, 7598, 7599, 7600, 7601, 7602, 7603, 7604, 7605, 7606,
+     7516, 7516, 7516, 7528, 7607, 7608, 7528, 7532, 7609, 7610,
+     7532, 7611, 7612, 7613, 7614, 7615, 7616, 7540, 7617, 7618,
+     7540, 7619, 7543, 7545, 7621, 7543, 7545, 7622, 7623, 7516,
+     7516, 7516, 7594, 7594, 7594, 7594, 7594, 7594, 7594, 7594,
+
+     7594, 7594, 7594, 7594, 7594, 7594, 7594, 7594, 7594, 7594,
+     7594, 7594, 7624, 7625, 7626, 7594, 7594, 7594, 7594, 7594,
+     7594, 7594, 2955, 2955, 2955, 2955, 2955, 2955, 2955, 7528,
+     2955, 7620, 7528, 2955, 2955, 2955, 2955, 7638, 2955, 7594,
+     7594, 7594, 7628, 7637, 7629, 7631, 7632, 7627, 2955, 7630,
+     7633, 7634, 7636, 7532, 2955, 2955, 7532, 2955, 2955, 7635,
+     2955, 2955, 7641, 7639, 7644, 7642, 2955, 7640, 7594, 7594,
+     7594, 7540, 2955, 7643, 7540, 2955, 7543, 2955, 7645, 7543,
+     7545, 2955, 2955, 7545, 2955, 7647, 2955, 2955, 7655, 2955,
+     7657, 7651, 7646, 7650, 7656, 7658, 3032, 7656, 7659, 2955,
+
+     7652, 7660, 7649, 7654, 3032, 7532, 7661, 7662, 7532, 7653,
+     7663, 5850, 7665, 7664, 3032, 7666, 7667, 2955, 2955, 2955,
+     2955, 2955, 2955, 2955, 2955, 7648, 2955, 7532, 2955, 2955,
+     7532, 5878, 2955, 7675, 7668, 2955, 7669, 3068, 2955, 7671,
+     2819, 7672, 7670, 2955, 7673, 7674, 2955, 2955, 2955, 7676,
+     3068, 7679, 7680, 1926, 7681, 7682, 1926, 1926, 7683, 7684,
+     3068, 7685, 7678, 1926, 1926, 7686, 1926, 7687, 7689, 7677,
+     7687, 7689, 7690, 2955, 7691, 7692, 7693, 7688, 2078, 2078,
+     7694, 7695, 2078, 7696, 7697, 7698, 7699, 7700, 7701, 7702,
+     2078, 7703, 2078, 2078, 7704, 2078, 7705, 7706, 7707, 3179,
+
+     7708, 7709, 3179, 7532, 3179, 7710, 7532, 7711, 7712, 3179,
+     3179, 7713, 3179, 2955, 2955, 2955, 2955, 2955, 2955, 7532,
+     2955, 2955, 7532, 2955, 2955, 2955, 2955, 2955, 2955, 7714,
+     7720, 7715, 3213, 7717, 3213, 7718, 7719, 7716, 2955, 2955,
+     7722, 3213, 7723, 7724, 3213, 3213, 7725, 2136, 2136, 7726,
+     7721, 7727, 3213, 2136, 7728, 7729, 7730, 7731, 7732, 7733,
+     7734, 2136, 7735, 2136, 2136, 2955, 7736, 2136, 7737, 7738,
+     7739, 7740, 7741, 3289, 3289, 7742, 7743, 3289, 7744, 7745,
+     7746, 7747, 7748, 7749, 7750, 3289, 7751, 3289, 3289, 7752,
+     3289, 7753, 7754, 7755, 3304, 7756, 7757, 3304, 7532, 3304,
+
+     7758, 7532, 7759, 7760, 3304, 3304, 7761, 3304, 2955, 2955,
+     2955, 2955, 2955, 2955, 7532, 2955, 2955, 7532, 2955, 2955,
+     2955, 2955, 2955, 2955, 7762, 7768, 7763, 3339, 7765, 3339,
+     7766, 7767, 7764, 2955, 2955, 7770, 3339, 7771, 7772, 3339,
+     3339, 7773, 2236, 2236, 7774, 7769, 7775, 3339, 2236, 7776,
+     7777, 7778, 7779, 7780, 7781, 7782, 2236, 7783, 2236, 2236,
+     2955, 7784, 2236, 7785, 7786, 7787, 3402, 7788, 7789, 3402,
+     7532, 3402, 7790, 7532, 7791, 7792, 3402, 3402, 7793, 3402,
+     2955, 2955, 2955, 2955, 2955, 2955, 7532, 2955, 2955, 7532,
+     2955, 2955, 2955, 2955, 2955, 2955, 7794, 7800, 7795, 3435,
+
+     7797, 3435, 7798, 7799, 7796, 2955, 2955, 7802, 3435, 3032,
+     2955, 3435, 3435, 7804, 2955, 7803, 7804, 7801, 7810, 3435,
+     3068, 7811, 7812, 7813, 7814, 7814, 7814, 7814, 7816, 7817,
+     7817, 7816, 2955, 7805, 7805, 7805, 7806, 7805, 7805, 7805,
+     7805, 7805, 7805, 7805, 7805, 7805, 7805, 7805, 7805, 7805,
+     7805, 7805, 7805, 7807, 7807, 7807, 7805, 7805, 7805, 7805,
+     7805, 7805, 7805, 7807, 7807, 7807, 7807, 7807, 7807, 7807,
+     7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807,
+     7805, 7805, 7805, 7807, 7807, 7807, 7807, 7807, 7807, 7807,
+     7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807,
+
+     7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807, 7805,
+     7805, 7805, 7804, 7818, 7819, 7804, 7817, 7817, 7817, 7817,
+     7820, 7820, 7820, 7820, 7441, 7441, 7441, 7441, 7821, 7822,
+     7822, 7822, 7822, 7823, 7824, 7825, 7826, 1478, 7445, 7445,
+     7445, 7445, 7447, 7447, 7447, 7447, 7478, 7478, 7478, 7478,
+     7827, 7828, 7484, 7484, 7484, 7484, 7823, 7831, 2819, 7805,
+     7805, 7805, 7806, 7805, 7805, 7805, 7805, 7805, 7805, 7805,
+     7805, 7805, 7805, 7805, 7805, 7805, 7805, 7805, 7805, 7808,
+     7808, 7808, 7805, 7805, 7805, 7805, 7805, 7805, 7805, 7808,
+     7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808,
+
+     7808, 7808, 7808, 7808, 7808, 7808, 7805, 7809, 7805, 7808,
+     7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808,
+     7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808,
+     7808, 7808, 7808, 7808, 7808, 7805, 7805, 7805, 1461, 1461,
+     1461, 1461, 7446, 7446, 7446, 7446, 7449, 7449, 7449, 7449,
+     7455, 7455, 7455, 7455, 1462, 7457, 7457, 7457, 7457, 1464,
+     7832, 7833, 7841, 6917, 7854, 2585, 2588, 7450, 7855, 2605,
+     7858, 7456, 7829, 7829, 7829, 7829, 7460, 7460, 7460, 7460,
+     7830, 7830, 7830, 7830, 7464, 7464, 7464, 7464, 7834, 7834,
+     7834, 7834, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
+
+     7839, 7839, 7839, 7839, 7859, 7815, 7487, 7860, 7488, 7861,
+     7862, 7527, 7451, 1478, 7527, 1516, 7863, 1478, 7864, 1516,
+     7865, 7489, 7866, 1493, 7490, 1514, 1514, 1514, 1514, 7470,
+     7470, 7470, 7470, 3732, 7867, 7869, 7835, 7838, 7838, 7838,
+     7838, 7472, 7472, 7472, 7472, 7870, 1478, 7871, 1516, 7872,
+     1478, 7871, 1516, 4702, 1514, 1514, 1514, 1514, 1478, 7874,
+     1516, 7875, 1478, 7528, 1516, 7878, 7528, 7879, 7836, 7843,
+     7843, 7843, 7843, 7540, 7840, 1478, 7540, 1516, 7837, 7478,
+     7478, 7478, 7478, 7881, 1514, 1514, 1514, 1514, 7543, 7882,
+     1478, 7543, 1516, 7484, 7484, 7484, 7484, 7494, 7494, 7494,
+
+     7494, 7494, 7494, 7494, 7494, 1478, 7883, 1516, 7856, 7856,
+     7856, 7856, 7885, 7886, 7888, 7842, 7844, 7844, 7845, 7845,
+     7845, 7845, 7844, 7844, 7844, 7844, 7844, 7844, 7844, 7844,
+     7844, 7844, 7844, 7844, 7844, 7844, 7890, 7868, 7891, 7846,
+     7844, 7847, 7844, 7844, 7844, 7844, 7848, 1514, 1514, 1514,
+     1514, 7849, 7849, 7849, 7849, 1514, 1514, 1514, 1514, 1514,
+     1514, 1514, 1514, 7844, 7844, 7844, 7873, 7892, 1478, 7873,
+     1516, 7893, 7850, 7895, 1516, 2819, 1478, 7915, 1516, 2819,
+     1478, 2819, 1516, 7485, 7485, 7485, 7485, 7491, 7491, 7491,
+     7491, 7898, 7844, 7844, 7844, 7492, 7492, 7492, 7492, 7876,
+
+     7877, 7897, 7876, 7877, 1478, 7916, 7486, 7917, 1478, 7527,
+     1516, 7528, 7527, 7836, 7528, 2819, 1478, 7851, 1516, 7918,
+     7853, 2819, 7852, 7857, 7857, 7857, 7857, 7532, 7884, 7887,
+     7532, 7884, 7887, 7540, 7889, 7543, 7540, 7889, 7543, 1612,
+     7545, 7904, 7902, 7545, 1614, 2819, 7487, 2819, 7873, 7876,
+     7877, 7873, 7876, 7877, 7899, 2819, 7900, 7884, 7919, 2888,
+     7884, 7489, 7903, 1493, 7880, 7880, 7880, 7880, 7880, 7880,
+     7880, 7880, 7880, 7880, 7880, 7880, 7880, 7880, 7880, 7880,
+     7880, 7880, 7880, 7880, 2819, 2819, 2819, 7880, 7880, 7880,
+     7880, 7880, 7880, 7880, 2819, 2819, 2819, 2819, 2819, 7908,
+
+     2888, 7910, 2819, 2819, 7905, 2819, 7906, 7911, 7907, 2819,
+     7920, 7880, 7880, 7880, 7921, 7922, 7909, 7887, 7889, 7923,
+     7887, 7889, 2888, 7924, 2888, 7925, 7913, 7926, 7927, 7926,
+     4848, 7928, 7929, 7930, 7928, 7876, 7877, 7931, 7876, 7877,
+     7880, 7880, 7880, 7894, 7894, 7894, 7894, 7894, 7894, 7894,
+     7894, 7894, 7894, 7894, 7894, 7894, 7894, 7894, 7894, 7894,
+     7894, 7894, 7894, 2819, 2819, 2939, 7894, 7894, 7894, 7894,
+     7894, 7894, 7894, 7932, 7934, 7935, 2939, 7936, 7884, 7937,
+     7938, 7884, 7887, 7939, 3781, 7887, 7889, 3781, 7940, 7889,
+     7894, 7894, 7894, 7941, 7942, 7943, 7945, 7928, 2955, 2955,
+
+     7928, 2955, 2955, 7964, 2955, 2955, 7876, 7877, 7947, 7876,
+     7877, 7948, 7949, 7884, 2987, 7956, 7884, 7965, 7966, 7894,
+     7894, 7894, 7896, 7896, 7896, 7896, 7896, 7896, 7896, 7896,
+     7896, 7896, 7896, 7896, 7896, 7896, 7896, 7896, 7896, 7896,
+     7896, 7896, 2955, 2955, 2955, 7896, 7896, 7896, 7896, 7896,
+     7896, 7896, 2955, 2955, 2955, 2955, 2955, 2955, 2955, 2955,
+     2955, 7952, 2955, 3032, 7946, 7951, 2955, 7954, 2955, 7896,
+     7896, 7896, 3032, 7958, 7959, 7887, 2987, 3781, 7887, 7955,
+     3781, 7957, 7953, 7962, 2955, 7889, 3032, 7656, 7889, 7960,
+     7656, 7656, 7887, 3032, 7656, 7887, 2955, 7972, 7896, 7896,
+
+     7896, 7880, 7880, 7880, 7880, 7880, 7880, 7880, 7880, 7880,
+     7880, 7880, 7880, 7880, 7880, 7880, 7880, 7880, 7880, 7880,
+     7880, 2955, 2955, 2955, 7880, 7880, 7880, 7880, 7880, 7880,
+     7880, 2955, 2955, 2955, 2955, 2955, 2955, 1926, 7973, 2955,
+     7970, 1926, 7969, 1926, 7968, 1926, 1926, 1926, 7880, 7901,
+     7880, 3068, 7976, 7977, 7887, 3068, 3068, 7887, 2078, 7687,
+     7974, 3068, 7687, 7974, 7689, 7978, 7979, 7689, 2078, 7688,
+     2078, 7975, 7980, 7981, 7982, 2078, 2078, 7880, 7880, 7880,
+     7894, 7894, 7894, 7894, 7894, 7894, 7894, 7894, 7894, 7894,
+     7894, 7894, 7894, 7894, 7894, 7894, 7894, 7894, 7894, 7894,
+
+     2955, 7983, 2078, 7894, 7894, 7894, 7894, 7894, 7894, 7894,
+     7984, 7985, 7986, 3179, 3179, 3179, 3179, 3179, 2955, 2955,
+     2955, 2955, 2955, 2955, 2955, 2955, 7989, 7894, 7912, 7894,
+     7988, 3213, 7990, 7991, 2136, 7992, 3213, 7993, 2136, 2136,
+     7987, 7994, 3213, 3213, 7995, 7996, 2136, 2136, 7997, 3213,
+     2136, 7998, 7999, 3289, 8000, 8001, 7894, 7894, 7894, 7896,
+     7896, 7896, 7896, 7896, 7896, 7896, 7896, 7896, 7896, 7896,
+     7896, 7896, 7896, 7896, 7896, 7896, 7896, 7896, 7896, 3289,
+     3289, 8002, 7896, 7896, 7896, 7896, 7896, 7896, 7896, 8003,
+     8004, 3289, 3289, 8005, 3289, 8006, 8007, 8008, 3304, 3304,
+
+     3304, 3304, 3304, 2955, 2955, 2955, 7896, 7914, 7896, 2955,
+     2955, 2955, 8011, 2955, 8010, 8012, 8013, 2236, 3339, 8014,
+     8015, 2236, 2236, 8016, 3339, 8009, 8017, 8018, 2236, 2236,
+     3339, 3339, 2955, 8019, 2236, 7896, 7896, 7896, 7933, 7933,
+     7933, 7933, 7933, 7933, 7933, 7933, 7933, 7933, 7933, 7933,
+     7933, 7933, 7933, 7933, 7933, 7933, 7933, 7933, 3339, 8020,
+     8021, 7933, 7933, 7933, 7933, 7933, 7933, 7933, 8022, 3402,
+     3402, 3402, 3402, 3402, 2955, 2955, 2955, 2955, 2955, 2955,
+     2955, 3032, 8025, 2955, 7806, 7933, 7933, 7933, 8024, 7806,
+     3435, 3435, 2955, 8026, 8027, 8028, 8023, 3435, 3435, 3068,
+
+     7804, 8029, 8033, 7804, 8034, 3435, 7814, 7814, 7814, 7814,
+     7820, 7820, 7820, 7820, 7933, 7933, 7933, 7944, 7944, 7944,
+     7944, 7944, 7944, 7944, 7944, 7944, 7944, 7944, 7944, 7944,
+     7944, 7944, 7944, 7944, 7944, 7944, 7944, 8038, 8033, 8042,
+     7944, 7944, 7944, 7944, 7944, 7944, 7944, 8032, 8032, 8032,
+     8032, 1461, 1461, 1461, 1461, 8035, 8035, 8035, 8035, 7822,
+     7822, 7822, 7822, 8043, 7944, 7944, 7944, 1462, 1478, 7473,
+     2582, 2631, 1464, 8036, 8036, 8036, 8036, 8037, 8037, 8037,
+     8037, 7829, 7829, 7829, 7829, 7830, 7830, 7830, 7830, 8044,
+     8044, 8044, 8044, 7944, 7944, 7944, 7896, 7896, 7896, 7896,
+
+     7896, 7896, 7896, 7896, 7896, 7896, 7896, 7896, 7896, 7896,
+     7896, 7896, 7896, 7896, 7896, 7896, 3607, 8030, 8056, 7896,
+     7896, 7896, 7896, 7896, 7896, 7896, 8057, 8058, 8059, 8039,
+     8039, 8039, 8039, 8060, 8061, 8062, 7487, 8045, 8045, 8045,
+     8045, 8063, 7871, 7896, 7896, 7896, 7834, 7834, 7834, 7834,
+     8040, 7489, 8067, 1493, 8069, 7839, 7839, 7839, 7839, 7856,
+     7856, 7856, 7856, 7876, 7877, 7884, 7876, 7877, 7884, 8070,
+     8075, 8077, 7896, 7896, 7896, 7933, 7933, 7933, 7933, 7933,
+     7933, 7933, 7933, 7933, 7933, 7933, 7933, 7933, 7933, 7933,
+     7933, 7933, 7933, 7933, 7933, 8041, 8078, 8079, 7933, 7933,
+
+     7933, 7933, 7933, 7933, 7933, 1514, 1514, 1514, 1514, 8046,
+     8046, 8046, 8046, 7838, 7838, 7838, 7838, 7843, 7843, 7843,
+     7843, 8080, 7933, 7950, 7933, 2819, 1478, 8092, 1516, 7840,
+     8047, 8084, 1516, 2888, 1478, 8093, 1516, 2888, 1478, 7887,
+     1516, 7889, 7887, 8066, 7889, 7876, 8066, 7877, 7876, 2888,
+     7877, 7933, 7933, 7933, 7944, 7944, 7944, 7944, 7944, 7944,
+     7944, 7944, 7944, 7944, 7944, 7944, 7944, 7944, 7944, 7944,
+     7944, 7944, 7944, 7944, 2888, 2819, 8094, 7944, 7944, 7944,
+     7944, 7944, 7944, 7944, 8095, 8096, 7926, 1514, 1514, 1514,
+     1514, 8052, 8052, 8052, 8052, 8088, 2819, 7849, 7849, 7849,
+
+     7849, 7944, 7961, 7944, 1514, 1514, 1514, 1514, 1478, 8100,
+     1516, 8071, 2582, 8072, 8071, 8101, 8072, 8091, 7850, 7884,
+     1516, 8074, 7884, 7887, 8074, 1478, 7887, 1516, 8102, 8104,
+     7944, 7944, 7944, 7896, 7896, 7896, 7896, 7896, 7896, 7896,
+     7896, 7896, 7896, 7896, 7896, 7896, 7896, 7896, 7896, 7896,
+     7896, 7896, 7896, 8105, 8051, 8048, 7896, 7896, 7896, 7896,
+     7896, 7896, 7896, 8041, 2819, 8106, 8107, 7857, 7857, 7857,
+     7857, 8076, 7889, 8081, 8076, 7889, 8081, 2819, 2819, 8090,
+     7896, 7963, 7896, 1612, 2819, 8108, 2819, 8085, 1614, 8089,
+     7877, 2955, 3032, 7877, 8082, 8087, 7887, 8099, 8071, 7887,
+
+     8099, 8071, 8072, 8074, 8076, 8072, 8074, 8076, 8109, 7896,
+     7896, 7896, 5848, 5848, 5848, 5849, 5848, 5848, 5848, 5848,
+     5848, 5848, 5848, 5848, 5848, 5848, 5848, 5848, 5848, 5848,
+     5848, 5848, 5850, 5850, 5850, 5848, 5848, 5848, 5848, 5848,
+     5848, 5848, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850,
+     5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5848,
+     5848, 5848, 5850, 5850, 5850, 5850, 5850, 7967, 5850, 5850,
+     5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850,
+     5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5848, 5848,
+     5848, 5848, 5848, 5848, 5849, 5848, 5848, 5848, 5848, 5848,
+
+     5848, 5848, 5848, 5848, 5848, 5848, 5848, 5848, 5848, 5848,
+     5848, 5878, 5878, 5878, 5848, 5848, 5848, 5848, 5848, 5848,
+     5848, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878,
+     5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5848, 5879,
+     5848, 5878, 5878, 5878, 5878, 5878, 7971, 5878, 5878, 5878,
+     5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878,
+     5878, 5878, 5878, 5878, 5878, 5878, 5878, 5848, 5848, 5848,
+     7805, 7805, 7805, 7806, 7805, 7805, 7805, 7805, 7805, 7805,
+     7805, 7805, 7805, 7805, 7805, 7805, 7805, 7805, 7805, 7805,
+     7807, 7807, 7807, 7805, 7805, 7805, 7805, 7805, 7805, 7805,
+
+     7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807,
+     7807, 7807, 7807, 7807, 7807, 7807, 7807, 7805, 7805, 7805,
+     7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807,
+     7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807,
+     7807, 7807, 7807, 7807, 7807, 7807, 7805, 7805, 7805, 7805,
+     7805, 7805, 7806, 7805, 7805, 7805, 7805, 7805, 7805, 7805,
+     7805, 7805, 7805, 7805, 7805, 7805, 7805, 7805, 7805, 7808,
+     7808, 7808, 7805, 7805, 7805, 7805, 7805, 7805, 7805, 7808,
+     7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808,
+     7808, 7808, 7808, 7808, 7808, 7808, 7805, 7809, 7805, 7808,
+
+     7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808,
+     7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808,
+     7808, 7808, 7808, 7808, 7808, 7805, 7805, 7805, 8031, 8032,
+     8032, 8031, 8071, 8081, 1477, 8071, 8081, 2955, 1514, 1514,
+     1514, 1514, 1514, 1514, 1514, 1514, 2955, 2955, 2955, 1478,
+     8112, 2955, 8111, 2955, 8114, 1479, 8116, 8119, 2955, 1478,
+     1926, 1516, 2955, 1478, 8120, 1516, 8117, 2955, 8115, 1926,
+     8121, 7974, 8072, 2078, 7974, 8072, 1480, 1481, 2819, 1482,
+     1483, 1484, 7975, 8118, 3068, 1485, 1486, 1487, 1488, 1489,
+     6288, 1490, 8122, 8055, 1491, 1492, 1493, 1494, 7844, 7844,
+
+     7845, 7845, 7845, 7845, 7844, 7844, 7844, 8049, 7844, 7844,
+     7844, 7844, 7844, 7844, 7844, 7844, 7844, 7844, 2819, 2078,
+     2078, 7846, 7844, 7847, 7844, 7844, 7844, 7844, 8050, 8050,
+     8050, 8050, 8050, 8050, 8050, 8050, 8050, 8050, 8050, 8050,
+     8050, 8050, 8050, 8050, 8050, 7844, 7844, 7844, 8050, 8050,
+     8050, 8050, 8050, 8050, 8050, 8050, 8050, 8050, 8050, 8050,
+     8050, 8050, 8050, 8050, 8050, 8050, 8050, 8050, 8050, 8050,
+     8050, 8050, 8050, 8050, 7844, 7844, 7844, 1514, 1514, 1514,
+     1514, 1514, 1514, 1514, 1514, 8074, 8076, 8081, 8074, 8076,
+     8081, 8071, 8072, 8074, 8071, 8072, 8074, 2078, 1478, 2078,
+
+     1516, 2078, 1478, 3179, 1516, 3179, 2955, 2955, 8123, 2136,
+     8124, 2136, 3213, 2136, 2136, 2136, 2136, 8125, 3289, 8126,
+     3289, 3289, 8076, 8081, 3213, 8076, 8081, 3289, 3289, 3289,
+     3304, 2819, 2819, 2819, 3304, 2955, 8053, 2955, 2955, 2955,
+     8127, 3339, 2236, 8128, 2236, 2236, 2236, 8054, 8064, 8064,
+     8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064,
+     8064, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 2955, 2955,
+     2955, 8064, 8064, 8064, 8064, 8064, 8064, 8064, 2236, 2236,
+     3402, 3402, 2955, 2955, 8129, 8130, 8131, 3339, 6887, 3435,
+     8132, 8132, 8132, 8132, 6909, 8064, 8064, 8064, 8137, 3435,
+
+     8134, 8134, 8134, 8134, 8138, 8139, 1462, 8035, 8035, 8035,
+     8035, 1464, 8036, 8036, 8036, 8036, 8037, 8037, 8037, 8037,
+     8140, 1478, 6976, 8149, 8064, 8064, 8064, 8068, 8068, 8068,
+     8068, 8068, 8068, 8068, 8068, 8068, 8068, 8068, 8068, 8068,
+     8068, 8068, 8068, 8068, 8068, 8068, 8068, 8150, 4702, 8153,
+     8068, 8068, 8068, 8068, 8068, 8068, 8068, 8135, 8135, 8135,
+     8135, 8039, 8039, 8039, 8039, 8052, 8052, 8052, 8052, 8044,
+     8044, 8044, 8044, 8154, 8068, 8068, 8068, 8071, 8136, 8155,
+     8071, 8156, 8040, 8045, 8045, 8045, 8045, 8052, 8052, 8052,
+     8052, 8072, 8074, 8081, 8072, 8074, 8081, 8066, 8151, 8071,
+
+     8066, 8151, 8071, 8068, 8068, 8068, 8073, 8073, 8073, 8073,
+     8073, 8073, 8073, 8073, 8073, 8073, 8073, 8073, 8073, 8073,
+     8073, 8073, 8073, 8073, 8073, 8073, 8158, 8041, 8165, 8073,
+     8073, 8073, 8073, 8073, 8073, 8073, 8046, 8046, 8046, 8046,
+     8141, 8141, 8141, 8141, 8142, 8142, 8142, 8142, 2888, 1514,
+     1514, 1514, 1514, 8073, 8073, 8073, 4848, 8047, 8166, 1516,
+     8072, 2582, 8074, 8072, 8076, 8074, 8157, 8076, 8144, 8157,
+     1478, 8081, 1516, 8074, 8081, 8151, 8074, 8081, 8151, 8167,
+     8081, 8168, 8073, 8073, 8073, 8068, 8068, 8068, 8068, 8068,
+     8068, 8068, 8068, 8068, 8068, 8068, 8068, 8068, 8068, 8068,
+
+     8068, 8068, 8068, 8068, 8068, 8169, 8170, 2819, 8068, 8068,
+     8068, 8068, 8068, 8068, 8068, 8145, 8147, 8147, 8147, 8147,
+     8160, 2819, 1514, 1514, 1514, 1514, 2819, 2819, 2819, 2819,
+     2078, 2078, 8068, 8083, 8068, 2136, 2136, 8148, 8161, 1516,
+     8164, 8163, 8162, 1478, 8099, 1516, 8151, 8099, 8157, 8151,
+     8157, 8157, 8151, 8157, 3289, 8151, 8157, 3289, 2236, 8157,
+     2236, 8068, 8068, 8068, 8073, 8073, 8073, 8073, 8073, 8073,
+     8073, 8073, 8073, 8073, 8073, 8073, 8073, 8073, 8073, 8073,
+     8073, 8073, 8073, 8073, 8146, 2955, 2955, 8073, 8073, 8073,
+     8073, 8073, 8073, 8073, 2819, 2955, 8173, 6887, 2955, 8172,
+
+     2955, 8177, 2955, 2955, 6887, 8180, 8181, 8184, 8175, 8189,
+     8190, 8073, 8086, 8073, 8176, 8191, 8174, 8132, 8132, 8132,
+     8132, 8178, 8179, 8179, 8178, 8141, 8141, 8141, 8141, 8141,
+     8141, 8141, 8141, 8151, 8151, 8193, 8151, 8151, 1464, 8194,
+     8073, 8073, 8073, 8097, 8097, 8097, 8097, 8097, 8097, 8097,
+     8097, 8097, 8097, 8097, 8097, 8097, 8097, 8097, 8097, 8097,
+     8097, 8097, 8097, 8199, 8200, 8201, 8097, 8097, 8097, 8097,
+     8097, 8097, 8097, 8179, 8179, 8179, 8179, 8135, 8135, 8135,
+     8135, 8182, 8182, 8182, 8182, 8142, 8142, 8142, 8142, 2819,
+     8097, 8097, 8097, 8192, 1478, 2819, 8192, 8157, 8136, 2819,
+
+     8157, 2819, 8183, 8202, 8196, 8151, 8195, 2955, 8151, 8144,
+     8197, 8192, 6887, 8211, 8192, 8212, 8215, 8198, 8203, 8097,
+     8097, 8097, 8068, 8068, 8068, 8068, 8068, 8068, 8068, 8068,
+     8068, 8068, 8068, 8068, 8068, 8068, 8068, 8068, 8068, 8068,
+     8068, 8068, 8216, 8217, 8218, 8068, 8068, 8068, 8068, 8068,
+     8068, 8068, 8142, 8142, 8142, 8142, 8185, 8185, 8185, 8185,
+     8147, 8147, 8147, 8147, 1514, 1514, 1514, 1514, 2955, 8068,
+     8068, 8068, 8188, 8188, 8188, 8188, 8144, 8186, 8223, 1516,
+     2955, 8148, 8224, 1516, 8206, 1478, 8192, 1516, 8192, 8192,
+     8225, 8192, 8226, 2582, 8192, 8204, 2819, 8192, 8068, 8068,
+
+     8068, 8103, 8103, 8103, 8103, 8103, 8103, 8103, 8103, 8103,
+     8103, 8103, 8103, 8103, 8103, 8103, 8103, 8103, 8103, 8103,
+     8103, 8233, 2955, 8219, 8103, 8103, 8103, 8103, 8103, 8103,
+     8103, 8187, 2819, 8205, 2955, 8207, 8208, 8208, 8207, 8208,
+     8208, 8208, 8208, 8209, 8209, 8209, 8209, 2819, 8103, 8103,
+     8103, 8182, 8182, 8182, 8182, 8188, 8188, 8188, 8188, 8192,
+     1478, 2819, 8192, 8234, 8210, 8188, 8188, 8188, 8188, 8237,
+     8220, 8239, 8183, 2955, 8221, 2955, 8244, 8103, 8103, 8103,
+     8068, 8068, 8068, 8068, 8068, 8068, 8068, 8068, 8068, 8068,
+     8068, 8068, 8068, 8068, 8068, 8068, 8068, 8068, 8068, 8068,
+
+     8227, 8245, 8229, 8068, 8068, 8068, 8068, 8068, 8068, 8068,
+     8185, 8185, 8185, 8185, 8213, 8213, 8213, 8213, 8255, 2819,
+     8256, 2955, 2955, 1514, 1514, 1514, 1514, 8068, 8110, 8068,
+     8228, 8186, 8259, 1516, 8222, 2582, 2819, 8230, 8231, 8232,
+     8232, 8231, 8240, 8241, 1478, 8240, 1516, 8213, 8213, 8213,
+     8213, 8213, 8213, 8213, 8213, 8260, 8068, 8068, 8068, 8103,
+     8103, 8103, 8103, 8103, 8103, 8103, 8103, 8103, 8103, 8103,
+     8103, 8103, 8103, 8103, 8103, 8103, 8103, 8103, 8103, 3908,
+     3907, 3906, 8103, 8103, 8103, 8103, 8103, 8103, 8103, 8214,
+     8232, 8232, 8232, 8232, 8209, 8209, 8209, 8209, 8235, 8235,
+
+     8235, 8235, 2819, 2819, 3903, 2955, 8103, 8113, 8103, 8243,
+     8240, 1478, 8246, 8240, 8240, 8210, 2955, 8240, 3902, 8236,
+     3901, 1516, 8257, 8248, 8249, 8250, 8250, 8249, 8253, 8253,
+     8253, 8253, 3896, 3895, 3883, 8103, 8103, 8103, 5848, 5848,
+     5848, 5849, 5848, 5848, 5848, 5848, 5848, 5848, 5848, 5848,
+     5848, 5848, 5848, 5848, 5848, 5848, 5848, 5848, 5850, 5850,
+     5850, 5848, 5848, 5848, 5848, 5848, 5848, 5848, 5850, 5850,
+     5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850,
+     5850, 5850, 5850, 5850, 5850, 5848, 5848, 5848, 5850, 5850,
+     5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850,
+
+     5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850,
+     5850, 5850, 5850, 5850, 5848, 5848, 5848, 5848, 5848, 5848,
+     5849, 5848, 5848, 5848, 5848, 5848, 5848, 5848, 5848, 5848,
+     5848, 5848, 5848, 5848, 5848, 5848, 5848, 5878, 5878, 5878,
+     5848, 5848, 5848, 5848, 5848, 5848, 5848, 5878, 5878, 5878,
+     5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878,
+     5878, 5878, 5878, 5878, 5848, 5879, 5848, 5878, 5878, 5878,
+     5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878,
+     5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878,
+     5878, 5878, 5878, 5848, 5848, 5848, 8133, 8134, 8134, 8133,
+
+     8240, 3877, 1477, 8240, 3873, 1514, 1514, 1514, 1514, 8250,
+     8250, 8250, 8250, 1514, 1514, 1514, 1514, 1478, 8251, 8251,
+     8251, 8251, 3870, 1479, 3867, 1399, 1478, 3859, 1516, 1399,
+     1478, 2819, 2955, 2955, 1478, 2819, 1516, 3811, 3810, 8252,
+     8254, 8254, 8254, 8254, 1480, 1481, 2819, 1482, 1483, 1484,
+     8258, 8261, 8262, 1485, 1486, 1487, 1488, 1489, 3653, 1490,
+     3809, 2582, 1491, 1492, 1493, 1494, 3653, 8152, 8152, 8152,
+     8152, 8152, 8152, 8152, 8152, 8152, 8152, 8152, 8152, 8152,
+     8152, 8152, 8152, 8152, 8152, 8152, 8152, 2792, 3808, 3807,
+     8152, 8152, 8152, 8152, 8152, 8152, 8152, 3806, 8235, 8235,
+
+     8235, 8235, 8263, 8264, 8264, 8263, 8264, 8264, 8264, 8264,
+     8251, 8251, 8251, 8251, 8152, 8152, 8152, 1450, 1449, 8236,
+     8240, 1516, 1449, 8240, 1450, 1567, 1580, 1478, 1450, 1567,
+     1580, 8252, 8254, 8254, 8254, 8254, 8253, 8253, 8253, 8253,
+     3805, 3804, 3803, 8152, 8152, 8152, 8152, 8152, 8152, 8152,
+     8152, 8152, 8152, 8152, 8152, 8152, 8152, 8152, 8152, 8152,
+     8152, 8152, 8152, 8152, 8152, 8152, 2955, 3802, 3801, 8152,
+     8152, 8152, 8152, 8152, 8152, 8152, 8254, 8254, 8254, 8254,
+     8271, 8272, 8272, 8271, 8272, 8272, 8272, 8272, 8273, 8274,
+     8274, 8273, 3800, 8152, 8159, 8152, 8274, 8274, 8274, 8274,
+
+     8275, 8276, 8276, 8275, 3799, 1478, 8277, 8278, 8278, 8277,
+     8279, 8280, 8280, 8279, 3795, 3794, 3793, 1478, 8281, 8282,
+     8282, 8281, 8152, 8152, 8152, 8152, 8152, 8152, 8152, 8152,
+     8152, 8152, 8152, 8152, 8152, 8152, 8152, 8152, 8152, 8152,
+     8152, 8152, 8152, 8152, 8152, 3792, 3791, 3784, 8152, 8152,
+     8152, 8152, 8152, 8152, 8152, 8276, 8276, 8276, 8276, 8278,
+     8278, 8278, 8278, 8280, 8280, 8280, 8280, 8282, 8282, 8282,
+     8282, 1570, 8152, 8152, 8152, 1610, 1478, 1638, 1570, 1610,
+     1478, 1638, 1570, 1723, 1478, 3783, 3782, 1723, 1478, 8283,
+     8284, 8284, 8283, 8285, 8286, 8286, 8285, 8287, 8288, 8288,
+
+     8287, 8152, 8152, 8152, 8152, 8152, 8152, 8152, 8152, 8152,
+     8152, 8152, 8152, 8152, 8152, 8152, 8152, 8152, 8152, 8152,
+     8152, 8152, 8152, 8152, 3780, 3779, 3776, 8152, 8152, 8152,
+     8152, 8152, 8152, 8152, 8284, 8284, 8284, 8284, 8286, 8286,
+     8286, 8286, 8288, 8288, 8288, 8288, 8289, 8290, 8290, 8289,
+     1585, 8152, 8171, 8152, 2043, 1478, 2046, 1585, 2043, 1478,
+     2046, 1585, 3775, 1478, 8291, 8292, 8292, 8291, 8293, 8294,
+     8294, 8293, 8295, 8296, 8296, 8295, 8297, 8298, 8298, 8297,
+     8152, 8152, 8152, 8238, 8238, 8238, 8238, 8238, 8238, 8238,
+     8238, 8238, 8238, 8238, 8238, 8238, 8238, 8238, 8238, 8238,
+
+     8238, 8238, 8238, 3771, 3770, 3767, 8238, 8238, 8238, 8238,
+     8238, 8238, 8238, 8290, 8290, 8290, 8290, 8292, 8292, 8292,
+     8292, 8294, 8294, 8294, 8294, 8296, 8296, 8296, 8296, 1724,
+     8238, 8238, 8238, 2049, 1478, 2163, 1724, 2049, 1478, 2163,
+     1724, 2167, 1478, 3766, 3765, 2167, 1478, 8299, 8300, 8300,
+     8299, 8301, 8302, 8302, 8301, 8303, 8304, 8304, 8303, 8238,
+     8238, 8238, 8238, 8238, 8238, 8238, 8238, 8238, 8238, 8238,
+     8238, 8238, 8238, 8238, 8238, 8238, 8238, 8238, 8238, 8238,
+     8238, 8238, 3764, 3763, 3762, 8238, 8238, 8238, 8238, 8238,
+     8238, 8238, 8298, 8298, 8298, 8298, 8300, 8300, 8300, 8300,
+
+     8302, 8302, 8302, 8302, 8304, 8304, 8304, 8304, 1742, 8238,
+     8242, 8238, 2181, 1478, 2324, 1742, 2181, 1478, 2324, 1742,
+     2348, 1478, 3759, 3758, 2348, 1478, 8305, 8306, 8306, 8305,
+     8307, 8308, 8308, 8307, 8309, 8310, 8310, 8309, 8238, 8238,
+     8238, 8238, 8238, 8238, 8238, 8238, 8238, 8238, 8238, 8238,
+     8238, 8238, 8238, 8238, 8238, 8238, 8238, 8238, 8238, 8238,
+     8238, 3757, 3751, 3750, 8238, 8238, 8238, 8238, 8238, 8238,
+     8238, 8306, 8306, 8306, 8306, 8308, 8308, 8308, 8308, 8310,
+     8310, 8310, 8310, 8311, 8312, 8312, 8311, 2164, 8238, 8238,
+     8238, 2380, 1478, 2475, 2164, 2380, 1478, 2475, 2164, 3747,
+
+     1478, 8313, 8314, 8314, 8313, 8315, 8316, 8316, 8315, 8317,
+     8318, 8318, 8317, 8319, 8320, 8320, 8319, 8238, 8238, 8238,
+     8238, 8238, 8238, 8238, 8238, 8238, 8238, 8238, 8238, 8238,
+     8238, 8238, 8238, 8238, 8238, 8238, 8238, 8238, 8238, 8238,
+     3746, 3745, 3744, 8238, 8238, 8238, 8238, 8238, 8238, 8238,
+     8312, 8312, 8312, 8312, 8314, 8314, 8314, 8314, 8316, 8316,
+     8316, 8316, 8318, 8318, 8318, 8318, 2183, 8238, 8247, 8238,
+     2477, 1478, 2480, 2183, 2477, 1478, 2480, 2183, 2489, 1478,
+     3743, 3740, 2489, 1478, 8321, 8322, 8322, 8321, 8323, 8324,
+     8324, 8323, 8325, 8326, 8326, 8325, 8238, 8238, 8238, 8265,
+
+     8265, 8265, 8265, 8265, 8265, 8265, 8265, 8265, 8265, 8265,
+     8265, 8265, 8265, 8265, 8265, 8265, 8265, 8265, 8265, 3737,
+     3736, 3735, 8265, 8265, 8265, 8265, 8265, 8265, 8265, 8320,
+     8320, 8320, 8320, 8322, 8322, 8322, 8322, 8324, 8324, 8324,
+     8324, 8326, 8326, 8326, 8326, 3728, 8265, 8265, 8265, 2351,
+     1478, 3725, 1746, 1746, 1478, 1746, 2351, 1746, 1478, 3724,
+     2351, 3723, 1478, 8327, 8328, 8328, 8327, 8329, 8330, 8330,
+     8329, 8331, 8332, 8332, 8331, 8265, 8265, 8265, 8266, 8266,
+     8266, 8266, 8266, 8266, 8266, 8266, 8266, 8266, 8266, 8266,
+     8266, 8266, 8266, 8266, 8266, 8266, 8266, 8266, 3722, 3721,
+
+     3720, 8266, 8266, 8266, 8266, 8266, 8266, 8266, 8328, 8328,
+     8328, 8328, 8330, 8330, 8330, 8330, 8332, 8332, 8332, 8332,
+     8333, 8334, 8334, 8333, 2497, 8266, 8266, 8266, 2497, 1478,
+     3718, 1770, 1770, 1478, 1770, 3717, 1770, 1478, 8335, 8336,
+     8336, 8335, 8337, 8338, 8338, 8337, 8339, 8340, 8340, 8339,
+     8341, 8342, 8342, 8341, 8266, 8266, 8266, 8265, 8265, 8265,
+     8265, 8265, 8265, 8265, 8265, 8265, 8265, 8265, 8265, 8265,
+     8265, 8265, 8265, 8265, 8265, 8265, 8265, 2736, 3716, 3715,
+     8265, 8265, 8265, 8265, 8265, 8265, 8265, 8334, 8334, 8334,
+     8334, 8336, 8336, 8336, 8336, 8338, 8338, 8338, 8338, 8340,
+
+     8340, 8340, 8340, 2362, 8265, 8267, 8265, 2731, 1478, 2500,
+     2362, 2362, 1478, 2500, 2362, 2510, 1478, 3713, 2729, 2510,
+     1478, 8343, 8344, 8344, 8343, 8345, 8346, 8346, 8345, 8347,
+     8348, 8348, 8347, 8265, 8265, 8265, 8266, 8266, 8266, 8266,
+     8266, 8266, 8266, 8266, 8266, 8266, 8266, 8266, 8266, 8266,
+     8266, 8266, 8266, 8266, 8266, 8266, 2726, 2726, 2720, 8266,
+     8266, 8266, 8266, 8266, 8266, 8266, 8342, 8342, 8342, 8342,
+     8344, 8344, 8344, 8344, 8346, 8346, 8346, 8346, 8348, 8348,
+     8348, 8348, 2381, 8266, 8268, 8266, 2518, 1478, 2529, 2381,
+     2518, 1478, 2529, 2381, 2531, 1478, 2720, 1639, 2531, 1478,
+
+     8349, 8350, 8350, 8349, 8351, 8352, 8352, 8351, 8353, 8354,
+     8354, 8353, 8266, 8266, 8266, 8265, 8265, 8265, 8265, 8265,
+     8265, 8265, 8265, 8265, 8265, 8265, 8265, 8265, 8265, 8265,
+     8265, 8265, 8265, 8265, 8265, 3700, 3699, 2699, 8265, 8265,
+     8265, 8265, 8265, 8265, 8265, 8350, 8350, 8350, 8350, 8352,
+     8352, 8352, 8352, 8354, 8354, 8354, 8354, 8355, 8356, 8356,
+     8355, 2538, 8265, 8265, 8265, 2538, 1478, 2699, 1746, 1746,
+     1478, 1746, 3694, 1746, 1478, 8357, 8358, 8358, 8357, 8359,
+     8360, 8360, 8359, 8361, 8362, 8362, 8361, 8363, 8364, 8364,
+     8363, 8265, 8265, 8265, 8266, 8266, 8266, 8266, 8266, 8266,
+
+     8266, 8266, 8266, 8266, 8266, 8266, 8266, 8266, 8266, 8266,
+     8266, 8266, 8266, 8266, 3692, 3691, 3690, 8266, 8266, 8266,
+     8266, 8266, 8266, 8266, 8356, 8356, 8356, 8356, 8358, 8358,
+     8358, 8358, 8360, 8360, 8360, 8360, 8362, 8362, 8362, 8362,
+     3635, 8266, 8266, 8266, 2476, 1478, 3689, 1813, 1813, 1478,
+     1813, 2476, 1813, 1478, 3688, 2476, 3687, 1478, 8365, 8366,
+     8366, 8365, 8367, 8368, 8368, 8367, 8369, 8370, 8370, 8369,
+     8266, 8266, 8266, 8265, 8265, 8265, 8265, 8265, 8265, 8265,
+     8265, 8265, 8265, 8265, 8265, 8265, 8265, 8265, 8265, 8265,
+     8265, 8265, 8265, 3686, 3685, 3682, 8265, 8265, 8265, 8265,
+
+     8265, 8265, 8265, 8364, 8364, 8364, 8364, 8366, 8366, 8366,
+     8366, 8368, 8368, 8368, 8368, 8370, 8370, 8370, 8370, 2503,
+     8265, 8269, 8265, 2550, 1478, 1499, 2503, 2550, 1478, 1499,
+     2503, 1505, 1478, 3643, 3640, 1505, 1478, 8371, 8372, 8372,
+     8371, 8373, 8374, 8374, 8373, 8375, 8376, 8376, 8375, 8265,
+     8265, 8265, 8266, 8266, 8266, 8266, 8266, 8266, 8266, 8266,
+     8266, 8266, 8266, 8266, 8266, 8266, 8266, 8266, 8266, 8266,
+     8266, 8266, 3639, 3638, 3626, 8266, 8266, 8266, 8266, 8266,
+     8266, 8266, 8372, 8372, 8372, 8372, 8374, 8374, 8374, 8374,
+     8376, 8376, 8376, 8376, 8377, 8378, 8378, 8377, 2512, 8266,
+
+     8270, 8266, 1558, 1478, 1619, 2512, 1558, 1478, 1619, 2512,
+     3614, 1478, 8378, 8378, 8378, 8378, 8379, 8380, 8380, 8379,
+     8380, 8380, 8380, 8380, 8381, 8382, 8382, 8381, 8266, 8266,
+     8266, 3612, 3611, 1478, 8382, 8382, 8382, 8382, 3610, 3609,
+     3608, 1478, 8383, 8384, 8384, 8383, 8384, 8384, 8384, 8384,
+     8385, 8386, 8386, 8385, 3605, 1478, 8386, 8386, 8386, 8386,
+     8387, 8388, 8388, 8387, 3604, 3601, 3600, 1478, 8388, 8388,
+     8388, 8388, 8389, 8390, 8390, 8389, 3599, 1478, 8390, 8390,
+     8390, 8390, 8391, 8392, 8392, 8391, 3598, 3597, 3596, 1478,
+     8392, 8392, 8392, 8392, 8393, 8394, 8394, 8393, 3590, 1478,
+
+     8394, 8394, 8394, 8394, 8395, 8396, 8396, 8395, 3589, 3588,
+     3587, 1478, 8396, 8396, 8396, 8396, 8397, 1497, 1497, 8397,
+     3586, 1478, 1497, 1497, 1497, 1497, 8397, 1497, 1497, 8397,
+     2047, 2047, 1629, 1478, 2764, 2895, 1629, 2047, 2764, 2895,
+     3585, 2047, 2573, 1478,  312,  312,  312,  312,  312,  312,
+      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
+      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
+      312,  312,  312,  312,  312,  312,  321,  321,  321,  321,
+      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
+      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
+
+      321,  321,  321,  321,  321,  321,  321,  321,  357,  357,
+      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
+      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
+      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
+      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
+      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
+      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
+      374,  374,  390,  390,  390,  390,  390,  390,  390,  390,
+      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
+      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
+
+      390,  390,  390,  390,  436,  436,  436,  436,  436,  436,
+      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
+      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
+      436,  436,  436,  436,  436,  436,  464,  464,  464,  464,
+      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
+      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
+      464,  464,  464,  464,  464,  464,  464,  464,  475,  475,
+      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
+      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
+      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
+
+      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
+      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
+      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
+      483,  483,  503,  503,  503,  503,  503,  503,  503,  503,
+      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
+      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
+      503,  503,  503,  503,  513,  513,  513,  513,  513,  513,
+      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
+      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
+      513,  513,  513,  513,  513,  513,  521,  521,  521,  521,
+
+      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
+      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
+      521,  521,  521,  521,  521,  521,  521,  521,  557,  557,
+      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
+      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
+      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
+      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
+      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
+      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
+      577,  577,  566,  566,  566,  566,  566,  566,  566,  566,
+
+      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
+      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
+      566,  566,  566,  566,  594,  594,  594,  594,  594,  594,
+      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
+      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
+      594,  594,  594,  594,  594,  594,  603,  603,  603,  603,
+      603,  603,  603,  603,  603,  603,  603,  603,  603,  603,
+      603,  603,  603,  603,  603,  603,  603,  603,  603,  603,
+      603,  603,  603,  603,  603,  603,  603,  603,  611,  611,
+      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
+
+      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
+      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
+      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
+      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
+      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
+      622,  622,  637,  637,  637,  637,  637,  637,  637,  637,
+      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
+      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
+      637,  637,  637,  637,  651,  651,  651,  651,  651,  651,
+      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
+
+      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
+      651,  651,  651,  651,  651,  651,  663,  663,  663,  663,
+      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
+      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
+      663,  663,  663,  663,  663,  663,  663,  663,  670,  670,
+      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
+      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
+      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
+      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
+      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
+
+      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
+      680,  680,  688,  688,  688,  688,  688,  688,  688,  688,
+      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
+      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
+      688,  688,  688,  688,  695,  695,  695,  695,  695,  695,
+      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
+      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
+      695,  695,  695,  695,  695,  695,  723,  723,  723,  723,
+      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
+      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
+
+      723,  723,  723,  723,  723,  723,  723,  723,  757,  757,
+      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
+      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
+      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
+      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
+      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
+      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
+      793,  793,  801,  801,  801,  801,  801,  801,  801,  801,
+      801,  801,  801,  801,  801,  801,  801,  801,  801,  801,
+      801,  801,  801,  801,  801,  801,  801,  801,  801,  801,
+
+      801,  801,  801,  801,  806,  806,  806,  806,  806,  806,
+      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
+      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
+      806,  806,  806,  806,  806,  806,  831,  831,  831,  831,
+      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
+      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
+      831,  831,  831,  831,  831,  831,  831,  831,  844,  844,
+      844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
+      844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
+      844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
+
+      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
+      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
+      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
+      864,  864,  873,  873,  873,  873,  873,  873,  873,  873,
+      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
+      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
+      873,  873,  873,  873,  881,  881,  881,  881,  881,  881,
+      881,  881,  881,  881,  881,  881,  881,  881,  881,  881,
+      881,  881,  881,  881,  881,  881,  881,  881,  881,  881,
+      881,  881,  881,  881,  881,  881,  889,  889,  889,  889,
+
+      889,  889,  889,  889,  889,  889,  889,  889,  889,  889,
+      889,  889,  889,  889,  889,  889,  889,  889,  889,  889,
+      889,  889,  889,  889,  889,  889,  889,  889,  905,  905,
+      905,  905,  905,  905,  905,  905,  905,  905,  905,  905,
+      905,  905,  905,  905,  905,  905,  905,  905,  905,  905,
+      905,  905,  905,  905,  905,  905,  905,  905,  905,  905,
+      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
+      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
+      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
+      919,  919,  928,  928,  928,  928,  928,  928,  928,  928,
+
+      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
+      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
+      928,  928,  928,  928,  941,  941,  941,  941,  941,  941,
+      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
+      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
+      941,  941,  941,  941,  941,  941,  960,  960,  960,  960,
+      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
+      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
+      960,  960,  960,  960,  960,  960,  960,  960,  975,  975,
+      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
+
+      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
+      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
+      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
+      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
+      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
+      985,  985,  989,  989,  989,  989,  989,  989,  989,  989,
+      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
+      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
+      989,  989,  989,  989,  999,  999,  999,  999,  999,  999,
+      999,  999,  999,  999,  999,  999,  999,  999,  999,  999,
+
+      999,  999,  999,  999,  999,  999,  999,  999,  999,  999,
+      999,  999,  999,  999,  999,  999, 1004, 1004, 1004, 1004,
+     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
+     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
+     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,  464,  464,
+      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
+      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
+      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
+     1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,
+     1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,
+
+     1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,
+     1038, 1038, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
+     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
+     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
+     1045, 1045, 1045, 1045, 1067, 1067, 1067, 1067, 1067, 1067,
+     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
+     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
+     1067, 1067, 1067, 1067, 1067, 1067, 1077, 1077, 1077, 1077,
+     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
+     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
+
+     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1084, 1084,
+     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
+     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
+     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
+     1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091,
+     1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091,
+     1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091,
+     1091, 1091, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
+     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
+     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
+
+     1098, 1098, 1098, 1098, 1114, 1114, 1114, 1114, 1114, 1114,
+     1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
+     1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
+     1114, 1114, 1114, 1114, 1114, 1114, 1121, 1121, 1121, 1121,
+     1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121,
+     1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121,
+     1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1128, 1128,
+     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
+     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
+     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
+
+     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
+     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
+     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
+     1137, 1137, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
+     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
+     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
+     1145, 1145, 1145, 1145, 1153, 1153, 1153, 1153, 1153, 1153,
+     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
+     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
+     1153, 1153, 1153, 1153, 1153, 1153, 1161, 1161, 1161, 1161,
+
+     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
+     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
+     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1169, 1169,
+     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
+     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
+     1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
+     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
+     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
+     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
+     1174, 1174, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
+
+     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
+     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
+     1185, 1185, 1185, 1185, 1193, 1193, 1193, 1193, 1193, 1193,
+     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
+     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
+     1193, 1193, 1193, 1193, 1193, 1193, 1203, 1203, 1203, 1203,
+     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
+     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
+     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1214, 1214,
+     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
+
+     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
+     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
+     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
+     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
+     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
+     1227, 1227, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
+     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
+     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
+     1234, 1234, 1234, 1234, 1250, 1250, 1250, 1250, 1250, 1250,
+     1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250,
+
+     1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250,
+     1250, 1250, 1250, 1250, 1250, 1250, 1263, 1263, 1263, 1263,
+     1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
+     1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
+     1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1274, 1274,
+     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
+     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
+     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
+     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
+     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
+
+     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
+     1283, 1283, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
+     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
+     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
+     1292, 1292, 1292, 1292, 1314, 1314, 1314, 1314, 1314, 1314,
+     1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314,
+     1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314,
+     1314, 1314, 1314, 1314, 1314, 1314, 1325, 1325, 1325, 1325,
+     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
+     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
+
+     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1334, 1334,
+     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
+     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
+     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
+     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
+     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
+     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
+     1353, 1353, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
+     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
+     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
+
+     1366, 1366, 1366, 1366, 1379, 1379, 1379, 1379, 1379, 1379,
+     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379,
+     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379,
+     1379, 1379, 1379, 1379, 1379, 1379,  312,  312,  312,  312,
+      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
+      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
+      312,  312,  312,  312,  312,  312,  312,  312, 1395, 1395,
+     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
+     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
+     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
+
+     1402, 1972, 1640, 1402, 1640, 1972, 2045, 2050, 2050, 1402,
+     2530, 1640, 2573, 2045, 2050, 1640, 1402, 2530, 2050, 3577,
+     2045, 2530, 2391, 1402, 2045, 2391, 3576, 1402, 1416, 1416,
+     1416, 1416, 2391, 2169, 1416, 2169, 2391, 3575, 2452, 3574,
+     1462, 2452, 2169, 2478, 2478, 1416, 2169, 3564, 2452, 3563,
+     2478, 1416, 2452, 2566, 2478, 1416, 2532, 3554, 1416, 1420,
+     1420, 1420, 1420, 2532, 2717, 1420, 2482, 2532, 2482, 1450,
+     2566, 3553, 3552, 1420, 2566, 2482, 1450, 1570, 3551, 2482,
+     1450, 2717, 1420, 2496, 1570, 2717, 1420, 1585, 1570, 1420,
+     1424, 1424, 1424, 1424, 1585, 1986, 2020, 2027, 1585, 1986,
+
+     2020, 2027, 3544, 2713, 1424, 2715, 1424, 1424, 1424, 1424,
+     2713, 3543, 2715, 1424, 2713, 1724, 2715, 1424, 1430, 1430,
+     1430, 1430, 1724, 1640, 1430, 1640, 1724, 1742, 2776, 2481,
+     3537, 2481, 1640, 2818, 1742, 2776, 1640, 3536, 1742, 2776,
+     2818, 1430, 2818, 2907, 2818, 1430, 1436, 1436, 1436, 1436,
+     2907, 2954, 1436, 2895, 2907, 2479, 2479, 2895, 2954, 3142,
+     2954, 3127, 2954, 1436, 3127, 3533, 3142, 2764, 3127, 1436,
+     3142, 2764, 3127, 1436, 3138, 3138, 1436, 1445, 1445, 1445,
+     1445, 3138, 3529, 2045, 3519, 3138, 1445, 3517, 2047, 2047,
+     2045, 2050, 2050, 1445, 1445, 2047, 3516, 2045, 2050, 2047,
+
+     1445, 2045, 2050, 2907, 1445, 1448, 1448, 1448, 1448, 2954,
+     2907, 1448, 2164, 2169, 2907, 2169, 2954, 3487, 2954, 2164,
+     2954, 3487, 2169, 2164, 3513, 2335, 2169, 3506, 1448, 2335,
+     2183, 2776, 1448, 1456, 1456, 1456, 1456, 2183, 2776, 1456,
+     2818, 2183, 2776, 3492, 2764, 3509, 2351, 2818, 2764, 2818,
+     3492, 2818, 3023, 2351, 3492, 3506, 1456, 2351, 3504, 2362,
+     1456, 1456, 1463, 1463, 1463, 1463, 2362, 2362, 2566, 2393,
+     2362, 1396, 2566, 3497, 2393, 2381, 1463, 2393, 1463, 1463,
+     3497, 2907, 2381, 3497, 3497, 1463, 2381, 2387, 2907, 1463,
+     1469, 1469, 2907, 1469, 2384, 1469, 1469, 1469, 1469, 3499,
+
+     1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469,
+     1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469,
+     1469, 1469, 1499, 1499, 1499, 1499, 2391, 2452, 1499, 2391,
+     2452, 2476, 3498, 2363, 2363, 3494, 2391, 2452, 2476, 1499,
+     2391, 2452, 2476, 2609, 2347, 1499, 2337, 2609, 3538, 1499,
+     2478, 2478, 1499, 1505, 1505, 1505, 1505, 2478, 2482, 1505,
+     2482, 2478, 3488, 2503, 1505, 3538, 2512, 2482, 2530, 3538,
+     2503, 2482, 3484, 2512, 2503, 2530, 1505, 2512, 2532, 2530,
+     1505, 1515, 1515, 1515, 1515, 2532, 2717, 3538, 3558, 2532,
+     2717, 3538, 3572, 3481, 3572, 3558, 1585, 1515, 1515, 3558,
+
+     1515, 3572, 2305, 1585, 1515, 3572, 2713, 1585, 1515, 1548,
+     1548, 1548, 1548, 2713, 2715, 1548, 2305, 2713, 3704, 3749,
+     3704, 2715, 2776, 1396, 2305, 2715, 3749, 3704, 3894, 2776,
+     3749, 3704, 1548, 2776, 2305, 3894, 1548, 1549, 1549, 3894,
+     1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549,
+     1549, 1549, 1549, 1549, 1549, 1549, 1549, 3478, 1549, 1549,
+     1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549, 1550,
+     1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550,
+     1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550,
+     1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550,
+
+     1550, 1558, 1558, 1558, 1558, 2818, 2907, 1558, 3127, 3474,
+     2794, 3127, 2818, 2907, 2818, 3127, 2818, 2907, 1558, 3127,
+     2783, 2780, 2046, 2049, 1558, 2046, 2046, 2049, 1558, 2954,
+     3142, 1558, 1562, 1562, 1562, 1562, 2954, 3142, 2954, 3469,
+     2954, 3142, 2046, 3138, 3138, 3492, 2046, 2049, 1562, 1562,
+     3138, 1562, 3492, 2477, 3138, 1562, 3492, 3463, 3460, 1562,
+     1566, 1566, 1566, 1566, 2049, 3497, 1566, 3459, 2049, 4529,
+     2477, 4529, 3497, 3558, 2477, 3497, 3497, 3572, 4529, 3572,
+     3558, 5419, 4529, 1566, 3558, 5419, 3572, 1566, 1594, 1594,
+     3572, 3419, 1594, 2477, 3413, 1594, 1594, 2477, 1594, 1594,
+
+     1594, 1594, 1594, 1594, 3409, 1594, 1594, 1594, 1594, 1594,
+     1594, 3406, 1594, 1594, 1594, 1594, 1594, 3395, 3372, 1594,
+     1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595,
+     1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595,
+     1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595,
+     1595, 1595, 1600, 1600, 3368, 1600, 1600, 1600, 1600, 1600,
+     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
+     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
+     1600, 1600, 1600, 1600, 1602, 1602, 2793, 1602, 3007, 1602,
+     1602, 1602, 1602, 3006, 1602, 1602, 1602, 1602, 1602, 1602,
+
+     1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602,
+     1602, 1602, 1602, 1602, 1602, 1602, 1613, 1613, 1613, 1613,
+     1585, 3568, 4593, 2177, 5482, 3568, 4593, 1585, 5482, 2168,
+     1613, 1585, 1613, 1613, 8050, 3365, 2168, 2159, 8050, 1613,
+     3704, 3749, 3704, 1613, 1619, 1619, 1619, 1619, 3749, 3704,
+     1619, 2776, 3749, 3704, 3322, 3315, 3311, 2818, 2776, 3308,
+     3290, 1619, 2776, 3258, 2818, 3238, 2818, 1619, 2818, 3197,
+     3190, 1619, 3894, 2907, 1619, 1622, 1622, 1622, 1622, 3894,
+     2907, 3186, 3183, 3894, 2907, 3172, 2954, 4529, 2900, 4529,
+     3148, 1622, 1622, 2954, 2051, 2954, 4529, 2954, 1622, 2051,
+
+     4529, 5440, 1622, 1625, 1625, 1625, 1625, 3749, 5440, 1625,
+     2776, 3147, 5440, 2818, 3749, 2048, 3894, 2776, 3749, 2048,
+     2818, 2776, 2818, 3894, 2818, 2044, 1625, 3894, 2907, 2954,
+     1625, 1629, 1629, 1629, 1629, 2907, 2954, 1629, 2954, 2907,
+     2954, 2044, 5440, 3146, 3749, 3894, 3145, 3144, 1629, 5440,
+     2042, 3749, 3894, 5440, 1629, 3749, 3894, 2040, 1629, 2907,
+     2954, 1629, 1632, 1632, 1632, 1632, 2907, 2954, 2029, 2954,
+     2907, 2954, 3140, 1585, 3139, 3749, 3894, 8398, 1632, 1632,
+     1585, 3135, 3749, 3894, 1585, 1632, 3749, 3894, 2907, 1632,
+     1637, 1637, 1637, 1637, 2954, 2907, 1637, 3749, 2008, 2907,
+
+     2776, 2954, 3132, 2954, 3749, 2954, 1998, 2776, 3749, 3894,
+     1988, 2776, 1977, 1637, 1975, 3119, 3894, 1637, 1643, 1643,
+     3894, 1643, 1643, 3113, 1643, 1643, 1643, 3109, 1643, 1643,
+     1643, 1643, 1643, 1643, 3106, 1643, 1643, 1643, 1643, 1643,
+     1643, 3103, 1643, 1643, 1926, 1643, 1643, 3102, 3096, 1643,
+     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
+     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
+     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
+     1644, 1644, 1649, 1649, 3093, 1649, 3050, 1649, 1649, 1649,
+     1649, 3043, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
+
+     1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
+     1649, 1649, 1649, 1649, 1658, 1658, 3039, 1658, 3036, 1658,
+     1658, 1658, 1658, 3018, 1658, 1658, 1658, 1658, 1658, 1658,
+     1658, 1658, 1658, 1658, 1658, 1658, 1658, 1658, 1658, 1658,
+     1658, 1658, 1658, 1658, 1658, 1658, 1667, 1667, 2815, 1667,
+     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
+     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
+     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1674, 1674,
+     3010, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
+     2801, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
+
+     1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
+     1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675,
+     1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675,
+     1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675,
+     1675, 1675, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
+     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
+     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
+     1682, 1682, 1682, 1682, 1684, 1684, 1684, 1684, 1684, 1684,
+     1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684,
+     1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684,
+
+     1684, 1684, 1684, 1684, 1684, 1684, 1689, 1874, 2955, 1689,
+     2947, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 2938, 1689,
+     1689, 1689, 2934, 1689, 1689, 1689, 2931, 1689, 1689, 1689,
+     1689, 1689, 2930, 1689, 1689, 1689, 1689, 1689, 1690, 1690,
+     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
+     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
+     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
+     1703, 1703, 2859, 1703, 1703, 2819, 1703, 1703, 1703, 1703,
+     1703, 1703, 1703, 1703, 1703, 1703, 1703, 1703, 1703, 1703,
+     1703, 1703, 1703, 1703, 1703, 2817, 1703, 2816, 1703, 1703,
+
+     1703, 1703, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704,
+     1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704,
+     1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704,
+     1704, 1704, 1704, 1704, 1713, 2813, 2805, 1713, 2802, 1713,
+     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
+     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
+     1713, 1713, 1713, 1713, 1713, 1713, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1718, 2799,
+
+     2798, 1718, 2762, 1718, 1718, 1718, 1718, 1718, 1718, 1718,
+     1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718,
+     1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718,
+     1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719,
+     1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719,
+     1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719,
+     1719, 1719, 1726, 1726, 2744, 1726, 2743, 1726, 1726, 1726,
+     1726, 1726, 1726, 1726, 2742, 1726, 1726, 2741, 2740, 1726,
+     1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726,
+     1726, 1726, 1726, 1726, 1727, 1727, 1727, 1727, 1727, 1727,
+
+     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
+     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
+     1727, 1727, 1727, 1727, 1727, 1727, 1794, 1794, 1794, 1794,
+     1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794,
+     1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794,
+     1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1861, 1861,
+     1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861,
+     1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861,
+     1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861,
+     1871, 2818, 3749, 1871, 2737, 2734, 2733, 1683, 2818, 3749,
+
+     2818, 1871, 2818, 3749, 1683, 1396, 1871, 1683, 1683, 1679,
+     2731, 1669, 1871, 1871, 1669, 1871, 2729, 1871, 1972, 1972,
+     1972, 1972, 2726, 2720, 1972, 1639, 2716, 1639, 1631, 1621,
+     1612, 2707, 2699, 2699, 2693, 1972, 2692, 2691, 2690, 2689,
+     2682, 1972, 2679, 2678, 1560, 1972, 2670, 2631, 1972, 1976,
+     1976, 1976, 1976, 2626, 2607, 2602, 2601, 2596, 2592, 2591,
+     2590, 2587, 2584, 2583, 2582, 1976, 1976, 2573, 1976, 2571,
+     2570, 2567, 1976, 2565, 2560, 2557, 1976, 1982, 1982, 1982,
+     1982, 1441, 1422, 1982, 1407, 1396, 2534, 2533, 2519, 2507,
+     1396, 1396, 2496, 1396, 2494, 2493, 1396, 2481, 2479, 2474,
+
+     1982, 1396, 2473, 2466, 1982, 1986, 1986, 1986, 1986, 2458,
+     1396, 1986, 2457, 2454, 1396, 2451, 2448, 1874, 1396, 2446,
+     1396, 2445, 1986, 2444, 2443, 1396, 1396, 2417, 1986, 1396,
+     2413, 2398, 1986, 1396, 1974, 1986, 1991, 1991, 1991, 1991,
+     2393, 2393, 2393, 2393, 1396, 1991, 2387, 1396, 2384, 1396,
+     1396, 1396, 1991, 1991, 1396, 1396, 1396, 2369, 2363, 1991,
+     1396, 1396, 2350, 1991, 1994, 1994, 1994, 1994, 1396, 2347,
+     1994, 2337, 1396, 2312, 2305, 2305, 2305, 2305, 2296, 1396,
+     1396, 2268, 2212, 1396, 2185, 1396, 2184, 1994, 1396, 2182,
+     2177, 1994, 1997, 1997, 2168, 1997, 1997, 1396, 1997, 1997,
+
+     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
+     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
+     1997, 1997, 1997, 1997, 1999, 1999, 1999, 1999, 1999, 1999,
+     2160, 1396, 1974, 1396, 2159, 1999, 1396, 1999, 1874, 1999,
+     2007, 2007, 1396, 2007, 2007, 2051, 2007, 2007, 2007, 2007,
+     2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007,
+     2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007,
+     2007, 2007, 2009, 2009, 2009, 2009, 2009, 2009, 2048, 2044,
+     1396, 2009, 2042, 2009, 2041, 2009, 2040, 2009, 2020, 2029,
+     2023, 2020, 1974, 1396, 2020, 2008, 1998, 1988, 1975, 2020,
+
+     1974, 1396, 1874, 1396, 1803, 1396, 1739, 1396, 1731, 1725,
+     1396, 2020, 1396, 1708, 1396, 2020, 2027, 2027, 2027, 2027,
+     1697, 1696, 2027, 1695, 1692, 1683, 1683, 1683, 1683, 1679,
+     1669, 1396, 1396, 2027, 1664, 1396, 1659, 1653, 1650, 2027,
+     1639, 1631, 1621, 2027, 1607, 1396, 2027, 2030, 2030, 2030,
+     2030, 1593, 1396, 1590, 1587, 1586, 1396, 1396, 1396, 1560,
+     1554, 1510, 1509, 2030, 2030, 1396, 1470, 1468, 1396, 1460,
+     2030, 1396, 1442, 1441, 2030, 2033, 2033, 2033, 2033, 1422,
+     1396, 2033, 1396, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 2033, 8398,
+
+     8398, 8398, 2033, 1794, 1794, 1794, 1794, 1794, 1794, 1794,
+     1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794,
+     1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794,
+     1794, 1794, 1794, 1794, 1794, 2172, 2172, 8398, 2172, 2172,
+     2172, 2172, 2172, 2172, 2172, 2172, 2172, 8398, 2172, 2172,
+     2172, 2172, 2172, 2172, 2172, 2172, 2172, 2172, 2172, 2172,
+     2172, 2172, 2172, 2172, 2172, 2172, 2172, 2173, 2173, 2173,
+     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
+     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
+     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2203,
+
+     2203, 2203, 2203, 2203, 2203, 2203, 2203, 2203, 2203, 2203,
+     2203, 2203, 2203, 2203, 2203, 2203, 2203, 2203, 2203, 2203,
+     2203, 2203, 2203, 2203, 2203, 2203, 2203, 2203, 2203, 2203,
+     2203, 1871, 8398, 8398, 1871, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 1871, 8398, 8398, 8398, 8398, 1871, 8398, 8398,
+     8398, 8398, 8398, 1871, 1871, 8398, 1871, 8398, 1871, 2297,
+     2297, 8398, 2297, 2297, 8398, 2297, 2297, 2297, 2297, 2297,
+     2297, 2297, 2297, 2297, 2297, 2297, 2297, 2297, 2297, 2297,
+     2297, 2297, 2297, 2297, 2297, 2297, 2297, 2297, 2297, 2297,
+     2297, 2298, 2298, 2298, 2298, 2298, 2298, 8398, 8398, 8398,
+
+     8398, 8398, 2298, 8398, 2298, 8398, 2298, 2304, 2304, 2304,
+     2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304,
+     2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304,
+     2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304, 2306,
+     2306, 2306, 2306, 2306, 2306, 2306, 2306, 2306, 2306, 2306,
+     2306, 2306, 2306, 2306, 2306, 2306, 2306, 2306, 2306, 2306,
+     2306, 2306, 2306, 2306, 2306, 2306, 2306, 2306, 2306, 2306,
+     2306, 2311, 2311, 8398, 2311, 2311, 8398, 2311, 2311, 2311,
+     2311, 2311, 2311, 2311, 2311, 2311, 2311, 2311, 2311, 2311,
+     2311, 2311, 2311, 2311, 2311, 2311, 2311, 2311, 2311, 2311,
+
+     2311, 2311, 2311, 2313, 2313, 2313, 2313, 2313, 2313, 8398,
+     8398, 8398, 8398, 8398, 2313, 8398, 2313, 8398, 2313, 2319,
+     2319, 8398, 2319, 2319, 8398, 2319, 2319, 2319, 2319, 2319,
+     2319, 2319, 2319, 2319, 2319, 2319, 2319, 2319, 2319, 2319,
+     2319, 2319, 2319, 2319, 2319, 2319, 2319, 2319, 2319, 2319,
+     2319, 2320, 2320, 2320, 2320, 2320, 2320, 8398, 8398, 8398,
+     8398, 8398, 2320, 8398, 2320, 8398, 2320, 2329, 2329, 2329,
+     2329, 8398, 8398, 2329, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 2329, 2329, 8398, 8398, 8398, 8398, 8398,
+     2329, 8398, 8398, 8398, 2329, 2335, 2335, 2335, 2335, 8398,
+
+     8398, 2335, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 2335, 8398, 8398, 8398, 8398, 8398, 2335, 8398,
+     8398, 8398, 2335, 8398, 8398, 2335, 2338, 2338, 2338, 2338,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 2338, 2338, 8398, 8398, 8398, 8398, 8398, 2338,
+     8398, 8398, 8398, 2338, 2341, 2341, 2341, 2341, 8398, 8398,
+     2341, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 2341, 8398, 8398,
+     8398, 2341, 2346, 2346, 8398, 2346, 2346, 2346, 2346, 2346,
+     2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346,
+
+     2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346,
+     2346, 2346, 2346, 2346, 2349, 2349, 8398, 2349, 8398, 2349,
+     2349, 2349, 2349, 8398, 2349, 2349, 2349, 2349, 2349, 2349,
+     2349, 2349, 2349, 2349, 2349, 2349, 2349, 2349, 2349, 2349,
+     2349, 2349, 2349, 2349, 2349, 2349, 2361, 2361, 2361, 2361,
+     8398, 8398, 2361, 2361, 8398, 8398, 8398, 2361, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 2361,
+     8398, 8398, 8398, 2361, 2364, 8398, 8398, 2364, 8398, 2364,
+     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
+     8398, 2364, 2364, 2364, 2364, 2364, 2364, 8398, 2364, 2364,
+
+     8398, 2364, 2364, 2364, 2364, 2364, 2365, 2365, 2365, 2365,
+     2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
+     2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
+     2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365, 2383, 2383,
+     8398, 2383, 2383, 2383, 2383, 2383, 2383, 2383, 2383, 2383,
+     2383, 2383, 2383, 2383, 2383, 2383, 2383, 2383, 2383, 2383,
+     2383, 2383, 2383, 2383, 2383, 2383, 2383, 2383, 2383, 2383,
+     2386, 2386, 8398, 2386, 2386, 2386, 2386, 2386, 2386, 2386,
+     2386, 2386, 2386, 2386, 2386, 2386, 2386, 2386, 2386, 2386,
+     2386, 2386, 2386, 2386, 2386, 2386, 2386, 2386, 2386, 2386,
+
+     2386, 2386, 2392, 2392, 2392, 2392, 2392, 2392, 2392, 2392,
+     2392, 2392, 2392, 2392, 8398, 2392, 2392, 2392, 2392, 2392,
+     2392, 2392, 2392, 2392, 2392, 2392, 2392, 2392, 2392, 2392,
+     2392, 2392, 2392, 2392, 2394, 2394, 2394, 2394, 2394, 2394,
+     2394, 2394, 2394, 2394, 2394, 2394, 2394, 2394, 2394, 2394,
+     2394, 2394, 2394, 2394, 2394, 2394, 2394, 2394, 2394, 2394,
+     2394, 2394, 2394, 2394, 2394, 2394, 2403, 2403, 8398, 2403,
+     2403, 8398, 2403, 2403, 2403, 8398, 2403, 2403, 2403, 2403,
+     2403, 2403, 2403, 2403, 2403, 2403, 2403, 2403, 2403, 2403,
+     2403, 2403, 8398, 2403, 2403, 2403, 2403, 2403, 2404, 2404,
+
+     2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404,
+     2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404,
+     2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404,
+     2408, 2408, 8398, 2408, 2408, 2408, 2408, 2408, 2408, 2408,
+     2408, 2408, 2408, 2408, 2408, 2408, 2408, 2408, 2408, 2408,
+     2408, 2408, 2408, 2408, 2408, 2408, 2408, 2408, 2408, 2408,
+     2408, 2408, 2409, 2409, 8398, 2409, 2409, 8398, 2409, 2409,
+     2409, 8398, 8398, 8398, 2409, 2409, 2409, 2409, 8398, 2409,
+     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,
+     2409, 2409, 2409, 2409, 2410, 2410, 2410, 2410, 2410, 2410,
+
+     2410, 2410, 2410, 2410, 2410, 2410, 2410, 2410, 2410, 2410,
+     2410, 2410, 2410, 2410, 2410, 2410, 2410, 2410, 2410, 2410,
+     2410, 2410, 2410, 2410, 2410, 2410, 2412, 2412, 8398, 2412,
+     8398, 2412, 2412, 2412, 2412, 8398, 2412, 2412, 2412, 2412,
+     2412, 2412, 2412, 2412, 2412, 2412, 2412, 2412, 2412, 2412,
+     2412, 2412, 2412, 2412, 2412, 2412, 2412, 2412, 2414, 2414,
+     8398, 2414, 2414, 2414, 2414, 2414, 2414, 2414, 2414, 2414,
+     8398, 2414, 2414, 2414, 2414, 2414, 2414, 2414, 2414, 2414,
+     2414, 8398, 2414, 2414, 8398, 2414, 2414, 2414, 2414, 2414,
+     2415, 2415, 2415, 2415, 2415, 2415, 2415, 2415, 2415, 2415,
+
+     2415, 2415, 2415, 2415, 2415, 2415, 2415, 2415, 2415, 2415,
+     2415, 2415, 2415, 2415, 2415, 2415, 2415, 2415, 2415, 2415,
+     2415, 2415, 2423, 2423, 8398, 2423, 2423, 2423, 2423, 2423,
+     2423, 2423, 2423, 2423, 2423, 2423, 2423, 2423, 2423, 2423,
+     2423, 2423, 2423, 2423, 2423, 8398, 2423, 2423, 8398, 2423,
+     2423, 2423, 2423, 2423, 2424, 2424, 2424, 2424, 2424, 2424,
+     2424, 2424, 2424, 2424, 2424, 2424, 2424, 2424, 2424, 2424,
+     2424, 2424, 2424, 2424, 2424, 2424, 2424, 2424, 2424, 2424,
+     2424, 2424, 2424, 2424, 2424, 2424, 2433, 8398, 8398, 8398,
+     8398, 8398, 8398, 2433, 2433, 8398, 8398, 8398, 2433, 2433,
+
+     2433, 2433, 8398, 2433, 2433, 2433, 2433, 2433, 2433, 2433,
+     2433, 2433, 2433, 2433, 2433, 2433, 2433, 2433, 2434, 2434,
+     2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+     2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+     2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+     1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794,
+     1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794,
+     1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794,
+     1794, 1794, 2453, 2453, 8398, 2453, 8398, 2453, 2453, 2453,
+     2453, 8398, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453,
+
+     2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453, 2453,
+     2453, 2453, 2453, 2453, 2461, 2461, 8398, 2461, 2461, 2461,
+     2461, 2461, 2461, 2461, 2461, 2461, 2461, 2461, 2461, 2461,
+     2461, 2461, 2461, 2461, 2461, 2461, 2461, 2461, 2461, 2461,
+     2461, 2461, 2461, 2461, 2461, 2461, 2462, 2462, 8398, 2462,
+     2462, 8398, 2462, 2462, 2462, 8398, 8398, 8398, 2462, 2462,
+     2462, 2462, 2462, 2462, 2462, 2462, 2462, 2462, 2462, 2462,
+     2462, 2462, 2462, 2462, 2462, 2462, 2462, 2462, 2463, 2463,
+     2463, 2463, 2463, 2463, 2463, 2463, 2463, 2463, 2463, 2463,
+     2463, 2463, 2463, 2463, 2463, 2463, 2463, 2463, 2463, 2463,
+
+     2463, 2463, 2463, 2463, 2463, 2463, 2463, 2463, 2463, 2463,
+     2465, 2465, 8398, 2465, 8398, 2465, 2465, 2465, 2465, 8398,
+     2465, 2465, 2465, 2465, 2465, 2465, 2465, 2465, 2465, 2465,
+     2465, 2465, 2465, 2465, 2465, 2465, 2465, 2465, 2465, 2465,
+     2465, 2465, 2469, 2469, 8398, 2469, 2469, 8398, 2469, 2469,
+     2469, 8398, 2469, 2469, 2469, 2469, 2469, 2469, 8398, 2469,
+     2469, 2469, 2469, 2469, 2469, 2469, 2469, 2469, 2469, 2469,
+     2469, 8398, 8398, 2469, 2470, 2470, 2470, 2470, 2470, 2470,
+     2470, 2470, 2470, 2470, 2470, 2470, 2470, 2470, 2470, 2470,
+     2470, 2470, 2470, 2470, 2470, 2470, 2470, 2470, 2470, 2470,
+
+     2470, 2470, 2470, 2470, 2470, 2470, 2472, 2472, 8398, 2472,
+     8398, 2472, 2472, 2472, 2472, 8398, 2472, 2472, 2472, 2472,
+     2472, 2472, 2472, 2472, 2472, 2472, 2472, 2472, 2472, 2472,
+     2472, 2472, 2472, 2472, 2472, 2472, 2472, 2472, 2485, 2485,
+     2485, 2485, 8398, 8398, 2485, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 2485, 8398, 8398, 8398, 2485, 2488, 2488, 2488, 2488,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 2488, 8398, 8398,
+     8398, 8398, 2488, 8398, 8398, 8398, 8398, 8398, 8398, 2488,
+     8398, 8398, 8398, 2488, 2492, 2492, 2492, 2492, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 2492, 8398,
+     2492, 8398, 8398, 8398, 8398, 8398, 8398, 2492, 8398, 8398,
+     8398, 2492, 2495, 2495, 8398, 2495, 2495, 2495, 2495, 2495,
+     2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495,
+     2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495,
+     2495, 2495, 2495, 2495, 2499, 8398, 8398, 8398, 2499, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 2499, 8398, 8398, 8398,
+     8398, 8398, 8398, 2499, 8398, 8398, 8398, 2499, 2504, 2504,
+     8398, 2504, 2504, 8398, 2504, 2504, 2504, 2504, 2504, 2504,
+     2504, 2504, 2504, 2504, 2504, 2504, 2504, 2504, 2504, 2504,
+
+     2504, 2504, 2504, 2504, 2504, 2504, 2504, 2504, 2504, 2504,
+     2505, 2505, 2505, 2505, 2505, 2505, 2505, 2505, 2505, 2505,
+     2505, 2505, 2505, 2505, 2505, 2505, 2505, 2505, 2505, 2505,
+     2505, 2505, 2505, 2505, 2505, 2505, 2505, 2505, 2505, 2505,
+     2505, 2505, 2513, 2513, 2513, 2513, 2513, 2513, 2513, 2513,
+     2513, 2513, 2513, 8398, 2513, 2513, 2513, 2513, 2513, 2513,
+     2513, 2513, 2513, 2513, 2513, 2513, 2513, 2513, 2513, 2513,
+     2513, 2513, 2513, 2513, 2514, 2514, 2514, 2514, 2514, 2514,
+     2514, 2514, 2514, 2514, 2514, 2514, 2514, 2514, 2514, 2514,
+     2514, 2514, 2514, 2514, 2514, 2514, 2514, 2514, 2514, 2514,
+
+     2514, 2514, 2514, 2514, 2514, 2514, 2521, 2521, 2521, 2521,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 2521, 2521, 8398, 8398, 8398, 8398, 8398, 2521,
+     8398, 8398, 8398, 2521, 2523, 2523, 2523, 2523, 2523, 2523,
+     2523, 2523, 2523, 2523, 2523, 8398, 2523, 2523, 2523, 2523,
+     2523, 2523, 2523, 2523, 2523, 2523, 2523, 2523, 2523, 2523,
+     2523, 2523, 2523, 2523, 2523, 2523, 2524, 2524, 2524, 2524,
+     2524, 2524, 2524, 2524, 2524, 2524, 2524, 2524, 2524, 2524,
+     2524, 2524, 2524, 2524, 2524, 2524, 2524, 2524, 2524, 2524,
+     2524, 2524, 2524, 2524, 2524, 2524, 2524, 2524, 1402, 8398,
+
+     8398, 1402, 8398, 8398, 8398, 8398, 8398, 1402, 8398, 8398,
+     8398, 8398, 8398, 8398, 1402, 8398, 8398, 8398, 8398, 8398,
+     8398, 1402, 8398, 8398, 8398, 1402, 1420, 1420, 1420, 1420,
+     8398, 8398, 1420, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     1420, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 1420,
+     8398, 8398, 8398, 1420, 8398, 8398, 1420, 1424, 1424, 1424,
+     1424, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 1424, 8398, 1424, 1424, 1424, 1424, 8398, 8398, 8398,
+     1424, 8398, 8398, 8398, 1424, 2541, 2541, 2541, 2541, 8398,
+     8398, 2541, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 2541, 8398,
+     8398, 8398, 2541, 2543, 2543, 2543, 2543, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 2543, 8398, 2543,
+     8398, 8398, 8398, 8398, 8398, 8398, 2543, 8398, 8398, 8398,
+     2543, 2546, 2546, 2546, 2546, 8398, 8398, 2546, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 2546, 8398, 8398, 8398, 2546, 1430,
+     1430, 1430, 1430, 8398, 8398, 1430, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 1430, 8398, 8398, 8398, 1430, 2549, 2549, 2549,
+
+     2549, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 2549, 8398, 2549, 2549, 8398, 8398, 8398,
+     2549, 8398, 8398, 8398, 2549, 1445, 1445, 1445, 1445, 8398,
+     8398, 8398, 8398, 8398, 1445, 8398, 8398, 8398, 8398, 8398,
+     8398, 1445, 1445, 8398, 8398, 8398, 8398, 8398, 1445, 8398,
+     8398, 8398, 1445, 1448, 1448, 1448, 1448, 8398, 8398, 1448,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 1448, 8398, 8398, 8398,
+     1448, 2559, 2559, 2559, 2559, 8398, 8398, 8398, 8398, 8398,
+     2559, 8398, 8398, 8398, 8398, 8398, 8398, 2559, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 2559, 8398, 8398, 8398, 2559, 1456,
+     1456, 1456, 1456, 8398, 8398, 1456, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 1456, 8398, 8398, 8398, 1456, 1456, 1463, 1463,
+     1463, 1463, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 1463, 8398, 1463, 1463, 8398, 8398, 8398, 8398,
+     8398, 1463, 8398, 8398, 8398, 1463, 2564, 2564, 2564, 2564,
+     8398, 8398, 2564, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 2564,
+     8398, 8398, 8398, 2564, 2572, 2572, 8398, 2572, 8398, 2572,
+
+     2572, 2572, 2572, 2572, 2572, 2572, 2572, 2572, 2572, 2572,
+     2572, 2572, 2572, 2572, 2572, 2572, 2572, 2572, 2572, 2572,
+     8398, 2572, 2572, 2572, 2572, 2572, 2574, 2574, 8398, 2574,
+     2574, 2574, 2574, 2574, 2574, 2574, 2574, 2574, 2574, 2574,
+     2574, 2574, 2574, 2574, 2574, 2574, 2574, 2574, 2574, 2574,
+     2574, 2574, 2574, 2574, 2574, 2574, 2574, 2574, 1515, 1515,
+     1515, 1515, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 1515, 1515, 8398, 1515, 8398, 8398,
+     8398, 1515, 8398, 8398, 8398, 1515, 1548, 1548, 1548, 1548,
+     8398, 8398, 1548, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 1548,
+     8398, 8398, 8398, 1548, 2609, 2609, 2609, 2609, 8398, 8398,
+     2609, 8398, 8398, 8398, 8398, 2609, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 2609, 8398, 8398,
+     8398, 2609, 2615, 2615, 2615, 2615, 8398, 8398, 8398, 8398,
+     8398, 8398, 2615, 2615, 8398, 8398, 8398, 8398, 2615, 2615,
+     8398, 8398, 8398, 8398, 8398, 2615, 8398, 8398, 8398, 2615,
+     2669, 2669, 2669, 2669, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 2669, 8398, 8398, 2669,
+     8398, 8398, 8398, 2669, 8398, 8398, 8398, 2669, 1549, 1549,
+
+     8398, 1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549,
+     1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549, 8398, 1549,
+     1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549,
+     1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550,
+     1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550,
+     1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550,
+     1550, 1550, 1562, 1562, 1562, 1562, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 1562, 1562,
+     8398, 1562, 8398, 8398, 8398, 1562, 8398, 8398, 8398, 1562,
+     1566, 1566, 1566, 1566, 8398, 8398, 1566, 8398, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 1566, 8398, 8398, 8398, 1566, 2673, 2673,
+     2673, 2673, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 2673, 8398, 8398, 2673, 8398, 8398,
+     8398, 2673, 8398, 8398, 8398, 2673, 1594, 1594, 8398, 8398,
+     1594, 8398, 8398, 1594, 1594, 8398, 1594, 1594, 1594, 1594,
+     1594, 1594, 8398, 1594, 1594, 1594, 1594, 1594, 1594, 8398,
+     1594, 1594, 1594, 1594, 1594, 8398, 8398, 1594, 1595, 1595,
+     1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595,
+     1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595,
+
+     1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595,
+     1600, 1600, 8398, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
+     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
+     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
+     1600, 1600, 2698, 2698, 8398, 2698, 8398, 2698, 2698, 2698,
+     2698, 2698, 2698, 2698, 2698, 2698, 2698, 2698, 2698, 2698,
+     2698, 2698, 2698, 2698, 2698, 2698, 2698, 2698, 8398, 2698,
+     2698, 2698, 2698, 2698, 2700, 2700, 8398, 2700, 2700, 2700,
+     2700, 2700, 2700, 2700, 2700, 2700, 2700, 2700, 2700, 2700,
+     2700, 2700, 2700, 2700, 2700, 2700, 2700, 2700, 2700, 2700,
+
+     2700, 2700, 2700, 2700, 2700, 2700, 2705, 2705, 8398, 2705,
+     2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705,
+     2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705,
+     2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 1613, 1613,
+     1613, 1613, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 1613, 8398, 1613, 1613, 8398, 8398, 8398, 8398,
+     8398, 1613, 8398, 8398, 8398, 1613, 2710, 2710, 2710, 2710,
+     8398, 8398, 2710, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 2710,
+     8398, 8398, 8398, 2710, 1622, 1622, 1622, 1622, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     1622, 1622, 8398, 8398, 8398, 8398, 8398, 1622, 8398, 8398,
+     8398, 1622, 1625, 1625, 1625, 1625, 8398, 8398, 1625, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 1625, 8398, 8398, 8398, 1625,
+     1632, 1632, 1632, 1632, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 1632, 1632, 8398, 8398,
+     8398, 8398, 8398, 1632, 8398, 8398, 8398, 1632, 1637, 1637,
+     1637, 1637, 8398, 8398, 1637, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+
+     8398, 1637, 8398, 8398, 8398, 1637, 1643, 1643, 8398, 1643,
+     1643, 8398, 1643, 1643, 1643, 8398, 1643, 1643, 1643, 1643,
+     1643, 1643, 8398, 1643, 1643, 1643, 1643, 1643, 1643, 8398,
+     1643, 1643, 8398, 1643, 1643, 8398, 8398, 1643, 1644, 1644,
+     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
+     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
+     1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
+     2719, 2719, 8398, 2719, 8398, 2719, 2719, 2719, 2719, 2719,
+     2719, 2719, 2719, 2719, 2719, 2719, 2719, 2719, 2719, 2719,
+     2719, 2719, 2719, 2719, 2719, 2719, 8398, 2719, 2719, 2719,
+
+     2719, 2719, 2721, 2721, 8398, 2721, 2721, 2721, 2721, 2721,
+     2721, 2721, 2721, 2721, 2721, 2721, 2721, 2721, 2721, 2721,
+     2721, 2721, 2721, 2721, 2721, 2721, 2721, 2721, 2721, 2721,
+     2721, 2721, 2721, 2721, 2725, 2725, 8398, 2725, 8398, 2725,
+     2725, 2725, 2725, 2725, 2725, 2725, 2725, 2725, 2725, 2725,
+     2725, 2725, 2725, 2725, 2725, 2725, 2725, 2725, 2725, 2725,
+     8398, 2725, 2725, 2725, 2725, 2725, 2727, 2727, 8398, 2727,
+     2727, 2727, 2727, 2727, 2727, 2727, 2727, 2727, 2727, 2727,
+     2727, 2727, 2727, 2727, 2727, 2727, 2727, 2727, 2727, 2727,
+     2727, 2727, 2727, 2727, 2727, 2727, 2727, 2727, 1674, 1674,
+
+     8398, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
+     8398, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
+     1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
+     1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675,
+     1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675,
+     1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675, 1675,
+     1675, 1675, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
+     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
+     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
+     1682, 1682, 1682, 1682, 1684, 1684, 1684, 1684, 1684, 1684,
+
+     1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684,
+     1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684,
+     1684, 1684, 1684, 1684, 1684, 1684, 1395, 1395, 1395, 1395,
+     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
+     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
+     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1689, 8398,
+     8398, 1689, 8398, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
+     8398, 1689, 1689, 1689, 8398, 1689, 1689, 1689, 8398, 1689,
+     1689, 1689, 1689, 1689, 8398, 1689, 1689, 1689, 1689, 1689,
+     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
+
+     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
+     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690,
+     1690, 1690, 1703, 1703, 8398, 1703, 1703, 8398, 1703, 1703,
+     1703, 1703, 1703, 1703, 1703, 1703, 1703, 1703, 1703, 1703,
+     1703, 1703, 1703, 1703, 1703, 1703, 1703, 8398, 1703, 8398,
+     1703, 1703, 1703, 1703, 1704, 1704, 1704, 1704, 1704, 1704,
+     1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704,
+     1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704,
+     1704, 1704, 1704, 1704, 1704, 1704, 1713, 8398, 8398, 1713,
+     8398, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
+
+     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
+     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1718, 8398, 8398, 1718, 8398, 1718, 1718, 1718, 1718, 1718,
+     1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718,
+     1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718,
+     1718, 1718, 1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719,
+     1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719,
+
+     1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719,
+     1719, 1719, 1719, 1719, 1726, 1726, 8398, 1726, 8398, 1726,
+     1726, 1726, 1726, 1726, 1726, 1726, 8398, 1726, 1726, 8398,
+     8398, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726,
+     1726, 1726, 1726, 1726, 1726, 1726, 1727, 1727, 1727, 1727,
+     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
+     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
+     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1794, 1794,
+     1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794,
+     1794, 1794, 1794, 1794, 8398, 1794, 1794, 1794, 1794, 1794,
+
+     1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794,
+     1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861,
+     1861, 1861, 1861, 1861, 1861, 1861, 8398, 1861, 1861, 1861,
+     1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861, 1861,
+     1861, 1861, 1871, 8398, 8398, 1871, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 1871, 8398, 8398, 8398, 8398, 1871, 8398,
+     8398, 8398, 8398, 8398, 1871, 1871, 8398, 1871, 8398, 1871,
+     1976, 1976, 1976, 1976, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 1976, 1976, 8398, 1976,
+     8398, 8398, 8398, 1976, 8398, 8398, 8398, 1976, 1982, 1982,
+
+     1982, 1982, 8398, 8398, 1982, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 1982, 8398, 8398, 8398, 1982, 1991, 1991, 1991, 1991,
+     8398, 8398, 8398, 8398, 8398, 1991, 8398, 8398, 8398, 8398,
+     8398, 8398, 1991, 1991, 8398, 8398, 8398, 8398, 8398, 1991,
+     8398, 8398, 8398, 1991, 1994, 1994, 1994, 1994, 8398, 8398,
+     1994, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 1994, 8398, 8398,
+     8398, 1994, 3129, 3129, 3129, 3129, 3129, 3129, 3129, 3129,
+     3129, 3129, 3129, 8398, 3129, 3129, 3129, 3129, 3129, 3129,
+
+     3129, 3129, 3129, 3129, 3129, 3129, 3129, 3129, 3129, 3129,
+     3129, 3129, 3129, 3129, 3131, 8398, 8398, 3131, 8398, 8398,
+     8398, 8398, 8398, 3131, 8398, 8398, 8398, 8398, 8398, 8398,
+     3131, 8398, 8398, 8398, 8398, 8398, 8398, 3131, 8398, 8398,
+     8398, 3131, 1997, 1997, 8398, 1997, 1997, 1997, 1997, 1997,
+     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
+     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
+     1997, 1997, 1997, 1997, 1999, 1999, 1999, 1999, 1999, 1999,
+     8398, 8398, 8398, 8398, 8398, 1999, 8398, 1999, 8398, 1999,
+     3133, 3133, 8398, 3133, 3133, 3133, 8398, 8398, 8398, 8398,
+
+     8398, 3133, 8398, 3133, 8398, 3133, 2007, 2007, 8398, 2007,
+     2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007,
+     2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007,
+     2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2009, 2009,
+     2009, 2009, 2009, 2009, 8398, 8398, 8398, 2009, 8398, 2009,
+     8398, 2009, 8398, 2009, 3136, 3136, 8398, 3136, 3136, 3136,
+     8398, 8398, 8398, 8398, 8398, 3136, 8398, 3136, 8398, 3136,
+     2030, 2030, 2030, 2030, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 2030, 2030, 8398, 8398,
+     8398, 8398, 8398, 2030, 8398, 8398, 8398, 2030, 2033, 2033,
+
+     2033, 2033, 8398, 8398, 2033, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 2033, 8398, 8398, 8398, 2033, 1794, 1794, 1794, 1794,
+     1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794,
+     1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794,
+     1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 2172, 2172,
+     8398, 2172, 2172, 2172, 2172, 2172, 2172, 2172, 2172, 2172,
+     8398, 2172, 2172, 2172, 2172, 2172, 2172, 2172, 2172, 2172,
+     2172, 2172, 2172, 2172, 2172, 2172, 2172, 2172, 2172, 2172,
+     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
+
+     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
+     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173,
+     2173, 2173, 2203, 2203, 2203, 2203, 2203, 2203, 2203, 2203,
+     2203, 2203, 2203, 2203, 2203, 2203, 2203, 2203, 8398, 2203,
+     2203, 2203, 2203, 2203, 2203, 2203, 2203, 2203, 2203, 2203,
+     2203, 2203, 2203, 2203, 1871, 8398, 8398, 1871, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 1871, 8398, 8398, 8398, 8398,
+     1871, 8398, 8398, 8398, 8398, 8398, 1871, 1871, 8398, 1871,
+     8398, 1871, 2297, 2297, 8398, 2297, 2297, 2297, 2297, 2297,
+     2297, 2297, 2297, 2297, 2297, 2297, 2297, 2297, 2297, 2297,
+
+     2297, 2297, 2297, 2297, 2297, 2297, 2297, 2297, 2297, 2297,
+     2297, 2297, 2297, 2297, 2298, 2298, 2298, 2298, 2298, 2298,
+     8398, 8398, 8398, 8398, 8398, 2298, 8398, 2298, 8398, 2298,
+     3479, 3479, 8398, 3479, 3479, 3479, 8398, 8398, 8398, 8398,
+     8398, 3479, 8398, 3479, 8398, 3479, 2304, 2304, 2304, 2304,
+     2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304,
+     2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304,
+     2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304, 2306, 2306,
+     2306, 2306, 2306, 2306, 2306, 2306, 2306, 2306, 2306, 2306,
+     2306, 2306, 2306, 2306, 2306, 2306, 2306, 2306, 2306, 2306,
+
+     2306, 2306, 2306, 2306, 2306, 2306, 2306, 2306, 2306, 2306,
+     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
+     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
+     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
+     1395, 1395, 2311, 2311, 8398, 2311, 2311, 2311, 2311, 2311,
+     2311, 2311, 2311, 2311, 2311, 2311, 2311, 2311, 2311, 2311,
+     2311, 2311, 2311, 2311, 2311, 2311, 2311, 2311, 2311, 2311,
+     2311, 2311, 2311, 2311, 2313, 2313, 2313, 2313, 2313, 2313,
+     8398, 8398, 8398, 8398, 8398, 2313, 8398, 2313, 8398, 2313,
+     3482, 3482, 8398, 3482, 3482, 3482, 8398, 8398, 8398, 8398,
+
+     8398, 3482, 8398, 3482, 8398, 3482, 2319, 2319, 8398, 2319,
+     2319, 2319, 2319, 2319, 2319, 2319, 2319, 2319, 2319, 2319,
+     2319, 2319, 2319, 2319, 2319, 2319, 2319, 2319, 2319, 2319,
+     2319, 2319, 2319, 2319, 2319, 2319, 2319, 2319, 2320, 2320,
+     2320, 2320, 2320, 2320, 8398, 8398, 8398, 8398, 8398, 2320,
+     8398, 2320, 8398, 2320, 3485, 3485, 8398, 3485, 3485, 3485,
+     8398, 8398, 8398, 8398, 8398, 3485, 8398, 3485, 8398, 3485,
+     2329, 2329, 2329, 2329, 8398, 8398, 2329, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 2329, 2329, 8398, 8398,
+     8398, 8398, 8398, 2329, 8398, 8398, 8398, 2329, 3490, 3490,
+
+     3490, 3490, 8398, 8398, 3490, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 3490, 3490, 8398, 8398, 8398, 8398,
+     8398, 3490, 8398, 8398, 8398, 3490, 2338, 2338, 2338, 2338,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 2338, 2338, 8398, 8398, 8398, 8398, 8398, 2338,
+     8398, 8398, 8398, 2338, 2341, 2341, 2341, 2341, 8398, 8398,
+     2341, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 2341, 8398, 8398,
+     8398, 2341, 2346, 2346, 8398, 2346, 2346, 2346, 2346, 2346,
+     2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346,
+
+     2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346, 2346,
+     2346, 2346, 2346, 2346, 3493, 3493, 8398, 3493, 8398, 3493,
+     3493, 3493, 3493, 3493, 3493, 3493, 3493, 3493, 3493, 3493,
+     3493, 3493, 3493, 3493, 3493, 3493, 3493, 3493, 3493, 3493,
+     8398, 3493, 3493, 3493, 3493, 3493, 3495, 3495, 8398, 3495,
+     3495, 3495, 3495, 3495, 3495, 3495, 3495, 3495, 3495, 3495,
+     3495, 3495, 3495, 3495, 3495, 3495, 3495, 3495, 3495, 3495,
+     3495, 3495, 3495, 3495, 3495, 3495, 3495, 3495, 2361, 2361,
+     2361, 2361, 8398, 8398, 2361, 2361, 8398, 8398, 8398, 2361,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+
+     8398, 2361, 8398, 8398, 8398, 2361, 2364, 8398, 8398, 2364,
+     8398, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364,
+     2364, 2364, 8398, 2364, 2364, 2364, 2364, 2364, 2364, 8398,
+     2364, 2364, 8398, 2364, 2364, 2364, 2364, 2364, 2365, 2365,
+     2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
+     2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
+     2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
+     2383, 2383, 8398, 2383, 2383, 2383, 2383, 2383, 2383, 2383,
+     2383, 2383, 2383, 2383, 2383, 2383, 2383, 2383, 2383, 2383,
+     2383, 2383, 2383, 2383, 2383, 2383, 2383, 2383, 2383, 2383,
+
+     2383, 2383, 2386, 2386, 8398, 2386, 2386, 2386, 2386, 2386,
+     2386, 2386, 2386, 2386, 2386, 2386, 2386, 2386, 2386, 2386,
+     2386, 2386, 2386, 2386, 2386, 2386, 2386, 2386, 2386, 2386,
+     2386, 2386, 2386, 2386, 2392, 2392, 2392, 2392, 2392, 2392,
+     2392, 2392, 2392, 2392, 2392, 2392, 8398, 2392, 2392, 2392,
+     2392, 2392, 2392, 2392, 2392, 2392, 2392, 2392, 2392, 2392,
+     2392, 2392, 2392, 2392, 2392, 2392, 2394, 2394, 2394, 2394,
+     2394, 2394, 2394, 2394, 2394, 2394, 2394, 2394, 2394, 2394,
+     2394, 2394, 2394, 2394, 2394, 2394, 2394, 2394, 2394, 2394,
+     2394, 2394, 2394, 2394, 2394, 2394, 2394, 2394, 1395, 1395,
+
+     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
+     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
+     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
+     3503, 3503, 3503, 3503, 8398, 8398, 3503, 8398, 8398, 8398,
+     8398, 3503, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 3503, 8398, 8398, 8398, 3503, 2403, 2403,
+     8398, 2403, 2403, 8398, 2403, 2403, 2403, 8398, 2403, 2403,
+     2403, 2403, 2403, 2403, 2403, 2403, 2403, 2403, 2403, 2403,
+     2403, 2403, 2403, 2403, 8398, 2403, 2403, 2403, 2403, 2403,
+     2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404,
+
+     2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404,
+     2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404,
+     2404, 2404, 2409, 2409, 8398, 2409, 2409, 8398, 2409, 2409,
+     2409, 8398, 8398, 8398, 2409, 2409, 2409, 2409, 8398, 2409,
+     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409,
+     2409, 2409, 2409, 2409, 2410, 2410, 2410, 2410, 2410, 2410,
+     2410, 2410, 2410, 2410, 2410, 2410, 2410, 2410, 2410, 2410,
+     2410, 2410, 2410, 2410, 2410, 2410, 2410, 2410, 2410, 2410,
+     2410, 2410, 2410, 2410, 2410, 2410, 3505, 3505, 8398, 3505,
+     8398, 3505, 3505, 3505, 3505, 3505, 3505, 3505, 3505, 3505,
+
+     3505, 3505, 3505, 3505, 3505, 3505, 3505, 3505, 3505, 3505,
+     3505, 3505, 8398, 3505, 3505, 3505, 3505, 3505, 3507, 3507,
+     8398, 3507, 3507, 3507, 3507, 3507, 3507, 3507, 3507, 3507,
+     3507, 3507, 3507, 3507, 3507, 3507, 3507, 3507, 3507, 3507,
+     3507, 3507, 3507, 3507, 3507, 3507, 3507, 3507, 3507, 3507,
+     2414, 2414, 8398, 2414, 2414, 2414, 2414, 2414, 2414, 2414,
+     2414, 2414, 8398, 2414, 2414, 2414, 2414, 2414, 2414, 2414,
+     2414, 2414, 2414, 8398, 2414, 2414, 8398, 2414, 2414, 2414,
+     2414, 2414, 2415, 2415, 2415, 2415, 2415, 2415, 2415, 2415,
+     2415, 2415, 2415, 2415, 2415, 2415, 2415, 2415, 2415, 2415,
+
+     2415, 2415, 2415, 2415, 2415, 2415, 2415, 2415, 2415, 2415,
+     2415, 2415, 2415, 2415, 2423, 2423, 8398, 2423, 2423, 2423,
+     2423, 2423, 2423, 2423, 2423, 2423, 2423, 2423, 2423, 2423,
+     2423, 2423, 2423, 2423, 2423, 2423, 2423, 8398, 2423, 2423,
+     8398, 2423, 2423, 2423, 2423, 2423, 2424, 2424, 2424, 2424,
+     2424, 2424, 2424, 2424, 2424, 2424, 2424, 2424, 2424, 2424,
+     2424, 2424, 2424, 2424, 2424, 2424, 2424, 2424, 2424, 2424,
+     2424, 2424, 2424, 2424, 2424, 2424, 2424, 2424, 2433, 8398,
+     8398, 8398, 8398, 8398, 8398, 2433, 2433, 8398, 8398, 8398,
+     2433, 2433, 2433, 2433, 8398, 2433, 2433, 2433, 2433, 2433,
+
+     2433, 2433, 2433, 2433, 2433, 2433, 2433, 2433, 2433, 2433,
+     2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+     2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+     2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434,
+     2434, 2434, 3518, 3518, 8398, 3518, 8398, 3518, 3518, 3518,
+     3518, 3518, 3518, 3518, 3518, 3518, 3518, 3518, 3518, 3518,
+     3518, 3518, 3518, 3518, 3518, 3518, 3518, 3518, 8398, 3518,
+     3518, 3518, 3518, 3518, 3520, 3520, 8398, 3520, 3520, 3520,
+     3520, 3520, 3520, 3520, 3520, 3520, 3520, 3520, 3520, 3520,
+     3520, 3520, 3520, 3520, 3520, 3520, 3520, 3520, 3520, 3520,
+
+     3520, 3520, 3520, 3520, 3520, 3520, 2462, 2462, 8398, 2462,
+     2462, 8398, 2462, 2462, 2462, 8398, 8398, 8398, 2462, 2462,
+     2462, 2462, 2462, 2462, 2462, 2462, 2462, 2462, 2462, 2462,
+     2462, 2462, 2462, 2462, 2462, 2462, 2462, 2462, 2463, 2463,
+     2463, 2463, 2463, 2463, 2463, 2463, 2463, 2463, 2463, 2463,
+     2463, 2463, 2463, 2463, 2463, 2463, 2463, 2463, 2463, 2463,
+     2463, 2463, 2463, 2463, 2463, 2463, 2463, 2463, 2463, 2463,
+     3528, 3528, 8398, 3528, 8398, 3528, 3528, 3528, 3528, 3528,
+     3528, 3528, 3528, 3528, 3528, 3528, 3528, 3528, 3528, 3528,
+     3528, 3528, 3528, 3528, 3528, 3528, 8398, 3528, 3528, 3528,
+
+     3528, 3528, 3530, 3530, 8398, 3530, 3530, 3530, 3530, 3530,
+     3530, 3530, 3530, 3530, 3530, 3530, 3530, 3530, 3530, 3530,
+     3530, 3530, 3530, 3530, 3530, 3530, 3530, 3530, 3530, 3530,
+     3530, 3530, 3530, 3530, 2469, 2469, 8398, 2469, 2469, 8398,
+     2469, 2469, 2469, 8398, 2469, 2469, 2469, 2469, 2469, 2469,
+     8398, 2469, 2469, 2469, 2469, 2469, 2469, 2469, 2469, 2469,
+     2469, 2469, 2469, 8398, 8398, 2469, 2470, 2470, 2470, 2470,
+     2470, 2470, 2470, 2470, 2470, 2470, 2470, 2470, 2470, 2470,
+     2470, 2470, 2470, 2470, 2470, 2470, 2470, 2470, 2470, 2470,
+     2470, 2470, 2470, 2470, 2470, 2470, 2470, 2470, 3532, 3532,
+
+     8398, 3532, 8398, 3532, 3532, 3532, 3532, 3532, 3532, 3532,
+     3532, 3532, 3532, 3532, 3532, 3532, 3532, 3532, 3532, 3532,
+     3532, 3532, 3532, 3532, 8398, 3532, 3532, 3532, 3532, 3532,
+     3534, 3534, 8398, 3534, 3534, 3534, 3534, 3534, 3534, 3534,
+     3534, 3534, 3534, 3534, 3534, 3534, 3534, 3534, 3534, 3534,
+     3534, 3534, 3534, 3534, 3534, 3534, 3534, 3534, 3534, 3534,
+     3534, 3534, 2485, 2485, 2485, 2485, 8398, 8398, 2485, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 2485, 8398, 8398, 8398, 2485,
+     2488, 2488, 2488, 2488, 8398, 8398, 8398, 8398, 8398, 8398,
+
+     8398, 2488, 8398, 8398, 8398, 8398, 2488, 8398, 8398, 8398,
+     8398, 8398, 8398, 2488, 8398, 8398, 8398, 2488, 2492, 2492,
+     2492, 2492, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 2492, 8398, 2492, 8398, 8398, 8398, 8398, 8398,
+     8398, 2492, 8398, 8398, 8398, 2492, 3542, 3542, 3542, 3542,
+     8398, 8398, 3542, 8398, 8398, 8398, 8398, 3542, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 3542,
+     8398, 8398, 8398, 3542, 2495, 2495, 8398, 2495, 2495, 2495,
+     2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495,
+     2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495,
+
+     2495, 2495, 2495, 2495, 2495, 2495, 2499, 8398, 8398, 8398,
+     2499, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 2499, 8398,
+     8398, 8398, 8398, 8398, 8398, 2499, 8398, 8398, 8398, 2499,
+     2504, 2504, 8398, 2504, 2504, 8398, 2504, 2504, 2504, 2504,
+     2504, 2504, 2504, 2504, 2504, 2504, 2504, 2504, 2504, 2504,
+     2504, 2504, 2504, 2504, 2504, 2504, 2504, 2504, 2504, 2504,
+     2504, 2504, 2505, 2505, 2505, 2505, 2505, 2505, 2505, 2505,
+     2505, 2505, 2505, 2505, 2505, 2505, 2505, 2505, 2505, 2505,
+     2505, 2505, 2505, 2505, 2505, 2505, 2505, 2505, 2505, 2505,
+     2505, 2505, 2505, 2505, 2513, 2513, 2513, 2513, 2513, 2513,
+
+     2513, 2513, 2513, 2513, 2513, 8398, 2513, 2513, 2513, 2513,
+     2513, 2513, 2513, 2513, 2513, 2513, 2513, 2513, 2513, 2513,
+     2513, 2513, 2513, 2513, 2513, 2513, 2514, 2514, 2514, 2514,
+     2514, 2514, 2514, 2514, 2514, 2514, 2514, 2514, 2514, 2514,
+     2514, 2514, 2514, 2514, 2514, 2514, 2514, 2514, 2514, 2514,
+     2514, 2514, 2514, 2514, 2514, 2514, 2514, 2514, 2521, 2521,
+     2521, 2521, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 2521, 2521, 8398, 8398, 8398, 8398,
+     8398, 2521, 8398, 8398, 8398, 2521, 2523, 2523, 2523, 2523,
+     2523, 2523, 2523, 2523, 2523, 2523, 2523, 8398, 2523, 2523,
+
+     2523, 2523, 2523, 2523, 2523, 2523, 2523, 2523, 2523, 2523,
+     2523, 2523, 2523, 2523, 2523, 2523, 2523, 2523, 2524, 2524,
+     2524, 2524, 2524, 2524, 2524, 2524, 2524, 2524, 2524, 2524,
+     2524, 2524, 2524, 2524, 2524, 2524, 2524, 2524, 2524, 2524,
+     2524, 2524, 2524, 2524, 2524, 2524, 2524, 2524, 2524, 2524,
+     3556, 3556, 3556, 3556, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 3556, 3556, 3556, 3556,
+     8398, 8398, 8398, 3556, 8398, 8398, 8398, 3556, 2541, 2541,
+     2541, 2541, 8398, 8398, 2541, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+
+     8398, 2541, 8398, 8398, 8398, 2541, 3557, 3557, 3557, 3557,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 3557, 8398, 3557, 3557, 8398, 8398, 8398, 3557,
+     8398, 8398, 8398, 3557, 2543, 2543, 2543, 2543, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 2543, 8398,
+     2543, 8398, 8398, 8398, 8398, 8398, 8398, 2543, 8398, 8398,
+     8398, 2543, 2546, 2546, 2546, 2546, 8398, 8398, 2546, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 2546, 8398, 8398, 8398, 2546,
+     2538, 2538, 2538, 2538, 8398, 8398, 2538, 8398, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 2538, 8398, 8398,
+     8398, 8398, 8398, 2538, 8398, 8398, 8398, 2538, 8398, 8398,
+     2538, 2549, 2549, 2549, 2549, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 2549, 8398, 2549,
+     2549, 8398, 8398, 8398, 2549, 8398, 8398, 8398, 2549, 3559,
+     3559, 3559, 3559, 8398, 8398, 8398, 8398, 8398, 3559, 8398,
+     8398, 8398, 8398, 8398, 8398, 3559, 3559, 8398, 8398, 8398,
+     8398, 8398, 3559, 8398, 8398, 8398, 3559, 3560, 3560, 3560,
+     3560, 3560, 3560, 3560, 3560, 3560, 3560, 3560, 3560, 8398,
+     3560, 3560, 3560, 8398, 3560, 3560, 3560, 3560, 3560, 3560,
+
+     3560, 3560, 3560, 3560, 3560, 3560, 3560, 3560, 3560, 3562,
+     3562, 3562, 3562, 3562, 3562, 3562, 3562, 3562, 3562, 3562,
+     3562, 3562, 3562, 3562, 3562, 8398, 3562, 3562, 3562, 3562,
+     3562, 3562, 3562, 3562, 3562, 3562, 3562, 3562, 3562, 3562,
+     3562, 2550, 2550, 2550, 2550, 8398, 8398, 2550, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 2550, 8398,
+     8398, 8398, 8398, 8398, 2550, 8398, 8398, 8398, 2550, 8398,
+     8398, 2550, 2559, 2559, 2559, 2559, 8398, 8398, 8398, 8398,
+     8398, 2559, 8398, 8398, 8398, 8398, 8398, 8398, 2559, 8398,
+     8398, 8398, 8398, 8398, 8398, 2559, 8398, 8398, 8398, 2559,
+
+     3568, 3568, 3568, 3568, 8398, 8398, 3568, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 3568, 8398, 8398,
+     8398, 8398, 8398, 3568, 8398, 8398, 8398, 3568, 8398, 8398,
+     3568, 1463, 1463, 1463, 1463, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 1463, 8398, 1463, 1463, 8398,
+     8398, 8398, 8398, 8398, 1463, 8398, 8398, 8398, 1463, 2564,
+     2564, 2564, 2564, 8398, 8398, 2564, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 2564, 8398, 8398, 8398, 2564, 3571, 3571, 3571,
+     3571, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+
+     8398, 8398, 8398, 3571, 3571, 8398, 8398, 8398, 8398, 8398,
+     3571, 8398, 8398, 8398, 3571, 3578, 3578, 8398, 3578, 8398,
+     3578, 3578, 3578, 3578, 3578, 3578, 3578, 3578, 3578, 3578,
+     3578, 3578, 3578, 3578, 3578, 3578, 3578, 3578, 3578, 3578,
+     3578, 8398, 3578, 3578, 3578, 3578, 3578, 1499, 1499, 1499,
+     1499, 8398, 8398, 1499, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 1499, 8398, 8398, 8398, 8398, 8398,
+     1499, 8398, 8398, 8398, 1499, 8398, 8398, 1499, 3616, 3616,
+     3616, 3616, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 3616,
+     8398, 8398, 8398, 8398, 3616, 3616, 8398, 8398, 8398, 8398,
+
+     8398, 3616, 8398, 8398, 8398, 3616, 3619, 3619, 3619, 3619,
+     8398, 8398, 3619, 8398, 8398, 8398, 8398, 3619, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 3619,
+     8398, 8398, 8398, 3619, 3625, 3625, 3625, 3625, 8398, 8398,
+     3625, 8398, 8398, 8398, 3625, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 3625, 8398, 8398,
+     8398, 3625, 2615, 2615, 2615, 2615, 8398, 8398, 8398, 8398,
+     8398, 8398, 2615, 2615, 8398, 8398, 8398, 8398, 2615, 2615,
+     8398, 8398, 8398, 8398, 8398, 2615, 8398, 8398, 8398, 2615,
+     3627, 3627, 3627, 3627, 3627, 3627, 3627, 3627, 3627, 3627,
+
+     3627, 3627, 8398, 3627, 3627, 3627, 8398, 3627, 3627, 3627,
+     3627, 3627, 3627, 3627, 3627, 3627, 3627, 3627, 3627, 3627,
+     3627, 3627, 3633, 3633, 3633, 3633, 3633, 3633, 3633, 3633,
+     3633, 3633, 3633, 3633, 3633, 3633, 3633, 3633, 8398, 3633,
+     3633, 3633, 3633, 3633, 3633, 3633, 3633, 3633, 3633, 3633,
+     3633, 3633, 3633, 3633, 1515, 1515, 1515, 1515, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     1515, 1515, 8398, 1515, 8398, 8398, 8398, 1515, 8398, 8398,
+     8398, 1515, 2669, 2669, 2669, 2669, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 2669, 8398,
+
+     8398, 2669, 8398, 8398, 8398, 2669, 8398, 8398, 8398, 2669,
+     1558, 1558, 1558, 1558, 8398, 8398, 1558, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 1558, 8398, 8398,
+     8398, 8398, 8398, 1558, 8398, 8398, 8398, 1558, 8398, 8398,
+     1558, 2673, 2673, 2673, 2673, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 2673, 8398, 8398,
+     2673, 8398, 8398, 8398, 2673, 8398, 8398, 8398, 2673, 1600,
+     1600, 8398, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
+     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
+     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
+
+     1600, 3696, 3696, 8398, 3696, 8398, 3696, 3696, 3696, 3696,
+     3696, 3696, 3696, 3696, 3696, 3696, 3696, 3696, 3696, 3696,
+     3696, 3696, 3696, 3696, 3696, 3696, 3696, 8398, 3696, 3696,
+     3696, 3696, 3696, 2705, 2705, 8398, 2705, 2705, 2705, 2705,
+     2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705,
+     2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705,
+     2705, 2705, 2705, 2705, 2705, 2710, 2710, 2710, 2710, 8398,
+     8398, 2710, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 2710, 8398,
+     8398, 8398, 2710, 3702, 3702, 3702, 3702, 8398, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 3702, 8398, 3702,
+     3702, 8398, 8398, 8398, 8398, 8398, 3702, 8398, 8398, 8398,
+     3702, 1613, 1613, 1613, 1613, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 1613, 8398, 1613, 1613, 8398,
+     8398, 8398, 8398, 8398, 1613, 8398, 8398, 8398, 1613, 1619,
+     1619, 1619, 1619, 8398, 8398, 1619, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 1619, 8398, 8398, 8398,
+     8398, 8398, 1619, 8398, 8398, 8398, 1619, 8398, 8398, 1619,
+     1629, 1629, 1629, 1629, 8398, 8398, 1629, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 1629, 8398, 8398,
+
+     8398, 8398, 8398, 1629, 8398, 8398, 8398, 1629, 8398, 8398,
+     1629, 1643, 1643, 8398, 1643, 1643, 8398, 1643, 1643, 1643,
+     8398, 1643, 1643, 1643, 1643, 1643, 1643, 8398, 1643, 1643,
+     1643, 1643, 1643, 1643, 8398, 1643, 1643, 8398, 1643, 1643,
+     8398, 8398, 1643, 3706, 3706, 8398, 3706, 8398, 3706, 3706,
+     3706, 3706, 3706, 3706, 3706, 3706, 3706, 3706, 3706, 3706,
+     3706, 3706, 3706, 3706, 3706, 3706, 3706, 3706, 3706, 8398,
+     3706, 3706, 3706, 3706, 3706, 3710, 3710, 8398, 3710, 8398,
+     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
+     3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710, 3710,
+
+     3710, 8398, 3710, 3710, 3710, 3710, 3710, 1689, 8398, 8398,
+     1689, 8398, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 8398,
+     1689, 1689, 1689, 8398, 1689, 1689, 1689, 8398, 1689, 1689,
+     1689, 1689, 1689, 8398, 1689, 1689, 1689, 1689, 1689, 3719,
+     3719, 3719, 3719, 3719, 3719, 3719, 3719, 3719, 3719, 3719,
+     3719, 3719, 3719, 3719, 3719, 3719, 8398, 3719, 3719, 3719,
+     3719, 3719, 3719, 8398, 3719, 3719, 3719, 8398, 3719, 3719,
+     3719, 1726, 1726, 8398, 1726, 8398, 1726, 1726, 1726, 1726,
+     1726, 1726, 1726, 8398, 1726, 1726, 8398, 8398, 1726, 1726,
+     1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726,
+
+     1726, 1726, 1726, 3890, 3890, 8398, 3890, 3890, 3890, 3890,
+     3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890,
+     3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890,
+     3890, 3890, 3890, 3890, 3890, 1972, 1972, 1972, 1972, 8398,
+     8398, 1972, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 1972, 8398, 8398, 8398, 8398, 8398, 1972, 8398,
+     8398, 8398, 1972, 8398, 8398, 1972, 1986, 1986, 1986, 1986,
+     8398, 8398, 1986, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 1986, 8398, 8398, 8398, 8398, 8398, 1986,
+     8398, 8398, 8398, 1986, 8398, 8398, 1986, 3129, 3129, 3129,
+
+     3129, 3129, 3129, 3129, 3129, 3129, 3129, 3129, 3129, 3129,
+     3129, 3129, 3129, 3129, 3129, 3129, 3129, 3129, 3129, 3129,
+     3129, 3129, 3129, 3129, 3129, 3129, 3129, 3129, 3129, 3131,
+     8398, 8398, 3131, 8398, 8398, 8398, 8398, 8398, 3131, 8398,
+     8398, 8398, 8398, 8398, 8398, 3131, 8398, 8398, 8398, 8398,
+     8398, 8398, 3131, 8398, 8398, 8398, 3131, 3133, 3133, 3133,
+     3133, 3133, 3133, 8398, 8398, 8398, 8398, 8398, 3133, 8398,
+     3133, 8398, 3133, 3136, 3136, 3136, 3136, 3136, 3136, 8398,
+     8398, 8398, 3136, 8398, 3136, 8398, 3136, 8398, 3136, 2027,
+     2027, 2027, 2027, 8398, 8398, 2027, 8398, 8398, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 2027, 8398, 8398, 8398,
+     8398, 8398, 2027, 8398, 8398, 8398, 2027, 8398, 8398, 2027,
+     1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794,
+     1794, 1794, 1794, 1794, 1794, 1794, 8398, 1794, 1794, 1794,
+     1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794, 1794,
+     1794, 1794, 3479, 3479, 3479, 3479, 3479, 3479, 8398, 8398,
+     8398, 8398, 8398, 3479, 8398, 3479, 8398, 3479, 3482, 3482,
+     3482, 3482, 3482, 3482, 8398, 8398, 8398, 8398, 8398, 3482,
+     8398, 3482, 8398, 3482, 3485, 3485, 3485, 3485, 3485, 3485,
+     8398, 8398, 8398, 8398, 8398, 3485, 8398, 3485, 8398, 3485,
+
+     4502, 4502, 4502, 4502, 8398, 8398, 4502, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 4502, 4502, 8398, 8398,
+     8398, 8398, 8398, 4502, 8398, 8398, 8398, 4502, 3487, 3487,
+     3487, 3487, 8398, 8398, 3487, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 3487, 8398, 8398, 8398, 8398,
+     8398, 3487, 8398, 8398, 8398, 3487, 3490, 3490, 3490, 3490,
+     8398, 8398, 3490, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 3490, 3490, 8398, 8398, 8398, 8398, 8398, 3490,
+     8398, 8398, 8398, 3490, 2335, 2335, 2335, 2335, 8398, 8398,
+     2335, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+
+     8398, 2335, 8398, 8398, 8398, 8398, 8398, 2335, 8398, 8398,
+     8398, 2335, 8398, 8398, 2335, 4504, 4504, 8398, 4504, 8398,
+     4504, 4504, 4504, 4504, 4504, 4504, 4504, 4504, 4504, 4504,
+     4504, 4504, 4504, 4504, 4504, 4504, 4504, 4504, 4504, 4504,
+     4504, 8398, 4504, 4504, 4504, 4504, 4504, 3503, 3503, 3503,
+     3503, 8398, 8398, 3503, 8398, 8398, 8398, 8398, 3503, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     3503, 8398, 8398, 8398, 3503, 4510, 4510, 4510, 4510, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 4510, 4510, 8398, 8398, 8398, 8398, 8398, 4510, 8398,
+
+     8398, 8398, 4510, 4512, 4512, 8398, 4512, 8398, 4512, 4512,
+     4512, 4512, 4512, 4512, 4512, 4512, 4512, 4512, 4512, 4512,
+     4512, 4512, 4512, 4512, 4512, 4512, 4512, 4512, 4512, 8398,
+     4512, 4512, 4512, 4512, 4512, 4519, 4519, 8398, 4519, 8398,
+     4519, 4519, 4519, 4519, 4519, 4519, 4519, 4519, 4519, 4519,
+     4519, 4519, 4519, 4519, 4519, 4519, 4519, 4519, 4519, 4519,
+     4519, 8398, 4519, 4519, 4519, 4519, 4519, 4522, 4522, 8398,
+     4522, 8398, 4522, 4522, 4522, 4522, 4522, 4522, 4522, 4522,
+     4522, 4522, 4522, 4522, 4522, 4522, 4522, 4522, 4522, 4522,
+     4522, 4522, 4522, 8398, 4522, 4522, 4522, 4522, 4522, 4525,
+
+     4525, 8398, 4525, 8398, 4525, 4525, 4525, 4525, 4525, 4525,
+     4525, 4525, 4525, 4525, 4525, 4525, 4525, 4525, 4525, 4525,
+     4525, 4525, 4525, 4525, 4525, 8398, 4525, 4525, 4525, 4525,
+     4525, 3542, 3542, 3542, 3542, 8398, 8398, 3542, 8398, 8398,
+     8398, 8398, 3542, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 3542, 8398, 8398, 8398, 3542, 4530,
+     4530, 4530, 4530, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 4530, 8398, 4530, 8398, 8398, 8398, 8398,
+     8398, 8398, 4530, 8398, 8398, 8398, 4530, 3627, 3627, 3627,
+     3627, 3627, 3627, 3627, 3627, 3627, 3627, 3627, 3627, 8398,
+
+     3627, 3627, 3627, 8398, 3627, 3627, 3627, 3627, 3627, 3627,
+     3627, 3627, 3627, 3627, 3627, 3627, 3627, 3627, 3627, 3633,
+     3633, 3633, 3633, 3633, 3633, 3633, 3633, 3633, 3633, 3633,
+     3633, 3633, 3633, 3633, 3633, 8398, 3633, 3633, 3633, 3633,
+     3633, 3633, 3633, 3633, 3633, 3633, 3633, 3633, 3633, 3633,
+     3633, 3556, 3556, 3556, 3556, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 3556, 3556, 3556,
+     3556, 8398, 8398, 8398, 3556, 8398, 8398, 8398, 3556, 3557,
+     3557, 3557, 3557, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 3557, 8398, 3557, 3557, 8398,
+
+     8398, 8398, 3557, 8398, 8398, 8398, 3557, 3559, 3559, 3559,
+     3559, 8398, 8398, 8398, 8398, 8398, 3559, 8398, 8398, 8398,
+     8398, 8398, 8398, 3559, 3559, 8398, 8398, 8398, 8398, 8398,
+     3559, 8398, 8398, 8398, 3559, 3568, 3568, 3568, 3568, 8398,
+     8398, 3568, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 3568, 8398, 8398, 8398, 8398, 8398, 3568, 8398,
+     8398, 8398, 3568, 8398, 8398, 3568, 4538, 4538, 4538, 4538,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 4538, 4538, 8398, 8398, 8398, 8398, 8398, 4538,
+     8398, 8398, 8398, 4538, 4541, 4541, 4541, 4541, 8398, 8398,
+
+     4541, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 4541, 8398, 8398,
+     8398, 4541, 1463, 1463, 1463, 1463, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 1463, 8398, 1463, 1463,
+     8398, 8398, 8398, 8398, 8398, 1463, 8398, 8398, 8398, 1463,
+     3571, 3571, 3571, 3571, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 3571, 3571, 8398, 8398,
+     8398, 8398, 8398, 3571, 8398, 8398, 8398, 3571, 2564, 2564,
+     2564, 2564, 8398, 8398, 2564, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+
+     8398, 2564, 8398, 8398, 8398, 2564, 4547, 4547, 8398, 4547,
+     8398, 4547, 4547, 4547, 4547, 4547, 4547, 4547, 4547, 4547,
+     4547, 4547, 4547, 4547, 4547, 4547, 4547, 4547, 4547, 4547,
+     4547, 4547, 8398, 4547, 4547, 4547, 4547, 4547, 3616, 3616,
+     3616, 3616, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 3616,
+     8398, 8398, 8398, 8398, 3616, 3616, 8398, 8398, 8398, 8398,
+     8398, 3616, 8398, 8398, 8398, 3616, 3619, 3619, 3619, 3619,
+     8398, 8398, 3619, 8398, 8398, 8398, 8398, 3619, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 3619,
+     8398, 8398, 8398, 3619, 4586, 4586, 4586, 4586, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     4586, 4586, 8398, 8398, 8398, 8398, 8398, 4586, 8398, 8398,
+     8398, 4586, 3625, 3625, 3625, 3625, 8398, 8398, 3625, 8398,
+     8398, 8398, 3625, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 3625, 8398, 8398, 8398, 3625,
+     4590, 8398, 8398, 8398, 4590, 8398, 8398, 8398, 8398, 8398,
+     4590, 8398, 8398, 8398, 8398, 8398, 8398, 4590, 8398, 8398,
+     8398, 4590, 4593, 4593, 4593, 4593, 8398, 8398, 4593, 8398,
+     8398, 8398, 8398, 4593, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 4593, 8398, 8398, 8398, 4593,
+
+     4594, 4594, 8398, 4594, 4594, 4594, 4594, 4594, 4594, 4594,
+     4594, 4594, 4594, 4594, 4594, 4594, 4594, 4594, 4594, 4594,
+     4594, 4594, 4594, 4594, 4594, 4594, 4594, 4594, 4594, 4594,
+     4594, 4594, 4596, 4596, 8398, 4596, 4596, 4596, 4596, 4596,
+     4596, 4596, 4596, 4596, 4596, 4596, 4596, 4596, 4596, 4596,
+     4596, 4596, 4596, 4596, 4596, 4596, 4596, 4596, 4596, 4596,
+     4596, 4596, 4596, 4596, 1515, 1515, 1515, 1515, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     1515, 1515, 8398, 1515, 8398, 8398, 8398, 1515, 8398, 8398,
+     8398, 1515, 1600, 1600, 8398, 1600, 1600, 1600, 1600, 1600,
+
+     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
+     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
+     1600, 1600, 1600, 1600, 4656, 4656, 8398, 4656, 8398, 4656,
+     4656, 4656, 4656, 4656, 4656, 4656, 4656, 4656, 4656, 4656,
+     4656, 4656, 4656, 4656, 4656, 4656, 4656, 4656, 4656, 4656,
+     8398, 4656, 4656, 4656, 4656, 4656, 3702, 3702, 3702, 3702,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     3702, 8398, 3702, 3702, 8398, 8398, 8398, 8398, 8398, 3702,
+     8398, 8398, 8398, 3702, 1613, 1613, 1613, 1613, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 1613, 8398,
+
+     1613, 1613, 8398, 8398, 8398, 8398, 8398, 1613, 8398, 8398,
+     8398, 1613, 1643, 1643, 8398, 1643, 1643, 1643, 1643, 1643,
+     1643, 8398, 1643, 1643, 1643, 1643, 1643, 1643, 8398, 1643,
+     1643, 1643, 1643, 1643, 1643, 8398, 1643, 1643, 8398, 1643,
+     1643, 8398, 8398, 1643, 4660, 4660, 8398, 4660, 8398, 4660,
+     4660, 4660, 4660, 4660, 4660, 4660, 4660, 4660, 4660, 4660,
+     4660, 4660, 4660, 4660, 4660, 4660, 4660, 4660, 4660, 4660,
+     8398, 4660, 4660, 4660, 4660, 4660, 4663, 4663, 8398, 4663,
+     8398, 4663, 4663, 4663, 4663, 4663, 4663, 4663, 4663, 4663,
+     4663, 4663, 4663, 4663, 4663, 4663, 4663, 4663, 4663, 4663,
+
+     4663, 4663, 8398, 4663, 4663, 4663, 4663, 4663, 1689, 8398,
+     8398, 1689, 8398, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
+     8398, 1689, 1689, 1689, 8398, 1689, 1689, 1689, 8398, 1689,
+     1689, 1689, 1689, 1689, 8398, 1689, 1689, 1689, 1689, 1689,
+     1726, 1726, 8398, 1726, 8398, 1726, 1726, 1726, 1726, 1726,
+     1726, 1726, 8398, 1726, 1726, 8398, 8398, 1726, 1726, 1726,
+     1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726,
+     1726, 1726, 3890, 3890, 8398, 3890, 3890, 3890, 3890, 3890,
+     3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890,
+     3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890,
+
+     3890, 3890, 3890, 3890, 2020, 8398, 8398, 2020, 8398, 8398,
+     2020, 8398, 8398, 8398, 8398, 2020, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 2020, 8398, 8398,
+     8398, 2020, 5116, 5116, 8398, 5116, 5116, 5116, 5116, 5116,
+     5116, 5116, 5116, 5116, 5116, 5116, 5116, 5116, 5116, 5116,
+     5116, 5116, 5116, 5116, 5116, 5116, 5116, 5116, 5116, 5116,
+     5116, 5116, 5116, 5116, 4502, 4502, 4502, 4502, 8398, 8398,
+     4502, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     4502, 4502, 8398, 8398, 8398, 8398, 8398, 4502, 8398, 8398,
+     8398, 4502, 3487, 3487, 3487, 3487, 8398, 8398, 3487, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 3487,
+     8398, 8398, 8398, 8398, 8398, 3487, 8398, 8398, 8398, 3487,
+     5420, 5420, 8398, 5420, 8398, 5420, 5420, 5420, 5420, 5420,
+     5420, 5420, 5420, 5420, 5420, 5420, 5420, 5420, 5420, 5420,
+     5420, 5420, 5420, 5420, 5420, 5420, 8398, 5420, 5420, 5420,
+     5420, 5420, 4510, 4510, 4510, 4510, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 4510, 4510,
+     8398, 8398, 8398, 8398, 8398, 4510, 8398, 8398, 8398, 4510,
+     5428, 5428, 8398, 5428, 8398, 5428, 5428, 5428, 5428, 5428,
+     5428, 5428, 5428, 5428, 5428, 5428, 5428, 5428, 5428, 5428,
+
+     5428, 5428, 5428, 5428, 5428, 5428, 8398, 5428, 5428, 5428,
+     5428, 5428, 5432, 5432, 8398, 5432, 8398, 5432, 5432, 5432,
+     5432, 5432, 5432, 5432, 5432, 5432, 5432, 5432, 5432, 5432,
+     5432, 5432, 5432, 5432, 5432, 5432, 5432, 5432, 8398, 5432,
+     5432, 5432, 5432, 5432, 5434, 5434, 8398, 5434, 8398, 5434,
+     5434, 5434, 5434, 5434, 5434, 5434, 5434, 5434, 5434, 5434,
+     5434, 5434, 5434, 5434, 5434, 5434, 5434, 5434, 5434, 5434,
+     8398, 5434, 5434, 5434, 5434, 5434, 5436, 5436, 8398, 5436,
+     8398, 5436, 5436, 5436, 5436, 5436, 5436, 5436, 5436, 5436,
+     5436, 5436, 5436, 5436, 5436, 5436, 5436, 5436, 5436, 5436,
+
+     5436, 5436, 8398, 5436, 5436, 5436, 5436, 5436, 4530, 4530,
+     4530, 4530, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 4530, 8398, 4530, 8398, 8398, 8398, 8398, 8398,
+     8398, 4530, 8398, 8398, 8398, 4530, 4538, 4538, 4538, 4538,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 4538, 4538, 8398, 8398, 8398, 8398, 8398, 4538,
+     8398, 8398, 8398, 4538, 4541, 4541, 4541, 4541, 8398, 8398,
+     4541, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 4541, 8398, 8398,
+     8398, 4541, 1463, 1463, 1463, 1463, 8398, 8398, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 1463, 8398, 1463, 1463,
+     8398, 8398, 8398, 8398, 8398, 1463, 8398, 8398, 8398, 1463,
+     4586, 4586, 4586, 4586, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 4586, 4586, 8398, 8398,
+     8398, 8398, 8398, 4586, 8398, 8398, 8398, 4586, 4590, 8398,
+     8398, 8398, 4590, 8398, 8398, 8398, 8398, 8398, 4590, 8398,
+     8398, 8398, 8398, 8398, 8398, 4590, 8398, 8398, 8398, 4590,
+     5482, 5482, 5482, 5482, 8398, 8398, 5482, 8398, 8398, 8398,
+     8398, 5482, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 5482, 8398, 8398, 8398, 5482, 5484, 5484,
+
+     5484, 5484, 8398, 8398, 8398, 8398, 8398, 8398, 5484, 8398,
+     8398, 8398, 8398, 8398, 5484, 5484, 8398, 8398, 8398, 8398,
+     8398, 5484, 8398, 8398, 8398, 5484, 4594, 4594, 8398, 4594,
+     4594, 4594, 4594, 4594, 4594, 4594, 4594, 4594, 4594, 4594,
+     4594, 4594, 4594, 4594, 4594, 4594, 4594, 4594, 4594, 4594,
+     4594, 4594, 4594, 4594, 4594, 4594, 4594, 4594, 4596, 4596,
+     8398, 4596, 4596, 4596, 4596, 4596, 4596, 4596, 4596, 4596,
+     4596, 4596, 4596, 4596, 4596, 4596, 4596, 4596, 4596, 4596,
+     4596, 4596, 4596, 4596, 4596, 4596, 4596, 4596, 4596, 4596,
+     1515, 1515, 1515, 1515, 8398, 8398, 8398, 8398, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 1515, 1515, 8398, 1515,
+     8398, 8398, 8398, 1515, 8398, 8398, 8398, 1515, 1585, 1585,
+     1585, 1585, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 1585, 8398, 8398, 8398, 8398, 8398,
+     8398, 1585, 8398, 8398, 8398, 1585, 1600, 1600, 8398, 1600,
+     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
+     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
+     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1613, 1613,
+     1613, 1613, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 1613, 8398, 1613, 1613, 8398, 8398, 8398, 8398,
+
+     8398, 1613, 8398, 8398, 8398, 1613, 1689, 8398, 8398, 1689,
+     8398, 1689, 1689, 1689, 1689, 1689, 1689, 1689, 8398, 1689,
+     1689, 1689, 8398, 1689, 1689, 1689, 8398, 1689, 1689, 1689,
+     1689, 1689, 8398, 1689, 1689, 1689, 1689, 1689, 5550, 5550,
+     5550, 5550, 5550, 5550, 5550, 5550, 5550, 5550, 5550, 5550,
+     5550, 5550, 5550, 5550, 5550, 8398, 5550, 5550, 5550, 5550,
+     5550, 5550, 8398, 5550, 5550, 5550, 5550, 5550, 5550, 5550,
+     1726, 1726, 8398, 1726, 8398, 1726, 1726, 1726, 1726, 1726,
+     1726, 1726, 8398, 1726, 1726, 8398, 8398, 1726, 1726, 1726,
+     1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726,
+
+     1726, 1726, 5580, 5580, 8398, 5580, 5580, 5580, 5580, 5580,
+     5580, 5580, 5580, 5580, 5580, 5580, 5580, 5580, 5580, 5580,
+     5580, 5580, 5580, 5580, 5580, 5580, 5580, 5580, 5580, 5580,
+     5580, 5580, 5580, 5580, 5713, 5713, 8398, 5713, 5713, 5713,
+     5713, 5713, 5713, 5713, 5713, 5713, 5713, 5713, 5713, 5713,
+     5713, 5713, 5713, 5713, 5713, 5713, 5713, 5713, 5713, 5713,
+     5713, 5713, 5713, 5713, 5713, 5713, 5116, 5116, 8398, 5116,
+     5116, 5116, 5116, 5116, 5116, 5116, 5116, 5116, 5116, 5116,
+     5116, 5116, 5116, 5116, 5116, 5116, 5116, 5116, 5116, 5116,
+     5116, 5116, 5116, 5116, 5116, 5116, 5116, 5116, 6218, 6218,
+
+     6218, 6218, 8398, 8398, 6218, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 6218, 6218, 8398, 8398, 8398, 8398,
+     8398, 6218, 8398, 8398, 8398, 6218, 3503, 3503, 3503, 3503,
+     8398, 8398, 3503, 8398, 8398, 8398, 8398, 3503, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 3503,
+     8398, 8398, 8398, 3503, 3568, 3568, 3568, 3568, 8398, 8398,
+     3568, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 3568, 8398, 8398, 8398, 8398, 8398, 3568, 8398, 8398,
+     8398, 3568, 8398, 8398, 3568, 1463, 1463, 1463, 1463, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 1463,
+
+     8398, 1463, 1463, 8398, 8398, 8398, 8398, 8398, 1463, 8398,
+     8398, 8398, 1463, 3619, 3619, 3619, 3619, 8398, 8398, 3619,
+     8398, 8398, 8398, 8398, 3619, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 3619, 8398, 8398, 8398,
+     3619, 6263, 6263, 6263, 6263, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 6263, 6263, 8398,
+     8398, 8398, 8398, 8398, 6263, 8398, 8398, 8398, 6263, 5484,
+     5484, 5484, 5484, 8398, 8398, 8398, 8398, 8398, 8398, 5484,
+     8398, 8398, 8398, 8398, 8398, 5484, 5484, 8398, 8398, 8398,
+     8398, 8398, 5484, 8398, 8398, 8398, 5484, 4594, 4594, 8398,
+
+     4594, 4594, 4594, 4594, 4594, 4594, 4594, 4594, 4594, 4594,
+     4594, 4594, 4594, 4594, 4594, 4594, 4594, 4594, 4594, 4594,
+     4594, 4594, 4594, 4594, 4594, 4594, 4594, 4594, 4594, 1515,
+     1515, 1515, 1515, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 1515, 1515, 8398, 1515, 8398,
+     8398, 8398, 1515, 8398, 8398, 8398, 1515, 1585, 1585, 1585,
+     1585, 8398, 8398, 8398, 8398, 8398, 1585, 8398, 8398, 8398,
+     8398, 8398, 8398, 1585, 8398, 8398, 8398, 8398, 8398, 8398,
+     1585, 8398, 8398, 8398, 1585, 1613, 1613, 1613, 1613, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 1613,
+
+     8398, 1613, 1613, 8398, 8398, 8398, 8398, 8398, 1613, 8398,
+     8398, 8398, 1613, 6318, 6318, 8398, 6318, 6318, 6318, 6318,
+     6318, 6318, 6318, 6318, 6318, 6318, 6318, 6318, 6318, 6318,
+     6318, 6318, 6318, 6318, 6318, 6318, 6318, 6318, 6318, 6318,
+     6318, 6318, 6318, 6318, 6318, 1689, 8398, 8398, 1689, 8398,
+     1689, 1689, 1689, 1689, 1689, 1689, 1689, 8398, 1689, 1689,
+     1689, 8398, 1689, 1689, 1689, 8398, 1689, 1689, 1689, 1689,
+     1689, 8398, 1689, 1689, 1689, 1689, 1689, 6325, 6325, 6325,
+     6325, 6325, 6325, 6325, 6325, 6325, 6325, 6325, 6325, 6325,
+     6325, 6325, 6325, 6325, 8398, 6325, 6325, 6325, 6325, 6325,
+
+     6325, 8398, 6325, 6325, 6325, 8398, 6325, 6325, 6325, 1726,
+     1726, 8398, 1726, 8398, 1726, 1726, 1726, 1726, 1726, 1726,
+     1726, 8398, 1726, 1726, 8398, 8398, 1726, 1726, 1726, 1726,
+     1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726,
+     1726, 5580, 5580, 8398, 5580, 5580, 5580, 5580, 5580, 5580,
+     5580, 5580, 5580, 5580, 5580, 5580, 5580, 5580, 5580, 5580,
+     5580, 5580, 5580, 5580, 5580, 5580, 5580, 5580, 5580, 5580,
+     5580, 5580, 5580, 5713, 5713, 8398, 5713, 5713, 5713, 5713,
+     5713, 5713, 5713, 5713, 5713, 5713, 5713, 5713, 5713, 5713,
+     5713, 5713, 5713, 5713, 5713, 5713, 5713, 5713, 5713, 5713,
+
+     5713, 5713, 5713, 5713, 5713, 5848, 5848, 5848, 5848, 5848,
+     5848, 5848, 5848, 5848, 5848, 5848, 5848, 5848, 5848, 5848,
+     5848, 5848, 5848, 5848, 5848, 5848, 5848, 5848, 5848, 5848,
+     5848, 5848, 5848, 5848, 5848, 5848, 5848, 6218, 6218, 6218,
+     6218, 8398, 8398, 6218, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 6218, 6218, 8398, 8398, 8398, 8398, 8398,
+     6218, 8398, 8398, 8398, 6218, 1463, 1463, 1463, 1463, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 1463,
+     8398, 1463, 1463, 8398, 8398, 8398, 8398, 8398, 1463, 8398,
+     8398, 8398, 1463, 6263, 6263, 6263, 6263, 8398, 8398, 8398,
+
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 6263,
+     6263, 8398, 8398, 8398, 8398, 8398, 6263, 8398, 8398, 8398,
+     6263, 1515, 1515, 1515, 1515, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 1515, 1515, 8398,
+     1515, 8398, 8398, 8398, 1515, 8398, 8398, 8398, 1515, 1613,
+     1613, 1613, 1613, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 1613, 8398, 1613, 1613, 8398, 8398, 8398,
+     8398, 8398, 1613, 8398, 8398, 8398, 1613, 6318, 6318, 8398,
+     6318, 6318, 6318, 6318, 6318, 6318, 6318, 6318, 6318, 6318,
+     6318, 6318, 6318, 6318, 6318, 6318, 6318, 6318, 6318, 6318,
+
+     6318, 6318, 6318, 6318, 6318, 6318, 6318, 6318, 6318, 1689,
+     8398, 8398, 1689, 8398, 1689, 1689, 1689, 1689, 1689, 1689,
+     1689, 8398, 1689, 1689, 1689, 8398, 1689, 1689, 1689, 8398,
+     1689, 1689, 1689, 1689, 1689, 8398, 1689, 1689, 1689, 1689,
+     1689, 6973, 6973, 6973, 6973, 6973, 6973, 6973, 6973, 6973,
+     6973, 6973, 6973, 6973, 6973, 6973, 6973, 6973, 8398, 6973,
+     6973, 6973, 6973, 6973, 6973, 8398, 6973, 6973, 6973, 8398,
+     6973, 6973, 6973, 6975, 6975, 6975, 6975, 6975, 6975, 6975,
+     6975, 6975, 6975, 6975, 6975, 6975, 6975, 6975, 6975, 6975,
+     8398, 6975, 6975, 6975, 6975, 6975, 6975, 8398, 6975, 6975,
+
+     6975, 8398, 6975, 6975, 6975, 1726, 1726, 8398, 1726, 8398,
+     1726, 1726, 1726, 1726, 1726, 1726, 1726, 8398, 1726, 1726,
+     8398, 8398, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726,
+     1726, 1726, 1726, 1726, 1726, 1726, 1726, 7428, 7428, 7428,
+     7428, 7428, 7428, 7428, 7428, 7428, 7428, 7428, 7428, 7428,
+     7428, 7428, 7428, 7428, 8398, 7428, 7428, 7428, 7428, 7428,
+     7428, 8398, 7428, 7428, 7428, 8398, 7428, 7428, 7428, 1463,
+     1463, 1463, 1463, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 1463, 8398, 1463, 1463, 8398, 8398, 8398,
+     8398, 8398, 1463, 8398, 8398, 8398, 1463, 1515, 1515, 1515,
+
+     1515, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 1515, 1515, 8398, 1515, 8398, 8398, 8398,
+     1515, 8398, 8398, 8398, 1515, 1585, 1585, 1585, 1585, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 1585, 8398, 8398, 8398, 8398, 8398, 8398, 1585, 8398,
+     8398, 8398, 1585, 1613, 1613, 1613, 1613, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 1613, 8398, 1613,
+     1613, 8398, 8398, 8398, 8398, 8398, 1613, 8398, 8398, 8398,
+     1613, 7498, 7498, 7498, 7498, 7498, 7498, 7498, 7498, 7498,
+     7498, 7498, 7498, 7498, 7498, 7498, 7498, 7498, 8398, 7498,
+
+     7498, 7498, 7498, 7498, 7498, 8398, 7498, 7498, 7498, 8398,
+     7498, 7498, 7498, 1726, 1726, 8398, 1726, 8398, 1726, 1726,
+     1726, 1726, 1726, 1726, 1726, 8398, 1726, 1726, 8398, 8398,
+     1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726,
+     1726, 1726, 1726, 1726, 1726, 7805, 7805, 7805, 7805, 7805,
+     7805, 7805, 7805, 7805, 7805, 7805, 7805, 7805, 7805, 7805,
+     7805, 7805, 7805, 7805, 7805, 7805, 7805, 7805, 7805, 7805,
+     7805, 7805, 7805, 7805, 7805, 7805, 7805, 1463, 1463, 1463,
+     1463, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 1463, 8398, 1463, 1463, 8398, 8398, 8398, 8398, 8398,
+
+     1463, 8398, 8398, 8398, 1463, 7844, 7844, 7844, 7844, 7844,
+     7844, 7844, 7844, 7844, 7844, 7844, 7844, 7844, 7844, 7844,
+     7844, 7844, 8398, 7844, 7844, 7844, 7844, 7844, 7844, 8398,
+     7844, 7844, 7844, 8398, 7844, 7844, 7844, 1515, 1515, 1515,
+     1515, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 1515, 1515, 8398, 1515, 8398, 8398, 8398,
+     1515, 8398, 8398, 8398, 1515, 1726, 1726, 8398, 1726, 8398,
+     1726, 1726, 1726, 1726, 1726, 1726, 1726, 8398, 1726, 1726,
+     8398, 8398, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726,
+     1726, 1726, 1726, 1726, 1726, 1726, 1726, 8065, 8065, 8398,
+
+     8065, 8065, 8065, 8065, 8065, 8065, 8065, 8065, 8065, 8065,
+     8065, 8065, 8065, 8065, 8065, 8065, 8065, 8065, 8065, 8065,
+     8065, 8065, 8065, 8065, 8065, 8065, 8065, 8065, 8065, 8098,
+     8098, 8398, 8098, 8098, 8098, 8098, 8098, 8098, 8098, 8098,
+     8098, 8098, 8098, 8098, 8098, 8098, 8098, 8098, 8098, 8098,
+     8098, 8098, 8098, 8098, 8098, 8098, 8098, 8098, 8098, 8098,
+     8098, 1463, 1463, 1463, 1463, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 1463, 8398, 1463, 1463, 8398,
+     8398, 8398, 8398, 8398, 1463, 8398, 8398, 8398, 1463, 7844,
+     7844, 7844, 7844, 7844, 7844, 7844, 7844, 7844, 7844, 7844,
+
+     7844, 7844, 7844, 7844, 7844, 7844, 8398, 7844, 7844, 7844,
+     7844, 7844, 7844, 8398, 7844, 7844, 7844, 8398, 7844, 7844,
+     7844, 8143, 8143, 8143, 8143, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8143, 8398, 8398,
+     8398, 8143, 8398, 8398, 8143, 8398, 8398, 8398, 8143, 1726,
+     1726, 8398, 1726, 8398, 1726, 1726, 1726, 1726, 1726, 1726,
+     1726, 8398, 1726, 1726, 8398, 8398, 1726, 1726, 1726, 1726,
+     1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726,
+     1726, 8065, 8065, 8398, 8065, 8065, 8065, 8065, 8065, 8065,
+     8065, 8065, 8065, 8065, 8065, 8065, 8065, 8065, 8065, 8065,
+
+     8065, 8065, 8065, 8065, 8065, 8065, 8065, 8065, 8065, 8065,
+     8065, 8065, 8065,  311, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398
+
+    } ;
+
+static yyconst short int yy_chk[42194] =
+    {   0,
+        0,    1,    0,    1,  329,  329,  112,    1,    1,  112,
+        2,    1,    2,  575,  575,    0,    2,    2,  112,    1,
+        2,  318,  328,  112,  597,  597,  318,  328,    2,    3,
+        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
+        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
+        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
+        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
+        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
+        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
+        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
+
+        3,    3,    3,    3,    3,    3,    3,    3,    5,  338,
+        5,  348,  338,  501,    5,    5,  348,    6,    5,    6,
+      362, 2909,  501,    6,    6,  362,    5,    6,  602,  602,
+        7,    7,    7,    7,    7,    6,    7,    7,  373,  116,
+        7,  373,  116,    8,    8,    8,    8,    8,    7,    8,
+        8,  116,   15,    8,   15, 2910,  116,  178,   15,   15,
+      178,    8,   15,  320,  403,   23,  320,   23,  403,  178,
+       15,   23,   23,  320,  178,   23,   15,    7,   15,  382,
+       23, 1405,  382,   23,  346,  346,  346,  346,   23, 1405,
+        8,    9,    9,    9,    9,    9,    9,    9,    9,    9,
+
+        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
+        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
+        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
+        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
+        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
+        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
+        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
+       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
+       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
+       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
+
+       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
+       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
+       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
+       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
+       11,   11,   11,   11,   11,   11,   11,   11,   11,   13,
+       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
+       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
+       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
+       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
+       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
+
+       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
+       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
+       13,   13,   13,   13,   13,   13,   13,   13,   16,  662,
+       16,  381,  396,  662,   16,   16,  381,  396,   16,  408,
+      339,  339,  339,  339,  408, 1439,   16,  339,  405,  405,
+      405,  405,   16, 1439,   16,   17,   17,   17,   17,   17,
+       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
+       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
+       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
+       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
+
+       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
+       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
+       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
+       17,   17,   17,   17,   19,   19,   19,   19,   19,  527,
+       19,   19,  527,  401,   19, 2911,  401,   20,   20,   20,
+       20,   20,   19,   20,   20,  442,   21,   20,   21,  437,
+      442,  437,   21,   21,  454,   20,   21,   21,  458,  454,
+       22,   21,   22,  458,   21,  562,   22,   22,  562,   21,
+       22,   22,  474,  437,   24,   22,   24,  474,   22,  528,
+       24,   24,  482,   22,   24,  401,  489,  482,   19,   24,
+
+     2912,  489,   24,   27,   19,   27,  612,   24,  612,   27,
+       27,   20,   28,   27,   28,  496, 1367,   20,   28,   28,
+      496,   27,   28,  323,  323,  323,  323,   27, 1367,  528,
+       28,   21,  353,  353,  353,  353,   28, 1470, 1470,  353,
+      323,  473,  473,  473,  473,   22,   25,   25,   25,   25,
+       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
+       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
+       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
+       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
+       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
+
+       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
+       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
+       25,   25,   25,   25,   25,   29,   29,   29,   29,   29,
+       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
+       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
+       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
+       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
+       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
+       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
+       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
+
+       29,   29,   29,   29,   31,   31,   31,   31,   31,   31,
+       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
+       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
+       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
+       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
+       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
+       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
+       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
+       31,   31,   31,   33,   33,   33,   33,   33,  534,   33,
+       33,  551,  551,   33,  551, 1787,   34,   34,   34,   34,
+
+       34,   33,   34,   34,  510,   35,   34,   35,  518,  510,
+     1787,   35,   35,  518,   34,   35,   35,  529, 1406,   36,
+       35,   36,  529,   35, 1879,   36,   36,   35,   35,   36,
+       36, 1406, 1208,   39,   36,   39,  534,   36,  773,   39,
+       39,   36,   36,   39,   39,   39,   40,  570,   40,  564,
+      570,   39,   40,   40,  564,  574,   40,   40,   40,   41,
+      574,   41, 1879,  773,   40,   41,   41,  414,   42,   41,
+       42,  584, 1208,  414,   42,   42,  584,   41,   42,  414,
+       35,  605,   41,  990,  605,  990,   42,  324,  324,  324,
+      324,   42, 2914,  605,   36,   37,   37,   37,   37,   37,
+
+      634,   37,   37,  634,  324,   37,   37,   37,  556,  556,
+       37,  556,  634,   37,   38,   38,   38,   38,   38,  789,
+       38,   38,  789,  591,   38,   38,   38,  559,  591,   38,
+      559,  789,   38,  559,   41,  435,  435,  435,  435, 1512,
+     1512, 2915,  435,   42,   43,   43,   43,   43,   43,   43,
+       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
+       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
+       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
+       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
+       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
+
+       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
+       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
+       43,   43,   43,   45, 1182,   45,  601,  610, 1578,   45,
+       45,  601,  610,   45,   45, 2916,  569, 1578,   46,  569,
+       46,   45,  569, 1182,   46,   46,   45,   45,   46,   46,
+     1784, 1182,  604,   47,  604,   47,   46, 1784,  617,   47,
+       47,   46,   46,   47,  951,  604,   48,  797,   48,  617,
+      797,   47,   48,   48,  617,   67,   48,   67,  630,  797,
+     1760,   67,   67,  630,   48,   67,  636,  644,   68,  951,
+       68,  636,  644,   67,   68,   68, 1760, 1107,   68,   47,
+
+     1107,   47,  497,  497,  497,  497,   68,  330,  330,  330,
+      330,  706,   48,  706,   48,   49,   49,   49,   49,   49,
+      497,   49,   49,  330,   69,   49,   69,  656,  330,  706,
+       69,   69,  656,   49,   69,  661, 1684,   69, 1684,   70,
+      661,   70,   69,   49,  962,   70,   70,  962,  669,   70,
+      676,   67,   70,  669,  686,  676,   71,   70,   71,  686,
+      693,  962,   71,   71,   68,  693,   71, 2918,  705,   71,
+       72,   69,   72,  705,   71, 1116,   72,   72, 1116,  715,
+       72,  330,  722,   72,  715, 2919,   70,  722,   72,  967,
+       49,   49,   50,   50,   50,   50,   50,  709,   50,   50,
+
+      709,  732,   50,   71,  740,   73,  732,   73,  749,  740,
+       50,   73,   73,  749,  967,   73, 1711,   72, 1711,   74,
+       50,   74,  756,   73,  709,   74,   74,  756,   73,   74,
+      664,  664,  664,   73,  664, 2922,  826,   74,   75,  826,
+       75,   75,   74,  709,   75,   75, 1748,   74,   75,  387,
+      387,  387,  387, 1380,  826, 1748,   75,  341,  341,  341,
+      341,  331,  331,  331,  331, 1380,  387,   50,   50,   51,
+       51,   51,   51,   51, 2924,   51,   51,  331,  341,   51,
+       73, 1123,  331, 1581, 1123,   75,   76,   51,   76,   76,
+     1810, 1581,   76,   76,   74,  717,   76,   51,  750,   77,
+
+      907,   77,  765,  907,   76,   77,   77,  765,   78,   77,
+       78, 1810,  907,  750,   78,   78,  759,   77,   78,  759,
+     1333,   79,   79,   79, 1333,   79,   78,   79,   79,  717,
+     1484,   79,  750,   76,   79,  334,  334,  334,  334,   79,
+     1484, 1892,  334,  759,   51,   51,   52,   52,   52,   52,
+       52,  334,   52,   52,  717, 1130,   52, 1892, 1130,   80,
+       80,   80,  759,   80,   52,   80,   80,  781,  781,   80,
+      781,  770,   80,   81,   52,   81,  770,   80, 1751,   81,
+       81,  751,   82,   81,   82,  772, 1491, 1751,   82,   82,
+      772,   81,   82,  814,  837,   83, 1491,   83,  814,  837,
+
+       82,   83,   83, 1604, 1604,   83,  524,  524,  524,  524,
+       84,  334,   84,   83,  852,  751,   84,   84, 2925,  852,
+       84,   52,   52,   53,   53,   53,   53,   53,   84,   53,
+       53,  860,   85,   53,   85, 1186,  860, 1186,   85,   85,
+      751,   53,   85,   85,   85, 1878,   86, 1878,   86,  766,
+       85,   53,   86,   86, 1650, 1650,   86,   86,   86,  332,
+      332,  332,  332, 1186,   86, 2306,   93, 2306,   93,  872,
+       83,   83,   93,   93,  872,  332,   93,   93,   93,  906,
+      332,  906, 1186,  766,   93,   84,   84,   89,   89,   89,
+       89,   89,  906,   89,   89, 1659, 1659,   89,   53,   53,
+
+       54,   54,   54,   54,   54,   89,   54,   54,  766, 1362,
+       54,   89, 1362,   89,  342,  342,  342,  342,   54,   90,
+       90,   90,   90,   90,  720,   90,   90,  720,   54,   90,
+      815,  815,   91,  815,   91,  342,  720,   90,   91,   91,
+     1479,  720,   91,   90, 1501,   90, 1479,   92, 1501,   92,
+       91,  720,  812,   92,   92,  812,   91,   92,   91,  812,
+      404,  404,  404,  404,  812,   92, 2768,  404, 2768,  880,
+      720,   92,  404,   92,  880,   54,   54,   55,   55,   55,
+       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
+       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
+
+       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
+       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
+       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
+       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
+       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
+       55,   55,   55,   55,   55,   55,   57,   57,   57,   57,
+       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
+       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
+       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
+       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
+
+       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
+       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
+       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
+       57,   57,   57,   57,   57,   59,   59,   59,   59,   59,
+       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
+       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
+       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
+       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
+       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
+       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
+
+       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
+       59,   59,   59,   59,   61,   61,   61,   61,   61,   61,
+       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
+       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
+       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
+       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
+       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
+       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
+       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
+       61,   61,   61,   63,   63,   63, 1754,   63,  743,   63,
+
+       63,  743,   94,   63,   94, 1550, 1754, 1550,   94,   94,
+      743,   63,   94,   94,   94, 1138,   95, 1138,   95,  888,
+       94,   63,   95,   95,  888,  743,   95, 2926, 1138, 1550,
+      340,  340,  340,  340,   95,   96, 1195,   96,  895, 1195,
+       63,   96,   96,  895,  743,   96, 1195, 1875,   99,   99,
+       99,  340,   99,   96,   99,   99, 1875, 1651,   99,  671,
+      671,  671,   95,  671,   95, 1651,   99, 2429,   63,   63,
+       64,   64,   64,  913,   64, 1747,   64,   64,  913, 1747,
+       64,   96,  899,   96,   97,  899,   97,  899,   64, 1385,
+       97,   97, 1385,   98,   97,   98,  926,   97,   64,   98,
+
+       98,  926,   97,   98,  340, 2429,   98,  525,  525,  525,
+      525,   98,   97,  388,  388,  388,  388,   64,  100,  100,
+      100,   98,  100, 2928,  100,  100,  904,  904,  100,  904,
+      388,   97,  105, 1765,  105, 1900,  100, 1765,  105,  105,
+       98,  769,  105, 1900,  769,   64,   64,   65,   65,   65,
+      105,   65, 1413,   65,   65, 1413, 1427,   65,  769, 1427,
+      101,  101,  101, 1695,  101,   65,  101,  101,  769, 1789,
+      101,  364,  364,  364,  364,   65, 1789,  935,  101,  102,
+      102,  102,  935,  102, 2820,  102,  102,  769, 1695,  102,
+     2820,  940,  364,  106,   65,  106,  940,  102,  721,  106,
+
+      106,  721,  107,  106,  107, 1663, 1663,  105,  107,  107,
+      721,  106,  107,  721,  721,  721,  372,  372,  372,  372,
+      107, 2826,   65,   65,   66,   66,   66, 2826,   66,  853,
+       66,   66,  372,  108,   66,  108,  950,  372,  853,  108,
+      108,  950,   66,  108, 1671, 1671,  333,  333,  333,  333,
+      853,  108,   66,  333,  107,  343,  343,  343,  343,  119,
+     1814,  119,  343,  853, 1814,  119,  119,  333,  106,  119,
+      958,   66,  135, 1744,  135,  958,  343,  119,  135,  135,
+     2930, 1458,  135,  119, 1458,  108,  136,  119,  136,  652,
+      135,  652,  136,  136, 1465,  652,  136, 1465, 1744,   66,
+
+       66,   87,   87,   87,  136,   87,  119,   87,   87, 2931,
+      120,   87,  120,  966,   87, 2440,  120,  120,  966,   87,
+      120,  981,  333, 2440,  755,   87,  981,  755,  120,   87,
+     1482,  343,  971, 1482,  120,  652,  755,  652,  120,  755,
+      755,  755,  352,  352,  352,  352, 1673, 1673,   87,   88,
+       88,   88,  352,   88, 2281,   88,   88,  120,  137,   88,
+      137, 1821,   88,  352,  137,  137,  971,   88,  137,  971,
+      137, 1821,  138,   88,  138, 2281,  137,   88,  138,  138,
+      914,  914,  138,  914,  138,  449,  449,  449,  449, 1019,
+      138,  971,  449, 2932, 1019,  971,   88,  103,  103,  103,
+
+      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
+      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
+      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
+      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
+      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
+      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
+      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
+      103,  103,  103,  103,  103,  103,  109,  109,  109,  109,
+      109, 1490,  109,  109, 1490,  129,  109,  129, 1752,  109,
+     1752,  129,  129,  109,  109,  129,  129, 1033,  129,  130,
+
+     1752,  130, 1033,  129,  109,  130,  130, 2080, 1513,  130,
+      130, 1513,  130,  532,  532,  532,  532,  130,  395,  395,
+      395,  395,  995,  109,  110,  110,  110,  110,  110, 2080,
+      110,  110,  129,  995,  110,  395, 1599,  110,  995, 1599,
+     1853,  110,  110,  147,  147,  147,  130,  147,  129,  147,
+      147, 1647,  110,  147, 1647, 1853,  147,  509,  509,  509,
+      509,  147,  130,  523,  523,  523,  523, 1657,  509,  523,
+     1657,  110,  111,  111,  111,  111,  111,  111,  111,  111,
+      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
+      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
+
+      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
+      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
+      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
+      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
+      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
+      111,  113,  113,  113, 1675,  113, 1675,  113,  113, 1010,
+     1010,  113, 1010, 1749,  113, 1907, 1749, 1675,  113,  113,
+      148,  148,  148, 1044,  148,  113,  148,  148, 1044,  113,
+      148, 1907, 1850,  148,  639,  639,  639,  639,  148, 1850,
+      397,  397,  397,  397,  406,  406,  406,  406,  113,  114,
+
+      114,  114,  114,  114, 1488,  114,  114,  397,  149,  114,
+      149,  406,  114, 1488,  149,  149,  114,  114,  149, 1488,
+      149,  149,  150,  114,  150, 2829,  149,  114,  150,  150,
+      866,  866,  150,  866,  150,  150,  545,  545,  545,  545,
+      150, 1779,  866,  545, 1779, 2829,  114,  115,  115,  115,
+      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
+      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
+      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
+      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
+      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
+
+      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
+      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
+      115,  115,  115,  115,  115,  115,  117,  117,  117,  117,
+      117, 1780,  117,  117, 1780,  151,  117,  151,  793,  793,
+     2934,  151,  151,  793,  117,  151, 1942, 1055,  151,  152,
+      117,  152, 1055,  151,  117,  152,  152, 1633, 1633,  152,
+     1633, 1942,  152,  640,  640,  640,  640,  152,  793,  410,
+      410,  410,  410,  117,  118,  118,  118,  118,  118,  861,
+      118,  118, 1061,  153,  118,  153,  410, 1061,  861,  153,
+      153, 1074,  118,  153, 2936, 1790, 1074,  154,  118,  154,
+
+      861,  153,  118,  154,  154, 1641, 1641,  154, 1641,  552,
+      552,  552,  552,  861, 1790,  154,  552,  697,  697,  697,
+      697,  118,  121,  121,  121,  121,  121,  121,  121,  121,
+      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
+      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
+      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
+      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
+      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
+      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
+      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
+
+      121,  123,  123,  123,  123,  123,  123,  123,  123,  123,
+      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
+      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
+      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
+      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
+      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
+      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
+      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
+      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
+      125,  125,  125,  125,  125, 1927,  125,  725,  125,  125,
+
+      725, 1927, 1782,  125,  125,  125,  125,  125,  125,  125,
+      795,  795,  157, 1758,  157,  795, 1076, 1927,  157,  157,
+      725, 1076,  157,  157,  725, 1782, 1758,  125,  125,  125,
+      157,  158, 1183,  158, 1083, 1183, 2941,  158,  158, 1083,
+      795,  158,  158,  725, 1183,  365,  365,  365,  365,  158,
+      985,  985,  365, 1957, 1957,  985,  125,  125,  125,  126,
+      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
+      126,  126,  126,  126, 1090,  126, 1097,  126,  126, 1090,
+      985, 1097,  126,  126,  126,  126,  126,  126,  126, 1104,
+     1354,  159, 1354,  159, 1104,  794, 1354,  159,  159,  794,
+
+      794,  159,  365,  159,  794, 1801,  126,  126,  126,  159,
+      160, 1236,  160, 1112, 1236, 2849,  160,  160, 1112,  365,
+      160, 1753,  160, 1236,  366,  366,  366,  366,  160,  794,
+     1801,  366, 2066, 2066, 2849,  126,  126,  126,  127,  127,
+      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
+      127,  127,  127, 1880,  127,  943,  127,  127,  943, 1753,
+     1880,  127,  127,  127,  127,  127,  127,  127, 1120, 1127,
+      167, 1753,  167, 1120, 1127, 1753,  167,  167,  943, 1135,
+      167,  366,  943,  167, 1135,  127,  127,  127,  167, 1750,
+      163,  163,  163, 2842,  163, 2942,  163,  163,  366, 1750,
+
+      163,  943, 1750,  163,  698,  698,  698,  698,  163,  699,
+      699,  699,  699, 2842,  127,  127,  127,  128,  128,  128,
+      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
+      128,  128, 2943,  128, 1150,  128,  128,  163, 1807, 1150,
+      128,  128,  128,  128,  128,  128,  128, 1159, 1755,  168,
+     1755,  168, 1159,  987,  987,  168,  168, 1755,  987,  168,
+      938, 1807,  168,  938,  128,  128,  128,  168,  169, 1808,
+      169, 1825,  938, 2514,  169,  169,  169,  938,  169,  738,
+      738,  738,  738,  987, 1825, 2514,  169,  858,  858,  858,
+      858, 2944, 1808,  128,  128,  128,  131,  131,  131,  131,
+
+      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
+      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
+      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
+      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
+      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
+      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
+      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
+      131,  131,  131,  131,  131,  133,  133,  133, 1168,  133,
+     1832,  133,  133, 1168, 1832,  133,  999,  999,  164,  164,
+      164,  999,  164,  133,  164,  164, 2945,  170,  164,  170,
+
+      133,  164, 2197,  170,  170,  170,  164,  170,  399,  399,
+      399,  399,  171, 2197,  171,  170,  999, 1816,  171,  171,
+     1816, 1399,  171, 1144, 1399,  171,  183,  133,  183,  399,
+      171, 1399,  183,  183, 1144,  164,  183, 1181, 1781, 1144,
+      171, 1781, 1181,  133,  183,  133,  400,  400,  400,  400,
+      133,  134,  134,  134, 1781,  134, 2834,  134,  134,  171,
+     1677,  134, 2834, 1677,  172,  172,  172,  400,  172,  134,
+      172,  172, 1677,  175,  172,  175,  134,  172, 1845,  175,
+      175, 1845,  172,  175,  444,  444,  444,  444,  179, 1876,
+      179,  175,  172, 1788,  179,  179, 1788,  175,  179, 1191,
+
+     1788,  175, 1876,  134, 1191,  444,  179,  184, 1950,  184,
+     1202,  172,  179,  184,  184, 1202, 2852,  184, 1211,  134,
+      175,  134, 2852, 1211, 1950,  184,  134,  139,  139,  139,
+      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
+      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
+      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
+      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
+      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
+      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
+      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
+
+      139,  139,  139,  139,  139,  139,  141,  141,  141,  141,
+      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
+      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
+      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
+      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
+      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
+      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
+      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
+      141,  141,  141,  141,  141,  143,  143,  143,  143,  143,
+      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
+
+      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
+      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
+      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
+      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
+      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
+      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
+      143,  143,  143,  143,  145,  145,  145, 1223,  145, 1877,
+      145,  145, 1223,  176,  145,  176, 1233,  145, 1877,  176,
+      176, 1233,  145,  176,  337,  337,  337,  337,  145, 2124,
+     2124,  176,  145,  450,  450,  450,  450,  176, 1242, 1246,
+
+      337,  176, 1771, 1242, 1246,  337,  337,  337, 1771, 2853,
+      450,  145,  146,  146,  146,  146,  146, 1771,  146,  146,
+      176,  180,  146,  180, 1259,  146, 2853,  180,  180, 1259,
+      146,  180,  415,  415,  415,  415,  146, 2350, 2350,  180,
+      146,  451,  451,  451,  451,  180, 1270,  782,  782,  782,
+      782, 1270, 1282,  415,  782,  415, 2946, 1282,  451,  146,
+      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
+      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
+      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
+      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
+
+      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
+      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
+      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
+      155,  155,  155,  155,  155,  155,  155,  155,  155,  161,
+      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
+      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
+      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
+      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
+      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
+      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
+
+      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
+      161,  161,  161,  161,  161,  161,  161,  161,  165,  165,
+      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
+      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
+      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
+      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
+      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
+      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
+      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
+      165,  165,  165,  165,  165,  165,  165,  173,  173,  173,
+
+     1289,  173, 1884,  173,  173, 1289,  187,  173,  187, 2855,
+      173, 1884,  187,  187,  173,  173,  187, 1819, 1298, 1819,
+      188,  173,  188, 1298,  187,  173,  188,  188, 2855, 1819,
+      188, 1320,  445,  445,  445,  445, 1320, 1916,  188, 2296,
+      453,  453,  453,  453,  173,  174,  174,  174,  174,  174,
+     1916,  174,  174,  445,  201,  174,  201,  453,  174, 2947,
+      201,  201,  174,  174,  201, 2296,  201, 1909,  202,  174,
+      202, 1331,  201,  174,  202,  202, 1331, 1909,  202, 1913,
+      202,  788,  788,  788,  788, 1339,  202, 1833,  788, 1913,
+     1339, 1833,  174,  177,  177,  177,  177,  177,  177,  177,
+
+      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
+      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
+      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
+      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
+      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
+      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
+      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
+      177,  177,  181,  181,  181,  181,  181,  181,  181,  181,
+      181,  181,  181,  181,  181,  181,  181, 1349,  181, 1359,
+      181,  181, 1349, 1815, 1359,  181,  181,  181,  181,  181,
+
+      181,  181, 1815, 2948,  448,  448,  448,  448,  207, 1815,
+      207, 1001, 1001, 1923,  207,  207, 1001, 1923,  207,  181,
+      181,  181,  195,  207,  195,  448,  207,  448,  195,  195,
+     2949,  207,  195,  195,  195,  367,  367,  367,  367, 1924,
+      195, 1001,  367, 1924,  731,  731,  731,  731,  181,  181,
+      181,  182,  182,  182,  182,  182,  182,  182,  182,  182,
+      182,  182,  182,  182,  182,  182, 1373,  182,  195,  182,
+      182, 1373, 2059, 2950,  182,  182,  182,  182,  182,  182,
+      182,  466,  466,  466,  466, 1777, 1386,  208, 2059,  208,
+      731, 1386,  367,  208,  208,  466, 1777,  208,  182,  182,
+
+      182,  196,  208,  196, 2117,  208, 1777,  196,  196,  367,
+      208,  196,  196,  196, 1896,  368,  368,  368,  368,  196,
+     2117, 1896,  368,  956,  956,  956,  956,  182,  182,  182,
+      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
+      185,  185,  185,  185,  185, 1404,  185,  196,  185,  185,
+     1404, 2413, 2413,  185,  185,  185,  185,  185,  185,  185,
+     2951,  986,  211, 1811,  211,  986,  986, 1848,  211,  211,
+      986, 1959,  211,  421,  421,  421,  421,  185,  185,  185,
+      211,  212, 1400,  212, 1959, 1400, 1811,  212,  212,  368,
+     1848,  212, 1400, 1466,  421,  986,  421, 1939, 1466,  212,
+
+      949,  949,  949,  949, 1939, 2952,  185,  185,  185,  186,
+      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
+      186,  186,  186,  186, 1472,  186,  421,  186,  186, 1472,
+      421, 2953,  186,  186,  186,  186,  186,  186,  186, 1846,
+     1000,  213, 1846,  213, 1000, 1000,  949,  213,  213, 1000,
+     2068,  213,  425,  425,  425,  425,  186,  186,  186,  213,
+      214, 1402,  214, 2068, 1402,  939,  214,  214,  939, 1477,
+      214, 1402, 1477,  425, 1000,  425, 2091,  939,  214, 1474,
+      939,  939,  939, 2091, 1474,  186,  186,  186,  189,  189,
+      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
+
+      189,  189,  189, 1655,  189, 1834,  189,  189, 1655,  425,
+     1834,  189,  189,  189,  189,  189,  189,  189, 1004, 1004,
+      215, 1477,  215, 1004, 2954, 1440,  215,  215, 1440, 1440,
+      215,  429,  429,  429,  429,  189,  189,  189,  215,  216,
+     1883,  216, 1440, 1883, 1244,  216,  216, 1244, 1004,  216,
+     1698, 2751,  429, 1698,  429, 1883, 1244,  216, 1006, 1006,
+     2751, 1244, 1698, 1006,  189,  189,  189,  190,  190,  190,
+      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
+      190,  190, 1925,  190,  429,  190,  190, 1925, 1006, 1494,
+      190,  190,  190,  190,  190,  190,  190, 1494, 1968,  217,
+
+     1772,  217, 1494, 1968, 1582,  217,  217, 1582, 1582,  217,
+      463,  463,  463,  463,  190,  190,  190,  217,  218, 1772,
+      218, 1582, 1772, 1646,  218,  218, 1646,  463,  218, 1646,
+      823,  823,  823,  823, 2987, 2149,  218,  823, 1054, 1054,
+     1054, 1054, 2149,  190,  190,  190,  191,  191,  191,  191,
+      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
+      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
+      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
+      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
+      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
+
+      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
+      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
+      191,  191,  191,  191,  191,  193,  193,  193,  193,  193,
+      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
+      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
+      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
+      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
+      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
+      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
+      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
+
+      193,  193,  193,  193,  197,  197,  197,  197,  197,  197,
+      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
+      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
+      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
+      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
+      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
+      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
+      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
+      197,  197,  197,  199,  199,  199,  199,  199,  846,  199,
+      199,  846, 1966,  199,  199,  199, 1966, 3003,  199, 1776,
+
+      846,  199,  200,  200,  200,  200,  200, 1701,  200,  200,
+     1701,  846,  200,  200,  200,  846, 2835,  200, 1890, 1701,
+      200,  203,  203,  203,  203,  203, 1763,  203,  203, 1905,
+     2835,  203,  203,  203,  846, 1763,  203, 1776, 1776,  203,
+      204,  204,  204,  204,  204, 1763,  204,  204, 3004, 1776,
+      204,  204,  204, 1776, 1905,  204, 1890, 1890,  204,  205,
+      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
+      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
+      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
+      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
+
+      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
+      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
+      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
+      205,  205,  205,  205,  205,  205,  205,  205,  209,  209,
+      209, 2126,  209, 2238,  209,  209,  796,  796,  209,  796,
+     1937,  210,  210,  210, 2126,  210,  209,  210,  210,  801,
+      801,  210,  796,  796,  801, 2238,  209,  796,  801,  210,
+      221,  221,  221, 1937,  221, 1783,  221,  221, 1783,  210,
+      221,  467,  467,  467,  467,  209, 1952, 1656,  221,  801,
+     1656, 2956,  796, 1656, 1783,  467, 1952, 2956,  210,  219,
+
+      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
+      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
+      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
+      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
+      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
+      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
+      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
+      219,  219,  219,  219,  219,  219,  219,  219,  222,  222,
+      222, 2226,  222, 1967,  222,  222, 1652, 1967,  222, 1652,
+     1652,  223,  223,  223, 2226,  223,  222,  223,  223,  988,
+
+      988,  223,  988, 1652,  224,  224,  224, 2077,  224,  223,
+      224,  224, 2077, 1775,  224,  988,  988,  225,  225,  225,
+      988,  225,  224,  225,  225, 3005, 1775,  225, 1775, 1963,
+      226,  226,  226, 1963,  226,  225,  226,  226, 1775, 2196,
+      226, 1205, 1205, 1205, 1205,  988, 2196, 1963,  226,  227,
+      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
+      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
+      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
+      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
+      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
+
+      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
+      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
+      227,  227,  227,  227,  227,  227,  227,  227,  229, 1773,
+      229, 2053, 1773, 1854,  229,  229, 1854,  230,  229,  230,
+     1854,  229, 1773,  230,  230, 1773,  229,  230, 2963, 1737,
+      230,  231, 1737,  231, 2963,  230, 2053,  231,  231,  802,
+      232,  231,  232,  802,  802, 2217,  232,  232,  802,  231,
+      232, 1797,  802,  233, 1797,  233, 1737, 1797,  232,  233,
+      233, 2217,  234,  233,  234,  803,  803, 2757,  234,  234,
+      803,  233,  234,  802,  803, 1737, 1778,  233, 2757,  233,
+
+      234, 1886, 1778,  235, 1778,  235,  234, 1886,  234,  235,
+      235, 1778,  236,  235,  236,  803, 1886,  824,  236,  236,
+      824,  235,  236, 1668, 1005,  237, 1668,  237, 1005, 1005,
+      236,  237,  237, 1005, 1818,  237,  237,  237, 1818, 1914,
+     1668,  824,  238,  237,  238, 1914, 1914, 1818,  238,  238,
+      235, 2135,  238,  238,  238,  239, 2135,  239, 1005,  236,
+      238,  239,  239, 2075,  240,  239,  240, 2075,  824, 1762,
+      240,  240, 1762,  239,  240,  540,  540,  540,  540,  239,
+     3006,  239,  240, 1762, 1762,  241,  824,  241,  240, 2076,
+      240,  241,  241, 2076, 1847,  241,  540, 1847,  241,  419,
+
+      419,  419,  419,  241, 1817,  242,  242,  242, 2501,  242,
+     1847,  242,  242,  241, 1817,  242, 2501, 1817,  242,  243,
+      419,  243,  419,  242,  970,  243,  243,  970,  244,  243,
+      244, 1856,  241,  242,  244,  244,  970,  243,  244, 1830,
+      541,  541,  541,  541, 2055, 1856,  244,  243, 1830,  419,
+     1856,  970,  242,  245,  245,  245,  244,  245, 1830,  245,
+      245,  541, 2235,  245,  245,  245,  243, 2235, 3007, 2055,
+      970,  245,  246,  246,  246,  244,  246, 1887,  246,  246,
+     1887, 2056,  246,  246,  246,  247,  247,  247,  247,  247,
+      246,  247,  247, 1887, 2275,  247,  247,  247,  248,  248,
+
+      248,  248,  248,  247,  248,  248, 2056, 2275,  248,  248,
+      248, 2094,  568,  568,  568,  568,  248,  249,  249,  249,
+      249,  249, 1893,  249,  249, 1893, 2094,  249,  249,  568,
+     1192,  402,  402,  402,  402,  249, 1798, 1798,  402, 1798,
+     2089,  249, 1820,  249,  250,  250,  250,  250,  250, 1192,
+      250,  250,  402, 1192,  250,  250, 2851, 1192,  544,  544,
+      544,  544,  250, 2089,  416,  416,  416,  416,  250, 1192,
+      250,  251,  251,  251,  251,  251, 2851,  251,  251,  544,
+     1820,  251,  251,  251,  253,  416,  253,  416, 2061,  251,
+      253,  253, 1820, 2822,  253,  251, 1820,  251, 2061,  254,
+
+      253,  254,  253, 1774, 2822,  254,  254,  402, 2065,  254,
+     1774, 1799,  416, 1792, 1799,  254, 1792,  254, 2065, 1774,
+      255,  255,  255, 1799,  255, 1792,  255,  255, 1792, 1792,
+      255, 2147, 2994,  255, 1206, 1206, 1206, 1206,  255,  251,
+      252,  252,  252,  252,  252, 1891,  252,  252,  255, 2994,
+      252,  252,  252, 1891, 2147,  256,  256,  256,  252,  256,
+     1891,  256,  256, 1843,  252,  256,  252,  255,  256,  418,
+      418,  418,  418,  256, 1843,  257,  257,  257, 1822,  257,
+     1822,  257,  257,  256, 1843,  257, 1822, 1822,  257, 2152,
+      418, 1838,  418,  257, 1216, 1216, 1216, 1216,  546,  546,
+
+      546,  546,  256,  257, 2152,  258,  258,  258,  252,  258,
+     1838,  258,  258, 1838,  267,  258,  267,  418,  258,  546,
+      267,  267,  257,  258,  267,  267,  267, 2119,  268, 1888,
+      268, 3008,  267,  258,  268,  268, 1888, 2119,  268,  268,
+      268, 1022, 1022, 1022, 1022, 1888,  268, 1908, 1022, 2899,
+     1908, 2899,  258,  259,  259,  259,  259,  259,  259,  259,
+      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
+      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
+      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
+      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
+
+      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
+      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
+      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
+      259,  259,  261,  261,  261,  261,  261, 1855,  261,  261,
+     1855, 2290,  261,  261, 1855, 1910,  263,  261,  263, 1910,
+      261,  804,  263,  263, 1786,  261,  263, 2290, 1910,  263,
+      261, 1786,  804,  804,  263, 2291,  264,  804,  264, 1827,
+     1786,  804,  264,  264, 1795, 1935,  264, 1795, 1935,  264,
+     1786,  265, 1827,  265,  264, 1827, 2291,  265,  265, 1795,
+     1795,  265,  804,  263,  265,  547,  547,  547,  547,  265,
+
+     2103,  423,  423,  423,  423, 1871, 3010,  261,  262,  262,
+      262,  262,  262,  264,  262,  262,  547, 1841,  262,  262,
+     1871, 2247,  423,  262,  423, 2103,  262,  266,  265,  266,
+     1841,  262, 1841,  266,  266, 1601,  262,  266, 1601, 1871,
+      266,  269, 1841,  269, 2247,  266, 2039,  269,  269, 2039,
+      270,  269,  270, 1601, 1601, 1601,  270,  270, 1866,  269,
+      270, 1866,  423,  271, 1866,  271, 2289, 2133,  270,  271,
+      271, 2133, 1868,  271,  266, 1868,  538,  538,  538,  538,
+      272,  271,  272,  262, 1868,  271,  272,  272, 2289,  285,
+      272,  285,  538, 1889, 3017,  285,  285,  538,  272,  285,
+
+     2252, 2123,  272,  286, 1872,  286, 1889,  285, 1889,  286,
+      286, 2123, 1275,  286, 1275, 2252,  269,  269, 1275, 1872,
+     1872,  286, 1275, 1275, 1275,  270,  270,  273,  273,  273,
+      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
+      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
+      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
+      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
+      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
+      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
+      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
+
+      273,  273,  273,  273,  273,  273,  275,  275,  275,  275,
+      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
+      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
+      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
+      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
+      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
+      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
+      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
+      275,  275,  275,  275,  275,  277,  277,  277,  277,  277,
+      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
+
+      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
+      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
+      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
+      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
+      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
+      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
+      277,  277,  277,  277,  279,  279,  279,  279,  279,  279,
+      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
+      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
+      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
+
+      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
+      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
+      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
+      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
+      279,  279,  279,  281,  281,  281,  281,  281,  281,  281,
+      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
+      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
+      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
+      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
+      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
+
+      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
+      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
+      281,  281,  283, 2288,  283, 2841, 1785, 1840,  283,  283,
+     1840, 2112,  283, 1785, 1840,  284, 1785,  284, 2288, 2841,
+      283,  284,  284, 1840,  289,  284,  289, 1785, 1785, 2116,
+      289,  289, 1933,  284,  289, 1704, 2112, 1704,  290, 1852,
+      290, 1704,  289, 1933,  290,  290, 1852,  289,  290,  550,
+      550,  550,  550, 1933, 2116, 1852,  290,  293,  283,  293,
+     1945,  290, 3020,  293,  293, 1852,  294,  293,  294,  283,
+      550,  284,  294,  294, 1945,  293,  294,  283,  283, 1945,
+
+     2767, 1704,  284, 1704,  294, 1217, 1217, 1217, 1217, 2767,
+      284,  284,  287,  287,  287,  287,  287,  287,  287,  287,
+      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
+      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
+      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
+      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
+      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
+      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
+      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
+      287,  291,  291,  291,  291,  291,  291,  291,  291,  291,
+
+      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
+      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
+      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
+      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
+      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
+      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
+      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
+      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
+      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
+      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
+
+      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
+      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
+      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
+      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
+      295,  295,  295,  295,  295,  295,  295,  295,  295,  297,
+     1839,  297, 2199, 1839, 2087,  297,  297, 2087,  298,  297,
+      298,  297, 2199, 1839,  298,  298, 1839,  297,  298, 2972,
+      298, 1438, 1438, 1438, 1438, 2972,  298,  299,  299,  299,
+      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
+      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
+
+      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
+      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
+      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
+      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
+      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
+      299,  299,  299,  299,  299,  299,  301, 1849,  301, 2219,
+     1849, 2446,  301,  301, 1837,  302,  301,  302,  301, 2219,
+     1837,  302,  302, 1849,  301,  302, 1849,  302,  303, 1837,
+      303, 2223, 2446,  302,  303,  303, 1837,  304,  303,  304,
+     1918, 2223, 1245,  304,  304, 1245,  303,  304, 1311, 1311,
+
+     1311, 1311,  303, 1918, 1245,  304, 1918, 1245, 1245, 1245,
+     1311,  304,  305,  305,  305,  305,  305,  305,  305,  305,
+      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
+      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
+      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
+      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
+      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
+      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
+      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
+      305,  307,  307,  307,  307,  307,  307,  307,  307,  307,
+
+      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
+      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
+      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
+      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
+      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
+      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
+      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
+      309, 1911,  309, 1911, 2600, 2118,  309,  309, 2118,  310,
+      309,  310,  309, 1911, 1648,  310,  310, 1648,  309,  310,
+     2600,  310,  422,  422,  422,  422, 3021,  310,  420,  420,
+
+      420,  420, 1648, 1648, 1648,  635,  635,  635,  635, 1867,
+     1867,  309, 1867,  422,  309,  422, 2063,  635, 2063,  420,
+      310,  420,  635,  310,  398,  398,  398,  398, 2063, 2524,
+      398,  424,  424,  424,  424,  426,  426,  426,  426, 2840,
+     1928, 2524, 1175,  422, 1175,  398,  427,  427,  427,  427,
+     2840,  398,  424,  422,  424, 1175,  426,  420,  426, 1928,
+      420, 3022, 1928,  422, 1714, 1714, 1714,  427, 1714,  427,
+     1175, 1943,  398,  398, 1943,  398,  398,  398, 1943,  424,
+     2079,  398,  398,  398,  398,  398, 2079,  398,  426, 1175,
+      398,  398,  398,  398, 2279,  427, 3023,  426,  428,  428,
+
+      428,  428, 2079,  426,  430,  430,  430,  430, 2086,  431,
+      431,  431,  431,  432,  432,  432,  432, 2279, 1154,  428,
+     1154,  428, 2086, 2086, 1154,  430, 1873,  430, 1154, 3024,
+      431, 2134,  431, 1873,  432, 2134,  432,  433,  433,  433,
+      433, 1873, 1873,  446,  446,  446,  446, 2454, 2454, 2064,
+      446,  492,  492,  492,  492, 1719, 1719, 1719,  433, 1719,
+      433,  430,  431,  428,  446, 1154,  428, 2466, 2466, 2773,
+      522,  430,  522,  522,  432,  492,  522,  522, 2773,  432,
+      522,  431,  493,  493,  493,  493,  433, 2064,  522,  539,
+      539,  539,  539, 1829,  433, 1921, 3025, 1829,  522,  433,
+
+     1829, 2210,  492, 2064, 1921,  539,  493,  558, 2249,  558,
+      539, 1829, 1829,  558, 1921, 2249,  492,  558,  492,  446,
+      492,  542,  542,  542,  542,  558, 2210, 2286,  542,  548,
+      548,  548,  548,  493, 2286,  558,  548, 1895,  539,  623,
+      623,  623,  542,  623, 1895,  522,  522,  493, 3026,  493,
+      548,  493,  623, 1895,  558, 2137,  696,  623,  696, 1929,
+      696, 2137, 1929,  623,  739,  739,  739,  739, 1901,  696,
+     2216, 1901, 1929,  696,  696, 2145,  739, 2137, 2145,  739,
+      739,  739,  558,  558, 3027, 1901,  623,  760,  760,  760,
+      760, 1056, 1056, 1056, 1056, 2216, 2233,  542, 1056, 1056,
+
+     2233, 2282, 3029, 1056,  760,  548,  718,  718,  718,  718,
+      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
+      718,  718,  718,  718, 2282,  718, 3030,  718,  718,  718,
+      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
+      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
+      718,  718,  718,  718,  718,  719,  719,  719,  719,  719,
+      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
+      719,  719,  719, 2921,  719, 2921,  719,  719,  719,  719,
+      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
+      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
+
+      719,  719,  719,  719,  733,  736,  736,  736,  736,  754,
+     2441, 3031,  754,  761,  761,  761,  761,  736, 2237, 1844,
+     1964,  754,  736, 2441, 2237, 1844,  754, 1844,  736, 1964,
+      761,  733,  736, 1844, 1844, 3033,  754,  733,  733, 1964,
+     2237,  733,  733,  775,  775,  775,  775, 1047, 1047, 1047,
+     1047,  736,  733, 2473, 2473,  754, 1448, 1448, 1448, 1448,
+     2270, 1047,  733,  733,  775, 2270, 1448,  733,  733,  734,
+      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
+      734,  734,  734,  734,  734,  734,  734, 2940,  734, 2940,
+      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
+
+      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
+      734,  734,  734,  734,  734,  734,  734,  734,  735,  735,
+      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
+      735,  735,  735,  735,  735,  735, 3034,  735, 3036,  735,
+      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
+      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
+      735,  735,  735,  735,  735,  735,  735,  752, 1934,  752,
+      752,  752,  752, 3037, 1936,  752, 1934, 1936,  752,  752,
+      752,  752, 1934, 1934,  752,  752,  752,  752,  752,  753,
+     1936,  753,  753,  753,  753, 1978, 1978,  753, 1978, 2439,
+
+      753,  753,  753,  753, 2439, 2854,  753,  753,  753,  753,
+      753,  767, 1048, 1048, 1048, 1048, 2854, 2144,  776,  776,
+      776,  776, 1506, 1506, 1506, 1506, 1048,  783,  783,  783,
+      783, 2144, 2144,  767,  767,  767,  767,  767,  767,  776,
+      767,  767, 3039,  767,  767,  767,  767,  767,  783,  767,
+      767,  767,  767,  767,  767,  767, 1961, 2000,  767,  767,
+      768, 2000, 2732,  768,  768,  768,  768,  768,  768, 1961,
+      768,  768, 1961,  768,  768,  768,  768,  768, 3040,  768,
+      768,  768,  768,  768,  768,  768, 2000, 2732,  768,  768,
+      774,  774,  774,  774,  774,  774, 2189,  774,  774, 2189,
+
+      774, 1953,  774,  774,  774, 1953,  774,  774,  774,  774,
+      774,  774,  774, 2293, 1953,  774,  777,  777,  777,  777,
+     2293, 2620, 2620,  777,  780,  780,  780,  780,  784,  784,
+      784,  784,  785,  785,  785,  785, 2084,  777, 2535,  785,
+      787,  787,  787,  787, 2122,  780, 2535,  780, 2763,  784,
+      787,  805,  805,  785,  805, 2597,  817,  817,  817,  817,
+     2597,  787,  818,  818,  818,  818, 1920,  805,  805, 2763,
+     1920, 2967,  805, 1920, 2084, 2084,  805,  817,  819,  819,
+      819,  819, 2122,  818, 1920,  819,  822,  822,  822,  822,
+     2084, 2967,  777,  856,  856,  856,  856,  805, 2122,  819,
+
+      954,  954,  954,  954, 1894,  856, 1796,  822,  785, 1796,
+      856, 1894,  954, 2993, 1894, 2073,  856,  954, 1796, 2993,
+      856, 1796, 1796,  954, 2073, 1994, 1894,  954, 1994, 1009,
+     1009, 1009, 1009, 2797, 2073, 1994, 1009, 2003, 2003,  856,
+     2003, 1504, 1504, 1504, 1504, 2797,  954, 1009, 1009, 1009,
+     1009, 1504, 2828, 1504,  819,  854,  854,  854,  854,  854,
+      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
+      854,  854,  854, 2828,  854, 3041,  854,  854,  854,  854,
+      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
+      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
+
+      854,  854,  854,  855, 1060, 1060, 1060, 1060, 2624, 2624,
+     1013, 1013, 1013, 1013, 2823, 1014, 1014, 1014, 1014, 1999,
+     1999, 1060,  855, 2823, 1999,  855,  855,  855,  855,  855,
+      855, 1013,  855,  855, 3042,  855, 1014,  855,  855,  855,
+     2198,  855,  855,  855,  855,  855,  855,  855, 2198, 1999,
+      855,  859,  859,  859,  859, 2198, 2195, 1930,  974, 2195,
+     1930,  974, 1851,  859, 1930, 1851,  859,  859,  859, 1851,
+      974, 3011, 1851, 1930,  859,  974, 2097, 3011,  859, 1062,
+     1062, 1062, 1062, 1851, 1851,  974, 1017, 1017, 1017, 1017,
+     2097, 2015, 2015, 1017, 2015, 2097, 1062,  859,  862,  862,
+
+      862,  862,  862,  862,  974,  862,  862, 1017,  862, 2062,
+      862,  862,  862, 2062,  862,  862,  862,  862,  862,  862,
+      862, 3044, 2062,  862,  863,  863,  863,  863,  863,  863,
+     2035,  863,  863, 2035,  863, 2234,  863,  863,  863, 2234,
+      863,  863,  863,  863,  863,  863,  863, 2576, 2035,  863,
+      936,  957,  957,  957,  957, 2576, 2973, 1021, 1021, 1021,
+     1021, 1809, 1017,  957, 1809, 1941,  957,  957,  957,  936,
+     2973, 2755, 1941,  936,  936,  936,  936,  936, 1021,  936,
+      936, 1941, 1002, 1002,  936, 1002, 1809, 2755, 2497,  936,
+      936, 1941, 2497, 1944,  936,  937, 1944,  957, 1002, 1002,
+
+     1944, 1809, 1931, 1002, 1057, 1057, 1057, 1057, 2001, 2001,
+     2536, 1057, 1057, 2001,  937, 1931, 1057, 1931,  937,  937,
+      937,  937,  937, 2536,  937,  937, 1809, 1931, 1002,  937,
+     1308, 1308, 1308, 1308,  937,  937, 3045, 1308, 2001,  937,
+      952,  952,  952,  952,  952,  952, 2038,  952,  952, 2038,
+      952, 2499,  952,  952,  952, 2499,  952,  952,  952,  952,
+      952,  952,  952, 3046, 2038,  952,  953,  953,  953,  953,
+      953,  953, 2868,  953,  953, 1912,  953, 2010,  953,  953,
+      953, 2010,  953,  953,  953,  953,  953,  953,  953, 2577,
+     2138,  953,  968, 1184, 1184, 1184, 1184, 2868, 1043, 1043,
+
+     1043, 1043, 2577, 3047, 2095, 1184, 2010, 2095, 1043, 2138,
+     1184, 2095, 2138, 1912,  968,  968,  968,  968,  968,  968,
+     1043,  968,  968, 2155,  968, 1912,  968,  968,  968, 1912,
+      968,  968,  968,  968,  968,  968,  968, 2155, 2088,  968,
+      969, 2088, 2155,  969,  969,  969,  969,  969,  969, 2245,
+      969,  969, 2245,  969, 2088,  969,  969,  969, 2292,  969,
+      969,  969,  969,  969,  969,  969, 2292, 1995,  969,  972,
+     1995, 1938, 1043, 2292, 1938, 1024, 1024, 1024, 1024, 1995,
+     3048, 2578, 1068, 1068, 1068, 1024, 1068, 1938,  972, 2578,
+     1938,  972,  972,  972,  972,  972,  972, 1024,  972,  972,
+
+     1068,  972, 3049, 1800, 3050,  972, 1800,  972,  972,  972,
+     1068,  972,  972,  972,  973, 1058, 1058, 1058, 1058, 2070,
+     1024, 2081, 1058, 1058, 2081, 2379, 1800, 1058, 2379, 1068,
+     1800, 1842, 2070,  973, 2081, 2070,  973,  973,  973,  973,
+      973,  973, 2165,  973,  973, 2165,  973, 2165, 2082, 1800,
+      973, 2082,  973,  973,  973, 2082,  973,  973,  973, 1059,
+     1059, 1059, 1059, 2579, 2082, 2083, 1059, 1059, 3051, 1842,
+     1842, 1059, 1152, 1152, 1152, 1152, 2579, 1162, 2083, 1162,
+     2083, 1842, 1152, 1162, 2121, 1842, 2121, 1162, 1162, 1162,
+     2083, 2005, 3052, 1152, 2005, 1162, 2121, 1152, 1204, 1204,
+
+     1204, 1204, 1204, 2005, 1204, 1204, 2933, 2933, 1204, 1204,
+     1204, 1210, 1210, 1210, 1210, 2085, 1204, 1252, 1252, 1252,
+     1252, 1253, 1253, 1253, 1253, 2221, 2085, 2221, 1210, 1258,
+     1258, 1258, 1258, 2194, 1252, 2898, 2085, 2221, 1253, 1260,
+     1260, 1260, 1260, 1284, 2898, 1284, 1258, 2021, 2021, 1284,
+     2021, 2017, 2194, 1284, 2017, 2194, 1260, 1309, 1309, 1309,
+     1309, 1284, 2590, 2017, 1309, 1310, 1310, 1310, 1310, 3053,
+     2590, 3054, 1310, 1313, 1313, 1313, 1313, 1343, 1343, 1343,
+     1343, 1348, 1348, 1348, 1348, 1350, 1350, 1350, 1350, 1313,
+     1378, 1378, 1378, 1378, 1343, 2629, 2111, 2111, 1348, 2111,
+
+     2629, 2143, 1350, 1403, 1403, 1403, 1403, 1409, 1409, 1409,
+     1409, 1378, 2143, 1410, 1410, 1410, 1410, 2120, 1284, 1284,
+     1403, 2120, 2143, 1409, 1411, 1411, 1411, 1411, 1409, 1410,
+     2120, 1411, 2839, 2142, 1410, 1414, 1414, 1414, 1414, 3055,
+     1411, 1416, 1416, 1416, 1416, 1417, 1417, 1417, 1417, 2002,
+     2002, 2299, 1417, 2839, 2002, 2299, 1414, 1416, 1418, 1418,
+     1418, 1418, 1416, 1416, 1416, 1418, 1419, 1419, 1419, 1419,
+     3056, 2142, 2142, 1419, 1418, 1420, 1420, 1420, 1420, 2002,
+     2299, 1409, 1419, 1421, 1421, 1421, 1421, 2142, 2575, 2843,
+     1421, 1420, 1422, 1422, 1422, 1422, 2843, 2575, 2575, 1422,
+
+     1411, 1423, 1423, 1423, 1423, 1424, 1424, 1424, 1424, 1428,
+     1428, 1428, 1428, 1422, 2243, 2750, 1428, 1423, 2222, 2750,
+     3068, 1424, 1423, 1423, 1423, 2243, 1424, 1424, 1424, 1429,
+     1429, 1429, 1429, 2723, 1418, 2243, 1429, 1430, 1430, 1430,
+     1430, 2723, 1419, 1431, 1431, 1431, 1431, 2747, 1432, 1432,
+     1432, 1432, 1434, 1434, 1434, 1434, 2222, 2747, 2019, 1430,
+     1430, 2019, 2382, 1899, 1431, 2382, 1899, 2314, 1422, 1432,
+     2019, 2314, 2222, 1434, 1436, 1436, 1436, 1436, 1437, 1437,
+     1437, 1437, 2701, 3094, 1436, 1437, 1441, 1441, 1441, 1441,
+     1899, 2701, 2701, 1441, 1791, 1436, 2314, 1791, 1443, 1443,
+
+     1443, 1443, 1445, 1445, 1445, 1445, 1791, 1441, 1443, 1899,
+     2781, 1791, 1445, 1446, 1446, 1446, 1446, 1431, 2781, 1443,
+     1446, 1791, 2224, 1445, 1447, 1447, 1447, 1447, 2224, 2224,
+     3009, 1447, 1451, 1451, 1451, 1451, 1453, 1453, 1453, 1453,
+     1791, 2131, 3009, 1453, 1454, 1454, 1454, 1454, 2959, 2385,
+     2131, 1454, 2385, 1451, 1455, 1455, 1455, 1455, 2255, 2959,
+     2131, 1455, 1441, 1456, 1456, 1456, 1456, 1457, 1457, 1457,
+     1457, 2787, 2255, 1459, 1459, 1459, 1459, 2255, 2096, 1456,
+     1459, 2096, 2220, 1457, 1456, 2096, 2220, 2787, 1457, 1460,
+     1460, 1460, 1460, 1453, 3095, 2220, 1460, 1571, 1571, 1571,
+
+     1571, 1454, 1461, 1461, 1461, 1461, 1572, 1572, 1572, 1572,
+     1453, 1571, 2724, 1463, 1463, 1463, 1463, 2858, 1454, 1471,
+     1471, 1471, 1471, 1461, 2858, 2724, 2821, 1457, 1455, 1463,
+     1459, 2821, 1495, 2128, 1463, 1495, 1471, 1473, 1473, 1473,
+     1473, 1476, 1476, 1476, 1476, 2244, 2128, 1459, 1932, 2128,
+     1495, 1495, 1495, 2244, 1473, 1475, 1475, 1475, 1475, 2244,
+     2244, 1475, 1476, 3096, 1497, 1497, 1497, 1497, 1499, 1499,
+     1499, 1499, 1500, 1500, 1500, 1500, 1475, 2170, 2170, 1500,
+     2170, 2982, 1475, 2093, 1495, 1497, 1932, 1932, 2982, 1499,
+     2093, 1499, 2231, 1502, 1502, 1502, 1502, 2832, 1932, 2093,
+
+     1502, 2231, 1932, 1475, 1475, 1502, 1475, 1475, 1475, 2093,
+     2832, 2231, 1475, 1475, 1475, 1475, 1475, 2139, 1475, 2856,
+     2139, 1475, 1475, 1475, 1475, 1505, 1505, 1505, 1505, 1507,
+     2139, 1508, 1507, 1507, 1508, 1508, 1505, 1505, 2856, 2913,
+     3097, 1507, 1509, 1509, 1509, 1509, 1505, 2913, 1508, 1509,
+     1514, 1514, 1514, 1514, 2146, 2836, 1507, 2146, 1508, 1515,
+     1515, 1515, 1515, 1509, 1517, 1517, 1517, 1517, 2836, 2153,
+     2146, 1514, 2153, 1514, 2847, 1507, 2153, 1508, 2110, 2847,
+     1515, 2110, 1515, 2269, 2110, 1517, 2269, 1517, 1518, 1518,
+     1518, 1518, 1519, 1519, 1519, 1519, 1520, 1520, 1520, 1520,
+
+     2269, 1517, 1517, 1521, 1521, 1521, 1521, 2154, 3098, 1518,
+     2154, 1518, 2846, 1519, 2154, 1519, 3099, 1520, 1509, 1520,
+     1522, 1522, 1522, 1522, 1521, 2846, 1521, 1523, 1523, 1523,
+     1523, 2228, 1524, 1524, 1524, 1524, 1525, 1525, 1525, 1525,
+     2505, 1522, 2505, 1522, 2228, 1520, 2505, 2228, 1523, 2140,
+     1523, 1518, 2140, 1524, 1521, 1524, 2140, 1525, 1519, 1525,
+     1526, 1526, 1526, 1526, 2845, 2140, 1527, 1527, 1527, 1527,
+     1555, 1555, 1555, 1555, 1522, 2749, 1528, 1528, 1528, 1528,
+     2845, 1526, 2173, 1526, 2173, 2749, 2274, 1527, 1524, 1527,
+     2848, 1555, 1727, 1523, 1727, 2173, 1727, 1528, 3101, 1528,
+
+     1546, 1546, 1546, 1546, 1525, 1727, 2848, 1546, 2850, 1727,
+     1727, 1526, 2850, 1529, 1529, 1529, 1529, 1527, 1530, 1530,
+     1530, 1530, 2141, 1526, 2274, 1527, 2589, 1526, 1528, 1531,
+     1531, 1531, 1531, 1527, 1529, 2141, 1529, 2141, 2589, 1530,
+     2274, 1530, 2589, 1532, 1532, 1532, 1532, 2141, 2179, 2179,
+     1531, 2179, 1531, 1533, 1533, 1533, 1533, 1534, 1534, 1534,
+     1534, 2869, 1946, 1529, 1532, 1946, 1532, 1535, 1535, 1535,
+     1535, 3102, 2156, 2156, 1533, 2156, 1533, 2869, 1534, 1946,
+     1534, 1531, 2321, 2874, 2156, 1530, 2321, 2874, 1535, 1946,
+     1535, 1573, 1573, 1573, 1573, 1536, 1536, 1536, 1536, 1537,
+
+     1537, 1537, 1537, 1538, 1538, 1538, 1538, 3103, 1946, 2175,
+     1532, 2321, 2175, 1533, 1534, 2920, 1536, 1535, 1536, 1534,
+     1537, 2175, 1537, 2394, 1538, 2394, 1538, 1539, 1539, 1539,
+     1539, 2920, 1540, 1540, 1540, 1540, 2394, 1541, 1541, 1541,
+     1541, 1542, 1542, 1542, 1542, 3014, 2207, 2207, 1539, 2207,
+     1539, 3014, 1538, 1540, 1537, 1540, 2009, 2009, 1541, 1536,
+     1541, 2009, 1542, 2208, 1542, 2009, 2208, 2294, 1538, 1543,
+     1543, 1543, 1543, 3104, 2294, 2208, 1544, 1544, 1544, 1544,
+     1545, 1545, 1545, 1545, 2072, 3106, 2009, 1539, 2072, 2294,
+     1543, 2072, 1543, 2204, 1541, 1540, 2204, 1544, 1542, 1544,
+
+     2871, 1545, 2072, 1545, 1547, 1547, 1547, 1547, 2204, 2204,
+     2871, 1547, 1548, 1548, 1548, 1548, 3107, 1558, 1558, 1558,
+     1558, 2878, 1559, 1559, 1559, 1559, 2769, 2904, 1543, 1559,
+     1560, 1560, 1560, 1560, 2878, 1548, 2904, 1560, 1558, 1545,
+     1558, 1544, 1561, 1561, 1561, 1561, 1562, 1562, 1562, 1562,
+     3057, 1560, 1564, 1564, 1564, 1564, 3057, 1569, 2873, 1564,
+     1569, 1569, 2970, 1561, 2769, 1561, 2769, 1562, 2873, 1562,
+     1565, 1565, 1565, 1565, 1569, 2970, 2151, 1565, 1566, 1566,
+     1566, 1566, 1568, 2151, 1569, 1568, 1568, 1574, 1574, 1574,
+     1574, 2893, 2151, 3108, 1568, 1575, 1575, 1575, 1575, 2011,
+
+     2011, 1566, 2151, 1569, 2011, 3109, 1560, 2388, 2011, 1568,
+     2388, 1574, 2893, 1575, 1583, 1583, 1583, 1583, 1584, 1584,
+     1584, 1584, 1591, 1591, 1591, 1591, 2887, 2239, 1568, 2011,
+     2239, 2887, 1583, 1591, 1592, 1592, 1592, 1592, 1574, 1595,
+     2239, 1595, 1595, 3110, 1592, 1595, 1595, 2090, 2253, 1595,
+     2090, 2253, 1574, 3111, 1574, 2253, 1574, 1595, 1597, 1597,
+     1597, 1597, 2511, 2090, 1597, 2511, 2090, 1595, 1598, 1598,
+     1598, 1598, 1605, 1605, 1605, 1605, 1608, 1608, 1608, 1608,
+     1610, 1610, 1610, 1610, 1611, 1611, 1611, 1611, 1612, 1612,
+     1612, 1612, 2979, 2013, 2013, 1612, 1610, 2424, 2013, 2424,
+
+     1611, 1610, 2013, 2979, 3112, 1611, 1613, 1613, 1613, 1613,
+     1615, 1615, 1615, 1615, 1595, 1595, 1616, 1616, 1616, 1616,
+     2722, 2254, 1613, 2013, 2254, 2424, 1615, 1613, 2254, 2722,
+     2722, 1615, 1619, 1619, 1619, 1619, 3114, 1616, 1620, 1620,
+     1620, 1620, 2838, 1608, 2424, 1620, 3115, 1621, 1621, 1621,
+     1621, 2838, 2241, 1619, 1621, 1622, 1622, 1622, 1622, 1623,
+     1623, 1623, 1623, 2838, 3116, 2241, 1623, 2241, 1621, 2830,
+     1615, 1624, 1624, 1624, 1624, 2830, 1622, 2241, 1624, 1626,
+     1626, 1626, 1626, 1629, 1629, 1629, 1629, 1630, 1630, 1630,
+     1630, 2830, 2937, 2894, 1630, 1631, 1631, 1631, 1631, 2885,
+
+     1626, 2937, 1631, 2885, 1629, 1632, 1632, 1632, 1632, 3066,
+     1635, 1635, 1635, 1635, 2894, 3066, 1631, 1635, 1636, 1636,
+     1636, 1636, 1644, 1621, 1644, 1636, 1632, 2958, 1644, 1690,
+     1690, 1690, 1644, 1690, 1654, 1654, 1654, 1654, 2246, 3117,
+     1644, 2246, 1690, 1699, 1699, 1699, 1699, 1690, 2958, 2526,
+     1644, 1654, 2526, 1690, 2246, 1699, 1700, 1700, 1700, 1700,
+     1702, 1702, 1702, 1702, 1729, 1729, 1729, 1729, 3118, 1644,
+     3119, 1631, 1730, 1730, 1730, 1730, 1690, 1805, 1805, 1805,
+     1805, 1859, 1859, 1859, 1859, 1864, 1864, 1864, 1864, 1902,
+     1902, 1902, 1902, 1860, 1860, 1860, 1860, 1644, 1644, 1738,
+
+     1738, 1738, 1738, 1738, 1738, 1860, 1902, 1738, 1860, 1860,
+     1738, 1738, 1738, 1738, 3120, 1738, 1738, 1738, 1738, 1738,
+     1738, 1745, 1745, 1745, 1745, 1745, 2784, 1745, 1745, 3121,
+     1745, 1969, 1969, 1969, 1969, 2784, 2298, 2298, 1745, 2784,
+     1745, 2298, 1745, 1802, 1802, 1802, 1802, 1802, 1802, 2960,
+     1802, 1802, 1969, 1802, 1802, 1802, 1802, 1802, 2960, 1802,
+     1802, 1802, 1802, 1802, 1802, 1802, 2298, 2989, 1802, 1812,
+     1812, 1812, 1812, 1812, 2792, 1812, 1812, 2792, 1812, 1857,
+     1857, 1857, 1857, 2989, 2302, 2302, 1812, 2302, 1812, 3122,
+     1812, 1857, 1862, 1862, 1862, 1862, 1857, 1865, 1865, 1865,
+
+     1865, 2148, 1857, 2974, 2148, 2957, 1857, 1862, 1862, 1865,
+     2957, 1869, 1865, 1865, 1869, 1897, 2974, 2148, 1897, 1898,
+     2148, 2248, 1898, 1869, 2248, 1857, 1906, 1897, 1906, 1906,
+     1906, 1898, 1897, 1906, 1898, 1898, 1898, 2248, 1869, 2964,
+     2248, 1940, 1897, 1906, 1940, 3123, 2420, 1906, 1940, 2420,
+     2990, 1940, 1972, 1972, 1972, 1972, 2201, 1869, 2420, 2201,
+     2964, 1897, 1940, 1973, 1973, 1973, 1973, 2980, 2201, 2990,
+     1973, 2201, 2201, 1972, 3084, 1972, 1975, 1975, 1975, 1975,
+     3084, 2980, 2966, 1975, 1976, 1976, 1976, 1976, 1980, 1980,
+     1980, 1980, 3124, 2317, 2317, 1980, 2317, 1975, 2968, 1981,
+
+     1981, 1981, 1981, 2966, 2968, 1976, 1981, 1976, 1983, 1983,
+     1983, 1983, 1986, 1986, 1986, 1986, 1987, 1987, 1987, 1987,
+     2968, 3060, 1986, 1987, 1988, 1988, 1988, 1988, 2803, 1983,
+     3060, 1988, 2803, 1986, 1989, 1989, 1989, 1989, 1991, 1991,
+     1991, 1991, 2803, 2092, 1989, 1988, 2092, 2130, 1991, 2876,
+     2092, 2130, 1975, 2092, 2130, 1989, 3125, 2876, 2876, 1991,
+     1992, 1992, 1992, 1992, 2092, 2130, 3127, 1992, 1993, 1993,
+     1993, 1993, 3013, 2242, 3069, 1993, 2024, 2024, 2024, 2024,
+     2027, 2027, 2027, 2027, 2028, 2028, 2028, 2028, 3069, 3013,
+     3129, 2028, 2029, 2029, 2029, 2029, 2277, 2024, 2978, 2029,
+
+     1988, 2027, 2030, 2030, 2030, 2030, 3073, 2031, 2031, 2031,
+     2031, 2242, 2242, 2029, 2031, 2032, 2032, 2032, 2032, 2978,
+     3073, 2034, 2032, 2030, 2034, 2052, 2431, 2242, 2052, 2431,
+     2098, 2098, 2098, 2098, 2277, 2277, 2431, 2052, 2100, 2100,
+     2100, 2100, 2098, 2206, 2984, 2034, 2206, 2098, 2052, 2206,
+     2277, 2268, 2052, 2098, 2268, 3135, 2824, 2098, 2108, 2108,
+     2108, 2108, 2200, 2150, 2984, 2200, 2150, 2268, 2029, 2824,
+     2150, 2052, 2034, 2150, 2200, 2280, 2098, 2824, 2280, 2200,
+     2330, 2330, 2230, 2330, 2150, 2447, 2230, 2280, 2447, 2230,
+     2034, 2054, 2054, 2054, 2054, 2054, 2054, 2447, 2054, 2054,
+
+     2230, 2054, 2280, 2054, 2054, 2054, 3138, 2054, 2054, 2054,
+     2054, 2054, 2054, 2054, 3139, 2251, 2054, 2101, 2101, 2101,
+     2101, 2280, 2251, 2988, 2115, 2115, 2115, 2115, 2988, 2101,
+     2988, 2251, 2101, 2101, 2101, 2188, 2115, 2188, 2188, 2188,
+     2101, 2251, 2188, 2205, 2101, 2278, 2205, 2115, 2278, 2300,
+     2300, 2115, 2188, 2992, 2300, 2205, 2188, 2825, 2205, 2205,
+     2825, 2278, 3000, 2101, 2104, 2104, 2104, 2104, 2104, 2104,
+     2115, 2104, 2104, 2992, 2104, 3000, 2104, 2104, 2104, 2300,
+     2104, 2104, 2104, 2104, 2104, 2104, 2104, 3140, 2981, 2104,
+     2106, 2106, 2106, 2106, 2728, 2109, 2109, 2109, 2109, 2258,
+
+     2258, 2258, 2258, 2728, 2728, 2106, 2106, 2109, 2981, 2981,
+     2109, 2109, 2109, 2106, 3038, 3038, 2240, 2106, 2109, 2240,
+     2938, 2938, 2109, 2240, 2262, 2262, 2262, 2262, 2938, 3144,
+     2209, 2502, 2240, 2209, 2502, 2502, 2106, 3145, 3012, 2262,
+     2262, 2109, 2113, 2113, 2113, 2113, 2113, 2113, 2502, 2113,
+     2113, 3012, 2113, 2209, 2113, 2113, 2113, 2209, 2113, 2113,
+     2113, 2113, 2113, 2113, 2113, 2250, 2831, 2113, 2250, 2831,
+     2262, 2449, 2250, 2996, 2449, 2250, 2209, 2211, 2211, 2211,
+     2211, 2211, 2211, 2449, 2211, 2211, 2250, 2211, 2449, 2211,
+     2211, 2211, 2996, 2211, 2211, 2211, 2211, 2211, 2211, 2211,
+
+     3146, 3147, 2211, 2256, 2256, 2256, 2256, 2259, 2259, 2259,
+     2259, 2264, 2264, 2264, 2264, 2256, 2415, 2882, 2415, 2259,
+     2256, 2882, 2259, 2259, 2259, 2450, 2256, 3148, 2450, 2415,
+     2256, 2265, 2265, 2265, 2265, 2882, 2900, 2450, 2267, 2267,
+     2267, 2267, 2857, 2265, 2415, 2857, 2265, 2265, 2265, 2256,
+     2267, 3150, 2273, 2259, 2273, 2295, 2273, 3153, 2295, 2301,
+     2301, 2313, 2313, 2415, 2301, 2863, 2313, 2295, 2863, 2273,
+     2315, 2315, 2295, 2273, 2900, 2315, 2900, 2265, 2316, 2316,
+     2320, 2320, 2295, 2316, 2267, 2320, 2886, 2322, 2322, 2301,
+     2886, 2313, 2322, 2323, 2323, 2929, 2997, 3154, 2323, 2553,
+
+     2315, 2295, 2553, 2325, 2325, 2325, 2325, 2929, 2316, 2929,
+     2320, 2324, 2324, 2324, 2324, 2997, 2553, 2322, 2324, 2327,
+     2327, 2327, 2327, 2323, 2325, 2864, 2327, 2998, 2864, 2324,
+     2324, 2324, 2324, 2332, 2332, 2332, 2332, 2327, 2327, 2327,
+     2327, 2329, 2329, 2329, 2329, 3155, 2998, 3019, 2329, 2335,
+     2335, 2335, 2335, 3081, 2332, 2338, 2338, 2338, 2338, 2329,
+     2329, 2329, 2329, 3157, 2336, 2336, 2336, 2336, 3019, 3081,
+     2335, 2336, 2337, 2337, 2337, 2337, 2338, 3001, 2985, 2337,
+     2339, 2339, 2339, 2339, 3001, 2985, 3159, 2339, 2340, 2340,
+     2340, 2340, 3085, 2337, 2985, 2340, 2342, 2342, 2342, 2342,
+
+     2352, 2352, 2352, 2352, 2685, 2735, 2342, 2685, 2735, 3085,
+     2352, 2355, 2355, 2355, 2355, 2844, 2923, 2735, 2342, 2923,
+     2844, 2685, 2352, 3161, 2844, 2355, 2356, 2356, 2356, 2356,
+     2357, 2357, 2357, 2357, 2844, 2358, 2358, 2358, 2358, 3043,
+     2872, 2342, 2358, 2358, 2872, 3164, 3043, 2358, 2337, 2359,
+     2359, 2359, 2359, 2872, 3016, 3018, 2359, 2359, 2365, 2365,
+     2365, 2359, 2365, 2360, 2360, 2360, 2360, 3170, 3018, 2962,
+     2360, 2360, 2962, 3016, 2352, 2360, 2365, 2399, 2399, 2399,
+     2399, 2400, 2400, 2400, 2400, 3171, 2365, 2399, 2400, 2404,
+     2410, 2404, 2410, 2400, 2859, 2404, 2410, 2859, 2399, 2404,
+
+     2410, 2410, 2410, 3172, 2833, 2365, 2859, 2833, 2410, 2421,
+     2421, 2421, 2421, 2422, 2422, 2422, 2422, 2436, 2436, 2436,
+     2436, 2421, 2434, 2434, 2434, 2434, 2434, 2455, 2434, 2434,
+     2455, 2455, 2434, 2434, 2434, 2976, 2404, 3076, 2976, 2455,
+     2434, 2438, 2438, 2438, 2438, 2442, 2442, 2442, 2442, 2456,
+     2833, 2883, 2456, 2456, 2455, 3151, 3076, 2463, 2438, 2463,
+     2883, 2606, 2917, 2463, 2606, 3151, 2456, 2463, 2463, 2463,
+     2883, 2917, 2470, 2455, 2470, 2917, 2456, 2995, 2470, 2606,
+     2606, 2606, 2470, 3059, 2483, 2483, 2483, 2483, 2995, 2867,
+     2470, 2483, 2867, 3075, 3059, 2456, 2484, 2484, 2484, 2484,
+
+     3075, 2867, 3058, 2484, 2485, 2485, 2485, 2485, 2486, 2486,
+     2486, 2486, 2488, 2488, 2488, 2488, 2485, 3067, 2862, 2862,
+     2486, 2862, 3067, 3058, 2488, 2489, 2489, 2489, 2489, 2490,
+     2490, 2490, 2490, 2558, 2558, 2558, 2558, 2491, 2491, 2491,
+     2491, 2489, 2991, 2558, 2491, 2490, 2991, 2470, 2470, 2491,
+     2492, 2492, 2492, 2492, 2498, 2498, 2498, 2498, 2518, 2518,
+     2518, 2518, 2520, 2520, 2520, 2520, 2492, 3173, 2498, 2521,
+     2521, 2521, 2521, 2538, 2538, 2538, 2538, 2860, 2890, 2518,
+     2860, 2890, 3078, 2520, 2539, 2539, 2539, 2539, 3061, 3078,
+     2521, 2539, 2860, 2860, 2538, 2538, 2538, 2540, 2540, 2540,
+
+     2540, 3061, 3063, 2890, 2540, 2541, 2541, 2541, 2541, 2542,
+     2542, 2542, 2542, 2543, 2543, 2543, 2543, 2544, 2544, 2544,
+     2544, 2961, 2935, 3063, 2544, 2542, 2935, 2541, 2541, 2543,
+     2545, 2545, 2545, 2545, 2961, 3174, 2935, 2545, 2547, 2547,
+     2547, 2547, 2961, 3175, 3065, 2547, 2548, 2548, 2548, 2548,
+     2549, 2549, 2549, 2549, 2550, 2550, 2550, 2550, 2880, 2547,
+     2556, 2556, 2556, 2556, 2550, 3065, 3072, 2556, 2548, 2548,
+     3177, 2880, 2549, 2549, 2880, 2550, 2559, 2559, 2559, 2559,
+     3178, 2556, 2560, 2560, 2560, 2560, 2559, 3072, 3149, 2560,
+     2561, 2561, 2561, 2561, 2562, 2562, 2562, 2562, 3079, 2861,
+
+     3074, 2562, 2861, 2560, 3149, 2861, 2561, 2564, 2564, 2564,
+     2564, 2561, 3079, 3180, 2547, 2563, 2563, 2563, 2563, 3079,
+     3074, 3074, 2563, 2567, 2567, 2567, 2567, 3181, 2564, 3183,
+     2567, 2581, 2581, 2581, 2581, 3184, 2556, 2865, 2865, 2617,
+     2865, 3186, 2617, 2609, 2609, 2609, 2609, 2582, 2582, 2582,
+     2582, 3187, 2581, 2561, 2582, 2609, 3156, 3156, 2560, 2580,
+     2580, 2580, 2580, 3077, 2609, 2580, 2617, 3080, 2582, 2610,
+     2610, 2610, 2610, 3086, 3080, 2611, 2611, 2611, 2611, 2610,
+     2580, 2610, 2611, 3077, 3086, 2617, 2580, 2611, 2612, 2612,
+     2612, 2612, 2613, 2613, 2613, 2613, 3185, 3185, 2999, 2612,
+
+     2612, 2999, 2613, 2615, 2615, 2615, 2615, 2580, 2580, 2612,
+     2580, 2580, 2580, 3083, 2615, 2615, 2580, 2580, 2580, 2580,
+     2580, 3188, 2580, 2582, 2615, 2580, 2580, 2580, 2580, 2614,
+     2614, 2614, 2614, 3083, 2618, 2619, 2614, 2618, 2619, 2621,
+     2614, 2622, 2621, 2623, 2622, 2696, 2623, 3091, 2696, 3189,
+     2625, 2625, 2625, 2625, 3152, 2623, 2621, 2625, 3152, 3191,
+     3091, 2618, 2619, 2696, 2696, 2696, 2621, 3152, 2622, 3169,
+     2623, 2625, 2632, 2632, 2632, 2632, 2633, 2633, 2633, 2633,
+     2618, 2619, 3035, 2969, 3092, 2621, 2969, 2622, 2969, 2623,
+     3169, 3092, 3192, 2632, 3035, 2632, 3035, 2633, 3193, 2633,
+
+     3194, 2632, 2634, 2634, 2634, 2634, 2635, 2635, 2635, 2635,
+     2636, 2636, 2636, 2636, 3062, 3028, 2633, 3062, 2637, 2637,
+     2637, 2637, 3195, 2634, 3028, 2634, 2625, 2635, 3028, 2635,
+     3196, 2636, 3197, 2636, 2638, 2638, 2638, 2638, 3198, 2637,
+     3105, 2637, 2639, 2639, 2639, 2639, 3199, 3082, 2640, 2640,
+     2640, 2640, 3105, 2891, 3105, 2638, 2891, 2638, 2641, 2641,
+     2641, 2641, 3200, 2639, 3162, 2639, 3082, 2634, 3162, 2640,
+     2634, 2640, 3070, 2635, 3201, 3070, 2636, 2637, 2891, 2641,
+     3202, 2641, 3162, 2642, 2642, 2642, 2642, 2688, 2688, 2688,
+     2688, 2638, 2643, 2643, 2643, 2643, 2644, 2644, 2644, 2644,
+
+     2645, 2645, 2645, 2645, 2642, 2639, 2642, 3158, 3165, 3087,
+     2640, 2971, 3165, 2643, 2971, 2643, 3088, 2644, 2641, 2644,
+     3158, 2645, 3203, 2645, 2646, 2646, 2646, 2646, 3087, 2647,
+     2647, 2647, 2647, 3213, 3243, 3088, 2642, 2648, 2648, 2648,
+     2648, 2649, 2649, 2649, 2649, 2646, 3089, 2646, 3207, 2644,
+     2647, 2643, 2647, 2650, 2650, 2650, 2650, 2971, 2648, 2645,
+     2648, 3207, 2649, 3244, 2649, 3089, 2651, 2651, 2651, 2651,
+     2652, 2652, 2652, 2652, 2650, 3245, 2650, 2653, 2653, 2653,
+     2653, 2646, 2647, 2692, 2692, 2692, 2692, 2651, 2648, 2651,
+     3247, 2652, 3113, 2652, 2654, 2654, 2654, 2654, 2653, 3113,
+
+     2653, 2655, 2655, 2655, 2655, 3090, 2649, 3190, 3090, 2650,
+     2656, 2656, 2656, 2656, 3190, 2654, 3160, 2654, 3143, 2652,
+     2674, 3143, 2655, 2674, 2655, 2657, 2657, 2657, 2657, 3160,
+     2653, 2656, 3160, 2656, 2651, 2658, 2658, 2658, 2658, 2659,
+     2659, 2659, 2659, 2674, 2977, 3206, 2657, 2674, 2657, 2660,
+     2660, 2660, 2660, 2977, 3206, 3166, 2658, 3214, 2658, 3166,
+     2659, 3249, 2659, 2654, 2655, 2977, 2674, 2977, 2655, 2656,
+     2660, 3214, 2660, 3205, 2661, 2661, 2661, 2661, 2662, 2662,
+     2662, 2662, 2663, 2663, 2663, 2663, 2664, 2664, 2664, 2664,
+     3251, 3100, 3204, 2657, 3205, 2661, 2658, 2661, 3204, 2662,
+
+     3100, 2662, 3218, 2663, 3100, 2663, 2659, 2664, 3254, 2664,
+     3167, 2665, 2665, 2665, 2665, 3167, 3218, 2660, 2666, 2666,
+     2666, 2666, 2667, 2667, 2667, 2667, 2668, 2668, 2668, 2668,
+     3130, 2662, 2665, 3130, 2665, 2675, 3229, 2661, 2675, 2666,
+     3130, 2666, 3229, 2667, 2663, 2667, 3264, 2664, 3231, 2668,
+     2669, 2669, 2669, 2669, 2671, 2671, 2671, 2671, 2675, 3231,
+     3226, 2671, 2675, 2672, 2672, 2672, 2672, 2673, 2673, 2673,
+     2673, 2667, 3274, 2669, 2676, 2671, 3226, 2676, 3015, 2665,
+     2677, 2675, 3182, 2677, 3212, 2666, 2672, 3015, 3015, 3212,
+     2673, 2986, 2677, 3176, 3182, 2697, 3182, 2676, 2697, 3015,
+
+     3230, 2676, 3176, 2677, 2986, 2986, 3176, 2677, 2694, 2694,
+     2694, 2694, 2986, 2697, 2697, 2697, 3168, 3230, 2694, 3168,
+     2676, 2702, 2702, 2702, 2702, 3208, 2677, 3209, 3208, 3222,
+     2671, 2704, 2704, 2704, 2704, 2708, 2708, 2708, 2708, 3262,
+     3220, 3168, 2708, 2709, 2709, 2709, 2709, 3220, 3209, 3222,
+     2709, 2710, 2710, 2710, 2710, 2711, 2711, 2711, 2711, 2712,
+     2712, 2712, 2712, 3241, 3262, 3131, 2712, 2710, 3131, 3228,
+     2827, 2711, 2710, 3241, 2718, 3131, 2711, 2718, 2827, 3211,
+     2712, 2714, 2714, 2714, 2714, 3133, 3133, 2827, 2714, 3228,
+     3133, 2827, 2718, 2718, 2718, 2796, 2796, 2796, 2796, 2965,
+
+     3211, 3275, 2714, 2837, 2837, 2837, 2837, 2965, 2711, 2927,
+     2927, 2927, 2927, 3134, 3134, 3133, 2965, 3217, 3134, 3236,
+     2965, 2975, 2975, 2975, 2975, 2983, 3002, 3002, 3002, 3002,
+     2983, 3064, 3236, 3215, 2983, 2712, 3215, 3071, 3217, 3064,
+     3223, 3002, 3002, 3134, 2983, 3210, 3071, 3223, 3064, 2837,
+     3136, 3136, 3064, 3210, 3225, 3136, 2796, 2714, 3071, 3136,
+     3071, 3225, 3210, 3276, 2837, 3239, 3210, 2975, 3163, 3278,
+     2927, 3126, 3126, 3126, 3126, 3219, 3235, 3163, 3126, 3235,
+     3136, 3239, 2975, 3128, 3128, 3128, 3128, 3163, 3137, 3137,
+     3128, 3221, 3126, 3137, 3216, 3219, 3219, 3137, 3141, 3141,
+
+     3141, 3141, 3224, 3216, 3128, 3141, 3227, 3232, 3233, 3234,
+     3221, 3240, 3280, 3237, 3240, 3216, 3224, 3216, 3137, 3141,
+     3237, 3246, 3246, 3224, 3269, 3227, 3232, 3233, 3234, 3238,
+     3238, 3238, 3238, 3242, 3270, 3248, 3253, 3242, 3250, 3255,
+     3256, 3238, 3282, 3255, 3256, 3253, 3242, 3126, 3248, 3269,
+     3270, 3250, 3238, 3252, 3250, 3253, 3238, 3252, 3257, 3128,
+     3252, 3258, 3285, 3257, 3258, 3259, 3259, 3259, 3259, 3265,
+     3260, 3252, 3265, 3260, 3141, 3238, 3260, 3258, 3277, 3277,
+     3259, 3259, 3261, 3261, 3266, 3261, 3271, 3266, 3259, 3271,
+     3267, 3267, 3259, 3267, 3272, 3273, 3279, 3286, 3287, 3273,
+
+     3294, 3286, 3287, 3295, 3272, 3281, 3296, 3290, 3273, 3279,
+     3290, 3259, 3263, 3263, 3263, 3263, 3263, 3263, 3281, 3263,
+     3263, 3281, 3263, 3290, 3263, 3263, 3263, 3284, 3263, 3263,
+     3263, 3263, 3263, 3263, 3263, 3283, 3284, 3263, 3288, 3283,
+     3297, 3298, 3283, 3288, 3293, 3299, 3284, 3291, 3291, 3291,
+     3291, 3300, 3302, 3283, 3303, 3301, 3305, 3306, 3308, 3291,
+     3292, 3292, 3292, 3292, 3301, 3293, 3307, 3309, 3301, 3311,
+     3291, 3312, 3292, 3313, 3291, 3292, 3292, 3314, 3307, 3315,
+     3307, 3310, 3310, 3292, 3316, 3317, 3315, 3292, 3318, 3319,
+     3320, 3321, 3322, 3291, 3323, 3324, 3325, 3326, 3327, 3328,
+
+     3330, 3329, 3331, 3332, 3333, 3334, 3292, 3329, 3334, 3335,
+     3336, 3337, 3332, 3331, 3338, 3339, 3343, 3333, 3336, 3338,
+     3340, 3330, 3341, 3344, 3342, 3341, 3345, 3336, 3346, 3347,
+     3335, 3336, 3337, 3342, 3340, 3348, 3347, 3343, 3349, 3350,
+     3345, 3351, 3354, 3352, 3353, 3342, 3350, 3342, 3346, 3346,
+     3352, 3355, 3357, 3356, 3348, 3351, 3358, 3359, 3349, 3356,
+     3353, 3354, 3351, 3360, 3361, 3362, 3363, 3358, 3362, 3357,
+     3364, 3355, 3365, 3366, 3367, 3368, 3359, 3364, 3369, 3363,
+     3371, 3370, 3360, 3361, 3373, 3372, 3374, 3377, 3372, 3369,
+     3370, 3375, 3378, 3379, 3376, 3381, 3371, 3372, 3376, 3382,
+
+     3373, 3375, 3370, 3380, 3380, 3383, 3384, 3376, 3385, 3386,
+     3388, 3387, 3382, 3386, 3389, 3392, 3393, 3390, 3389, 3384,
+     3387, 3390, 3384, 3391, 3394, 3395, 3396, 3386, 3391, 3397,
+     3387, 3398, 3399, 3400, 3401, 3403, 3392, 3404, 3405, 3406,
+     3407, 3399, 3408, 3408, 3409, 3399, 3410, 3411, 3412, 3413,
+     3405, 3414, 3405, 3415, 3416, 3417, 3413, 3418, 3419, 3420,
+     3421, 3422, 3423, 3424, 3425, 3426, 3427, 3428, 3429, 3430,
+     3431, 3426, 3430, 3433, 3434, 3432, 3428, 3435, 3439, 3434,
+     3438, 3429, 3437, 3432, 3436, 3437, 3440, 3427, 3441, 3438,
+     3442, 3431, 3432, 3443, 3433, 3444, 3432, 3442, 3436, 3439,
+
+     3440, 3438, 3446, 3438, 3445, 3448, 3447, 3449, 3441, 3441,
+     3452, 3445, 3443, 3447, 3450, 3444, 3446, 3451, 3453, 3454,
+     3450, 3452, 3455, 3446, 3448, 3456, 3457, 3449, 3456, 3458,
+     3459, 3459, 3459, 3459, 3451, 3462, 3458, 3453, 3454, 3457,
+     3460, 3455, 3459, 3460, 3461, 3461, 3461, 3461, 3463, 3464,
+     3464, 3464, 3464, 3465, 3466, 3467, 3460, 3468, 3469, 3461,
+     3461, 3464, 3466, 3470, 3471, 3472, 3473, 3474, 3467, 3477,
+     3493, 3471, 3475, 3495, 3476, 3497, 3459, 3470, 3473, 3479,
+     3479, 3475, 3476, 3498, 3479, 3499, 3505, 3507, 3509, 3512,
+     3461, 3472, 3477, 3475, 3510, 3464, 3480, 3480, 3482, 3482,
+
+     3513, 3480, 3510, 3482, 3511, 3483, 3483, 3485, 3485, 3479,
+     3483, 3514, 3485, 3486, 3486, 3496, 3518, 3511, 3486, 3520,
+     3487, 3487, 3487, 3487, 3496, 3496, 3480, 3487, 3482, 3488,
+     3488, 3488, 3488, 3524, 3527, 3483, 3488, 3485, 3487, 3487,
+     3487, 3487, 3528, 3486, 3489, 3489, 3489, 3489, 3508, 3530,
+     3488, 3489, 3490, 3490, 3490, 3490, 3532, 3508, 3508, 3490,
+     3534, 3536, 3489, 3489, 3489, 3489, 3502, 3502, 3502, 3502,
+     3490, 3490, 3490, 3490, 3491, 3491, 3491, 3491, 3502, 3538,
+     3547, 3491, 3500, 3500, 3500, 3500, 3548, 3549, 3552, 3500,
+     3501, 3501, 3501, 3501, 3500, 3491, 3521, 3501, 3503, 3503,
+
+     3503, 3503, 3501, 3553, 3561, 3521, 3521, 3522, 3523, 3525,
+     3522, 3523, 3525, 3531, 3526, 3535, 3567, 3526, 3572, 3503,
+     3574, 3550, 3531, 3531, 3535, 3535, 3539, 3539, 3539, 3539,
+     3575, 3523, 3550, 3539, 3522, 3523, 3525, 3526, 3539, 3576,
+     3563, 3526, 3577, 3578, 3540, 3540, 3540, 3540, 3563, 3580,
+     3491, 3540, 3581, 3522, 3523, 3525, 3540, 3582, 3580, 3580,
+     3526, 3542, 3542, 3542, 3542, 3545, 3545, 3545, 3545, 3546,
+     3546, 3546, 3546, 3555, 3555, 3555, 3555, 3542, 3586, 3545,
+     3556, 3556, 3556, 3556, 3557, 3557, 3557, 3557, 3559, 3559,
+     3559, 3559, 3587, 3588, 3555, 3555, 3555, 3585, 3559, 3589,
+
+     3585, 3556, 3556, 3556, 3590, 3591, 3557, 3557, 3592, 3559,
+     3565, 3565, 3565, 3565, 3593, 3594, 3595, 3565, 3566, 3566,
+     3566, 3566, 3596, 3597, 3598, 3566, 3568, 3568, 3568, 3568,
+     3599, 3565, 3600, 3569, 3569, 3569, 3569, 3601, 3602, 3566,
+     3569, 3570, 3570, 3570, 3570, 3604, 3605, 3568, 3571, 3571,
+     3571, 3571, 3573, 3573, 3573, 3573, 3603, 3570, 3606, 3573,
+     3603, 3607, 3570, 3584, 3584, 3584, 3584, 3608, 3609, 3571,
+     3610, 3611, 3612, 3613, 3614, 3624, 3613, 3631, 3613, 3629,
+     3629, 3636, 3636, 3635, 3584, 3638, 3565, 3615, 3615, 3615,
+     3615, 3635, 3639, 3640, 3566, 3620, 3620, 3620, 3620, 3615,
+
+     3570, 3583, 3583, 3583, 3583, 3620, 3641, 3583, 3615, 3616,
+     3616, 3616, 3616, 3617, 3617, 3617, 3617, 3642, 3643, 3682,
+     3617, 3616, 3583, 3685, 3686, 3617, 3687, 3689, 3583, 3690,
+     3616, 3618, 3618, 3618, 3618, 3691, 3692, 3694, 3618, 3688,
+     3688, 3688, 3688, 3618, 3619, 3619, 3619, 3619, 3696, 3583,
+     3583, 3699, 3583, 3583, 3583, 3704, 3706, 3709, 3583, 3583,
+     3583, 3583, 3583, 3710, 3583, 3619, 3717, 3583, 3583, 3583,
+     3583, 3622, 3622, 3622, 3622, 3718, 3625, 3720, 3622, 3721,
+     3625, 3723, 3622, 3623, 3623, 3623, 3623, 3625, 3625, 3625,
+     3623, 3713, 3724, 3714, 3623, 3626, 3626, 3626, 3626, 3713,
+
+     3628, 3632, 3626, 3628, 3632, 3634, 3725, 3626, 3634, 3726,
+     3644, 3644, 3644, 3644, 3714, 3645, 3645, 3645, 3645, 3646,
+     3646, 3646, 3646, 3693, 3693, 3693, 3693, 3628, 3632, 3715,
+     3715, 3644, 3634, 3644, 3695, 3727, 3645, 3695, 3645, 3695,
+     3646, 3729, 3646, 3716, 3716, 3644, 3628, 3632, 3730, 3731,
+     3733, 3634, 3645, 3647, 3647, 3647, 3647, 3648, 3648, 3648,
+     3648, 3649, 3649, 3649, 3649, 3650, 3650, 3650, 3650, 3651,
+     3651, 3651, 3651, 3722, 3647, 3734, 3647, 3735, 3648, 3736,
+     3648, 3646, 3649, 3737, 3649, 3738, 3650, 3739, 3650, 3738,
+     3651, 3722, 3651, 3728, 3652, 3652, 3652, 3652, 3654, 3654,
+
+     3654, 3654, 3705, 3647, 3740, 3705, 3728, 3705, 3741, 3742,
+     3655, 3655, 3655, 3655, 3650, 3652, 3743, 3652, 3744, 3654,
+     3745, 3654, 3648, 3657, 3657, 3657, 3657, 3649, 3698, 3746,
+     3651, 3655, 3708, 3655, 3750, 3751, 3752, 3698, 3698, 3712,
+     3732, 3708, 3708, 3732, 3657, 3753, 3657, 3754, 3712, 3712,
+     3755, 3652, 3653, 3653, 3653, 3653, 3653, 3653, 3653, 3653,
+     3653, 3653, 3653, 3653, 3653, 3653, 3653, 3653, 3653, 3653,
+     3653, 3653, 3654, 3655, 3757, 3653, 3759, 3653, 3653, 3653,
+     3653, 3653, 3656, 3656, 3656, 3656, 3760, 3761, 3657, 3658,
+     3658, 3658, 3658, 3659, 3659, 3659, 3659, 3762, 3763, 3653,
+
+     3653, 3653, 3765, 3656, 3766, 3656, 3748, 3768, 3769, 3748,
+     3658, 3770, 3658, 3771, 3659, 3764, 3659, 3660, 3660, 3660,
+     3660, 3661, 3661, 3661, 3661, 3764, 3773, 3774, 3653, 3653,
+     3653, 3748, 3662, 3662, 3662, 3662, 3776, 3777, 3660, 3656,
+     3660, 3778, 3661, 3779, 3661, 3663, 3663, 3663, 3663, 3664,
+     3664, 3664, 3664, 3662, 3659, 3662, 3780, 3658, 3782, 3781,
+     3783, 3772, 3781, 3784, 3772, 3787, 3663, 3788, 3663, 3789,
+     3664, 3790, 3664, 3665, 3665, 3665, 3665, 3666, 3666, 3666,
+     3666, 3662, 3660, 3661, 3785, 3791, 3792, 3785, 3667, 3667,
+     3667, 3667, 3793, 3794, 3665, 3795, 3665, 3796, 3666, 3797,
+
+     3666, 3668, 3668, 3668, 3668, 3798, 3799, 3663, 3664, 3667,
+     3799, 3667, 3669, 3669, 3669, 3669, 3772, 3670, 3670, 3670,
+     3670, 3800, 3668, 3665, 3668, 3671, 3671, 3671, 3671, 3672,
+     3672, 3672, 3672, 3669, 3801, 3669, 3802, 3667, 3670, 3803,
+     3670, 3802, 3804, 3666, 3805, 3806, 3671, 3807, 3671, 3808,
+     3672, 3809, 3672, 3810, 3668, 3811, 3673, 3673, 3673, 3673,
+     3674, 3674, 3674, 3674, 3812, 3669, 3675, 3675, 3675, 3675,
+     3676, 3676, 3676, 3676, 3670, 3812, 3813, 3673, 3672, 3673,
+     3853, 3674, 3671, 3674, 3853, 3812, 3813, 3675, 3826, 3675,
+     3857, 3676, 3818, 3676, 3677, 3677, 3677, 3677, 3678, 3678,
+
+     3678, 3678, 3826, 3679, 3679, 3679, 3679, 3680, 3680, 3680,
+     3680, 3674, 3818, 3673, 3816, 3677, 3814, 3677, 3825, 3678,
+     3858, 3678, 3676, 3814, 3679, 3675, 3679, 3816, 3680, 3825,
+     3680, 3676, 3820, 3817, 3819, 3820, 3681, 3681, 3681, 3681,
+     3817, 3819, 3701, 3701, 3701, 3701, 3702, 3702, 3702, 3702,
+     3859, 3861, 3827, 3678, 3821, 3677, 3679, 3681, 3701, 3681,
+     3862, 3822, 3702, 3701, 3822, 3824, 3827, 3702, 3703, 3703,
+     3703, 3703, 3824, 3821, 3828, 3680, 3829, 3830, 3820, 3831,
+     3832, 3828, 3833, 3829, 3703, 3834, 3831, 3820, 3835, 3703,
+     3830, 3836, 3834, 3837, 3838, 3835, 3832, 3840, 3839, 3842,
+
+     3837, 3833, 3842, 3681, 3841, 3843, 3836, 3844, 3845, 3840,
+     3844, 3841, 3848, 3851, 3850, 3852, 3838, 3839, 3864, 3855,
+     3851, 3854, 3843, 3865, 3867, 3865, 3843, 3855, 3868, 3845,
+     3850, 3852, 3848, 3854, 3703, 3758, 3758, 3758, 3758, 3758,
+     3758, 3758, 3758, 3758, 3758, 3758, 3758, 3758, 3758, 3758,
+     3758, 3758, 3758, 3758, 3758, 3846, 3847, 3870, 3758, 3758,
+     3758, 3758, 3758, 3758, 3758, 3849, 3856, 3860, 3863, 3866,
+     3871, 3872, 3866, 3873, 3846, 3860, 3869, 3863, 3847, 3846,
+     3875, 3863, 3758, 3758, 3758, 3874, 3849, 3856, 3869, 3874,
+     3869, 3876, 3878, 3877, 3877, 3879, 3880, 3881, 3758, 3874,
+
+     3876, 3877, 3882, 3883, 3884, 3885, 3886, 3887, 3888, 3889,
+     3890, 3758, 3758, 3758, 3767, 3767, 3767, 3767, 3767, 3767,
+     3767, 3767, 3767, 3767, 3767, 3767, 3767, 3767, 3767, 3767,
+     3767, 3767, 3767, 3767, 3893, 3895, 3896, 3767, 3767, 3767,
+     3767, 3767, 3767, 3767, 3891, 3892, 3897, 3891, 3892, 3898,
+     3899, 3900, 3901, 3903, 3904, 3905, 3906, 3893, 3907, 3909,
+     3910, 3767, 3767, 3767, 3908, 3911, 3913, 3914, 3915, 3891,
+     3892, 3916, 3917, 3918, 3908, 3919, 3918, 3920, 3922, 3923,
+     3924, 3925, 3926, 3927, 3928, 3929, 3930, 3931, 3932, 3933,
+     3767, 3767, 3767, 3775, 3775, 3775, 3775, 3775, 3775, 3775,
+
+     3775, 3775, 3775, 3775, 3775, 3775, 3775, 3775, 3775, 3775,
+     3775, 3775, 3775, 3934, 3935, 3936, 3775, 3775, 3775, 3775,
+     3775, 3775, 3775, 3937, 3938, 3939, 3940, 3941, 3918, 3942,
+     3943, 3944, 3945, 3946, 3947, 3948, 3950, 3946, 3949, 3949,
+     3775, 3775, 3775, 3951, 3952, 3953, 3954, 3955, 3951, 3956,
+     3957, 3958, 3959, 3960, 3961, 3962, 3964, 3966, 3965, 4018,
+     3975, 4019, 3973, 3975, 3966, 3973, 3964, 3958, 3965, 3775,
+     3775, 3775, 3815, 3815, 3815, 3815, 3815, 3815, 3815, 3815,
+     3815, 3815, 3815, 3815, 3815, 3815, 3815, 3815, 3815, 3815,
+     3815, 3815, 3963, 3968, 3970, 3815, 3815, 3815, 3815, 3815,
+
+     3815, 3815, 3969, 3963, 3971, 3972, 3968, 3974, 3973, 3969,
+     3979, 3971, 3972, 3963, 3970, 3977, 3978, 3973, 3980, 3815,
+     3815, 3815, 3977, 3981, 3979, 3984, 3974, 3978, 3982, 3983,
+     3981, 3986, 3980, 3985, 3987, 3982, 3983, 3989, 3984, 3990,
+     3985, 4020, 3990, 3987, 3989, 4025, 4026, 3986, 3815, 3815,
+     3815, 3823, 3823, 3823, 3823, 3823, 3823, 3823, 3823, 3823,
+     3823, 3823, 3823, 3823, 3823, 3823, 3823, 3823, 3823, 3823,
+     3823, 3988, 3992, 3994, 3823, 3823, 3823, 3823, 3823, 3823,
+     3823, 3991, 3993, 3996, 3995, 3997, 3998, 3992, 3991, 3993,
+     3988, 3995, 4000, 3998, 4001, 3994, 4004, 3997, 3823, 3823,
+
+     3823, 3999, 3996, 4002, 3999, 4003, 4002, 4010, 4003, 4011,
+     4012, 4001, 4015, 4000, 4017, 4001, 4011, 4027, 4004, 4004,
+     4028, 4030, 4017, 4010, 4015, 4031, 4012, 3823, 3823, 3823,
+     3902, 3902, 3902, 3902, 3902, 3902, 3902, 3902, 3902, 3902,
+     3902, 3902, 3902, 3902, 3902, 3902, 3902, 3902, 3902, 3902,
+     4005, 4006, 4007, 3902, 3902, 3902, 3902, 3902, 3902, 3902,
+     4008, 4009, 4021, 4013, 4032, 4022, 4014, 4013, 4016, 4023,
+     4006, 4005, 4022, 4021, 4007, 4006, 4023, 3902, 3902, 3902,
+     4008, 4014, 4009, 4013, 4016, 4033, 4034, 4035, 4036, 4037,
+     4038, 4039, 4040, 3902, 4041, 4042, 4043, 4044, 4045, 4046,
+
+     4047, 4048, 4049, 4050, 4050, 4052, 3902, 3902, 3902, 3912,
+     3912, 3912, 3912, 3912, 3912, 3912, 3912, 3912, 3912, 3912,
+     3912, 3912, 3912, 3912, 3912, 3912, 3912, 3912, 3912, 4053,
+     4054, 4055, 3912, 3912, 3912, 3912, 3912, 3912, 3912, 4051,
+     4056, 4058, 4059, 4057, 4051, 4060, 4061, 4062, 4064, 4066,
+     4063, 4067, 4098, 4099, 4068, 4064, 3912, 3912, 3912, 4057,
+     4063, 4068, 4066, 4069, 4070, 4072, 4071, 4073, 4062, 4071,
+     4075, 4067, 4069, 4072, 4073, 4077, 4097, 4078, 4083, 4075,
+     4078, 4083, 4077, 4070, 4097, 3912, 3912, 3912, 3921, 3921,
+     3921, 3921, 3921, 3921, 3921, 3921, 3921, 3921, 3921, 3921,
+
+     3921, 3921, 3921, 3921, 3921, 3921, 3921, 3921, 4074, 4076,
+     4082, 3921, 3921, 3921, 3921, 3921, 3921, 3921, 4079, 4080,
+     4081, 4074, 4084, 4086, 4090, 4079, 4080, 4081, 4076, 4082,
+     4085, 4087, 4088, 4085, 4091, 3921, 3921, 3921, 4089, 4095,
+     4090, 4091, 4092, 4084, 3921, 4086, 4086, 4094, 4100, 4101,
+     4087, 4095, 4102, 4103, 4088, 4087, 4104, 4105, 4092, 4089,
+     4106, 4107, 4094, 4108, 3921, 3921, 3921, 3967, 3967, 3967,
+     3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967,
+     3967, 3967, 3967, 3967, 3967, 3967, 3967, 4096, 4109, 4110,
+     3967, 3967, 3967, 3967, 3967, 3967, 3967, 4093, 4111, 4112,
+
+     4113, 4093, 4114, 4096, 4115, 4116, 4117, 4118, 4119, 4120,
+     4120, 4121, 4122, 4123, 3967, 3967, 3967, 4093, 4124, 4125,
+     4126, 4127, 4128, 4129, 4130, 4132, 4133, 4134, 4132, 4135,
+     4136, 4139, 4132, 4140, 4141, 4142, 4126, 4132, 4143, 4144,
+     4146, 4147, 4148, 3967, 3967, 3967, 3976, 3976, 3976, 3976,
+     3976, 3976, 3976, 3976, 3976, 3976, 3976, 3976, 3976, 3976,
+     3976, 3976, 3976, 3976, 3976, 3976, 4149, 4145, 4151, 3976,
+     3976, 3976, 3976, 3976, 3976, 3976, 4145, 4150, 4152, 4153,
+     4145, 4154, 4155, 4156, 4157, 4158, 4159, 4160, 4161, 4150,
+     4162, 4150, 4158, 3976, 3976, 3976, 4163, 4164, 4165, 4166,
+
+     4167, 4168, 3976, 4169, 4170, 4171, 4173, 4174, 4171, 4175,
+     4176, 4177, 4178, 4179, 4180, 4181, 4182, 4183, 4184, 4185,
+     4186, 4187, 3976, 3976, 3976, 4188, 4189, 4190, 4191, 4192,
+     4171, 4193, 4194, 4195, 4196, 4196, 4197, 4198, 4199, 4200,
+     4201, 4202, 4203, 4204, 4205, 4206, 4207, 4208, 4210, 4209,
+     4211, 4242, 4214, 4212, 4213, 4220, 4216, 4243, 4203, 4209,
+     4212, 4210, 4215, 4213, 4216, 4215, 4217, 4218, 4208, 4219,
+     4211, 4214, 4221, 4217, 4220, 4223, 4224, 4226, 4219, 4221,
+     4218, 4222, 4223, 4224, 4222, 4225, 4227, 4228, 4229, 4227,
+     4230, 4229, 4225, 4231, 4232, 4234, 4226, 4233, 4235, 4236,
+
+     4237, 4241, 4239, 4240, 4237, 4235, 4238, 4244, 4228, 4241,
+     4245, 4234, 4230, 4230, 4239, 4236, 4232, 4231, 4233, 4240,
+     4237, 4238, 4246, 4247, 4248, 4249, 4250, 4251, 4252, 4253,
+     4254, 4255, 4256, 4257, 4249, 4258, 4259, 4260, 4249, 4261,
+     4262, 4263, 4254, 4264, 4254, 4265, 4266, 4262, 4267, 4268,
+     4269, 4270, 4271, 4272, 4273, 4274, 4275, 4276, 4277, 4278,
+     4279, 4280, 4281, 4282, 4283, 4284, 4285, 4286, 4287, 4288,
+     4289, 4290, 4291, 4292, 4284, 4293, 4294, 4295, 4284, 4277,
+     4296, 4297, 4289, 4298, 4289, 4299, 4300, 4301, 4297, 4302,
+     4303, 4304, 4305, 4306, 4307, 4308, 4309, 4310, 4311, 4312,
+
+     4313, 4314, 4315, 4316, 4317, 4318, 4319, 4320, 4321, 4322,
+     4323, 4324, 4325, 4326, 4327, 4328, 4329, 4330, 4331, 4332,
+     4333, 4334, 4334, 4335, 4336, 4337, 4338, 4339, 4335, 4340,
+     4341, 4342, 4343, 4344, 4345, 4346, 4348, 4347, 4349, 4350,
+     4352, 4351, 4353, 4348, 4355, 4357, 4341, 4347, 4351, 4352,
+     4354, 4349, 4355, 4354, 4358, 4356, 4346, 4359, 4357, 4350,
+     4360, 4353, 4356, 4358, 4362, 4361, 4363, 4360, 4361, 4365,
+     4364, 4362, 4366, 4363, 4367, 4366, 4359, 4364, 4368, 4369,
+     4370, 4368, 4372, 4371, 4373, 4374, 4378, 4376, 4365, 4380,
+     4375, 4376, 4374, 4377, 4379, 4367, 4381, 4380, 4378, 4370,
+
+     4373, 4369, 4369, 4372, 4370, 4371, 4375, 4376, 4377, 4382,
+     4379, 4383, 4384, 4385, 4386, 4387, 4388, 4389, 4390, 4384,
+     4391, 4392, 4393, 4394, 4395, 4396, 4397, 4398, 4399, 4400,
+     4392, 4401, 4402, 4403, 4392, 4404, 4405, 4385, 4397, 4406,
+     4397, 4407, 4408, 4405, 4409, 4410, 4411, 4412, 4413, 4414,
+     4415, 4416, 4417, 4418, 4419, 4420, 4421, 4422, 4423, 4424,
+     4425, 4426, 4427, 4428, 4429, 4430, 4431, 4432, 4433, 4434,
+     4435, 4436, 4437, 4438, 4439, 4440, 4441, 4441, 4442, 4443,
+     4444, 4445, 4446, 4447, 4448, 4449, 4450, 4451, 4452, 4454,
+     4453, 4455, 4485, 4458, 4456, 4457, 4464, 4460, 4486, 4447,
+
+     4453, 4456, 4454, 4459, 4457, 4460, 4459, 4461, 4462, 4452,
+     4463, 4455, 4458, 4465, 4461, 4464, 4467, 4468, 4470, 4463,
+     4465, 4462, 4466, 4467, 4468, 4466, 4469, 4471, 4472, 4473,
+     4471, 4474, 4473, 4469, 4475, 4477, 4476, 4470, 4478, 4479,
+     4480, 4487, 4484, 4481, 4480, 4478, 4483, 4482, 4488, 4472,
+     4484, 4477, 4489, 4474, 4474, 4479, 4475, 4476, 4481, 4482,
+     4480, 4490, 4483, 4491, 4492, 4493, 4494, 4495, 4496, 4497,
+     4498, 4492, 4499, 4501, 4501, 4501, 4501, 4504, 4511, 4512,
+     4501, 4498, 4515, 4516, 4493, 4518, 4506, 4519, 4497, 4494,
+     4522, 4501, 4501, 4501, 4501, 4506, 4506, 4525, 4499, 4502,
+
+     4502, 4502, 4502, 4514, 4529, 4533, 4502, 4503, 4503, 4503,
+     4503, 4543, 4514, 4514, 4503, 4521, 4544, 4502, 4502, 4502,
+     4502, 4545, 4507, 4546, 4521, 4521, 4507, 4547, 4503, 4507,
+     4508, 4508, 4508, 4508, 4509, 4509, 4509, 4509, 4524, 4507,
+     4527, 4507, 4508, 4510, 4510, 4510, 4510, 4524, 4524, 4527,
+     4527, 4530, 4530, 4530, 4530, 4509, 4531, 4531, 4531, 4531,
+     4534, 4548, 4553, 4554, 4510, 4555, 4556, 4530, 4534, 4535,
+     4535, 4535, 4535, 4537, 4537, 4537, 4537, 4557, 4558, 4560,
+     4537, 4538, 4538, 4538, 4538, 4539, 4539, 4539, 4539, 4561,
+     4535, 4562, 4539, 4563, 4537, 4564, 4540, 4540, 4540, 4540,
+
+     4565, 4566, 4538, 4540, 4542, 4542, 4542, 4542, 4552, 4552,
+     4552, 4552, 4559, 4559, 4559, 4559, 4567, 4568, 4569, 4570,
+     4542, 4571, 4572, 4573, 4574, 4542, 4575, 4576, 4577, 4552,
+     4578, 4579, 4580, 4581, 4582, 4584, 4587, 4594, 4597, 4578,
+     4598, 4585, 4585, 4585, 4585, 4586, 4586, 4586, 4586, 4537,
+     4595, 4599, 4600, 4602, 4614, 4595, 4601, 4542, 4551, 4551,
+     4551, 4551, 4585, 4589, 4551, 4601, 4586, 4589, 4615, 4590,
+     4647, 4648, 4649, 4590, 4589, 4589, 4589, 4650, 4656, 4551,
+     4590, 4590, 4590, 4657, 4658, 4551, 4559, 4591, 4591, 4591,
+     4591, 4660, 4661, 4663, 4591, 4651, 4651, 4651, 4651, 4591,
+
+     4664, 4593, 4593, 4593, 4593, 4666, 4551, 4551, 4667, 4551,
+     4551, 4551, 4593, 4668, 4669, 4551, 4551, 4551, 4551, 4551,
+     4670, 4551, 4593, 4671, 4551, 4551, 4551, 4551, 4603, 4603,
+     4603, 4603, 4604, 4604, 4604, 4604, 4605, 4605, 4605, 4605,
+     4674, 4606, 4606, 4606, 4606, 4607, 4607, 4607, 4607, 4603,
+     4675, 4603, 4676, 4604, 4677, 4604, 4678, 4605, 4679, 4605,
+     4603, 4680, 4606, 4682, 4606, 4683, 4607, 4684, 4607, 4685,
+     4604, 4686, 4608, 4608, 4608, 4608, 4652, 4652, 4652, 4652,
+     4687, 4609, 4609, 4609, 4609, 4610, 4610, 4610, 4610, 4611,
+     4611, 4611, 4611, 4608, 4607, 4608, 4688, 4689, 4690, 4605,
+
+     4606, 4691, 4609, 4692, 4609, 4693, 4610, 4694, 4610, 4693,
+     4611, 4695, 4611, 4613, 4613, 4613, 4613, 4696, 4616, 4616,
+     4616, 4616, 4618, 4618, 4618, 4618, 4697, 4698, 4619, 4619,
+     4619, 4619, 4681, 4699, 4613, 4681, 4613, 4703, 4610, 4616,
+     4704, 4616, 4652, 4618, 4706, 4618, 4608, 4609, 4707, 4619,
+     4611, 4619, 4620, 4620, 4620, 4620, 4708, 4621, 4621, 4621,
+     4621, 4622, 4622, 4622, 4622, 4623, 4623, 4623, 4623, 4624,
+     4624, 4624, 4624, 4620, 4710, 4620, 4711, 4712, 4621, 4619,
+     4621, 4713, 4622, 4714, 4622, 4715, 4623, 4681, 4623, 4618,
+     4624, 4716, 4624, 4717, 4625, 4625, 4625, 4625, 4718, 4626,
+
+     4626, 4626, 4626, 4627, 4627, 4627, 4627, 4719, 4665, 4621,
+     4721, 4665, 4722, 4620, 4622, 4625, 4723, 4625, 4725, 4623,
+     4626, 4725, 4626, 4726, 4627, 4727, 4627, 4628, 4628, 4628,
+     4628, 4728, 4624, 4665, 4629, 4629, 4629, 4629, 4731, 4630,
+     4630, 4630, 4630, 4631, 4631, 4631, 4631, 4733, 4628, 4732,
+     4628, 4626, 4732, 4735, 4736, 4629, 4627, 4629, 4700, 4625,
+     4630, 4700, 4630, 4737, 4631, 4738, 4631, 4632, 4632, 4632,
+     4632, 4633, 4633, 4633, 4633, 4634, 4634, 4634, 4634, 4635,
+     4635, 4635, 4635, 4700, 4734, 4739, 4628, 4734, 4632, 4740,
+     4632, 4741, 4633, 4742, 4633, 4744, 4634, 4629, 4634, 4745,
+
+     4635, 4743, 4635, 4746, 4743, 4748, 4630, 4749, 4631, 4636,
+     4636, 4636, 4636, 4637, 4637, 4637, 4637, 4747, 4632, 4750,
+     4747, 4751, 4633, 4638, 4638, 4638, 4638, 4752, 4753, 4754,
+     4636, 4755, 4636, 4759, 4637, 4760, 4637, 4761, 4635, 4762,
+     4634, 4763, 4793, 4811, 4638, 4793, 4638, 4639, 4639, 4639,
+     4639, 4756, 4640, 4640, 4640, 4640, 4641, 4641, 4641, 4641,
+     4636, 4642, 4642, 4642, 4642, 4765, 4756, 4743, 4639, 4769,
+     4639, 4802, 4638, 4640, 4812, 4640, 4802, 4641, 4769, 4641,
+     4637, 4765, 4642, 4764, 4642, 4643, 4643, 4643, 4643, 4644,
+     4644, 4644, 4644, 4645, 4645, 4645, 4645, 4766, 4764, 4767,
+
+     4639, 4640, 4654, 4654, 4654, 4654, 4643, 4767, 4643, 4771,
+     4644, 4791, 4644, 4766, 4645, 4791, 4645, 4653, 4653, 4653,
+     4653, 4659, 4659, 4659, 4659, 4770, 4773, 4653, 4774, 4771,
+     4641, 4778, 4775, 4779, 4770, 4774, 4779, 4659, 4644, 4778,
+     4780, 4784, 4659, 4775, 4782, 4773, 4783, 4785, 4786, 4788,
+     4645, 4787, 4643, 4796, 4789, 4782, 4792, 4780, 4795, 4654,
+     4796, 4797, 4783, 4813, 4786, 4799, 4784, 4795, 4785, 4792,
+     4787, 4789, 4806, 4809, 4788, 4814, 4799, 4797, 4806, 4779,
+     4815, 4816, 4809, 4653, 4659, 4702, 4702, 4702, 4702, 4702,
+     4702, 4702, 4702, 4702, 4702, 4702, 4702, 4702, 4702, 4702,
+
+     4702, 4702, 4702, 4702, 4702, 4702, 4702, 4702, 4702, 4702,
+     4702, 4702, 4702, 4702, 4702, 4702, 4702, 4702, 4702, 4702,
+     4702, 4702, 4702, 4702, 4702, 4702, 4702, 4702, 4702, 4702,
+     4702, 4702, 4702, 4702, 4702, 4702, 4702, 4702, 4702, 4702,
+     4702, 4702, 4702, 4702, 4702, 4702, 4702, 4702, 4702, 4702,
+     4702, 4702, 4702, 4702, 4702, 4702, 4702, 4702, 4702, 4702,
+     4702, 4702, 4702, 4702, 4705, 4705, 4705, 4705, 4705, 4705,
+     4705, 4705, 4705, 4705, 4705, 4705, 4705, 4705, 4705, 4705,
+     4705, 4705, 4705, 4705, 4798, 4800, 4801, 4705, 4705, 4705,
+     4705, 4705, 4705, 4705, 4803, 4807, 4808, 4801, 4810, 4808,
+
+     4818, 4803, 4819, 4820, 4821, 4798, 4800, 4822, 4823, 4810,
+     4807, 4705, 4705, 4705, 4824, 4825, 4803, 4781, 4790, 4794,
+     4781, 4790, 4794, 4817, 4826, 4827, 4817, 4828, 4829, 4830,
+     4831, 4832, 4833, 4834, 4834, 4835, 4836, 4837, 4838, 4839,
+     4705, 4705, 4705, 4724, 4724, 4724, 4724, 4724, 4724, 4724,
+     4724, 4724, 4724, 4724, 4724, 4724, 4724, 4724, 4724, 4724,
+     4724, 4724, 4724, 4781, 4790, 4794, 4724, 4724, 4724, 4724,
+     4724, 4724, 4724, 4840, 4841, 4842, 4843, 4844, 4817, 4845,
+     4847, 4849, 4845, 4850, 4790, 4852, 4853, 4854, 4856, 4840,
+     4724, 4724, 4724, 4857, 4858, 4859, 4860, 4861, 4862, 4863,
+
+     4864, 4847, 4865, 4866, 4845, 4867, 4868, 4869, 4871, 4872,
+     4873, 4875, 4877, 4878, 4879, 4880, 4878, 4882, 4883, 4724,
+     4724, 4724, 4730, 4730, 4730, 4730, 4730, 4730, 4730, 4730,
+     4730, 4730, 4730, 4730, 4730, 4730, 4730, 4730, 4730, 4730,
+     4730, 4730, 4884, 4885, 4886, 4730, 4730, 4730, 4730, 4730,
+     4730, 4730, 4881, 4887, 4888, 4881, 4889, 4890, 4891, 4893,
+     4894, 4895, 4897, 4896, 4898, 4892, 4896, 4897, 4892, 4730,
+     4730, 4730, 4899, 4900, 4901, 4902, 4903, 4904, 4905, 4906,
+     4907, 4730, 4908, 4911, 4912, 4913, 4914, 4915, 4916, 4917,
+     4918, 4951, 4977, 4953, 4978, 4951, 4953, 4908, 4730, 4730,
+
+     4730, 4757, 4757, 4757, 4757, 4757, 4757, 4757, 4757, 4757,
+     4757, 4757, 4757, 4757, 4757, 4757, 4757, 4757, 4757, 4757,
+     4757, 4919, 4920, 4921, 4757, 4757, 4757, 4757, 4757, 4757,
+     4757, 4892, 4923, 4925, 4926, 4922, 4919, 4927, 4920, 4921,
+     4923, 4929, 4925, 4926, 4931, 4930, 4935, 4933, 4757, 4757,
+     4757, 4922, 4930, 4937, 4935, 4931, 4936, 4927, 4933, 4936,
+     4929, 4940, 4944, 4962, 4939, 4961, 4956, 4939, 4961, 4944,
+     4937, 4981, 4940, 4956, 4962, 4982, 4942, 4757, 4757, 4757,
+     4758, 4758, 4758, 4758, 4758, 4758, 4758, 4758, 4758, 4758,
+     4758, 4758, 4758, 4758, 4758, 4758, 4758, 4758, 4758, 4758,
+
+     4938, 4942, 4936, 4758, 4758, 4758, 4758, 4758, 4758, 4758,
+     4939, 4943, 4952, 4948, 4941, 4945, 4946, 4938, 4947, 4949,
+     4958, 4983, 4984, 4959, 4957, 4952, 4960, 4758, 4758, 4758,
+     4941, 4945, 4943, 4963, 4970, 4946, 4949, 4947, 4948, 4955,
+     4957, 4958, 4959, 4950, 4954, 4960, 4950, 4954, 4955, 4970,
+     4965, 4985, 4986, 4955, 4963, 4965, 4758, 4758, 4758, 4772,
+     4772, 4772, 4772, 4772, 4772, 4772, 4772, 4772, 4772, 4772,
+     4772, 4772, 4772, 4772, 4772, 4772, 4772, 4772, 4772, 4979,
+     4964, 4987, 4772, 4772, 4772, 4772, 4772, 4772, 4772, 4950,
+     4954, 4964, 4966, 4971, 4969, 4974, 4971, 4988, 4979, 4966,
+
+     4969, 4972, 4973, 4975, 4974, 4976, 4772, 4772, 4772, 4950,
+     4980, 4989, 4972, 4973, 4966, 4990, 4976, 4991, 4975, 4992,
+     4993, 4994, 4995, 4996, 4998, 4999, 5000, 5001, 5002, 4980,
+     5003, 5004, 5007, 5008, 5009, 4772, 4772, 4772, 4777, 4777,
+     4777, 4777, 4777, 4777, 4777, 4777, 4777, 4777, 4777, 4777,
+     4777, 4777, 4777, 4777, 4777, 4777, 4777, 4777, 5010, 5011,
+     5012, 4777, 4777, 4777, 4777, 4777, 4777, 4777, 5013, 5014,
+     5017, 5018, 5015, 5016, 5019, 5021, 5020, 5025, 5017, 5022,
+     5018, 5023, 5021, 5024, 5026, 4777, 4777, 4777, 5015, 5016,
+     5022, 5026, 5023, 5025, 5019, 5020, 5027, 4777, 5032, 5033,
+
+     5024, 5036, 5038, 5041, 5036, 5043, 5049, 5038, 5043, 5041,
+     5050, 5032, 5027, 5033, 4777, 4777, 4777, 4804, 4804, 4804,
+     4804, 4804, 4804, 4804, 4804, 4804, 4804, 4804, 4804, 4804,
+     4804, 4804, 4804, 4804, 4804, 4804, 4804, 5028, 5029, 5034,
+     4804, 4804, 4804, 4804, 4804, 4804, 4804, 5030, 5035, 5037,
+     5044, 5045, 5051, 5042, 5046, 5052, 5028, 5029, 5034, 5047,
+     5048, 5044, 5045, 5046, 4804, 4804, 4804, 5035, 5042, 5053,
+     5037, 5048, 5030, 5054, 5047, 5055, 5056, 5057, 5058, 5059,
+     5060, 5061, 5062, 5063, 5064, 5065, 5066, 5067, 5068, 5069,
+     5070, 5071, 5072, 4804, 4804, 4804, 4805, 4805, 4805, 4805,
+
+     4805, 4805, 4805, 4805, 4805, 4805, 4805, 4805, 4805, 4805,
+     4805, 4805, 4805, 4805, 4805, 4805, 5073, 5074, 5075, 4805,
+     4805, 4805, 4805, 4805, 4805, 4805, 5076, 5077, 5078, 5079,
+     5080, 5081, 5082, 5080, 5081, 5083, 5084, 5085, 5086, 5087,
+     5088, 5081, 5089, 4805, 4805, 4805, 5090, 5091, 5092, 5093,
+     5094, 5095, 5096, 5097, 5098, 5099, 5100, 5101, 5102, 5103,
+     5104, 5105, 5105, 5106, 5107, 5108, 5109, 5110, 5112, 5113,
+     5114, 5115, 4805, 4805, 4805, 4848, 4848, 4848, 4848, 4848,
+     4848, 4848, 4848, 4848, 4848, 4848, 4848, 4848, 4848, 4848,
+     4848, 4848, 4848, 4848, 4848, 4848, 4848, 4848, 4848, 4848,
+
+     4848, 4848, 4848, 4848, 4848, 4848, 4848, 4848, 4848, 4848,
+     4848, 4848, 4848, 4848, 4848, 4848, 4848, 4848, 4848, 4848,
+     4848, 4848, 4848, 4848, 4848, 4848, 4848, 4848, 4848, 4848,
+     4848, 4848, 4848, 4848, 4848, 4848, 4848, 4848, 4848, 4848,
+     4848, 4848, 4848, 4848, 4848, 4848, 4848, 4848, 4848, 4848,
+     4848, 4848, 4848, 4848, 4851, 4851, 4851, 4851, 4851, 4851,
+     4851, 4851, 4851, 4851, 4851, 4851, 4851, 4851, 4851, 4851,
+     4851, 4851, 4851, 4851, 5111, 5116, 5118, 4851, 4851, 4851,
+     4851, 4851, 4851, 4851, 5117, 5119, 5120, 5117, 5121, 5122,
+     5111, 5123, 5124, 5125, 5126, 5127, 5128, 5129, 5130, 5131,
+
+     5132, 4851, 4851, 4851, 5133, 5134, 5135, 5136, 5137, 5117,
+     5138, 5139, 5140, 5141, 5142, 5143, 5144, 5145, 5146, 5147,
+     5150, 5153, 5168, 5172, 5178, 5168, 5172, 5179, 5153, 5150,
+     4851, 4851, 4851, 4870, 4870, 4870, 4870, 4870, 4870, 4870,
+     4870, 4870, 4870, 4870, 4870, 4870, 4870, 4870, 4870, 4870,
+     4870, 4870, 4870, 5148, 5149, 5151, 4870, 4870, 4870, 4870,
+     4870, 4870, 4870, 5154, 5152, 5155, 5158, 5156, 5162, 5148,
+     5149, 5157, 5159, 5158, 5154, 5151, 5155, 5160, 5161, 5163,
+     4870, 4870, 4870, 5152, 5156, 5164, 5165, 5157, 5159, 5166,
+     5169, 5171, 5173, 5162, 5174, 5169, 5160, 5161, 5164, 5163,
+
+     5165, 5170, 5180, 5173, 5181, 5174, 5171, 5170, 5166, 4870,
+     4870, 4870, 4876, 4876, 4876, 4876, 4876, 4876, 4876, 4876,
+     4876, 4876, 4876, 4876, 4876, 4876, 4876, 4876, 4876, 4876,
+     4876, 4876, 5167, 5175, 5176, 4876, 4876, 4876, 4876, 4876,
+     4876, 4876, 5175, 5177, 5182, 5183, 5184, 5185, 5186, 5176,
+     5187, 5167, 5188, 5189, 5177, 5190, 5191, 5192, 5193, 4876,
+     4876, 4876, 5194, 5195, 5196, 5197, 5198, 5199, 5200, 5201,
+     5201, 4876, 5202, 5203, 5204, 5205, 5206, 5207, 5209, 5210,
+     5211, 5212, 5213, 5214, 5215, 5216, 5217, 5218, 4876, 4876,
+     4876, 4909, 4909, 4909, 4909, 4909, 4909, 4909, 4909, 4909,
+
+     4909, 4909, 4909, 4909, 4909, 4909, 4909, 4909, 4909, 4909,
+     4909, 5208, 5219, 5220, 4909, 4909, 4909, 4909, 4909, 4909,
+     4909, 5221, 5222, 5223, 5224, 5225, 5226, 5208, 5227, 5228,
+     5229, 5230, 5231, 5232, 5233, 5234, 5235, 5237, 4909, 4909,
+     4909, 5236, 5236, 5238, 5239, 5240, 5241, 5242, 5243, 5244,
+     5245, 5246, 5247, 5248, 5249, 5250, 5251, 5252, 5253, 5254,
+     5255, 5256, 5257, 5242, 5258, 5259, 5260, 4909, 4909, 4909,
+     4910, 4910, 4910, 4910, 4910, 4910, 4910, 4910, 4910, 4910,
+     4910, 4910, 4910, 4910, 4910, 4910, 4910, 4910, 4910, 4910,
+     5261, 5262, 5263, 4910, 4910, 4910, 4910, 4910, 4910, 4910,
+
+     5264, 5265, 5266, 5267, 5268, 5269, 5270, 5271, 5272, 5273,
+     5274, 5275, 5276, 5277, 5278, 5279, 5280, 4910, 4910, 4910,
+     5281, 5282, 5283, 5286, 5284, 5287, 5285, 5288, 5281, 5289,
+     5282, 5279, 5280, 5285, 5286, 5300, 5287, 5305, 5300, 5311,
+     5305, 5312, 5283, 5284, 5288, 5289, 4910, 4910, 4910, 4928,
+     4928, 4928, 4928, 4928, 4928, 4928, 4928, 4928, 4928, 4928,
+     4928, 4928, 4928, 4928, 4928, 4928, 4928, 4928, 4928, 5291,
+     5292, 5293, 4928, 4928, 4928, 4928, 4928, 4928, 4928, 5290,
+     5294, 5295, 5296, 5301, 5298, 5291, 5290, 5299, 5297, 5292,
+     5293, 5314, 5315, 5304, 5302, 5296, 4928, 4928, 4928, 5302,
+
+     5306, 5295, 5297, 5298, 5301, 5294, 5299, 5303, 5304, 5307,
+     5308, 5306, 5310, 5303, 5313, 5316, 5317, 5318, 5319, 5308,
+     5307, 5320, 5313, 5310, 5321, 4928, 4928, 4928, 4934, 4934,
+     4934, 4934, 4934, 4934, 4934, 4934, 4934, 4934, 4934, 4934,
+     4934, 4934, 4934, 4934, 4934, 4934, 4934, 4934, 5309, 5322,
+     5323, 4934, 4934, 4934, 4934, 4934, 4934, 4934, 5324, 5325,
+     5326, 5327, 5328, 5309, 5329, 5330, 5331, 5332, 5333, 5334,
+     5335, 5336, 5336, 5337, 5338, 4934, 4934, 4934, 5339, 5340,
+     5341, 5342, 5343, 5344, 5345, 5346, 5347, 4934, 5348, 5349,
+     5350, 5351, 5352, 5353, 5354, 5355, 5356, 5342, 5357, 5358,
+
+     5359, 5360, 5361, 5362, 4934, 4934, 4934, 4967, 4967, 4967,
+     4967, 4967, 4967, 4967, 4967, 4967, 4967, 4967, 4967, 4967,
+     4967, 4967, 4967, 4967, 4967, 4967, 4967, 5363, 5364, 5365,
+     4967, 4967, 4967, 4967, 4967, 4967, 4967, 5366, 5367, 5368,
+     5369, 5370, 5371, 5372, 5373, 5374, 5375, 5376, 5377, 5378,
+     5379, 5380, 5383, 5381, 4967, 4967, 4967, 5384, 5385, 5379,
+     5382, 5386, 5387, 5383, 5377, 5378, 5388, 5382, 5384, 5387,
+     5397, 5380, 5381, 5397, 5398, 5385, 5409, 5386, 5401, 5398,
+     5410, 5401, 5388, 4967, 4967, 4967, 4968, 4968, 4968, 4968,
+     4968, 4968, 4968, 4968, 4968, 4968, 4968, 4968, 4968, 4968,
+
+     4968, 4968, 4968, 4968, 4968, 4968, 5389, 5390, 5392, 4968,
+     4968, 4968, 4968, 4968, 4968, 4968, 5391, 5393, 5394, 5395,
+     5396, 5399, 5400, 5414, 5415, 5389, 5390, 5399, 5392, 5402,
+     5393, 5403, 5394, 4968, 4968, 4968, 5404, 5400, 5395, 5396,
+     5402, 5391, 5403, 5405, 5406, 5404, 5412, 5420, 5421, 5422,
+     5423, 5424, 5425, 5426, 5428, 5406, 5429, 5431, 5405, 5412,
+     5432, 5433, 4968, 4968, 4968, 4997, 4997, 4997, 4997, 4997,
+     4997, 4997, 4997, 4997, 4997, 4997, 4997, 4997, 4997, 4997,
+     4997, 4997, 4997, 4997, 4997, 4997, 4997, 4997, 4997, 4997,
+     4997, 4997, 4997, 4997, 4997, 4997, 4997, 4997, 4997, 4997,
+
+     4997, 4997, 4997, 4997, 4997, 4997, 4997, 4997, 4997, 4997,
+     4997, 4997, 4997, 4997, 4997, 4997, 4997, 4997, 4997, 4997,
+     4997, 4997, 4997, 4997, 4997, 4997, 4997, 4997, 4997, 4997,
+     4997, 4997, 4997, 4997, 4997, 4997, 4997, 4997, 4997, 4997,
+     4997, 4997, 4997, 4997, 5031, 5031, 5031, 5031, 5031, 5031,
+     5031, 5031, 5031, 5031, 5031, 5031, 5031, 5031, 5031, 5031,
+     5031, 5031, 5031, 5031, 5031, 5031, 5031, 5031, 5031, 5031,
+     5031, 5031, 5031, 5031, 5031, 5031, 5031, 5031, 5031, 5031,
+     5031, 5031, 5031, 5031, 5031, 5031, 5031, 5031, 5031, 5031,
+     5031, 5031, 5031, 5031, 5031, 5031, 5031, 5031, 5031, 5031,
+
+     5031, 5031, 5031, 5031, 5031, 5031, 5031, 5031, 5031, 5031,
+     5031, 5031, 5031, 5031, 5031, 5031, 5031, 5031, 5031, 5031,
+     5031, 5031, 5031, 5411, 5413, 5416, 5417, 5418, 5434, 5435,
+     5436, 5437, 5442, 5419, 5419, 5419, 5419, 5443, 5445, 5448,
+     5419, 5416, 5449, 5411, 5450, 5413, 5452, 5417, 5453, 5455,
+     5418, 5419, 5419, 5419, 5419, 5427, 5427, 5427, 5427, 5456,
+     5457, 5458, 5427, 5439, 5439, 5439, 5439, 5427, 5459, 5460,
+     5439, 5441, 5441, 5441, 5441, 5447, 5447, 5447, 5447, 5451,
+     5451, 5451, 5451, 5461, 5439, 5462, 5463, 5441, 5454, 5454,
+     5454, 5454, 5441, 5464, 5465, 5466, 5447, 5467, 5468, 5469,
+
+     5470, 5471, 5472, 5473, 5474, 5475, 5475, 5475, 5475, 5476,
+     5477, 5478, 5479, 5480, 5480, 5480, 5480, 5485, 5487, 5488,
+     5480, 5489, 5490, 5491, 5492, 5480, 5482, 5482, 5482, 5482,
+     5533, 5441, 5535, 5483, 5483, 5483, 5483, 5542, 5546, 5439,
+     5446, 5446, 5446, 5446, 5483, 5547, 5446, 5482, 5484, 5484,
+     5484, 5484, 5548, 5451, 5483, 5493, 5493, 5493, 5493, 5484,
+     5549, 5446, 5551, 5494, 5494, 5494, 5494, 5446, 5553, 5484,
+     5532, 5532, 5532, 5532, 5554, 5555, 5493, 5556, 5493, 5475,
+     5534, 5534, 5534, 5534, 5494, 5493, 5494, 5557, 5446, 5446,
+     5534, 5446, 5446, 5446, 5558, 5494, 5559, 5446, 5446, 5446,
+
+     5446, 5446, 5560, 5446, 5561, 5563, 5446, 5446, 5446, 5446,
+     5495, 5495, 5495, 5495, 5496, 5496, 5496, 5496, 5497, 5497,
+     5497, 5497, 5498, 5498, 5498, 5498, 5500, 5500, 5500, 5500,
+     5565, 5495, 5566, 5495, 5567, 5496, 5568, 5496, 5569, 5497,
+     5570, 5497, 5572, 5498, 5573, 5498, 5534, 5500, 5574, 5500,
+     5575, 5501, 5501, 5501, 5501, 5502, 5502, 5502, 5502, 5544,
+     5576, 5501, 5544, 5495, 5503, 5503, 5503, 5503, 5577, 5497,
+     5562, 5496, 5501, 5562, 5501, 5578, 5502, 5579, 5502, 5504,
+     5504, 5504, 5504, 5564, 5544, 5503, 5564, 5503, 5505, 5505,
+     5505, 5505, 5500, 5505, 5506, 5506, 5506, 5506, 5571, 5580,
+
+     5504, 5571, 5504, 5507, 5507, 5507, 5507, 5584, 5587, 5505,
+     5581, 5505, 5588, 5581, 5589, 5506, 5590, 5506, 5591, 5592,
+     5593, 5503, 5502, 5594, 5507, 5595, 5507, 5508, 5508, 5508,
+     5508, 5509, 5509, 5509, 5509, 5581, 5504, 5510, 5510, 5510,
+     5510, 5511, 5511, 5511, 5511, 5597, 5598, 5506, 5508, 5601,
+     5508, 5602, 5509, 5599, 5509, 5603, 5599, 5605, 5510, 5608,
+     5510, 5610, 5511, 5611, 5511, 5512, 5512, 5512, 5512, 5513,
+     5513, 5513, 5513, 5612, 5614, 5616, 5508, 5514, 5514, 5514,
+     5514, 5515, 5515, 5515, 5515, 5617, 5512, 5619, 5512, 5620,
+     5513, 5621, 5513, 5516, 5516, 5516, 5516, 5622, 5514, 5624,
+
+     5514, 5625, 5515, 5607, 5515, 5609, 5607, 5511, 5609, 5510,
+     5517, 5517, 5517, 5517, 5516, 5626, 5516, 5518, 5518, 5518,
+     5518, 5613, 5513, 5627, 5613, 5615, 5514, 5519, 5519, 5519,
+     5519, 5517, 5615, 5517, 5515, 5628, 5618, 5629, 5518, 5618,
+     5518, 5520, 5520, 5520, 5520, 5630, 5623, 5631, 5519, 5623,
+     5519, 5521, 5521, 5521, 5521, 5522, 5522, 5522, 5522, 5632,
+     5516, 5635, 5520, 5637, 5520, 5523, 5523, 5523, 5523, 5638,
+     5636, 5639, 5521, 5636, 5521, 5640, 5522, 5517, 5522, 5643,
+     5519, 5640, 5649, 5518, 5683, 5684, 5523, 5649, 5523, 5524,
+     5524, 5524, 5524, 5525, 5525, 5525, 5525, 5526, 5526, 5526,
+
+     5526, 5528, 5528, 5528, 5528, 5645, 5641, 5520, 5657, 5652,
+     5524, 5642, 5524, 5657, 5525, 5641, 5525, 5652, 5526, 5685,
+     5526, 5645, 5528, 5644, 5528, 5529, 5529, 5529, 5529, 5522,
+     5642, 5648, 5523, 5530, 5530, 5530, 5530, 5531, 5531, 5531,
+     5531, 5646, 5644, 5524, 5646, 5686, 5529, 5648, 5529, 5536,
+     5536, 5536, 5536, 5525, 5530, 5667, 5530, 5650, 5531, 5654,
+     5531, 5537, 5537, 5537, 5537, 5538, 5538, 5538, 5538, 5655,
+     5650, 5537, 5654, 5656, 5667, 5538, 5540, 5540, 5540, 5540,
+     5541, 5541, 5541, 5541, 5655, 5659, 5540, 5646, 5656, 5661,
+     5541, 5658, 5530, 5664, 5658, 5660, 5531, 5529, 5543, 5543,
+
+     5543, 5543, 5664, 5660, 5663, 5661, 5662, 5659, 5665, 5662,
+     5660, 5666, 5668, 5669, 5543, 5670, 5671, 5681, 5669, 5543,
+     5666, 5663, 5670, 5672, 5665, 5673, 5675, 5678, 5674, 5687,
+     5675, 5668, 5671, 5674, 5678, 5688, 5681, 5658, 5672, 5541,
+     5689, 5690, 5691, 5692, 5693, 5694, 5673, 5543, 5583, 5583,
+     5583, 5583, 5583, 5583, 5583, 5583, 5583, 5583, 5583, 5583,
+     5583, 5583, 5583, 5583, 5583, 5583, 5583, 5583, 5583, 5583,
+     5583, 5583, 5583, 5583, 5583, 5583, 5583, 5583, 5583, 5583,
+     5583, 5583, 5583, 5583, 5583, 5583, 5583, 5583, 5583, 5583,
+     5583, 5583, 5583, 5583, 5583, 5583, 5583, 5583, 5583, 5583,
+
+     5583, 5583, 5583, 5583, 5583, 5583, 5583, 5583, 5583, 5583,
+     5583, 5583, 5583, 5583, 5583, 5583, 5583, 5583, 5583, 5583,
+     5583, 5583, 5583, 5583, 5583, 5583, 5583, 5586, 5586, 5586,
+     5586, 5586, 5586, 5586, 5586, 5586, 5586, 5586, 5586, 5586,
+     5586, 5586, 5586, 5586, 5586, 5586, 5586, 5680, 5682, 5695,
+     5586, 5586, 5586, 5586, 5586, 5586, 5586, 5696, 5697, 5698,
+     5699, 5700, 5701, 5702, 5703, 5704, 5705, 5706, 5680, 5682,
+     5707, 5708, 5709, 5710, 5586, 5586, 5586, 5711, 5712, 5713,
+     5679, 5718, 5721, 5679, 5722, 5723, 5586, 5724, 5725, 5726,
+     5727, 5728, 5729, 5730, 5731, 5732, 5733, 5731, 5734, 5736,
+
+     5737, 5734, 5738, 5586, 5586, 5586, 5606, 5606, 5606, 5606,
+     5606, 5606, 5606, 5606, 5606, 5606, 5606, 5606, 5606, 5606,
+     5606, 5606, 5606, 5606, 5606, 5606, 5679, 5739, 5740, 5606,
+     5606, 5606, 5606, 5606, 5606, 5606, 5714, 5742, 5743, 5714,
+     5744, 5745, 5746, 5747, 5748, 5749, 5747, 5750, 5751, 5752,
+     5753, 5754, 5749, 5606, 5606, 5606, 5755, 5756, 5757, 5758,
+     5759, 5714, 5760, 5761, 5762, 5763, 5764, 5765, 5766, 5767,
+     5768, 5769, 5770, 5771, 5772, 5770, 5773, 5774, 5775, 5776,
+     5830, 5831, 5606, 5606, 5606, 5653, 5653, 5653, 5653, 5653,
+     5653, 5653, 5653, 5653, 5653, 5653, 5653, 5653, 5653, 5653,
+
+     5653, 5653, 5653, 5653, 5653, 5779, 5780, 5778, 5653, 5653,
+     5653, 5653, 5653, 5653, 5653, 5777, 5778, 5782, 5787, 5783,
+     5791, 5777, 5786, 5787, 5779, 5780, 5788, 5789, 5791, 5793,
+     5794, 5795, 5653, 5653, 5653, 5783, 5782, 5796, 5786, 5788,
+     5789, 5800, 5793, 5797, 5801, 5805, 5795, 5803, 5797, 5800,
+     5803, 5794, 5796, 5810, 5805, 5801, 5800, 5834, 5810, 5835,
+     5837, 5653, 5653, 5653, 5717, 5717, 5717, 5717, 5717, 5717,
+     5717, 5717, 5717, 5717, 5717, 5717, 5717, 5717, 5717, 5717,
+     5717, 5717, 5717, 5717, 5717, 5717, 5717, 5717, 5717, 5717,
+     5717, 5717, 5717, 5717, 5717, 5717, 5717, 5717, 5717, 5717,
+
+     5717, 5717, 5717, 5717, 5717, 5717, 5717, 5717, 5717, 5717,
+     5717, 5717, 5717, 5717, 5717, 5717, 5717, 5717, 5717, 5717,
+     5717, 5717, 5717, 5717, 5717, 5717, 5717, 5717, 5717, 5717,
+     5717, 5717, 5717, 5717, 5717, 5717, 5717, 5717, 5717, 5717,
+     5717, 5717, 5717, 5720, 5720, 5720, 5720, 5720, 5720, 5720,
+     5720, 5720, 5720, 5720, 5720, 5720, 5720, 5720, 5720, 5720,
+     5720, 5720, 5720, 5799, 5802, 5804, 5720, 5720, 5720, 5720,
+     5720, 5720, 5720, 5806, 5807, 5808, 5809, 5811, 5838, 5839,
+     5802, 5812, 5804, 5807, 5811, 5799, 5817, 5840, 5813, 5806,
+     5720, 5720, 5720, 5812, 5808, 5809, 5781, 5784, 5798, 5781,
+
+     5784, 5798, 5720, 5813, 5814, 5818, 5822, 5817, 5819, 5841,
+     5818, 5842, 5819, 5822, 5843, 5823, 5844, 5814, 5823, 5720,
+     5720, 5720, 5741, 5741, 5741, 5741, 5741, 5741, 5741, 5741,
+     5741, 5741, 5741, 5741, 5741, 5741, 5741, 5741, 5741, 5741,
+     5741, 5741, 5781, 5784, 5798, 5741, 5741, 5741, 5741, 5741,
+     5741, 5741, 5815, 5824, 5828, 5829, 5845, 5816, 5826, 5825,
+     5827, 5823, 5846, 5833, 5847, 5848, 5832, 5828, 5815, 5741,
+     5741, 5741, 5816, 5826, 5824, 5825, 5829, 5832, 5833, 5827,
+     5851, 5852, 5853, 5854, 5855, 5856, 5857, 5858, 5859, 5860,
+     5861, 5862, 5863, 5866, 5879, 5880, 5893, 5894, 5741, 5741,
+
+     5741, 5792, 5792, 5792, 5792, 5792, 5792, 5792, 5792, 5792,
+     5792, 5792, 5792, 5792, 5792, 5792, 5792, 5792, 5792, 5792,
+     5792, 5865, 5864, 5867, 5792, 5792, 5792, 5792, 5792, 5792,
+     5792, 5864, 5869, 5870, 5871, 5868, 5872, 5869, 5873, 5874,
+     5865, 5875, 5867, 5876, 5877, 5885, 5870, 5871, 5792, 5792,
+     5792, 5868, 5881, 5873, 5876, 5882, 5875, 5872, 5883, 5884,
+     5877, 5874, 5886, 5891, 5895, 5896, 5885, 5882, 5881, 5886,
+     5897, 5898, 5884, 5883, 5899, 5900, 5891, 5792, 5792, 5792,
+     5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850,
+     5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850,
+
+     5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850,
+     5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850,
+     5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850,
+     5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850,
+     5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850,
+     5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5850, 5878,
+     5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878,
+     5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878,
+     5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878,
+     5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878,
+
+     5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878,
+     5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878,
+     5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878,
+     5878, 5878, 5878, 5878, 5878, 5878, 5878, 5878, 5887, 5888,
+     5901, 5889, 5890, 5892, 5902, 5903, 5904, 5905, 5906, 5907,
+     5908, 5909, 5910, 5911, 5912, 5888, 5889, 5913, 5914, 5887,
+     5915, 5890, 5916, 5917, 5892, 5918, 5919, 5920, 5921, 5923,
+     5920, 5921, 5924, 5925, 5926, 5927, 5928, 5929, 5921, 5930,
+     5931, 5932, 5933, 5934, 5935, 5936, 5937, 5938, 5939, 5940,
+     5941, 5942, 5943, 5944, 5945, 5946, 5947, 5948, 5949, 5950,
+
+     5951, 5952, 5953, 5954, 5955, 5956, 5957, 5958, 5959, 5960,
+     5961, 5962, 5963, 5964, 5965, 5966, 5967, 5968, 5969, 5970,
+     5971, 5972, 5973, 5974, 5975, 5976, 5977, 5978, 5979, 5980,
+     5981, 5982, 5983, 5985, 5984, 5987, 5988, 5989, 5980, 5984,
+     5986, 5991, 5990, 5995, 5992, 5993, 5985, 5994, 5983, 5981,
+     5982, 5988, 5991, 5986, 5996, 5995, 5987, 5990, 5997, 5989,
+     5992, 5998, 5993, 5994, 6000, 5999, 6002, 6001, 6003, 5996,
+     6005, 5997, 5999, 6004, 6006, 6007, 6008, 6009, 6010, 6011,
+     6012, 6002, 5998, 6001, 6013, 6000, 6004, 6003, 6014, 6015,
+     6016, 6005, 6017, 6018, 6019, 6020, 6021, 6022, 6023, 6024,
+
+     6025, 6026, 6027, 6028, 6029, 6030, 6031, 6032, 6033, 6034,
+     6035, 6036, 6037, 6038, 6039, 6040, 6041, 6042, 6043, 6044,
+     6045, 6046, 6047, 6048, 6049, 6050, 6051, 6052, 6053, 6054,
+     6055, 6056, 6057, 6058, 6059, 6060, 6061, 6062, 6063, 6064,
+     6065, 6066, 6067, 6068, 6069, 6070, 6070, 6070, 6070, 6071,
+     6072, 6073, 6074, 6075, 6076, 6077, 6078, 6079, 6080, 6081,
+     6082, 6083, 6084, 6085, 6086, 6087, 6088, 6089, 6090, 6091,
+     6092, 6093, 6094, 6095, 6096, 6097, 6097, 6097, 6097, 6098,
+     6099, 6100, 6095, 6103, 6101, 6105, 6100, 6102, 6104, 6109,
+     6106, 6107, 6108, 6096, 6110, 6124, 6099, 6101, 6098, 6111,
+
+     6102, 6112, 6107, 6104, 6103, 6106, 6109, 6105, 6108, 6113,
+     6110, 6111, 6114, 6115, 6116, 6117, 6112, 6118, 6119, 6121,
+     6115, 6097, 6113, 6120, 6125, 6126, 6127, 6128, 6129, 6130,
+     6131, 6117, 6118, 6114, 6132, 6116, 6120, 6119, 6133, 6134,
+     6121, 6135, 6136, 6137, 6138, 6139, 6140, 6141, 6142, 6143,
+     6144, 6145, 6146, 6147, 6148, 6149, 6150, 6151, 6152, 6153,
+     6154, 6155, 6156, 6157, 6158, 6159, 6160, 6161, 6162, 6163,
+     6164, 6165, 6166, 6167, 6168, 6169, 6170, 6171, 6172, 6173,
+     6174, 6175, 6176, 6177, 6178, 6179, 6180, 6181, 6182, 6183,
+     6184, 6186, 6185, 6188, 6189, 6190, 6181, 6185, 6187, 6192,
+
+     6191, 6196, 6193, 6194, 6186, 6195, 6184, 6182, 6183, 6189,
+     6192, 6187, 6197, 6196, 6188, 6191, 6198, 6190, 6193, 6199,
+     6194, 6195, 6201, 6200, 6203, 6202, 6204, 6197, 6206, 6198,
+     6200, 6205, 6207, 6208, 6209, 6211, 6210, 6212, 6213, 6203,
+     6199, 6202, 6214, 6201, 6205, 6204, 6215, 6216, 6219, 6206,
+     6220, 6209, 6210, 6215, 6217, 6217, 6217, 6217, 6221, 6222,
+     6223, 6217, 6224, 6227, 6214, 6231, 6232, 6233, 6216, 6235,
+     6236, 6237, 6217, 6217, 6217, 6217, 6218, 6218, 6218, 6218,
+     6238, 6241, 6243, 6218, 6225, 6225, 6225, 6225, 6230, 6230,
+     6230, 6230, 6244, 6246, 6218, 6218, 6218, 6218, 6247, 6248,
+
+     6225, 6234, 6234, 6234, 6234, 6225, 6249, 6250, 6252, 6230,
+     6239, 6239, 6239, 6239, 6240, 6240, 6240, 6240, 6255, 6256,
+     6258, 6242, 6242, 6242, 6242, 6245, 6245, 6245, 6245, 6253,
+     6253, 6253, 6253, 6257, 6257, 6257, 6257, 6225, 6229, 6229,
+     6229, 6229, 6242, 6259, 6229, 6251, 6251, 6251, 6251, 6254,
+     6254, 6254, 6254, 6260, 6262, 6262, 6262, 6262, 6264, 6229,
+     6263, 6263, 6263, 6263, 6265, 6229, 6251, 6266, 6267, 6268,
+     6269, 6269, 6269, 6269, 6281, 6262, 6298, 6310, 6310, 6310,
+     6310, 6263, 6286, 6286, 6286, 6286, 6229, 6229, 6311, 6229,
+     6229, 6229, 6315, 6316, 6318, 6229, 6229, 6229, 6229, 6229,
+
+     6320, 6229, 6322, 6286, 6229, 6229, 6229, 6229, 6326, 6327,
+     6328, 6251, 6270, 6270, 6270, 6270, 6271, 6271, 6271, 6271,
+     6329, 6331, 6333, 6254, 6272, 6272, 6272, 6272, 6273, 6273,
+     6273, 6273, 6334, 6270, 6335, 6270, 6336, 6271, 6337, 6271,
+     6274, 6274, 6274, 6274, 6338, 6272, 6339, 6272, 6340, 6273,
+     6341, 6273, 6332, 6270, 6342, 6332, 6271, 6275, 6275, 6275,
+     6275, 6274, 6343, 6274, 6276, 6276, 6276, 6276, 6277, 6277,
+     6277, 6277, 6344, 6277, 6276, 6345, 6319, 6277, 6275, 6319,
+     6275, 6278, 6278, 6278, 6278, 6276, 6346, 6276, 6348, 6272,
+     6279, 6279, 6279, 6279, 6273, 6280, 6280, 6280, 6280, 6350,
+
+     6280, 6319, 6278, 6347, 6278, 6352, 6347, 6274, 6354, 6356,
+     6357, 6279, 6358, 6279, 6359, 6360, 6280, 6362, 6280, 6283,
+     6283, 6283, 6283, 6285, 6285, 6285, 6285, 6284, 6284, 6284,
+     6284, 6287, 6287, 6287, 6287, 6296, 6296, 6296, 6296, 6363,
+     6283, 6365, 6283, 6278, 6285, 6366, 6285, 6367, 6284, 6370,
+     6284, 6371, 6287, 6372, 6287, 6373, 6296, 6279, 6282, 6282,
+     6282, 6282, 6282, 6282, 6282, 6282, 6282, 6282, 6282, 6282,
+     6282, 6282, 6282, 6282, 6282, 6282, 6282, 6282, 6284, 6361,
+     6375, 6282, 6361, 6282, 6282, 6282, 6282, 6282, 6288, 6288,
+     6288, 6288, 6289, 6289, 6289, 6289, 6290, 6290, 6290, 6290,
+
+     6291, 6291, 6291, 6291, 6376, 6282, 6282, 6282, 6282, 6288,
+     6377, 6288, 6378, 6289, 6379, 6289, 6380, 6290, 6381, 6290,
+     6382, 6291, 6383, 6291, 6292, 6292, 6292, 6292, 6384, 6293,
+     6293, 6293, 6293, 6385, 6282, 6282, 6282, 6386, 6294, 6294,
+     6294, 6294, 6388, 6364, 6387, 6292, 6364, 6292, 6389, 6391,
+     6293, 6291, 6293, 6295, 6295, 6295, 6295, 6374, 6387, 6294,
+     6374, 6294, 6297, 6297, 6297, 6297, 6299, 6299, 6299, 6299,
+     6314, 6314, 6314, 6314, 6295, 6392, 6295, 6300, 6300, 6300,
+     6300, 6390, 6393, 6297, 6390, 6297, 6293, 6299, 6395, 6299,
+     6292, 6294, 6301, 6301, 6301, 6301, 6394, 6396, 6300, 6394,
+
+     6300, 6303, 6303, 6303, 6303, 6304, 6304, 6304, 6304, 6305,
+     6305, 6305, 6305, 6301, 6397, 6301, 6398, 6401, 6408, 6295,
+     6401, 6297, 6303, 6398, 6303, 6408, 6304, 6434, 6304, 6435,
+     6305, 6436, 6305, 6438, 6306, 6306, 6306, 6306, 6307, 6307,
+     6307, 6307, 6308, 6308, 6308, 6308, 6309, 6309, 6309, 6309,
+     6312, 6312, 6312, 6312, 6303, 6306, 6309, 6306, 6399, 6307,
+     6312, 6307, 6305, 6308, 6402, 6308, 6317, 6317, 6317, 6317,
+     6400, 6403, 6404, 6400, 6405, 6404, 6415, 6399, 6409, 6410,
+     6439, 6411, 6317, 6402, 6412, 6418, 6440, 6317, 6411, 6409,
+     6422, 6415, 6410, 6403, 6405, 6308, 6413, 6306, 6416, 6413,
+
+     6414, 6412, 6417, 6414, 6418, 6417, 6419, 6416, 6420, 6419,
+     6421, 6422, 6441, 6421, 6442, 6420, 6400, 6317, 6321, 6321,
+     6321, 6321, 6321, 6321, 6321, 6321, 6321, 6321, 6321, 6321,
+     6321, 6321, 6321, 6321, 6321, 6321, 6321, 6321, 6423, 6426,
+     6428, 6321, 6321, 6321, 6321, 6321, 6321, 6321, 6425, 6424,
+     6426, 6430, 6429, 6431, 6423, 6424, 6443, 6432, 6444, 6430,
+     6446, 6428, 6447, 6425, 6431, 6321, 6321, 6321, 6433, 6424,
+     6445, 6427, 6429, 6432, 6427, 6433, 6437, 6445, 6448, 6437,
+     6449, 6450, 6451, 6452, 6453, 6454, 6455, 6456, 6457, 6455,
+     6458, 6459, 6460, 6461, 6321, 6321, 6321, 6353, 6353, 6353,
+
+     6353, 6353, 6353, 6353, 6353, 6353, 6353, 6353, 6353, 6353,
+     6353, 6353, 6353, 6353, 6353, 6353, 6353, 6427, 6463, 6465,
+     6353, 6353, 6353, 6353, 6353, 6353, 6353, 6467, 6469, 6470,
+     6471, 6472, 6473, 6474, 6475, 6476, 6474, 6475, 6477, 6478,
+     6479, 6480, 6481, 6483, 6353, 6353, 6353, 6484, 6485, 6486,
+     6487, 6488, 6489, 6490, 6491, 6492, 6493, 6494, 6495, 6496,
+     6497, 6498, 6499, 6500, 6502, 6503, 6504, 6505, 6506, 6507,
+     6508, 6506, 6509, 6353, 6353, 6353, 6355, 6355, 6355, 6355,
+     6355, 6355, 6355, 6355, 6355, 6355, 6355, 6355, 6355, 6355,
+     6355, 6355, 6355, 6355, 6355, 6355, 6501, 6510, 6511, 6355,
+
+     6355, 6355, 6355, 6355, 6355, 6355, 6512, 6513, 6514, 6515,
+     6501, 6516, 6517, 6519, 6520, 6521, 6519, 6522, 6516, 6523,
+     6522, 6524, 6546, 6355, 6355, 6355, 6532, 6527, 6524, 6518,
+     6528, 6517, 6518, 6520, 6527, 6529, 6530, 6521, 6531, 6523,
+     6560, 6528, 6546, 6532, 6533, 6531, 6529, 6533, 6534, 6530,
+     6562, 6534, 6355, 6355, 6355, 6368, 6368, 6368, 6368, 6368,
+     6368, 6368, 6368, 6368, 6368, 6368, 6368, 6368, 6368, 6368,
+     6368, 6368, 6368, 6368, 6368, 6518, 6536, 6537, 6368, 6368,
+     6368, 6368, 6368, 6368, 6368, 6535, 6537, 6538, 6535, 6539,
+     6538, 6536, 6540, 6541, 6542, 6540, 6543, 6542, 6544, 6545,
+
+     6541, 6547, 6368, 6368, 6368, 6545, 6551, 6548, 6539, 6549,
+     6550, 6555, 6557, 6550, 6544, 6553, 6556, 6543, 6554, 6545,
+     6549, 6547, 6548, 6553, 6563, 6556, 6555, 6551, 6557, 6554,
+     6564, 6368, 6368, 6368, 6406, 6406, 6406, 6406, 6406, 6406,
+     6406, 6406, 6406, 6406, 6406, 6406, 6406, 6406, 6406, 6406,
+     6406, 6406, 6406, 6406, 6552, 6561, 6550, 6406, 6406, 6406,
+     6406, 6406, 6406, 6406, 6558, 6559, 6565, 6566, 6567, 6568,
+     6569, 6570, 6559, 6571, 6552, 6572, 6561, 6573, 6575, 6576,
+     6577, 6406, 6406, 6406, 6578, 6579, 6580, 6581, 6582, 6583,
+     6558, 6584, 6586, 6588, 6590, 6586, 6588, 6591, 6601, 6594,
+
+     6595, 6590, 6594, 6595, 6598, 6608, 6601, 6598, 6591, 6609,
+     6406, 6406, 6406, 6466, 6466, 6466, 6466, 6466, 6466, 6466,
+     6466, 6466, 6466, 6466, 6466, 6466, 6466, 6466, 6466, 6466,
+     6466, 6466, 6466, 6585, 6587, 6589, 6466, 6466, 6466, 6466,
+     6466, 6466, 6466, 6596, 6592, 6599, 6593, 6600, 6602, 6603,
+     6606, 6610, 6585, 6605, 6611, 6589, 6587, 6592, 6596, 6602,
+     6466, 6466, 6466, 6593, 6603, 6599, 6604, 6600, 6612, 6605,
+     6607, 6613, 6614, 6615, 6616, 6604, 6606, 6607, 6617, 6618,
+     6619, 6620, 6621, 6622, 6623, 6624, 6625, 6626, 6627, 6466,
+     6466, 6466, 6468, 6468, 6468, 6468, 6468, 6468, 6468, 6468,
+
+     6468, 6468, 6468, 6468, 6468, 6468, 6468, 6468, 6468, 6468,
+     6468, 6468, 6628, 6629, 6630, 6468, 6468, 6468, 6468, 6468,
+     6468, 6468, 6631, 6632, 6633, 6634, 6635, 6636, 6637, 6638,
+     6639, 6640, 6641, 6642, 6643, 6644, 6645, 6646, 6647, 6468,
+     6468, 6468, 6648, 6649, 6650, 6651, 6652, 6653, 6654, 6655,
+     6656, 6657, 6658, 6659, 6660, 6661, 6662, 6663, 6664, 6665,
+     6666, 6667, 6668, 6669, 6670, 6671, 6672, 6673, 6468, 6468,
+     6468, 6482, 6482, 6482, 6482, 6482, 6482, 6482, 6482, 6482,
+     6482, 6482, 6482, 6482, 6482, 6482, 6482, 6482, 6482, 6482,
+     6482, 6674, 6675, 6676, 6482, 6482, 6482, 6482, 6482, 6482,
+
+     6482, 6677, 6678, 6679, 6680, 6681, 6682, 6683, 6684, 6685,
+     6683, 6686, 6685, 6688, 6687, 6689, 6690, 6705, 6482, 6482,
+     6482, 6687, 6693, 6691, 6688, 6682, 6691, 6702, 6689, 6692,
+     6684, 6686, 6692, 6690, 6698, 6694, 6695, 6693, 6694, 6695,
+     6706, 6708, 6698, 6702, 6709, 6710, 6711, 6482, 6482, 6482,
+     6525, 6525, 6525, 6525, 6525, 6525, 6525, 6525, 6525, 6525,
+     6525, 6525, 6525, 6525, 6525, 6525, 6525, 6525, 6525, 6525,
+     6696, 6697, 6699, 6525, 6525, 6525, 6525, 6525, 6525, 6525,
+     6700, 6703, 6704, 6699, 6701, 6707, 6707, 6707, 6707, 6704,
+     6696, 6697, 6712, 6701, 6713, 6700, 6714, 6525, 6525, 6525,
+
+     6715, 6716, 6717, 6718, 6719, 6720, 6721, 6703, 6722, 6723,
+     6724, 6725, 6726, 6727, 6728, 6729, 6730, 6731, 6732, 6733,
+     6734, 6735, 6736, 6737, 6738, 6739, 6525, 6525, 6525, 6574,
+     6574, 6574, 6574, 6574, 6574, 6574, 6574, 6574, 6574, 6574,
+     6574, 6574, 6574, 6574, 6574, 6574, 6574, 6574, 6574, 6574,
+     6574, 6574, 6574, 6574, 6574, 6574, 6574, 6574, 6574, 6574,
+     6574, 6574, 6574, 6574, 6574, 6574, 6574, 6574, 6574, 6574,
+     6574, 6574, 6574, 6574, 6574, 6574, 6574, 6574, 6574, 6574,
+     6574, 6574, 6574, 6574, 6574, 6574, 6574, 6574, 6574, 6574,
+     6574, 6574, 6574, 6574, 6574, 6574, 6574, 6574, 6574, 6574,
+
+     6574, 6574, 6574, 6574, 6574, 6574, 6574, 6574, 6597, 6597,
+     6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597,
+     6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597,
+     6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597,
+     6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597,
+     6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597,
+     6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597,
+     6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597, 6597,
+     6597, 6597, 6597, 6597, 6597, 6597, 6597, 6740, 6741, 6742,
+     6743, 6744, 6745, 6746, 6747, 6748, 6749, 6750, 6751, 6752,
+
+     6753, 6754, 6755, 6756, 6757, 6758, 6759, 6759, 6759, 6759,
+     6760, 6761, 6762, 6763, 6764, 6765, 6766, 6767, 6768, 6769,
+     6770, 6771, 6772, 6773, 6774, 6775, 6776, 6777, 6778, 6779,
+     6780, 6781, 6782, 6783, 6784, 6785, 6783, 6786, 6785, 6787,
+     6789, 6788, 6790, 6793, 6791, 6792, 6787, 6791, 6792, 6796,
+     6797, 6782, 6788, 6789, 6798, 6799, 6784, 6786, 6793, 6790,
+     6794, 6795, 6798, 6794, 6795, 6800, 6799, 6801, 6802, 6796,
+     6797, 6803, 6804, 6805, 6806, 6807, 6801, 6808, 6809, 6804,
+     6800, 6810, 6811, 6812, 6802, 6813, 6814, 6815, 6816, 6817,
+     6818, 6819, 6820, 6821, 6822, 6823, 6824, 6803, 6825, 6826,
+
+     6827, 6828, 6829, 6830, 6831, 6832, 6833, 6834, 6835, 6836,
+     6837, 6838, 6839, 6840, 6841, 6842, 6843, 6844, 6845, 6846,
+     6847, 6848, 6849, 6850, 6851, 6852, 6853, 6854, 6855, 6856,
+     6857, 6855, 6858, 6857, 6859, 6861, 6860, 6862, 6865, 6863,
+     6864, 6859, 6863, 6864, 6868, 6869, 6854, 6860, 6861, 6870,
+     6871, 6856, 6858, 6865, 6862, 6866, 6867, 6870, 6866, 6867,
+     6872, 6871, 6873, 6874, 6868, 6869, 6875, 6876, 6877, 6878,
+     6879, 6873, 6882, 6879, 6876, 6872, 6883, 6880, 6884, 6874,
+     6880, 6886, 6885, 6888, 6889, 6890, 6891, 6892, 6893, 6893,
+     6893, 6893, 6875, 6894, 6897, 6884, 6885, 6896, 6896, 6896,
+
+     6896, 6898, 6899, 6901, 6893, 6900, 6900, 6900, 6900, 6893,
+     6902, 6903, 6903, 6903, 6903, 6905, 6912, 6914, 6896, 6904,
+     6904, 6904, 6904, 6906, 6906, 6906, 6906, 6907, 6907, 6907,
+     6907, 6908, 6908, 6908, 6908, 6915, 6909, 6909, 6909, 6909,
+     6910, 6910, 6910, 6910, 6906, 6911, 6911, 6911, 6911, 6893,
+     6895, 6895, 6895, 6895, 6918, 6923, 6895, 6909, 6913, 6913,
+     6913, 6913, 6916, 6916, 6916, 6916, 6917, 6917, 6917, 6917,
+     6924, 6895, 6919, 6919, 6919, 6919, 6926, 6895, 6927, 6913,
+     6928, 6930, 6931, 6916, 6920, 6920, 6920, 6920, 6921, 6921,
+     6921, 6921, 6943, 6919, 6922, 6922, 6922, 6922, 6895, 6895,
+
+     6943, 6895, 6895, 6895, 6967, 6969, 6977, 6895, 6895, 6895,
+     6895, 6895, 6978, 6895, 6979, 6980, 6895, 6895, 6895, 6895,
+     6925, 6925, 6925, 6925, 6913, 6981, 6982, 6983, 6916, 6929,
+     6929, 6929, 6929, 6932, 6932, 6932, 6932, 6933, 6933, 6933,
+     6933, 6934, 6934, 6934, 6934, 6935, 6935, 6935, 6935, 6936,
+     6936, 6936, 6936, 6937, 6937, 6937, 6937, 6984, 6933, 6985,
+     6933, 6986, 6934, 6987, 6934, 6988, 6935, 6989, 6935, 6990,
+     6936, 6991, 6936, 6992, 6937, 6994, 6937, 6938, 6938, 6938,
+     6938, 6995, 6934, 6939, 6939, 6939, 6939, 6992, 6939, 6996,
+     6999, 7001, 6939, 6941, 6941, 6941, 6941, 7002, 6938, 7003,
+
+     6938, 6942, 6942, 6942, 6942, 6936, 6944, 6944, 6944, 6944,
+     6993, 7004, 6935, 6993, 6941, 7005, 6941, 6945, 6945, 6945,
+     6945, 7007, 6942, 7006, 6942, 7008, 7006, 6944, 7009, 6944,
+     6946, 6946, 6946, 6946, 6947, 6947, 6947, 6947, 6945, 7010,
+     6945, 6948, 6948, 6948, 6948, 7014, 6949, 6949, 6949, 6949,
+     6950, 6950, 6950, 6950, 6941, 6947, 7015, 6947, 6951, 6951,
+     6951, 6951, 6948, 7011, 6948, 7016, 7011, 6949, 6944, 6949,
+     6945, 6950, 7018, 6950, 6952, 6952, 6952, 6952, 7019, 6951,
+     7020, 6951, 7021, 6953, 6953, 6953, 6953, 6954, 6954, 6954,
+     6954, 6955, 6955, 6955, 6955, 6952, 6956, 6956, 6956, 6956,
+
+     7022, 7023, 7013, 6950, 6953, 7013, 6953, 7024, 6954, 7026,
+     6954, 7027, 6955, 7028, 6955, 6957, 6957, 6957, 6957, 7031,
+     6960, 6960, 6960, 6960, 6951, 6958, 6958, 6958, 6958, 6959,
+     6959, 6959, 6959, 7033, 7017, 7034, 6957, 7017, 6957, 7035,
+     6954, 6960, 6953, 6955, 7025, 7036, 6958, 7025, 6958, 7037,
+     6959, 7070, 6959, 6961, 6961, 6961, 6961, 6962, 6962, 6962,
+     6962, 6963, 6963, 6963, 6963, 6964, 6964, 6964, 6964, 6965,
+     6965, 6965, 6965, 7039, 6961, 7056, 6961, 6957, 6962, 7071,
+     6962, 7072, 6963, 7073, 6963, 7041, 6964, 6958, 6964, 7039,
+     6965, 7056, 6965, 6966, 6966, 6966, 6966, 6968, 6968, 6968,
+
+     6968, 6970, 6970, 6970, 6970, 7038, 7030, 7040, 6962, 7030,
+     6962, 7041, 7032, 7043, 6966, 7032, 6966, 6970, 6964, 7042,
+     7047, 7048, 6970, 6962, 7040, 6962, 6962, 7049, 7051, 7052,
+     7038, 7054, 7053, 7051, 7043, 7055, 7042, 7057, 7054, 7061,
+     7055, 7047, 7052, 7057, 7049, 7053, 7066, 7048, 7074, 7075,
+     7076, 7077, 7061, 7066, 6970, 6971, 6971, 6971, 6971, 6971,
+     6971, 6971, 6971, 6971, 6971, 6971, 6971, 6971, 6971, 6971,
+     6971, 6971, 6971, 6971, 6971, 6971, 6971, 6971, 6971, 6971,
+     6971, 6971, 6971, 6971, 6971, 6971, 6971, 6971, 6971, 6971,
+     6971, 6971, 6971, 6971, 6971, 6971, 6971, 6971, 6971, 6971,
+
+     6971, 6971, 6971, 6971, 6971, 6971, 6971, 6971, 6971, 6971,
+     6971, 6971, 6971, 6971, 6971, 6971, 6971, 6971, 6971, 6971,
+     6971, 6971, 6971, 6971, 6971, 6971, 6971, 6971, 6971, 6971,
+     6971, 6971, 6971, 6971, 6972, 6972, 6972, 6972, 6972, 6972,
+     6972, 6972, 6972, 6972, 6972, 6972, 6972, 6972, 6972, 6972,
+     6972, 6972, 6972, 6972, 7059, 7064, 7065, 6972, 6972, 6972,
+     6972, 6972, 6972, 6972, 7060, 7067, 7069, 7065, 7078, 7079,
+     7080, 7059, 7068, 7081, 7082, 7083, 7064, 7084, 7085, 7067,
+     7069, 6972, 6972, 6972, 7029, 7087, 7088, 7029, 7044, 7046,
+     7060, 7044, 7046, 7086, 7068, 7089, 7086, 7050, 7058, 7062,
+
+     7050, 7058, 7062, 7063, 7090, 7091, 7063, 7092, 7093, 7094,
+     6972, 6972, 6972, 6997, 6997, 6997, 6997, 6997, 6997, 6997,
+     6997, 6997, 6997, 6997, 6997, 6997, 6997, 6997, 6997, 6997,
+     6997, 6997, 6997, 7029, 7044, 7046, 6997, 6997, 6997, 6997,
+     6997, 6997, 6997, 7050, 7058, 7062, 7097, 7099, 7062, 7063,
+     7100, 7101, 7102, 7103, 7104, 7105, 7106, 7107, 7109, 7110,
+     6997, 6997, 6997, 7108, 7111, 7112, 7108, 7113, 7114, 7115,
+     7113, 7116, 7117, 7118, 7119, 7120, 7121, 7122, 7123, 7124,
+     7122, 7125, 7126, 7129, 7130, 7126, 7129, 7131, 7132, 6997,
+     6997, 6997, 7095, 7095, 7095, 7095, 7095, 7095, 7095, 7095,
+
+     7095, 7095, 7095, 7095, 7095, 7095, 7095, 7095, 7095, 7095,
+     7095, 7095, 7133, 7134, 7135, 7095, 7095, 7095, 7095, 7095,
+     7095, 7095, 7136, 7139, 7150, 7141, 7137, 7138, 7140, 7143,
+     7145, 7126, 7143, 7146, 7144, 7147, 7162, 7150, 7149, 7095,
+     7095, 7095, 7137, 7149, 7138, 7140, 7141, 7136, 7151, 7139,
+     7144, 7145, 7147, 7148, 7152, 7153, 7148, 7155, 7156, 7146,
+     7154, 7158, 7153, 7151, 7156, 7154, 7159, 7152, 7095, 7095,
+     7095, 7157, 7160, 7155, 7157, 7143, 7161, 7163, 7158, 7161,
+     7164, 7165, 7166, 7164, 7167, 7160, 7168, 7169, 7171, 7170,
+     7173, 7167, 7159, 7166, 7172, 7174, 7175, 7172, 7176, 7148,
+
+     7168, 7177, 7165, 7170, 7178, 7179, 7180, 7181, 7179, 7169,
+     7182, 7183, 7184, 7183, 7187, 7188, 7189, 7157, 7190, 7191,
+     7192, 7193, 7161, 7194, 7195, 7161, 7164, 7196, 7197, 7198,
+     7196, 7200, 7199, 7200, 7190, 7202, 7191, 7192, 7203, 7194,
+     7172, 7197, 7193, 7201, 7198, 7199, 7204, 7205, 7206, 7201,
+     7195, 7207, 7208, 7209, 7210, 7211, 7212, 7213, 7214, 7215,
+     7204, 7216, 7206, 7217, 7220, 7221, 7222, 7223, 7224, 7205,
+     7223, 7224, 7225, 7196, 7226, 7227, 7228, 7223, 7229, 7230,
+     7231, 7232, 7233, 7234, 7235, 7236, 7237, 7238, 7239, 7240,
+     7241, 7242, 7243, 7244, 7245, 7246, 7247, 7248, 7249, 7250,
+
+     7251, 7252, 7253, 7254, 7255, 7256, 7254, 7257, 7258, 7259,
+     7262, 7263, 7264, 7265, 7266, 7267, 7268, 7269, 7270, 7271,
+     7273, 7272, 7271, 7274, 7277, 7275, 7278, 7279, 7280, 7265,
+     7275, 7266, 7267, 7269, 7272, 7273, 7274, 7268, 7281, 7276,
+     7282, 7279, 7283, 7284, 7270, 7276, 7285, 7286, 7287, 7288,
+     7280, 7289, 7281, 7290, 7291, 7292, 7293, 7294, 7295, 7296,
+     7297, 7298, 7299, 7300, 7301, 7271, 7302, 7303, 7304, 7305,
+     7306, 7307, 7308, 7309, 7310, 7311, 7312, 7313, 7314, 7315,
+     7316, 7317, 7318, 7319, 7320, 7321, 7322, 7323, 7324, 7325,
+     7326, 7327, 7328, 7329, 7330, 7331, 7332, 7333, 7334, 7335,
+
+     7336, 7334, 7337, 7338, 7339, 7342, 7343, 7344, 7345, 7346,
+     7347, 7348, 7349, 7350, 7351, 7353, 7352, 7351, 7354, 7357,
+     7355, 7358, 7359, 7360, 7345, 7355, 7346, 7347, 7349, 7352,
+     7353, 7354, 7348, 7361, 7356, 7362, 7359, 7363, 7364, 7350,
+     7356, 7365, 7366, 7367, 7368, 7360, 7369, 7361, 7370, 7371,
+     7372, 7373, 7374, 7375, 7376, 7377, 7378, 7379, 7380, 7381,
+     7351, 7382, 7383, 7384, 7385, 7386, 7387, 7388, 7389, 7390,
+     7391, 7392, 7393, 7391, 7394, 7395, 7396, 7399, 7400, 7401,
+     7402, 7403, 7404, 7405, 7406, 7407, 7408, 7410, 7409, 7408,
+     7411, 7414, 7412, 7415, 7416, 7417, 7402, 7412, 7403, 7404,
+
+     7406, 7409, 7410, 7411, 7405, 7418, 7413, 7419, 7416, 7420,
+     7421, 7407, 7413, 7423, 7422, 7421, 7423, 7417, 7429, 7418,
+     7422, 7430, 7431, 7432, 7433, 7433, 7433, 7433, 7436, 7436,
+     7436, 7436, 7408, 7424, 7424, 7424, 7424, 7424, 7424, 7424,
+     7424, 7424, 7424, 7424, 7424, 7424, 7424, 7424, 7424, 7424,
+     7424, 7424, 7424, 7424, 7424, 7424, 7424, 7424, 7424, 7424,
+     7424, 7424, 7424, 7424, 7424, 7424, 7424, 7424, 7424, 7424,
+     7424, 7424, 7424, 7424, 7424, 7424, 7424, 7424, 7424, 7424,
+     7424, 7424, 7424, 7424, 7424, 7424, 7424, 7424, 7424, 7424,
+     7424, 7424, 7424, 7424, 7424, 7424, 7424, 7424, 7424, 7424,
+
+     7424, 7424, 7424, 7424, 7424, 7424, 7424, 7424, 7424, 7424,
+     7424, 7424, 7425, 7438, 7439, 7425, 7437, 7437, 7437, 7437,
+     7440, 7440, 7440, 7440, 7441, 7441, 7441, 7441, 7442, 7443,
+     7443, 7443, 7443, 7444, 7448, 7451, 7452, 7437, 7445, 7445,
+     7445, 7445, 7447, 7447, 7447, 7447, 7450, 7450, 7450, 7450,
+     7453, 7454, 7456, 7456, 7456, 7456, 7459, 7462, 7425, 7426,
+     7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
+     7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
+     7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
+     7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
+
+     7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
+     7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
+     7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426,
+     7426, 7426, 7426, 7426, 7426, 7426, 7426, 7426, 7434, 7434,
+     7434, 7434, 7446, 7446, 7446, 7446, 7449, 7449, 7449, 7449,
+     7455, 7455, 7455, 7455, 7434, 7457, 7457, 7457, 7457, 7434,
+     7463, 7465, 7474, 7446, 7486, 7487, 7488, 7449, 7489, 7490,
+     7499, 7455, 7458, 7458, 7458, 7458, 7460, 7460, 7460, 7460,
+     7461, 7461, 7461, 7461, 7464, 7464, 7464, 7464, 7466, 7466,
+     7466, 7466, 7467, 7467, 7467, 7467, 7468, 7468, 7468, 7468,
+
+     7473, 7473, 7473, 7473, 7500, 7434, 7457, 7501, 7457, 7502,
+     7505, 7503, 7449, 7467, 7503, 7467, 7506, 7468, 7507, 7468,
+     7508, 7457, 7509, 7457, 7457, 7469, 7469, 7469, 7469, 7470,
+     7470, 7470, 7470, 7511, 7512, 7514, 7467, 7471, 7471, 7471,
+     7471, 7472, 7472, 7472, 7472, 7515, 7469, 7517, 7469, 7518,
+     7470, 7519, 7470, 7520, 7475, 7475, 7475, 7475, 7471, 7522,
+     7471, 7523, 7472, 7504, 7472, 7526, 7504, 7529, 7468, 7476,
+     7476, 7476, 7476, 7510, 7473, 7475, 7510, 7475, 7469, 7478,
+     7478, 7478, 7478, 7531, 7479, 7479, 7479, 7479, 7513, 7533,
+     7476, 7513, 7476, 7484, 7484, 7484, 7484, 7493, 7493, 7493,
+
+     7493, 7494, 7494, 7494, 7494, 7479, 7535, 7479, 7495, 7495,
+     7495, 7495, 7537, 7538, 7541, 7475, 7477, 7477, 7477, 7477,
+     7477, 7477, 7477, 7477, 7477, 7477, 7477, 7477, 7477, 7477,
+     7477, 7477, 7477, 7477, 7477, 7477, 7544, 7513, 7546, 7477,
+     7477, 7477, 7477, 7477, 7477, 7477, 7479, 7480, 7480, 7480,
+     7480, 7481, 7481, 7481, 7481, 7482, 7482, 7482, 7482, 7483,
+     7483, 7483, 7483, 7477, 7477, 7477, 7521, 7547, 7480, 7521,
+     7480, 7548, 7481, 7550, 7481, 7562, 7482, 7577, 7482, 7553,
+     7483, 7554, 7483, 7485, 7485, 7485, 7485, 7491, 7491, 7491,
+     7491, 7554, 7477, 7477, 7477, 7492, 7492, 7492, 7492, 7524,
+
+     7525, 7553, 7524, 7525, 7485, 7578, 7485, 7579, 7491, 7527,
+     7491, 7528, 7527, 7480, 7528, 7563, 7492, 7481, 7492, 7580,
+     7483, 7560, 7482, 7496, 7496, 7496, 7496, 7532, 7536, 7539,
+     7532, 7536, 7539, 7540, 7542, 7543, 7540, 7542, 7543, 7496,
+     7545, 7563, 7560, 7545, 7496, 7558, 7492, 7557, 7552, 7555,
+     7556, 7552, 7555, 7556, 7557, 7561, 7558, 7564, 7581, 7582,
+     7564, 7492, 7561, 7492, 7530, 7530, 7530, 7530, 7530, 7530,
+     7530, 7530, 7530, 7530, 7530, 7530, 7530, 7530, 7530, 7530,
+     7530, 7530, 7530, 7530, 7566, 7572, 7570, 7530, 7530, 7530,
+     7530, 7530, 7530, 7530, 7552, 7555, 7556, 7565, 7568, 7570,
+
+     7583, 7572, 7573, 7564, 7565, 7571, 7566, 7573, 7568, 7575,
+     7584, 7530, 7530, 7530, 7585, 7586, 7571, 7567, 7569, 7587,
+     7567, 7569, 7590, 7591, 7592, 7593, 7575, 7595, 7596, 7597,
+     7598, 7599, 7600, 7601, 7599, 7602, 7603, 7604, 7602, 7603,
+     7530, 7530, 7530, 7549, 7549, 7549, 7549, 7549, 7549, 7549,
+     7549, 7549, 7549, 7549, 7549, 7549, 7549, 7549, 7549, 7549,
+     7549, 7549, 7549, 7567, 7569, 7605, 7549, 7549, 7549, 7549,
+     7549, 7549, 7549, 7606, 7608, 7609, 7611, 7612, 7613, 7614,
+     7615, 7613, 7616, 7617, 7618, 7616, 7619, 7618, 7620, 7619,
+     7549, 7549, 7549, 7621, 7622, 7623, 7625, 7627, 7629, 7633,
+
+     7627, 7634, 7638, 7657, 7632, 7645, 7630, 7631, 7629, 7630,
+     7631, 7632, 7634, 7641, 7633, 7645, 7641, 7658, 7659, 7549,
+     7549, 7549, 7551, 7551, 7551, 7551, 7551, 7551, 7551, 7551,
+     7551, 7551, 7551, 7551, 7551, 7551, 7551, 7551, 7551, 7551,
+     7551, 7551, 7628, 7627, 7636, 7551, 7551, 7551, 7551, 7551,
+     7551, 7551, 7630, 7631, 7637, 7639, 7640, 7643, 7650, 7641,
+     7642, 7637, 7649, 7660, 7628, 7636, 7653, 7642, 7648, 7551,
+     7551, 7551, 7662, 7649, 7650, 7644, 7639, 7646, 7644, 7643,
+     7646, 7648, 7640, 7653, 7651, 7647, 7663, 7655, 7647, 7651,
+     7655, 7656, 7665, 7666, 7656, 7665, 7672, 7679, 7551, 7551,
+
+     7551, 7559, 7559, 7559, 7559, 7559, 7559, 7559, 7559, 7559,
+     7559, 7559, 7559, 7559, 7559, 7559, 7559, 7559, 7559, 7559,
+     7559, 7644, 7668, 7646, 7559, 7559, 7559, 7559, 7559, 7559,
+     7559, 7647, 7669, 7670, 7673, 7674, 7671, 7680, 7681, 7677,
+     7670, 7682, 7669, 7683, 7668, 7684, 7685, 7686, 7559, 7559,
+     7559, 7671, 7690, 7691, 7676, 7673, 7677, 7676, 7692, 7687,
+     7688, 7674, 7687, 7688, 7689, 7693, 7694, 7689, 7695, 7687,
+     7696, 7688, 7697, 7698, 7699, 7700, 7703, 7559, 7559, 7559,
+     7574, 7574, 7574, 7574, 7574, 7574, 7574, 7574, 7574, 7574,
+     7574, 7574, 7574, 7574, 7574, 7574, 7574, 7574, 7574, 7574,
+
+     7676, 7704, 7705, 7574, 7574, 7574, 7574, 7574, 7574, 7574,
+     7706, 7707, 7708, 7709, 7710, 7711, 7712, 7713, 7714, 7716,
+     7715, 7717, 7718, 7719, 7720, 7721, 7716, 7574, 7574, 7574,
+     7715, 7720, 7722, 7723, 7724, 7725, 7717, 7726, 7727, 7728,
+     7714, 7729, 7721, 7718, 7730, 7731, 7732, 7735, 7736, 7719,
+     7737, 7738, 7739, 7740, 7741, 7742, 7574, 7574, 7574, 7576,
+     7576, 7576, 7576, 7576, 7576, 7576, 7576, 7576, 7576, 7576,
+     7576, 7576, 7576, 7576, 7576, 7576, 7576, 7576, 7576, 7743,
+     7744, 7745, 7576, 7576, 7576, 7576, 7576, 7576, 7576, 7746,
+     7747, 7748, 7751, 7752, 7753, 7754, 7755, 7756, 7757, 7758,
+
+     7759, 7760, 7761, 7762, 7763, 7764, 7576, 7576, 7576, 7765,
+     7766, 7768, 7764, 7769, 7763, 7770, 7771, 7772, 7768, 7773,
+     7774, 7775, 7776, 7777, 7765, 7762, 7778, 7779, 7780, 7783,
+     7769, 7766, 7767, 7784, 7785, 7576, 7576, 7576, 7607, 7607,
+     7607, 7607, 7607, 7607, 7607, 7607, 7607, 7607, 7607, 7607,
+     7607, 7607, 7607, 7607, 7607, 7607, 7607, 7607, 7767, 7786,
+     7787, 7607, 7607, 7607, 7607, 7607, 7607, 7607, 7788, 7789,
+     7790, 7791, 7792, 7793, 7794, 7796, 7797, 7798, 7795, 7799,
+     7801, 7802, 7796, 7800, 7805, 7607, 7607, 7607, 7795, 7809,
+     7800, 7797, 7803, 7810, 7811, 7812, 7794, 7801, 7798, 7803,
+
+     7804, 7813, 7818, 7804, 7819, 7799, 7814, 7814, 7814, 7814,
+     7820, 7820, 7820, 7820, 7607, 7607, 7607, 7624, 7624, 7624,
+     7624, 7624, 7624, 7624, 7624, 7624, 7624, 7624, 7624, 7624,
+     7624, 7624, 7624, 7624, 7624, 7624, 7624, 7825, 7826, 7828,
+     7624, 7624, 7624, 7624, 7624, 7624, 7624, 7817, 7817, 7817,
+     7817, 7815, 7815, 7815, 7815, 7821, 7821, 7821, 7821, 7822,
+     7822, 7822, 7822, 7831, 7624, 7624, 7624, 7815, 7817, 7841,
+     7846, 7847, 7815, 7823, 7823, 7823, 7823, 7824, 7824, 7824,
+     7824, 7829, 7829, 7829, 7829, 7830, 7830, 7830, 7830, 7832,
+     7832, 7832, 7832, 7624, 7624, 7624, 7626, 7626, 7626, 7626,
+
+     7626, 7626, 7626, 7626, 7626, 7626, 7626, 7626, 7626, 7626,
+     7626, 7626, 7626, 7626, 7626, 7626, 7855, 7815, 7858, 7626,
+     7626, 7626, 7626, 7626, 7626, 7626, 7859, 7862, 7863, 7827,
+     7827, 7827, 7827, 7865, 7868, 7869, 7830, 7833, 7833, 7833,
+     7833, 7870, 7872, 7626, 7626, 7626, 7834, 7834, 7834, 7834,
+     7827, 7830, 7874, 7830, 7878, 7839, 7839, 7839, 7839, 7856,
+     7856, 7856, 7856, 7860, 7861, 7864, 7860, 7861, 7864, 7879,
+     7886, 7890, 7626, 7626, 7626, 7635, 7635, 7635, 7635, 7635,
+     7635, 7635, 7635, 7635, 7635, 7635, 7635, 7635, 7635, 7635,
+     7635, 7635, 7635, 7635, 7635, 7827, 7891, 7892, 7635, 7635,
+
+     7635, 7635, 7635, 7635, 7635, 7835, 7835, 7835, 7835, 7836,
+     7836, 7836, 7836, 7838, 7838, 7838, 7838, 7843, 7843, 7843,
+     7843, 7893, 7635, 7635, 7635, 7899, 7835, 7915, 7835, 7839,
+     7836, 7899, 7836, 7916, 7838, 7918, 7838, 7919, 7843, 7866,
+     7843, 7867, 7866, 7873, 7867, 7876, 7873, 7877, 7876, 7920,
+     7877, 7635, 7635, 7635, 7652, 7652, 7652, 7652, 7652, 7652,
+     7652, 7652, 7652, 7652, 7652, 7652, 7652, 7652, 7652, 7652,
+     7652, 7652, 7652, 7652, 7921, 7908, 7922, 7652, 7652, 7652,
+     7652, 7652, 7652, 7652, 7924, 7925, 7927, 7848, 7848, 7848,
+     7848, 7850, 7850, 7850, 7850, 7908, 7911, 7849, 7849, 7849,
+
+     7849, 7652, 7652, 7652, 7842, 7842, 7842, 7842, 7848, 7929,
+     7848, 7881, 7850, 7882, 7881, 7931, 7882, 7911, 7849, 7884,
+     7849, 7885, 7884, 7887, 7885, 7842, 7887, 7842, 7932, 7938,
+     7652, 7652, 7652, 7654, 7654, 7654, 7654, 7654, 7654, 7654,
+     7654, 7654, 7654, 7654, 7654, 7654, 7654, 7654, 7654, 7654,
+     7654, 7654, 7654, 7940, 7848, 7842, 7654, 7654, 7654, 7654,
+     7654, 7654, 7654, 7849, 7910, 7941, 7942, 7857, 7857, 7857,
+     7857, 7888, 7889, 7895, 7888, 7889, 7895, 7897, 7906, 7910,
+     7654, 7654, 7654, 7857, 7900, 7943, 7909, 7900, 7857, 7909,
+     7917, 7946, 7964, 7917, 7897, 7906, 7923, 7928, 7934, 7923,
+
+     7928, 7934, 7935, 7937, 7939, 7935, 7937, 7939, 7946, 7654,
+     7654, 7654, 7664, 7664, 7664, 7664, 7664, 7664, 7664, 7664,
+     7664, 7664, 7664, 7664, 7664, 7664, 7664, 7664, 7664, 7664,
+     7664, 7664, 7664, 7664, 7664, 7664, 7664, 7664, 7664, 7664,
+     7664, 7664, 7664, 7664, 7664, 7664, 7664, 7664, 7664, 7664,
+     7664, 7664, 7664, 7664, 7664, 7664, 7664, 7664, 7664, 7664,
+     7664, 7664, 7664, 7664, 7664, 7664, 7664, 7664, 7664, 7664,
+     7664, 7664, 7664, 7664, 7664, 7664, 7664, 7664, 7664, 7664,
+     7664, 7664, 7664, 7664, 7664, 7664, 7664, 7664, 7664, 7664,
+     7664, 7675, 7675, 7675, 7675, 7675, 7675, 7675, 7675, 7675,
+
+     7675, 7675, 7675, 7675, 7675, 7675, 7675, 7675, 7675, 7675,
+     7675, 7675, 7675, 7675, 7675, 7675, 7675, 7675, 7675, 7675,
+     7675, 7675, 7675, 7675, 7675, 7675, 7675, 7675, 7675, 7675,
+     7675, 7675, 7675, 7675, 7675, 7675, 7675, 7675, 7675, 7675,
+     7675, 7675, 7675, 7675, 7675, 7675, 7675, 7675, 7675, 7675,
+     7675, 7675, 7675, 7675, 7675, 7675, 7675, 7675, 7675, 7675,
+     7675, 7675, 7675, 7675, 7675, 7675, 7675, 7675, 7675, 7675,
+     7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807,
+     7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807,
+     7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807,
+
+     7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807,
+     7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807,
+     7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807,
+     7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807,
+     7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807, 7807, 7808,
+     7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808,
+     7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808,
+     7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808,
+     7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808,
+     7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808,
+
+     7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808,
+     7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808,
+     7808, 7808, 7808, 7808, 7808, 7808, 7808, 7808, 7816, 7816,
+     7816, 7816, 7902, 7945, 7816, 7902, 7945, 7955, 7837, 7837,
+     7837, 7837, 7853, 7853, 7853, 7853, 7948, 7949, 7957, 7816,
+     7949, 7959, 7948, 7958, 7955, 7816, 7958, 7966, 7970, 7837,
+     7972, 7837, 7960, 7853, 7970, 7853, 7959, 7968, 7957, 7973,
+     7976, 7974, 7903, 7977, 7974, 7903, 7816, 7816, 7902, 7816,
+     7816, 7816, 7974, 7960, 7968, 7816, 7816, 7816, 7816, 7816,
+     7837, 7816, 7978, 7853, 7816, 7816, 7816, 7816, 7845, 7845,
+
+     7845, 7845, 7845, 7845, 7845, 7845, 7845, 7845, 7845, 7845,
+     7845, 7845, 7845, 7845, 7845, 7845, 7845, 7845, 7903, 7979,
+     7980, 7845, 7845, 7845, 7845, 7845, 7845, 7845, 7845, 7845,
+     7845, 7845, 7845, 7845, 7845, 7845, 7845, 7845, 7845, 7845,
+     7845, 7845, 7845, 7845, 7845, 7845, 7845, 7845, 7845, 7845,
+     7845, 7845, 7845, 7845, 7845, 7845, 7845, 7845, 7845, 7845,
+     7845, 7845, 7845, 7845, 7845, 7845, 7845, 7845, 7845, 7845,
+     7845, 7845, 7845, 7845, 7845, 7845, 7845, 7851, 7851, 7851,
+     7851, 7852, 7852, 7852, 7852, 7905, 7907, 7913, 7905, 7907,
+     7913, 7951, 7952, 7954, 7951, 7952, 7954, 7981, 7851, 7982,
+
+     7851, 7983, 7852, 7984, 7852, 7986, 7989, 7987, 7990, 7991,
+     7992, 7993, 7989, 7994, 7995, 7996, 7997, 7998, 7999, 8000,
+     8001, 8002, 7956, 7962, 7987, 7956, 7962, 8003, 8004, 8005,
+     8006, 7905, 7907, 7913, 8008, 8011, 7851, 7951, 7952, 7954,
+     8012, 8011, 8013, 8014, 8015, 8016, 8017, 7852, 7871, 7871,
+     7871, 7871, 7871, 7871, 7871, 7871, 7871, 7871, 7871, 7871,
+     7871, 7871, 7871, 7871, 7871, 7871, 7871, 7871, 7956, 7962,
+     8009, 7871, 7871, 7871, 7871, 7871, 7871, 7871, 8018, 8019,
+     8020, 8022, 8023, 8025, 8026, 8027, 8028, 8009, 8029, 8025,
+     8030, 8030, 8030, 8030, 8034, 7871, 7871, 7871, 8038, 8023,
+
+     8032, 8032, 8032, 8032, 8041, 8042, 8030, 8035, 8035, 8035,
+     8035, 8030, 8036, 8036, 8036, 8036, 8037, 8037, 8037, 8037,
+     8043, 8032, 8056, 8057, 7871, 7871, 7871, 7875, 7875, 7875,
+     7875, 7875, 7875, 7875, 7875, 7875, 7875, 7875, 7875, 7875,
+     7875, 7875, 7875, 7875, 7875, 7875, 7875, 8061, 8063, 8070,
+     7875, 7875, 7875, 7875, 7875, 7875, 7875, 8033, 8033, 8033,
+     8033, 8039, 8039, 8039, 8039, 8040, 8040, 8040, 8040, 8044,
+     8044, 8044, 8044, 8075, 7875, 7875, 7875, 8058, 8033, 8077,
+     8058, 8078, 8039, 8045, 8045, 8045, 8045, 8052, 8052, 8052,
+     8052, 8059, 8060, 8062, 8059, 8060, 8062, 8066, 8067, 8071,
+
+     8066, 8067, 8071, 7875, 7875, 7875, 7883, 7883, 7883, 7883,
+     7883, 7883, 7883, 7883, 7883, 7883, 7883, 7883, 7883, 7883,
+     7883, 7883, 7883, 7883, 7883, 7883, 8080, 8039, 8092, 7883,
+     7883, 7883, 7883, 7883, 7883, 7883, 8046, 8046, 8046, 8046,
+     8047, 8047, 8047, 8047, 8050, 8050, 8050, 8050, 8093, 8051,
+     8051, 8051, 8051, 7883, 7883, 7883, 8096, 8046, 8102, 8046,
+     8072, 8047, 8074, 8072, 8076, 8074, 8079, 8076, 8050, 8079,
+     8051, 8081, 8051, 8094, 8081, 8082, 8094, 8095, 8082, 8104,
+     8095, 8105, 7883, 7883, 7883, 7898, 7898, 7898, 7898, 7898,
+     7898, 7898, 7898, 7898, 7898, 7898, 7898, 7898, 7898, 7898,
+
+     7898, 7898, 7898, 7898, 7898, 8106, 8108, 8085, 7898, 7898,
+     7898, 7898, 7898, 7898, 7898, 8051, 8054, 8054, 8054, 8054,
+     8085, 8082, 8053, 8053, 8053, 8053, 8088, 8087, 8089, 8091,
+     8121, 8122, 7898, 7898, 7898, 8123, 8124, 8054, 8087, 8054,
+     8091, 8089, 8088, 8053, 8099, 8053, 8100, 8099, 8090, 8100,
+     8107, 8090, 8109, 8107, 8125, 8109, 8117, 8126, 8127, 8117,
+     8128, 7898, 7898, 7898, 7904, 7904, 7904, 7904, 7904, 7904,
+     7904, 7904, 7904, 7904, 7904, 7904, 7904, 7904, 7904, 7904,
+     7904, 7904, 7904, 7904, 8053, 8114, 8112, 7904, 7904, 7904,
+     7904, 7904, 7904, 7904, 8090, 8116, 8114, 8129, 8109, 8112,
+
+     8115, 8130, 8117, 8118, 8131, 8137, 8138, 8140, 8116, 8150,
+     8153, 7904, 7904, 7904, 8118, 8154, 8115, 8132, 8132, 8132,
+     8132, 8133, 8133, 8133, 8133, 8136, 8136, 8136, 8136, 8141,
+     8141, 8141, 8141, 8149, 8151, 8156, 8149, 8151, 8132, 8158,
+     7904, 7904, 7904, 7926, 7926, 7926, 7926, 7926, 7926, 7926,
+     7926, 7926, 7926, 7926, 7926, 7926, 7926, 7926, 7926, 7926,
+     7926, 7926, 7926, 8166, 8167, 8169, 7926, 7926, 7926, 7926,
+     7926, 7926, 7926, 8134, 8134, 8134, 8134, 8135, 8135, 8135,
+     8135, 8139, 8139, 8139, 8139, 8142, 8142, 8142, 8142, 8161,
+     7926, 7926, 7926, 8155, 8134, 8160, 8155, 8157, 8135, 8163,
+
+     8157, 8164, 8139, 8170, 8161, 8165, 8160, 8172, 8165, 8142,
+     8163, 8168, 8177, 8181, 8168, 8184, 8190, 8164, 8172, 7926,
+     7926, 7926, 7930, 7930, 7930, 7930, 7930, 7930, 7930, 7930,
+     7930, 7930, 7930, 7930, 7930, 7930, 7930, 7930, 7930, 7930,
+     7930, 7930, 8191, 8193, 8194, 7930, 7930, 7930, 7930, 7930,
+     7930, 7930, 8143, 8143, 8143, 8143, 8145, 8145, 8145, 8145,
+     8147, 8147, 8147, 8147, 8146, 8146, 8146, 8146, 8176, 7930,
+     7930, 7930, 8148, 8148, 8148, 8148, 8143, 8145, 8199, 8145,
+     8173, 8147, 8200, 8147, 8176, 8146, 8162, 8146, 8174, 8162,
+     8201, 8174, 8202, 8148, 8189, 8173, 8195, 8189, 7930, 7930,
+
+     7930, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936,
+     7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936,
+     7936, 8211, 8175, 8195, 7936, 7936, 7936, 7936, 7936, 7936,
+     7936, 8146, 8162, 8175, 8174, 8178, 8178, 8178, 8178, 8179,
+     8179, 8179, 8179, 8180, 8180, 8180, 8180, 8197, 7936, 7936,
+     7936, 8182, 8182, 8182, 8182, 8183, 8183, 8183, 8183, 8192,
+     8179, 8196, 8192, 8212, 8180, 8188, 8188, 8188, 8188, 8215,
+     8196, 8217, 8182, 8203, 8197, 8205, 8223, 7936, 7936, 7936,
+     7947, 7947, 7947, 7947, 7947, 7947, 7947, 7947, 7947, 7947,
+     7947, 7947, 7947, 7947, 7947, 7947, 7947, 7947, 7947, 7947,
+
+     8203, 8225, 8205, 7947, 7947, 7947, 7947, 7947, 7947, 7947,
+     8185, 8185, 8185, 8185, 8186, 8186, 8186, 8186, 8237, 8198,
+     8239, 8204, 8206, 8187, 8187, 8187, 8187, 7947, 7947, 7947,
+     8204, 8185, 8244, 8185, 8198, 8186, 8219, 8206, 8207, 8207,
+     8207, 8207, 8218, 8219, 8187, 8218, 8187, 8210, 8210, 8210,
+     8210, 8213, 8213, 8213, 8213, 8245, 7947, 7947, 7947, 7953,
+     7953, 7953, 7953, 7953, 7953, 7953, 7953, 7953, 7953, 7953,
+     7953, 7953, 7953, 7953, 7953, 7953, 7953, 7953, 7953, 2908,
+     2906, 2905, 7953, 7953, 7953, 7953, 7953, 7953, 7953, 8187,
+     8208, 8208, 8208, 8208, 8209, 8209, 8209, 8209, 8214, 8214,
+
+     8214, 8214, 8221, 8241, 2903, 8227, 7953, 7953, 7953, 8221,
+     8226, 8208, 8227, 8226, 8240, 8209, 8229, 8240, 2902, 8214,
+     2901, 8214, 8241, 8229, 8231, 8231, 8231, 8231, 8234, 8234,
+     8234, 8234, 2897, 2896, 2884, 7953, 7953, 7953, 7967, 7967,
+     7967, 7967, 7967, 7967, 7967, 7967, 7967, 7967, 7967, 7967,
+     7967, 7967, 7967, 7967, 7967, 7967, 7967, 7967, 7967, 7967,
+     7967, 7967, 7967, 7967, 7967, 7967, 7967, 7967, 7967, 7967,
+     7967, 7967, 7967, 7967, 7967, 7967, 7967, 7967, 7967, 7967,
+     7967, 7967, 7967, 7967, 7967, 7967, 7967, 7967, 7967, 7967,
+     7967, 7967, 7967, 7967, 7967, 7967, 7967, 7967, 7967, 7967,
+
+     7967, 7967, 7967, 7967, 7967, 7967, 7967, 7967, 7967, 7967,
+     7967, 7967, 7967, 7967, 7967, 7967, 7967, 7971, 7971, 7971,
+     7971, 7971, 7971, 7971, 7971, 7971, 7971, 7971, 7971, 7971,
+     7971, 7971, 7971, 7971, 7971, 7971, 7971, 7971, 7971, 7971,
+     7971, 7971, 7971, 7971, 7971, 7971, 7971, 7971, 7971, 7971,
+     7971, 7971, 7971, 7971, 7971, 7971, 7971, 7971, 7971, 7971,
+     7971, 7971, 7971, 7971, 7971, 7971, 7971, 7971, 7971, 7971,
+     7971, 7971, 7971, 7971, 7971, 7971, 7971, 7971, 7971, 7971,
+     7971, 7971, 7971, 7971, 7971, 7971, 7971, 7971, 7971, 7971,
+     7971, 7971, 7971, 7971, 7971, 7971, 8031, 8031, 8031, 8031,
+
+     8222, 2881, 8031, 8222, 2879, 8048, 8048, 8048, 8048, 8232,
+     8232, 8232, 8232, 8055, 8055, 8055, 8055, 8031, 8233, 8233,
+     8233, 8233, 2877, 8031, 2875, 8482, 8048, 2870, 8048, 8482,
+     8232, 8243, 8246, 8248, 8055, 2818, 8055, 2817, 2816, 8233,
+     8236, 8236, 8236, 8236, 8031, 8031, 8222, 8031, 8031, 8031,
+     8243, 8246, 8248, 8031, 8031, 8031, 8031, 8031, 8048, 8031,
+     2815, 8236, 8031, 8031, 8031, 8031, 8055, 8069, 8069, 8069,
+     8069, 8069, 8069, 8069, 8069, 8069, 8069, 8069, 8069, 8069,
+     8069, 8069, 8069, 8069, 8069, 8069, 8069, 2814, 2813, 2812,
+     8069, 8069, 8069, 8069, 8069, 8069, 8069, 2811, 8235, 8235,
+
+     8235, 8235, 8249, 8249, 8249, 8249, 8250, 8250, 8250, 8250,
+     8251, 8251, 8251, 8251, 8069, 8069, 8069, 8492, 8491, 8235,
+     8230, 8235, 8491, 8230, 8492, 8505, 8507, 8250, 8492, 8505,
+     8507, 8251, 8252, 8252, 8252, 8252, 8253, 8253, 8253, 8253,
+     2810, 2809, 2808, 8069, 8069, 8069, 8084, 8084, 8084, 8084,
+     8084, 8084, 8084, 8084, 8084, 8084, 8084, 8084, 8084, 8084,
+     8084, 8084, 8084, 8084, 8084, 8084, 8230, 2807, 2806, 8084,
+     8084, 8084, 8084, 8084, 8084, 8084, 8254, 8254, 8254, 8254,
+     8263, 8263, 8263, 8263, 8264, 8264, 8264, 8264, 8271, 8271,
+     8271, 8271, 2805, 8084, 8084, 8084, 8272, 8272, 8272, 8272,
+
+     8273, 8273, 8273, 8273, 2804, 8264, 8275, 8275, 8275, 8275,
+     8277, 8277, 8277, 8277, 2802, 2801, 2800, 8272, 8279, 8279,
+     8279, 8279, 8084, 8084, 8084, 8101, 8101, 8101, 8101, 8101,
+     8101, 8101, 8101, 8101, 8101, 8101, 8101, 8101, 8101, 8101,
+     8101, 8101, 8101, 8101, 8101, 2799, 2798, 2795, 8101, 8101,
+     8101, 8101, 8101, 8101, 8101, 8274, 8274, 8274, 8274, 8276,
+     8276, 8276, 8276, 8278, 8278, 8278, 8278, 8280, 8280, 8280,
+     8280, 8506, 8101, 8101, 8101, 8513, 8274, 8521, 8506, 8513,
+     8276, 8521, 8506, 8540, 8278, 2794, 2793, 8540, 8280, 8281,
+     8281, 8281, 8281, 8283, 8283, 8283, 8283, 8285, 8285, 8285,
+
+     8285, 8101, 8101, 8101, 8111, 8111, 8111, 8111, 8111, 8111,
+     8111, 8111, 8111, 8111, 8111, 8111, 8111, 8111, 8111, 8111,
+     8111, 8111, 8111, 8111, 2791, 2788, 2786, 8111, 8111, 8111,
+     8111, 8111, 8111, 8111, 8282, 8282, 8282, 8282, 8284, 8284,
+     8284, 8284, 8286, 8286, 8286, 8286, 8287, 8287, 8287, 8287,
+     8508, 8111, 8111, 8111, 8562, 8282, 8564, 8508, 8562, 8284,
+     8564, 8508, 2785, 8286, 8289, 8289, 8289, 8289, 8291, 8291,
+     8291, 8291, 8293, 8293, 8293, 8293, 8295, 8295, 8295, 8295,
+     8111, 8111, 8111, 8216, 8216, 8216, 8216, 8216, 8216, 8216,
+     8216, 8216, 8216, 8216, 8216, 8216, 8216, 8216, 8216, 8216,
+
+     8216, 8216, 8216, 2783, 2782, 2780, 8216, 8216, 8216, 8216,
+     8216, 8216, 8216, 8288, 8288, 8288, 8288, 8290, 8290, 8290,
+     8290, 8292, 8292, 8292, 8292, 8294, 8294, 8294, 8294, 8541,
+     8216, 8216, 8216, 8566, 8288, 8569, 8541, 8566, 8290, 8569,
+     8541, 8571, 8292, 2779, 2778, 8571, 8294, 8297, 8297, 8297,
+     8297, 8299, 8299, 8299, 8299, 8301, 8301, 8301, 8301, 8216,
+     8216, 8216, 8220, 8220, 8220, 8220, 8220, 8220, 8220, 8220,
+     8220, 8220, 8220, 8220, 8220, 8220, 8220, 8220, 8220, 8220,
+     8220, 8220, 2777, 2775, 2774, 8220, 8220, 8220, 8220, 8220,
+     8220, 8220, 8296, 8296, 8296, 8296, 8298, 8298, 8298, 8298,
+
+     8300, 8300, 8300, 8300, 8302, 8302, 8302, 8302, 8544, 8220,
+     8220, 8220, 8575, 8296, 8589, 8544, 8575, 8298, 8589, 8544,
+     8595, 8300, 2772, 2771, 8595, 8302, 8303, 8303, 8303, 8303,
+     8305, 8305, 8305, 8305, 8307, 8307, 8307, 8307, 8220, 8220,
+     8220, 8224, 8224, 8224, 8224, 8224, 8224, 8224, 8224, 8224,
+     8224, 8224, 8224, 8224, 8224, 8224, 8224, 8224, 8224, 8224,
+     8224, 2770, 2766, 2765, 8224, 8224, 8224, 8224, 8224, 8224,
+     8224, 8304, 8304, 8304, 8304, 8306, 8306, 8306, 8306, 8308,
+     8308, 8308, 8308, 8309, 8309, 8309, 8309, 8570, 8224, 8224,
+     8224, 8602, 8304, 8633, 8570, 8602, 8306, 8633, 8570, 2762,
+
+     8308, 8311, 8311, 8311, 8311, 8313, 8313, 8313, 8313, 8315,
+     8315, 8315, 8315, 8317, 8317, 8317, 8317, 8224, 8224, 8224,
+     8228, 8228, 8228, 8228, 8228, 8228, 8228, 8228, 8228, 8228,
+     8228, 8228, 8228, 8228, 8228, 8228, 8228, 8228, 8228, 8228,
+     2761, 2760, 2759, 8228, 8228, 8228, 8228, 8228, 8228, 8228,
+     8310, 8310, 8310, 8310, 8312, 8312, 8312, 8312, 8314, 8314,
+     8314, 8314, 8316, 8316, 8316, 8316, 8576, 8228, 8228, 8228,
+     8635, 8310, 8637, 8576, 8635, 8312, 8637, 8576, 8641, 8314,
+     2758, 2756, 8641, 8316, 8319, 8319, 8319, 8319, 8321, 8321,
+     8321, 8321, 8323, 8323, 8323, 8323, 8228, 8228, 8228, 8255,
+
+     8255, 8255, 8255, 8255, 8255, 8255, 8255, 8255, 8255, 8255,
+     8255, 8255, 8255, 8255, 8255, 8255, 8255, 8255, 8255, 2754,
+     2753, 2752, 8255, 8255, 8255, 8255, 8255, 8255, 8255, 8318,
+     8318, 8318, 8318, 8320, 8320, 8320, 8320, 8322, 8322, 8322,
+     8322, 8324, 8324, 8324, 8324, 2748, 8255, 8255, 8255, 8597,
+     8318, 2746, 8577, 8577, 8320, 8577, 8597, 8577, 8322, 2745,
+     8597, 2744, 8324, 8325, 8325, 8325, 8325, 8327, 8327, 8327,
+     8327, 8329, 8329, 8329, 8329, 8255, 8255, 8255, 8256, 8256,
+     8256, 8256, 8256, 8256, 8256, 8256, 8256, 8256, 8256, 8256,
+     8256, 8256, 8256, 8256, 8256, 8256, 8256, 8256, 2743, 2742,
+
+     2741, 8256, 8256, 8256, 8256, 8256, 8256, 8256, 8326, 8326,
+     8326, 8326, 8328, 8328, 8328, 8328, 8330, 8330, 8330, 8330,
+     8331, 8331, 8331, 8331, 8644, 8256, 8256, 8256, 8644, 8326,
+     2739, 8578, 8578, 8328, 8578, 2738, 8578, 8330, 8333, 8333,
+     8333, 8333, 8335, 8335, 8335, 8335, 8337, 8337, 8337, 8337,
+     8339, 8339, 8339, 8339, 8256, 8256, 8256, 8257, 8257, 8257,
+     8257, 8257, 8257, 8257, 8257, 8257, 8257, 8257, 8257, 8257,
+     8257, 8257, 8257, 8257, 8257, 8257, 8257, 2736, 2734, 2733,
+     8257, 8257, 8257, 8257, 8257, 8257, 8257, 8332, 8332, 8332,
+     8332, 8334, 8334, 8334, 8334, 8336, 8336, 8336, 8336, 8338,
+
+     8338, 8338, 8338, 8599, 8257, 8257, 8257, 2731, 8332, 8646,
+     8599, 8599, 8334, 8646, 8599, 8650, 8336, 2730, 2729, 8650,
+     8338, 8341, 8341, 8341, 8341, 8343, 8343, 8343, 8343, 8345,
+     8345, 8345, 8345, 8257, 8257, 8257, 8258, 8258, 8258, 8258,
+     8258, 8258, 8258, 8258, 8258, 8258, 8258, 8258, 8258, 8258,
+     8258, 8258, 8258, 8258, 8258, 8258, 2727, 2725, 2721, 8258,
+     8258, 8258, 8258, 8258, 8258, 8258, 8340, 8340, 8340, 8340,
+     8342, 8342, 8342, 8342, 8344, 8344, 8344, 8344, 8346, 8346,
+     8346, 8346, 8603, 8258, 8258, 8258, 8654, 8340, 8658, 8603,
+     8654, 8342, 8658, 8603, 8660, 8344, 2719, 2717, 8660, 8346,
+
+     8347, 8347, 8347, 8347, 8349, 8349, 8349, 8349, 8351, 8351,
+     8351, 8351, 8258, 8258, 8258, 8259, 8259, 8259, 8259, 8259,
+     8259, 8259, 8259, 8259, 8259, 8259, 8259, 8259, 8259, 8259,
+     8259, 8259, 8259, 8259, 8259, 2707, 2706, 2700, 8259, 8259,
+     8259, 8259, 8259, 8259, 8259, 8348, 8348, 8348, 8348, 8350,
+     8350, 8350, 8350, 8352, 8352, 8352, 8352, 8353, 8353, 8353,
+     8353, 8664, 8259, 8259, 8259, 8664, 8348, 2698, 8617, 8617,
+     8350, 8617, 2693, 8617, 8352, 8355, 8355, 8355, 8355, 8357,
+     8357, 8357, 8357, 8359, 8359, 8359, 8359, 8361, 8361, 8361,
+     8361, 8259, 8259, 8259, 8260, 8260, 8260, 8260, 8260, 8260,
+
+     8260, 8260, 8260, 8260, 8260, 8260, 8260, 8260, 8260, 8260,
+     8260, 8260, 8260, 8260, 2691, 2690, 2689, 8260, 8260, 8260,
+     8260, 8260, 8260, 8260, 8354, 8354, 8354, 8354, 8356, 8356,
+     8356, 8356, 8358, 8358, 8358, 8358, 8360, 8360, 8360, 8360,
+     2687, 8260, 8260, 8260, 8634, 8354, 2682, 8620, 8620, 8356,
+     8620, 8634, 8620, 8358, 2681, 8634, 2680, 8360, 8363, 8363,
+     8363, 8363, 8365, 8365, 8365, 8365, 8367, 8367, 8367, 8367,
+     8260, 8260, 8260, 8261, 8261, 8261, 8261, 8261, 8261, 8261,
+     8261, 8261, 8261, 8261, 8261, 8261, 8261, 8261, 8261, 8261,
+     8261, 8261, 8261, 2679, 2678, 2670, 8261, 8261, 8261, 8261,
+
+     8261, 8261, 8261, 8362, 8362, 8362, 8362, 8364, 8364, 8364,
+     8364, 8366, 8366, 8366, 8366, 8368, 8368, 8368, 8368, 8647,
+     8261, 8261, 8261, 8671, 8362, 8682, 8647, 8671, 8364, 8682,
+     8647, 8686, 8366, 2630, 2628, 8686, 8368, 8369, 8369, 8369,
+     8369, 8371, 8371, 8371, 8371, 8373, 8373, 8373, 8373, 8261,
+     8261, 8261, 8262, 8262, 8262, 8262, 8262, 8262, 8262, 8262,
+     8262, 8262, 8262, 8262, 8262, 8262, 8262, 8262, 8262, 8262,
+     8262, 8262, 2627, 2626, 2616, 8262, 8262, 8262, 8262, 8262,
+     8262, 8262, 8370, 8370, 8370, 8370, 8372, 8372, 8372, 8372,
+     8374, 8374, 8374, 8374, 8375, 8375, 8375, 8375, 8651, 8262,
+
+     8262, 8262, 8691, 8370, 8705, 8651, 8691, 8372, 8705, 8651,
+     2607, 8374, 8376, 8376, 8376, 8376, 8377, 8377, 8377, 8377,
+     8378, 8378, 8378, 8378, 8379, 8379, 8379, 8379, 8262, 8262,
+     8262, 2605, 2604, 8376, 8380, 8380, 8380, 8380, 2603, 2602,
+     2601, 8378, 8381, 8381, 8381, 8381, 8382, 8382, 8382, 8382,
+     8383, 8383, 8383, 8383, 2599, 8380, 8384, 8384, 8384, 8384,
+     8385, 8385, 8385, 8385, 2598, 2596, 2595, 8382, 8386, 8386,
+     8386, 8386, 8387, 8387, 8387, 8387, 2594, 8384, 8388, 8388,
+     8388, 8388, 8389, 8389, 8389, 8389, 2593, 2592, 2591, 8386,
+     8390, 8390, 8390, 8390, 8391, 8391, 8391, 8391, 2588, 8388,
+
+     8392, 8392, 8392, 8392, 8393, 8393, 8393, 8393, 2587, 2586,
+     2585, 8390, 8394, 8394, 8394, 8394, 8395, 8395, 8395, 8395,
+     2584, 8392, 8396, 8396, 8396, 8396, 8397, 8397, 8397, 8397,
+     8565, 8565, 8709, 8394, 8738, 8742, 8709, 8565, 8738, 8742,
+     2583, 8565, 2574, 8396, 8399, 8399, 8399, 8399, 8399, 8399,
+     8399, 8399, 8399, 8399, 8399, 8399, 8399, 8399, 8399, 8399,
+     8399, 8399, 8399, 8399, 8399, 8399, 8399, 8399, 8399, 8399,
+     8399, 8399, 8399, 8399, 8399, 8399, 8400, 8400, 8400, 8400,
+     8400, 8400, 8400, 8400, 8400, 8400, 8400, 8400, 8400, 8400,
+     8400, 8400, 8400, 8400, 8400, 8400, 8400, 8400, 8400, 8400,
+
+     8400, 8400, 8400, 8400, 8400, 8400, 8400, 8400, 8401, 8401,
+     8401, 8401, 8401, 8401, 8401, 8401, 8401, 8401, 8401, 8401,
+     8401, 8401, 8401, 8401, 8401, 8401, 8401, 8401, 8401, 8401,
+     8401, 8401, 8401, 8401, 8401, 8401, 8401, 8401, 8401, 8401,
+     8402, 8402, 8402, 8402, 8402, 8402, 8402, 8402, 8402, 8402,
+     8402, 8402, 8402, 8402, 8402, 8402, 8402, 8402, 8402, 8402,
+     8402, 8402, 8402, 8402, 8402, 8402, 8402, 8402, 8402, 8402,
+     8402, 8402, 8403, 8403, 8403, 8403, 8403, 8403, 8403, 8403,
+     8403, 8403, 8403, 8403, 8403, 8403, 8403, 8403, 8403, 8403,
+     8403, 8403, 8403, 8403, 8403, 8403, 8403, 8403, 8403, 8403,
+
+     8403, 8403, 8403, 8403, 8404, 8404, 8404, 8404, 8404, 8404,
+     8404, 8404, 8404, 8404, 8404, 8404, 8404, 8404, 8404, 8404,
+     8404, 8404, 8404, 8404, 8404, 8404, 8404, 8404, 8404, 8404,
+     8404, 8404, 8404, 8404, 8404, 8404, 8405, 8405, 8405, 8405,
+     8405, 8405, 8405, 8405, 8405, 8405, 8405, 8405, 8405, 8405,
+     8405, 8405, 8405, 8405, 8405, 8405, 8405, 8405, 8405, 8405,
+     8405, 8405, 8405, 8405, 8405, 8405, 8405, 8405, 8406, 8406,
+     8406, 8406, 8406, 8406, 8406, 8406, 8406, 8406, 8406, 8406,
+     8406, 8406, 8406, 8406, 8406, 8406, 8406, 8406, 8406, 8406,
+     8406, 8406, 8406, 8406, 8406, 8406, 8406, 8406, 8406, 8406,
+
+     8407, 8407, 8407, 8407, 8407, 8407, 8407, 8407, 8407, 8407,
+     8407, 8407, 8407, 8407, 8407, 8407, 8407, 8407, 8407, 8407,
+     8407, 8407, 8407, 8407, 8407, 8407, 8407, 8407, 8407, 8407,
+     8407, 8407, 8408, 8408, 8408, 8408, 8408, 8408, 8408, 8408,
+     8408, 8408, 8408, 8408, 8408, 8408, 8408, 8408, 8408, 8408,
+     8408, 8408, 8408, 8408, 8408, 8408, 8408, 8408, 8408, 8408,
+     8408, 8408, 8408, 8408, 8409, 8409, 8409, 8409, 8409, 8409,
+     8409, 8409, 8409, 8409, 8409, 8409, 8409, 8409, 8409, 8409,
+     8409, 8409, 8409, 8409, 8409, 8409, 8409, 8409, 8409, 8409,
+     8409, 8409, 8409, 8409, 8409, 8409, 8410, 8410, 8410, 8410,
+
+     8410, 8410, 8410, 8410, 8410, 8410, 8410, 8410, 8410, 8410,
+     8410, 8410, 8410, 8410, 8410, 8410, 8410, 8410, 8410, 8410,
+     8410, 8410, 8410, 8410, 8410, 8410, 8410, 8410, 8411, 8411,
+     8411, 8411, 8411, 8411, 8411, 8411, 8411, 8411, 8411, 8411,
+     8411, 8411, 8411, 8411, 8411, 8411, 8411, 8411, 8411, 8411,
+     8411, 8411, 8411, 8411, 8411, 8411, 8411, 8411, 8411, 8411,
+     8412, 8412, 8412, 8412, 8412, 8412, 8412, 8412, 8412, 8412,
+     8412, 8412, 8412, 8412, 8412, 8412, 8412, 8412, 8412, 8412,
+     8412, 8412, 8412, 8412, 8412, 8412, 8412, 8412, 8412, 8412,
+     8412, 8412, 8413, 8413, 8413, 8413, 8413, 8413, 8413, 8413,
+
+     8413, 8413, 8413, 8413, 8413, 8413, 8413, 8413, 8413, 8413,
+     8413, 8413, 8413, 8413, 8413, 8413, 8413, 8413, 8413, 8413,
+     8413, 8413, 8413, 8413, 8414, 8414, 8414, 8414, 8414, 8414,
+     8414, 8414, 8414, 8414, 8414, 8414, 8414, 8414, 8414, 8414,
+     8414, 8414, 8414, 8414, 8414, 8414, 8414, 8414, 8414, 8414,
+     8414, 8414, 8414, 8414, 8414, 8414, 8415, 8415, 8415, 8415,
+     8415, 8415, 8415, 8415, 8415, 8415, 8415, 8415, 8415, 8415,
+     8415, 8415, 8415, 8415, 8415, 8415, 8415, 8415, 8415, 8415,
+     8415, 8415, 8415, 8415, 8415, 8415, 8415, 8415, 8416, 8416,
+     8416, 8416, 8416, 8416, 8416, 8416, 8416, 8416, 8416, 8416,
+
+     8416, 8416, 8416, 8416, 8416, 8416, 8416, 8416, 8416, 8416,
+     8416, 8416, 8416, 8416, 8416, 8416, 8416, 8416, 8416, 8416,
+     8417, 8417, 8417, 8417, 8417, 8417, 8417, 8417, 8417, 8417,
+     8417, 8417, 8417, 8417, 8417, 8417, 8417, 8417, 8417, 8417,
+     8417, 8417, 8417, 8417, 8417, 8417, 8417, 8417, 8417, 8417,
+     8417, 8417, 8418, 8418, 8418, 8418, 8418, 8418, 8418, 8418,
+     8418, 8418, 8418, 8418, 8418, 8418, 8418, 8418, 8418, 8418,
+     8418, 8418, 8418, 8418, 8418, 8418, 8418, 8418, 8418, 8418,
+     8418, 8418, 8418, 8418, 8419, 8419, 8419, 8419, 8419, 8419,
+     8419, 8419, 8419, 8419, 8419, 8419, 8419, 8419, 8419, 8419,
+
+     8419, 8419, 8419, 8419, 8419, 8419, 8419, 8419, 8419, 8419,
+     8419, 8419, 8419, 8419, 8419, 8419, 8420, 8420, 8420, 8420,
+     8420, 8420, 8420, 8420, 8420, 8420, 8420, 8420, 8420, 8420,
+     8420, 8420, 8420, 8420, 8420, 8420, 8420, 8420, 8420, 8420,
+     8420, 8420, 8420, 8420, 8420, 8420, 8420, 8420, 8421, 8421,
+     8421, 8421, 8421, 8421, 8421, 8421, 8421, 8421, 8421, 8421,
+     8421, 8421, 8421, 8421, 8421, 8421, 8421, 8421, 8421, 8421,
+     8421, 8421, 8421, 8421, 8421, 8421, 8421, 8421, 8421, 8421,
+     8422, 8422, 8422, 8422, 8422, 8422, 8422, 8422, 8422, 8422,
+     8422, 8422, 8422, 8422, 8422, 8422, 8422, 8422, 8422, 8422,
+
+     8422, 8422, 8422, 8422, 8422, 8422, 8422, 8422, 8422, 8422,
+     8422, 8422, 8423, 8423, 8423, 8423, 8423, 8423, 8423, 8423,
+     8423, 8423, 8423, 8423, 8423, 8423, 8423, 8423, 8423, 8423,
+     8423, 8423, 8423, 8423, 8423, 8423, 8423, 8423, 8423, 8423,
+     8423, 8423, 8423, 8423, 8424, 8424, 8424, 8424, 8424, 8424,
+     8424, 8424, 8424, 8424, 8424, 8424, 8424, 8424, 8424, 8424,
+     8424, 8424, 8424, 8424, 8424, 8424, 8424, 8424, 8424, 8424,
+     8424, 8424, 8424, 8424, 8424, 8424, 8425, 8425, 8425, 8425,
+     8425, 8425, 8425, 8425, 8425, 8425, 8425, 8425, 8425, 8425,
+     8425, 8425, 8425, 8425, 8425, 8425, 8425, 8425, 8425, 8425,
+
+     8425, 8425, 8425, 8425, 8425, 8425, 8425, 8425, 8426, 8426,
+     8426, 8426, 8426, 8426, 8426, 8426, 8426, 8426, 8426, 8426,
+     8426, 8426, 8426, 8426, 8426, 8426, 8426, 8426, 8426, 8426,
+     8426, 8426, 8426, 8426, 8426, 8426, 8426, 8426, 8426, 8426,
+     8427, 8427, 8427, 8427, 8427, 8427, 8427, 8427, 8427, 8427,
+     8427, 8427, 8427, 8427, 8427, 8427, 8427, 8427, 8427, 8427,
+     8427, 8427, 8427, 8427, 8427, 8427, 8427, 8427, 8427, 8427,
+     8427, 8427, 8428, 8428, 8428, 8428, 8428, 8428, 8428, 8428,
+     8428, 8428, 8428, 8428, 8428, 8428, 8428, 8428, 8428, 8428,
+     8428, 8428, 8428, 8428, 8428, 8428, 8428, 8428, 8428, 8428,
+
+     8428, 8428, 8428, 8428, 8429, 8429, 8429, 8429, 8429, 8429,
+     8429, 8429, 8429, 8429, 8429, 8429, 8429, 8429, 8429, 8429,
+     8429, 8429, 8429, 8429, 8429, 8429, 8429, 8429, 8429, 8429,
+     8429, 8429, 8429, 8429, 8429, 8429, 8430, 8430, 8430, 8430,
+     8430, 8430, 8430, 8430, 8430, 8430, 8430, 8430, 8430, 8430,
+     8430, 8430, 8430, 8430, 8430, 8430, 8430, 8430, 8430, 8430,
+     8430, 8430, 8430, 8430, 8430, 8430, 8430, 8430, 8431, 8431,
+     8431, 8431, 8431, 8431, 8431, 8431, 8431, 8431, 8431, 8431,
+     8431, 8431, 8431, 8431, 8431, 8431, 8431, 8431, 8431, 8431,
+     8431, 8431, 8431, 8431, 8431, 8431, 8431, 8431, 8431, 8431,
+
+     8432, 8432, 8432, 8432, 8432, 8432, 8432, 8432, 8432, 8432,
+     8432, 8432, 8432, 8432, 8432, 8432, 8432, 8432, 8432, 8432,
+     8432, 8432, 8432, 8432, 8432, 8432, 8432, 8432, 8432, 8432,
+     8432, 8432, 8433, 8433, 8433, 8433, 8433, 8433, 8433, 8433,
+     8433, 8433, 8433, 8433, 8433, 8433, 8433, 8433, 8433, 8433,
+     8433, 8433, 8433, 8433, 8433, 8433, 8433, 8433, 8433, 8433,
+     8433, 8433, 8433, 8433, 8434, 8434, 8434, 8434, 8434, 8434,
+     8434, 8434, 8434, 8434, 8434, 8434, 8434, 8434, 8434, 8434,
+     8434, 8434, 8434, 8434, 8434, 8434, 8434, 8434, 8434, 8434,
+     8434, 8434, 8434, 8434, 8434, 8434, 8435, 8435, 8435, 8435,
+
+     8435, 8435, 8435, 8435, 8435, 8435, 8435, 8435, 8435, 8435,
+     8435, 8435, 8435, 8435, 8435, 8435, 8435, 8435, 8435, 8435,
+     8435, 8435, 8435, 8435, 8435, 8435, 8435, 8435, 8436, 8436,
+     8436, 8436, 8436, 8436, 8436, 8436, 8436, 8436, 8436, 8436,
+     8436, 8436, 8436, 8436, 8436, 8436, 8436, 8436, 8436, 8436,
+     8436, 8436, 8436, 8436, 8436, 8436, 8436, 8436, 8436, 8436,
+     8437, 8437, 8437, 8437, 8437, 8437, 8437, 8437, 8437, 8437,
+     8437, 8437, 8437, 8437, 8437, 8437, 8437, 8437, 8437, 8437,
+     8437, 8437, 8437, 8437, 8437, 8437, 8437, 8437, 8437, 8437,
+     8437, 8437, 8438, 8438, 8438, 8438, 8438, 8438, 8438, 8438,
+
+     8438, 8438, 8438, 8438, 8438, 8438, 8438, 8438, 8438, 8438,
+     8438, 8438, 8438, 8438, 8438, 8438, 8438, 8438, 8438, 8438,
+     8438, 8438, 8438, 8438, 8439, 8439, 8439, 8439, 8439, 8439,
+     8439, 8439, 8439, 8439, 8439, 8439, 8439, 8439, 8439, 8439,
+     8439, 8439, 8439, 8439, 8439, 8439, 8439, 8439, 8439, 8439,
+     8439, 8439, 8439, 8439, 8439, 8439, 8440, 8440, 8440, 8440,
+     8440, 8440, 8440, 8440, 8440, 8440, 8440, 8440, 8440, 8440,
+     8440, 8440, 8440, 8440, 8440, 8440, 8440, 8440, 8440, 8440,
+     8440, 8440, 8440, 8440, 8440, 8440, 8440, 8440, 8441, 8441,
+     8441, 8441, 8441, 8441, 8441, 8441, 8441, 8441, 8441, 8441,
+
+     8441, 8441, 8441, 8441, 8441, 8441, 8441, 8441, 8441, 8441,
+     8441, 8441, 8441, 8441, 8441, 8441, 8441, 8441, 8441, 8441,
+     8442, 8442, 8442, 8442, 8442, 8442, 8442, 8442, 8442, 8442,
+     8442, 8442, 8442, 8442, 8442, 8442, 8442, 8442, 8442, 8442,
+     8442, 8442, 8442, 8442, 8442, 8442, 8442, 8442, 8442, 8442,
+     8442, 8442, 8443, 8443, 8443, 8443, 8443, 8443, 8443, 8443,
+     8443, 8443, 8443, 8443, 8443, 8443, 8443, 8443, 8443, 8443,
+     8443, 8443, 8443, 8443, 8443, 8443, 8443, 8443, 8443, 8443,
+     8443, 8443, 8443, 8443, 8444, 8444, 8444, 8444, 8444, 8444,
+     8444, 8444, 8444, 8444, 8444, 8444, 8444, 8444, 8444, 8444,
+
+     8444, 8444, 8444, 8444, 8444, 8444, 8444, 8444, 8444, 8444,
+     8444, 8444, 8444, 8444, 8444, 8444, 8445, 8445, 8445, 8445,
+     8445, 8445, 8445, 8445, 8445, 8445, 8445, 8445, 8445, 8445,
+     8445, 8445, 8445, 8445, 8445, 8445, 8445, 8445, 8445, 8445,
+     8445, 8445, 8445, 8445, 8445, 8445, 8445, 8445, 8446, 8446,
+     8446, 8446, 8446, 8446, 8446, 8446, 8446, 8446, 8446, 8446,
+     8446, 8446, 8446, 8446, 8446, 8446, 8446, 8446, 8446, 8446,
+     8446, 8446, 8446, 8446, 8446, 8446, 8446, 8446, 8446, 8446,
+     8447, 8447, 8447, 8447, 8447, 8447, 8447, 8447, 8447, 8447,
+     8447, 8447, 8447, 8447, 8447, 8447, 8447, 8447, 8447, 8447,
+
+     8447, 8447, 8447, 8447, 8447, 8447, 8447, 8447, 8447, 8447,
+     8447, 8447, 8448, 8448, 8448, 8448, 8448, 8448, 8448, 8448,
+     8448, 8448, 8448, 8448, 8448, 8448, 8448, 8448, 8448, 8448,
+     8448, 8448, 8448, 8448, 8448, 8448, 8448, 8448, 8448, 8448,
+     8448, 8448, 8448, 8448, 8449, 8449, 8449, 8449, 8449, 8449,
+     8449, 8449, 8449, 8449, 8449, 8449, 8449, 8449, 8449, 8449,
+     8449, 8449, 8449, 8449, 8449, 8449, 8449, 8449, 8449, 8449,
+     8449, 8449, 8449, 8449, 8449, 8449, 8450, 8450, 8450, 8450,
+     8450, 8450, 8450, 8450, 8450, 8450, 8450, 8450, 8450, 8450,
+     8450, 8450, 8450, 8450, 8450, 8450, 8450, 8450, 8450, 8450,
+
+     8450, 8450, 8450, 8450, 8450, 8450, 8450, 8450, 8451, 8451,
+     8451, 8451, 8451, 8451, 8451, 8451, 8451, 8451, 8451, 8451,
+     8451, 8451, 8451, 8451, 8451, 8451, 8451, 8451, 8451, 8451,
+     8451, 8451, 8451, 8451, 8451, 8451, 8451, 8451, 8451, 8451,
+     8452, 8452, 8452, 8452, 8452, 8452, 8452, 8452, 8452, 8452,
+     8452, 8452, 8452, 8452, 8452, 8452, 8452, 8452, 8452, 8452,
+     8452, 8452, 8452, 8452, 8452, 8452, 8452, 8452, 8452, 8452,
+     8452, 8452, 8453, 8453, 8453, 8453, 8453, 8453, 8453, 8453,
+     8453, 8453, 8453, 8453, 8453, 8453, 8453, 8453, 8453, 8453,
+     8453, 8453, 8453, 8453, 8453, 8453, 8453, 8453, 8453, 8453,
+
+     8453, 8453, 8453, 8453, 8454, 8454, 8454, 8454, 8454, 8454,
+     8454, 8454, 8454, 8454, 8454, 8454, 8454, 8454, 8454, 8454,
+     8454, 8454, 8454, 8454, 8454, 8454, 8454, 8454, 8454, 8454,
+     8454, 8454, 8454, 8454, 8454, 8454, 8455, 8455, 8455, 8455,
+     8455, 8455, 8455, 8455, 8455, 8455, 8455, 8455, 8455, 8455,
+     8455, 8455, 8455, 8455, 8455, 8455, 8455, 8455, 8455, 8455,
+     8455, 8455, 8455, 8455, 8455, 8455, 8455, 8455, 8456, 8456,
+     8456, 8456, 8456, 8456, 8456, 8456, 8456, 8456, 8456, 8456,
+     8456, 8456, 8456, 8456, 8456, 8456, 8456, 8456, 8456, 8456,
+     8456, 8456, 8456, 8456, 8456, 8456, 8456, 8456, 8456, 8456,
+
+     8457, 8457, 8457, 8457, 8457, 8457, 8457, 8457, 8457, 8457,
+     8457, 8457, 8457, 8457, 8457, 8457, 8457, 8457, 8457, 8457,
+     8457, 8457, 8457, 8457, 8457, 8457, 8457, 8457, 8457, 8457,
+     8457, 8457, 8458, 8458, 8458, 8458, 8458, 8458, 8458, 8458,
+     8458, 8458, 8458, 8458, 8458, 8458, 8458, 8458, 8458, 8458,
+     8458, 8458, 8458, 8458, 8458, 8458, 8458, 8458, 8458, 8458,
+     8458, 8458, 8458, 8458, 8459, 8459, 8459, 8459, 8459, 8459,
+     8459, 8459, 8459, 8459, 8459, 8459, 8459, 8459, 8459, 8459,
+     8459, 8459, 8459, 8459, 8459, 8459, 8459, 8459, 8459, 8459,
+     8459, 8459, 8459, 8459, 8459, 8459, 8460, 8460, 8460, 8460,
+
+     8460, 8460, 8460, 8460, 8460, 8460, 8460, 8460, 8460, 8460,
+     8460, 8460, 8460, 8460, 8460, 8460, 8460, 8460, 8460, 8460,
+     8460, 8460, 8460, 8460, 8460, 8460, 8460, 8460, 8461, 8461,
+     8461, 8461, 8461, 8461, 8461, 8461, 8461, 8461, 8461, 8461,
+     8461, 8461, 8461, 8461, 8461, 8461, 8461, 8461, 8461, 8461,
+     8461, 8461, 8461, 8461, 8461, 8461, 8461, 8461, 8461, 8461,
+     8462, 8462, 8462, 8462, 8462, 8462, 8462, 8462, 8462, 8462,
+     8462, 8462, 8462, 8462, 8462, 8462, 8462, 8462, 8462, 8462,
+     8462, 8462, 8462, 8462, 8462, 8462, 8462, 8462, 8462, 8462,
+     8462, 8462, 8463, 8463, 8463, 8463, 8463, 8463, 8463, 8463,
+
+     8463, 8463, 8463, 8463, 8463, 8463, 8463, 8463, 8463, 8463,
+     8463, 8463, 8463, 8463, 8463, 8463, 8463, 8463, 8463, 8463,
+     8463, 8463, 8463, 8463, 8464, 8464, 8464, 8464, 8464, 8464,
+     8464, 8464, 8464, 8464, 8464, 8464, 8464, 8464, 8464, 8464,
+     8464, 8464, 8464, 8464, 8464, 8464, 8464, 8464, 8464, 8464,
+     8464, 8464, 8464, 8464, 8464, 8464, 8465, 8465, 8465, 8465,
+     8465, 8465, 8465, 8465, 8465, 8465, 8465, 8465, 8465, 8465,
+     8465, 8465, 8465, 8465, 8465, 8465, 8465, 8465, 8465, 8465,
+     8465, 8465, 8465, 8465, 8465, 8465, 8465, 8465, 8466, 8466,
+     8466, 8466, 8466, 8466, 8466, 8466, 8466, 8466, 8466, 8466,
+
+     8466, 8466, 8466, 8466, 8466, 8466, 8466, 8466, 8466, 8466,
+     8466, 8466, 8466, 8466, 8466, 8466, 8466, 8466, 8466, 8466,
+     8467, 8467, 8467, 8467, 8467, 8467, 8467, 8467, 8467, 8467,
+     8467, 8467, 8467, 8467, 8467, 8467, 8467, 8467, 8467, 8467,
+     8467, 8467, 8467, 8467, 8467, 8467, 8467, 8467, 8467, 8467,
+     8467, 8467, 8468, 8468, 8468, 8468, 8468, 8468, 8468, 8468,
+     8468, 8468, 8468, 8468, 8468, 8468, 8468, 8468, 8468, 8468,
+     8468, 8468, 8468, 8468, 8468, 8468, 8468, 8468, 8468, 8468,
+     8468, 8468, 8468, 8468, 8469, 8469, 8469, 8469, 8469, 8469,
+     8469, 8469, 8469, 8469, 8469, 8469, 8469, 8469, 8469, 8469,
+
+     8469, 8469, 8469, 8469, 8469, 8469, 8469, 8469, 8469, 8469,
+     8469, 8469, 8469, 8469, 8469, 8469, 8470, 8470, 8470, 8470,
+     8470, 8470, 8470, 8470, 8470, 8470, 8470, 8470, 8470, 8470,
+     8470, 8470, 8470, 8470, 8470, 8470, 8470, 8470, 8470, 8470,
+     8470, 8470, 8470, 8470, 8470, 8470, 8470, 8470, 8471, 8471,
+     8471, 8471, 8471, 8471, 8471, 8471, 8471, 8471, 8471, 8471,
+     8471, 8471, 8471, 8471, 8471, 8471, 8471, 8471, 8471, 8471,
+     8471, 8471, 8471, 8471, 8471, 8471, 8471, 8471, 8471, 8471,
+     8472, 8472, 8472, 8472, 8472, 8472, 8472, 8472, 8472, 8472,
+     8472, 8472, 8472, 8472, 8472, 8472, 8472, 8472, 8472, 8472,
+
+     8472, 8472, 8472, 8472, 8472, 8472, 8472, 8472, 8472, 8472,
+     8472, 8472, 8473, 8473, 8473, 8473, 8473, 8473, 8473, 8473,
+     8473, 8473, 8473, 8473, 8473, 8473, 8473, 8473, 8473, 8473,
+     8473, 8473, 8473, 8473, 8473, 8473, 8473, 8473, 8473, 8473,
+     8473, 8473, 8473, 8473, 8474, 8474, 8474, 8474, 8474, 8474,
+     8474, 8474, 8474, 8474, 8474, 8474, 8474, 8474, 8474, 8474,
+     8474, 8474, 8474, 8474, 8474, 8474, 8474, 8474, 8474, 8474,
+     8474, 8474, 8474, 8474, 8474, 8474, 8475, 8475, 8475, 8475,
+     8475, 8475, 8475, 8475, 8475, 8475, 8475, 8475, 8475, 8475,
+     8475, 8475, 8475, 8475, 8475, 8475, 8475, 8475, 8475, 8475,
+
+     8475, 8475, 8475, 8475, 8475, 8475, 8475, 8475, 8476, 8476,
+     8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476,
+     8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476,
+     8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476,
+     8477, 8477, 8477, 8477, 8477, 8477, 8477, 8477, 8477, 8477,
+     8477, 8477, 8477, 8477, 8477, 8477, 8477, 8477, 8477, 8477,
+     8477, 8477, 8477, 8477, 8477, 8477, 8477, 8477, 8477, 8477,
+     8477, 8477, 8478, 8478, 8478, 8478, 8478, 8478, 8478, 8478,
+     8478, 8478, 8478, 8478, 8478, 8478, 8478, 8478, 8478, 8478,
+     8478, 8478, 8478, 8478, 8478, 8478, 8478, 8478, 8478, 8478,
+
+     8478, 8478, 8478, 8478, 8479, 8479, 8479, 8479, 8479, 8479,
+     8479, 8479, 8479, 8479, 8479, 8479, 8479, 8479, 8479, 8479,
+     8479, 8479, 8479, 8479, 8479, 8479, 8479, 8479, 8479, 8479,
+     8479, 8479, 8479, 8479, 8479, 8479, 8480, 8480, 8480, 8480,
+     8480, 8480, 8480, 8480, 8480, 8480, 8480, 8480, 8480, 8480,
+     8480, 8480, 8480, 8480, 8480, 8480, 8480, 8480, 8480, 8480,
+     8480, 8480, 8480, 8480, 8480, 8480, 8480, 8480, 8481, 8481,
+     8481, 8481, 8481, 8481, 8481, 8481, 8481, 8481, 8481, 8481,
+     8481, 8481, 8481, 8481, 8481, 8481, 8481, 8481, 8481, 8481,
+     8481, 8481, 8481, 8481, 8481, 8481, 8481, 8481, 8481, 8481,
+
+     8483, 8747, 8522, 8483, 8522, 8747, 8563, 8567, 8567, 8483,
+     8659, 8522, 2572, 8563, 8567, 8522, 8483, 8659, 8567, 2571,
+     8563, 8659, 8606, 8483, 8563, 8606, 2570, 8483, 8484, 8484,
+     8484, 8484, 8606, 8572, 8484, 8572, 8606, 2569, 8624, 2568,
+     2566, 8624, 8572, 8636, 8636, 8484, 8572, 2557, 8624, 2555,
+     8636, 8484, 8624, 8679, 8636, 8484, 8661, 2537, 8484, 8485,
+     8485, 8485, 8485, 8661, 8714, 8485, 8638, 8661, 8638, 8675,
+     8679, 2534, 2533, 8485, 8679, 8638, 8675, 8695, 2519, 8638,
+     8675, 8714, 8485, 2495, 8695, 8714, 8485, 8696, 8695, 8485,
+     8486, 8486, 8486, 8486, 8696, 8751, 8762, 8764, 8696, 8751,
+
+     8762, 8764, 2494, 8708, 8486, 8712, 8486, 8486, 8486, 8486,
+     8708, 2493, 8712, 8486, 8708, 8734, 8712, 8486, 8487, 8487,
+     8487, 8487, 8734, 8713, 8487, 8713, 8734, 8737, 8739, 2482,
+     2481, 2480, 8713, 8740, 8737, 8739, 8713, 2479, 8737, 8739,
+     8740, 8487, 8740, 8743, 8740, 8487, 8488, 8488, 8488, 8488,
+     8743, 8744, 8488, 8771, 8743, 2478, 2477, 8771, 8744, 8767,
+     8744, 8750, 8744, 8488, 8750, 2472, 8767, 8780, 8750, 8488,
+     8767, 8780, 8750, 8488, 8763, 8763, 8488, 8489, 8489, 8489,
+     8489, 8763, 2465, 8768, 2453, 8763, 8489, 2451, 8769, 8769,
+     8768, 8770, 8770, 8489, 8489, 8769, 2448, 8768, 8770, 8769,
+
+     8489, 8768, 8770, 8772, 8489, 8490, 8490, 8490, 8490, 8773,
+     8772, 8490, 8775, 8776, 8772, 8776, 8773, 8798, 8773, 8775,
+     8773, 8798, 8776, 8775, 2445, 8800, 8776, 2437, 8490, 8800,
+     8779, 8781, 8490, 8493, 8493, 8493, 8493, 8779, 8781, 8493,
+     8782, 8779, 8781, 8803, 8829, 2430, 8805, 8782, 8829, 8782,
+     8803, 8782, 2428, 8805, 8803, 2412, 8493, 8805, 2401, 8809,
+     8493, 8493, 8494, 8494, 8494, 8494, 8809, 8809, 8884, 2397,
+     8809, 2396, 8884, 8810, 2395, 8813, 8494, 2392, 8494, 8494,
+     8810, 8832, 8813, 8810, 8810, 8494, 8813, 2386, 8832, 8494,
+     8495, 8495, 8832, 8495, 2383, 8495, 8495, 8495, 8495, 2369,
+
+     8495, 8495, 8495, 8495, 8495, 8495, 8495, 8495, 8495, 8495,
+     8495, 8495, 8495, 8495, 8495, 8495, 8495, 8495, 8495, 8495,
+     8495, 8495, 8496, 8496, 8496, 8496, 8816, 8835, 8496, 8816,
+     8835, 8846, 2363, 2362, 2361, 2349, 8816, 8835, 8846, 8496,
+     8816, 8835, 8846, 8888, 2346, 8496, 2333, 8888, 8849, 8496,
+     8847, 8847, 8496, 8497, 8497, 8497, 8497, 8847, 8848, 8497,
+     8848, 8847, 2328, 8856, 8497, 8849, 8859, 8848, 8865, 8849,
+     8856, 8848, 2319, 8859, 8856, 8865, 8497, 8859, 8866, 8865,
+     8497, 8498, 8498, 8498, 8498, 8866, 8910, 8955, 8872, 8866,
+     8910, 8955, 8885, 2311, 8885, 8872, 8899, 8498, 8498, 8872,
+
+     8498, 8885, 2310, 8899, 8498, 8885, 8907, 8899, 8498, 8499,
+     8499, 8499, 8499, 8907, 8909, 8499, 2309, 8907, 8911, 8918,
+     8911, 8909, 8919, 2308, 2307, 8909, 8918, 8911, 8922, 8919,
+     8918, 8911, 8499, 8919, 2304, 8922, 8499, 8500, 8500, 8922,
+     8500, 8500, 8500, 8500, 8500, 8500, 8500, 8500, 8500, 8500,
+     8500, 8500, 8500, 8500, 8500, 8500, 8500, 2297, 8500, 8500,
+     8500, 8500, 8500, 8500, 8500, 8500, 8500, 8500, 8500, 8501,
+     8501, 8501, 8501, 8501, 8501, 8501, 8501, 8501, 8501, 8501,
+     8501, 8501, 8501, 8501, 8501, 8501, 8501, 8501, 8501, 8501,
+     8501, 8501, 8501, 8501, 8501, 8501, 8501, 8501, 8501, 8501,
+
+     8501, 8502, 8502, 8502, 8502, 8920, 8923, 8502, 8926, 2287,
+     2285, 8926, 8920, 8923, 8920, 8926, 8920, 8923, 8502, 8926,
+     2284, 2283, 9001, 9002, 8502, 8935, 9001, 9002, 8502, 8924,
+     8934, 8502, 8503, 8503, 8503, 8503, 8924, 8934, 8924, 2276,
+     8924, 8934, 8935, 8932, 8932, 8945, 8935, 8936, 8503, 8503,
+     8932, 8503, 8945, 8954, 8932, 8503, 8945, 2266, 2261, 8503,
+     8504, 8504, 8504, 8504, 8936, 8947, 8504, 2260, 8936, 8956,
+     8954, 8956, 8947, 8963, 8954, 8947, 8947, 8970, 8956, 8970,
+     8963, 9004, 8956, 8504, 8963, 9004, 8970, 8504, 8509, 8509,
+     8970, 2232, 8509, 9013, 2229, 8509, 8509, 9013, 8509, 8509,
+
+     8509, 8509, 8509, 8509, 2227, 8509, 8509, 8509, 8509, 8509,
+     8509, 2225, 8509, 8509, 8509, 8509, 8509, 2218, 2202, 8509,
+     8510, 8510, 8510, 8510, 8510, 8510, 8510, 8510, 8510, 8510,
+     8510, 8510, 8510, 8510, 8510, 8510, 8510, 8510, 8510, 8510,
+     8510, 8510, 8510, 8510, 8510, 8510, 8510, 8510, 8510, 8510,
+     8510, 8510, 8511, 8511, 2193, 8511, 8511, 8511, 8511, 8511,
+     8511, 8511, 8511, 8511, 8511, 8511, 8511, 8511, 8511, 8511,
+     8511, 8511, 8511, 8511, 8511, 8511, 8511, 8511, 8511, 8511,
+     8511, 8511, 8511, 8511, 8512, 8512, 2192, 8512, 2191, 8512,
+     8512, 8512, 8512, 2190, 8512, 8512, 8512, 8512, 8512, 8512,
+
+     8512, 8512, 8512, 8512, 8512, 8512, 8512, 8512, 8512, 8512,
+     8512, 8512, 8512, 8512, 8512, 8512, 8514, 8514, 8514, 8514,
+     8982, 9016, 9024, 2176, 9050, 9016, 9024, 8982, 9050, 2169,
+     8514, 8982, 8514, 8514, 9103, 2168, 2167, 2158, 9103, 8514,
+     8987, 8993, 8987, 8514, 8515, 8515, 8515, 8515, 8993, 8987,
+     8515, 8994, 8993, 8987, 2132, 2129, 2127, 8995, 8994, 2125,
+     2114, 8515, 8994, 2105, 8995, 2102, 8995, 8515, 8995, 2074,
+     2071, 8515, 8997, 8998, 8515, 8516, 8516, 8516, 8516, 8997,
+     8998, 2069, 2067, 8997, 8998, 2060, 8999, 9014, 2057, 9014,
+     2051, 8516, 8516, 8999, 2050, 8999, 9014, 8999, 8516, 2049,
+
+     9014, 9019, 8516, 8517, 8517, 8517, 8517, 9036, 9019, 8517,
+     9037, 2048, 9019, 9038, 9036, 2047, 9040, 9037, 9036, 2046,
+     9038, 9037, 9038, 9040, 9038, 2045, 8517, 9040, 9041, 9042,
+     8517, 8518, 8518, 8518, 8518, 9041, 9042, 8518, 9042, 9041,
+     9042, 2043, 9047, 2042, 9062, 9064, 2041, 2040, 8518, 9047,
+     2037, 9062, 9064, 9047, 8518, 9062, 9064, 2036, 8518, 9065,
+     9066, 8518, 8519, 8519, 8519, 8519, 9065, 9066, 2025, 9066,
+     9065, 9066, 2023, 9072, 2020, 9079, 9080, 2014, 8519, 8519,
+     9072, 2007, 9079, 9080, 9072, 8519, 9079, 9080, 9081, 8519,
+     8520, 8520, 8520, 8520, 9082, 9081, 8520, 9095, 2006, 9081,
+
+     9097, 9082, 1997, 9082, 9095, 9082, 1996, 9097, 9095, 9099,
+     1984, 9097, 1982, 8520, 1970, 1965, 9099, 8520, 8523, 8523,
+     9099, 8523, 8523, 1962, 8523, 8523, 8523, 1960, 8523, 8523,
+     8523, 8523, 8523, 8523, 1958, 8523, 8523, 8523, 8523, 8523,
+     8523, 1956, 8523, 8523, 1955, 8523, 8523, 1954, 1951, 8523,
+     8524, 8524, 8524, 8524, 8524, 8524, 8524, 8524, 8524, 8524,
+     8524, 8524, 8524, 8524, 8524, 8524, 8524, 8524, 8524, 8524,
+     8524, 8524, 8524, 8524, 8524, 8524, 8524, 8524, 8524, 8524,
+     8524, 8524, 8525, 8525, 1947, 8525, 1922, 8525, 8525, 8525,
+     8525, 1919, 8525, 8525, 8525, 8525, 8525, 8525, 8525, 8525,
+
+     8525, 8525, 8525, 8525, 8525, 8525, 8525, 8525, 8525, 8525,
+     8525, 8525, 8525, 8525, 8526, 8526, 1917, 8526, 1915, 8526,
+     8526, 8526, 8526, 1903, 8526, 8526, 8526, 8526, 8526, 8526,
+     8526, 8526, 8526, 8526, 8526, 8526, 8526, 8526, 8526, 8526,
+     8526, 8526, 8526, 8526, 8526, 8526, 8527, 8527, 1885, 8527,
+     8527, 8527, 8527, 8527, 8527, 8527, 8527, 8527, 8527, 8527,
+     8527, 8527, 8527, 8527, 8527, 8527, 8527, 8527, 8527, 8527,
+     8527, 8527, 8527, 8527, 8527, 8527, 8527, 8527, 8528, 8528,
+     1882, 8528, 8528, 8528, 8528, 8528, 8528, 8528, 8528, 8528,
+     1881, 8528, 8528, 8528, 8528, 8528, 8528, 8528, 8528, 8528,
+
+     8528, 8528, 8528, 8528, 8528, 8528, 8528, 8528, 8528, 8528,
+     8529, 8529, 8529, 8529, 8529, 8529, 8529, 8529, 8529, 8529,
+     8529, 8529, 8529, 8529, 8529, 8529, 8529, 8529, 8529, 8529,
+     8529, 8529, 8529, 8529, 8529, 8529, 8529, 8529, 8529, 8529,
+     8529, 8529, 8530, 8530, 8530, 8530, 8530, 8530, 8530, 8530,
+     8530, 8530, 8530, 8530, 8530, 8530, 8530, 8530, 8530, 8530,
+     8530, 8530, 8530, 8530, 8530, 8530, 8530, 8530, 8530, 8530,
+     8530, 8530, 8530, 8530, 8531, 8531, 8531, 8531, 8531, 8531,
+     8531, 8531, 8531, 8531, 8531, 8531, 8531, 8531, 8531, 8531,
+     8531, 8531, 8531, 8531, 8531, 8531, 8531, 8531, 8531, 8531,
+
+     8531, 8531, 8531, 8531, 8531, 8531, 8532, 1870, 1836, 8532,
+     1831, 8532, 8532, 8532, 8532, 8532, 8532, 8532, 1828, 8532,
+     8532, 8532, 1826, 8532, 8532, 8532, 1824, 8532, 8532, 8532,
+     8532, 8532, 1823, 8532, 8532, 8532, 8532, 8532, 8533, 8533,
+     8533, 8533, 8533, 8533, 8533, 8533, 8533, 8533, 8533, 8533,
+     8533, 8533, 8533, 8533, 8533, 8533, 8533, 8533, 8533, 8533,
+     8533, 8533, 8533, 8533, 8533, 8533, 8533, 8533, 8533, 8533,
+     8534, 8534, 1793, 8534, 8534, 1770, 8534, 8534, 8534, 8534,
+     8534, 8534, 8534, 8534, 8534, 8534, 8534, 8534, 8534, 8534,
+     8534, 8534, 8534, 8534, 8534, 1767, 8534, 1766, 8534, 8534,
+
+     8534, 8534, 8535, 8535, 8535, 8535, 8535, 8535, 8535, 8535,
+     8535, 8535, 8535, 8535, 8535, 8535, 8535, 8535, 8535, 8535,
+     8535, 8535, 8535, 8535, 8535, 8535, 8535, 8535, 8535, 8535,
+     8535, 8535, 8535, 8535, 8536, 1764, 1761, 8536, 1759, 8536,
+     8536, 8536, 8536, 8536, 8536, 8536, 8536, 8536, 8536, 8536,
+     8536, 8536, 8536, 8536, 8536, 8536, 8536, 8536, 8536, 8536,
+     8536, 8536, 8536, 8536, 8536, 8536, 8537, 8537, 8537, 8537,
+     8537, 8537, 8537, 8537, 8537, 8537, 8537, 8537, 8537, 8537,
+     8537, 8537, 8537, 8537, 8537, 8537, 8537, 8537, 8537, 8537,
+     8537, 8537, 8537, 8537, 8537, 8537, 8537, 8537, 8538, 1757,
+
+     1756, 8538, 1743, 8538, 8538, 8538, 8538, 8538, 8538, 8538,
+     8538, 8538, 8538, 8538, 8538, 8538, 8538, 8538, 8538, 8538,
+     8538, 8538, 8538, 8538, 8538, 8538, 8538, 8538, 8538, 8538,
+     8539, 8539, 8539, 8539, 8539, 8539, 8539, 8539, 8539, 8539,
+     8539, 8539, 8539, 8539, 8539, 8539, 8539, 8539, 8539, 8539,
+     8539, 8539, 8539, 8539, 8539, 8539, 8539, 8539, 8539, 8539,
+     8539, 8539, 8542, 8542, 1736, 8542, 1735, 8542, 8542, 8542,
+     8542, 8542, 8542, 8542, 1734, 8542, 8542, 1725, 1712, 8542,
+     8542, 8542, 8542, 8542, 8542, 8542, 8542, 8542, 8542, 8542,
+     8542, 8542, 8542, 8542, 8543, 8543, 8543, 8543, 8543, 8543,
+
+     8543, 8543, 8543, 8543, 8543, 8543, 8543, 8543, 8543, 8543,
+     8543, 8543, 8543, 8543, 8543, 8543, 8543, 8543, 8543, 8543,
+     8543, 8543, 8543, 8543, 8543, 8543, 8545, 8545, 8545, 8545,
+     8545, 8545, 8545, 8545, 8545, 8545, 8545, 8545, 8545, 8545,
+     8545, 8545, 8545, 8545, 8545, 8545, 8545, 8545, 8545, 8545,
+     8545, 8545, 8545, 8545, 8545, 8545, 8545, 8545, 8546, 8546,
+     8546, 8546, 8546, 8546, 8546, 8546, 8546, 8546, 8546, 8546,
+     8546, 8546, 8546, 8546, 8546, 8546, 8546, 8546, 8546, 8546,
+     8546, 8546, 8546, 8546, 8546, 8546, 8546, 8546, 8546, 8546,
+     8547, 9098, 9106, 8547, 1709, 1697, 1696, 1688, 9098, 9106,
+
+     9098, 8547, 9098, 9106, 1687, 1686, 8547, 1685, 1682, 1678,
+     1672, 1670, 8547, 8547, 1669, 8547, 1662, 8547, 8548, 8548,
+     8548, 8548, 1658, 1649, 8548, 1640, 1639, 1638, 1627, 1617,
+     1614, 1609, 1603, 1602, 1590, 8548, 1589, 1588, 1587, 1586,
+     1579, 8548, 1577, 1576, 1556, 8548, 1554, 1516, 8548, 8549,
+     8549, 8549, 8549, 1511, 1496, 1493, 1492, 1489, 1487, 1486,
+     1485, 1483, 1481, 1480, 1478, 8549, 8549, 1469, 8549, 1468,
+     1467, 1464, 8549, 1462, 1452, 1442, 8549, 8550, 8550, 8550,
+     8550, 1433, 1412, 8550, 1408, 1395, 1394, 1393, 1376, 1356,
+     1342, 1335, 1328, 1326, 1322, 1321, 1315, 1307, 1304, 1299,
+
+     8550, 1293, 1288, 1279, 8550, 8551, 8551, 8551, 8551, 1269,
+     1264, 8551, 1261, 1256, 1251, 1248, 1243, 1241, 1235, 1232,
+     1228, 1226, 8551, 1225, 1224, 1215, 1194, 1180, 8551, 1170,
+     1165, 1151, 8551, 1146, 1143, 8551, 8552, 8552, 8552, 8552,
+     1142, 1141, 1140, 1137, 1129, 8552, 1124, 1122, 1117, 1115,
+     1106, 1099, 8552, 8552, 1092, 1085, 1078, 1075, 1064, 8552,
+     1046, 1039, 1032, 8552, 8553, 8553, 8553, 8553, 1027, 1025,
+     8553, 1020, 1012,  998,  994,  993,  992,  989,  982,  976,
+      961,  959,  948,  942,  934,  929,  925, 8553,  920,  917,
+      912, 8553, 8554, 8554,  903, 8554, 8554,  890, 8554, 8554,
+
+     8554, 8554, 8554, 8554, 8554, 8554, 8554, 8554, 8554, 8554,
+     8554, 8554, 8554, 8554, 8554, 8554, 8554, 8554, 8554, 8554,
+     8554, 8554, 8554, 8554, 8555, 8555, 8555, 8555, 8555, 8555,
+      887,  882,  879,  874,  871, 8555,  865, 8555,  851, 8555,
+     8556, 8556,  845, 8556, 8556,  843, 8556, 8556, 8556, 8556,
+     8556, 8556, 8556, 8556, 8556, 8556, 8556, 8556, 8556, 8556,
+     8556, 8556, 8556, 8556, 8556, 8556, 8556, 8556, 8556, 8556,
+     8556, 8556, 8557, 8557, 8557, 8557, 8557, 8557,  841,  839,
+      832, 8557,  829, 8557,  828, 8557,  827, 8557, 8558,  821,
+      816, 8558,  813,  807, 8558,  800,  792,  786,  779, 8558,
+
+      778,  758,  748,  742,  730,  724,  714,  708,  703,  694,
+      689, 8558,  681,  660,  638, 8558, 8559, 8559, 8559, 8559,
+      633,  632, 8559,  631,  629,  616,  615,  614,  611,  609,
+      596,  595,  588, 8559,  583,  578,  573,  565,  563, 8559,
+      555,  549,  543, 8559,  530,  514, 8559, 8560, 8560, 8560,
+     8560,  512,  504,  502,  500,  499,  484,  476,  465,  447,
+      443,  413,  409, 8560, 8560,  391,  385,  383,  375,  370,
+     8560,  358,  351,  349, 8560, 8561, 8561, 8561, 8561,  335,
+      322, 8561,  313,  311,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0, 8561,    0,
+
+        0,    0, 8561, 8568, 8568, 8568, 8568, 8568, 8568, 8568,
+     8568, 8568, 8568, 8568, 8568, 8568, 8568, 8568, 8568, 8568,
+     8568, 8568, 8568, 8568, 8568, 8568, 8568, 8568, 8568, 8568,
+     8568, 8568, 8568, 8568, 8568, 8573, 8573,    0, 8573, 8573,
+     8573, 8573, 8573, 8573, 8573, 8573, 8573,    0, 8573, 8573,
+     8573, 8573, 8573, 8573, 8573, 8573, 8573, 8573, 8573, 8573,
+     8573, 8573, 8573, 8573, 8573, 8573, 8573, 8574, 8574, 8574,
+     8574, 8574, 8574, 8574, 8574, 8574, 8574, 8574, 8574, 8574,
+     8574, 8574, 8574, 8574, 8574, 8574, 8574, 8574, 8574, 8574,
+     8574, 8574, 8574, 8574, 8574, 8574, 8574, 8574, 8574, 8579,
+
+     8579, 8579, 8579, 8579, 8579, 8579, 8579, 8579, 8579, 8579,
+     8579, 8579, 8579, 8579, 8579, 8579, 8579, 8579, 8579, 8579,
+     8579, 8579, 8579, 8579, 8579, 8579, 8579, 8579, 8579, 8579,
+     8579, 8580,    0,    0, 8580,    0,    0,    0,    0,    0,
+        0,    0, 8580,    0,    0,    0,    0, 8580,    0,    0,
+        0,    0,    0, 8580, 8580,    0, 8580,    0, 8580, 8581,
+     8581,    0, 8581, 8581,    0, 8581, 8581, 8581, 8581, 8581,
+     8581, 8581, 8581, 8581, 8581, 8581, 8581, 8581, 8581, 8581,
+     8581, 8581, 8581, 8581, 8581, 8581, 8581, 8581, 8581, 8581,
+     8581, 8582, 8582, 8582, 8582, 8582, 8582,    0,    0,    0,
+
+        0,    0, 8582,    0, 8582,    0, 8582, 8583, 8583, 8583,
+     8583, 8583, 8583, 8583, 8583, 8583, 8583, 8583, 8583, 8583,
+     8583, 8583, 8583, 8583, 8583, 8583, 8583, 8583, 8583, 8583,
+     8583, 8583, 8583, 8583, 8583, 8583, 8583, 8583, 8583, 8584,
+     8584, 8584, 8584, 8584, 8584, 8584, 8584, 8584, 8584, 8584,
+     8584, 8584, 8584, 8584, 8584, 8584, 8584, 8584, 8584, 8584,
+     8584, 8584, 8584, 8584, 8584, 8584, 8584, 8584, 8584, 8584,
+     8584, 8585, 8585,    0, 8585, 8585,    0, 8585, 8585, 8585,
+     8585, 8585, 8585, 8585, 8585, 8585, 8585, 8585, 8585, 8585,
+     8585, 8585, 8585, 8585, 8585, 8585, 8585, 8585, 8585, 8585,
+
+     8585, 8585, 8585, 8586, 8586, 8586, 8586, 8586, 8586,    0,
+        0,    0,    0,    0, 8586,    0, 8586,    0, 8586, 8587,
+     8587,    0, 8587, 8587,    0, 8587, 8587, 8587, 8587, 8587,
+     8587, 8587, 8587, 8587, 8587, 8587, 8587, 8587, 8587, 8587,
+     8587, 8587, 8587, 8587, 8587, 8587, 8587, 8587, 8587, 8587,
+     8587, 8588, 8588, 8588, 8588, 8588, 8588,    0,    0,    0,
+        0,    0, 8588,    0, 8588,    0, 8588, 8590, 8590, 8590,
+     8590,    0,    0, 8590,    0,    0,    0,    0,    0,    0,
+        0,    0,    0, 8590, 8590,    0,    0,    0,    0,    0,
+     8590,    0,    0,    0, 8590, 8591, 8591, 8591, 8591,    0,
+
+        0, 8591,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0, 8591,    0,    0,    0,    0,    0, 8591,    0,
+        0,    0, 8591,    0,    0, 8591, 8592, 8592, 8592, 8592,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0, 8592, 8592,    0,    0,    0,    0,    0, 8592,
+        0,    0,    0, 8592, 8593, 8593, 8593, 8593,    0,    0,
+     8593,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0, 8593,    0,    0,
+        0, 8593, 8594, 8594,    0, 8594, 8594, 8594, 8594, 8594,
+     8594, 8594, 8594, 8594, 8594, 8594, 8594, 8594, 8594, 8594,
+
+     8594, 8594, 8594, 8594, 8594, 8594, 8594, 8594, 8594, 8594,
+     8594, 8594, 8594, 8594, 8596, 8596,    0, 8596,    0, 8596,
+     8596, 8596, 8596,    0, 8596, 8596, 8596, 8596, 8596, 8596,
+     8596, 8596, 8596, 8596, 8596, 8596, 8596, 8596, 8596, 8596,
+     8596, 8596, 8596, 8596, 8596, 8596, 8598, 8598, 8598, 8598,
+        0,    0, 8598, 8598,    0,    0,    0, 8598,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0, 8598,
+        0,    0,    0, 8598, 8600,    0,    0, 8600,    0, 8600,
+     8600, 8600, 8600, 8600, 8600, 8600, 8600, 8600, 8600, 8600,
+        0, 8600, 8600, 8600, 8600, 8600, 8600,    0, 8600, 8600,
+
+        0, 8600, 8600, 8600, 8600, 8600, 8601, 8601, 8601, 8601,
+     8601, 8601, 8601, 8601, 8601, 8601, 8601, 8601, 8601, 8601,
+     8601, 8601, 8601, 8601, 8601, 8601, 8601, 8601, 8601, 8601,
+     8601, 8601, 8601, 8601, 8601, 8601, 8601, 8601, 8604, 8604,
+        0, 8604, 8604, 8604, 8604, 8604, 8604, 8604, 8604, 8604,
+     8604, 8604, 8604, 8604, 8604, 8604, 8604, 8604, 8604, 8604,
+     8604, 8604, 8604, 8604, 8604, 8604, 8604, 8604, 8604, 8604,
+     8605, 8605,    0, 8605, 8605, 8605, 8605, 8605, 8605, 8605,
+     8605, 8605, 8605, 8605, 8605, 8605, 8605, 8605, 8605, 8605,
+     8605, 8605, 8605, 8605, 8605, 8605, 8605, 8605, 8605, 8605,
+
+     8605, 8605, 8607, 8607, 8607, 8607, 8607, 8607, 8607, 8607,
+     8607, 8607, 8607, 8607,    0, 8607, 8607, 8607, 8607, 8607,
+     8607, 8607, 8607, 8607, 8607, 8607, 8607, 8607, 8607, 8607,
+     8607, 8607, 8607, 8607, 8608, 8608, 8608, 8608, 8608, 8608,
+     8608, 8608, 8608, 8608, 8608, 8608, 8608, 8608, 8608, 8608,
+     8608, 8608, 8608, 8608, 8608, 8608, 8608, 8608, 8608, 8608,
+     8608, 8608, 8608, 8608, 8608, 8608, 8609, 8609,    0, 8609,
+     8609,    0, 8609, 8609, 8609,    0, 8609, 8609, 8609, 8609,
+     8609, 8609, 8609, 8609, 8609, 8609, 8609, 8609, 8609, 8609,
+     8609, 8609,    0, 8609, 8609, 8609, 8609, 8609, 8610, 8610,
+
+     8610, 8610, 8610, 8610, 8610, 8610, 8610, 8610, 8610, 8610,
+     8610, 8610, 8610, 8610, 8610, 8610, 8610, 8610, 8610, 8610,
+     8610, 8610, 8610, 8610, 8610, 8610, 8610, 8610, 8610, 8610,
+     8611, 8611,    0, 8611, 8611, 8611, 8611, 8611, 8611, 8611,
+     8611, 8611, 8611, 8611, 8611, 8611, 8611, 8611, 8611, 8611,
+     8611, 8611, 8611, 8611, 8611, 8611, 8611, 8611, 8611, 8611,
+     8611, 8611, 8612, 8612,    0, 8612, 8612,    0, 8612, 8612,
+     8612,    0,    0,    0, 8612, 8612, 8612, 8612,    0, 8612,
+     8612, 8612, 8612, 8612, 8612, 8612, 8612, 8612, 8612, 8612,
+     8612, 8612, 8612, 8612, 8613, 8613, 8613, 8613, 8613, 8613,
+
+     8613, 8613, 8613, 8613, 8613, 8613, 8613, 8613, 8613, 8613,
+     8613, 8613, 8613, 8613, 8613, 8613, 8613, 8613, 8613, 8613,
+     8613, 8613, 8613, 8613, 8613, 8613, 8614, 8614,    0, 8614,
+        0, 8614, 8614, 8614, 8614,    0, 8614, 8614, 8614, 8614,
+     8614, 8614, 8614, 8614, 8614, 8614, 8614, 8614, 8614, 8614,
+     8614, 8614, 8614, 8614, 8614, 8614, 8614, 8614, 8615, 8615,
+        0, 8615, 8615, 8615, 8615, 8615, 8615, 8615, 8615, 8615,
+        0, 8615, 8615, 8615, 8615, 8615, 8615, 8615, 8615, 8615,
+     8615,    0, 8615, 8615,    0, 8615, 8615, 8615, 8615, 8615,
+     8616, 8616, 8616, 8616, 8616, 8616, 8616, 8616, 8616, 8616,
+
+     8616, 8616, 8616, 8616, 8616, 8616, 8616, 8616, 8616, 8616,
+     8616, 8616, 8616, 8616, 8616, 8616, 8616, 8616, 8616, 8616,
+     8616, 8616, 8618, 8618,    0, 8618, 8618, 8618, 8618, 8618,
+     8618, 8618, 8618, 8618, 8618, 8618, 8618, 8618, 8618, 8618,
+     8618, 8618, 8618, 8618, 8618,    0, 8618, 8618,    0, 8618,
+     8618, 8618, 8618, 8618, 8619, 8619, 8619, 8619, 8619, 8619,
+     8619, 8619, 8619, 8619, 8619, 8619, 8619, 8619, 8619, 8619,
+     8619, 8619, 8619, 8619, 8619, 8619, 8619, 8619, 8619, 8619,
+     8619, 8619, 8619, 8619, 8619, 8619, 8621,    0,    0,    0,
+        0,    0,    0, 8621, 8621,    0,    0,    0, 8621, 8621,
+
+     8621, 8621,    0, 8621, 8621, 8621, 8621, 8621, 8621, 8621,
+     8621, 8621, 8621, 8621, 8621, 8621, 8621, 8621, 8622, 8622,
+     8622, 8622, 8622, 8622, 8622, 8622, 8622, 8622, 8622, 8622,
+     8622, 8622, 8622, 8622, 8622, 8622, 8622, 8622, 8622, 8622,
+     8622, 8622, 8622, 8622, 8622, 8622, 8622, 8622, 8622, 8622,
+     8623, 8623, 8623, 8623, 8623, 8623, 8623, 8623, 8623, 8623,
+     8623, 8623, 8623, 8623, 8623, 8623, 8623, 8623, 8623, 8623,
+     8623, 8623, 8623, 8623, 8623, 8623, 8623, 8623, 8623, 8623,
+     8623, 8623, 8625, 8625,    0, 8625,    0, 8625, 8625, 8625,
+     8625,    0, 8625, 8625, 8625, 8625, 8625, 8625, 8625, 8625,
+
+     8625, 8625, 8625, 8625, 8625, 8625, 8625, 8625, 8625, 8625,
+     8625, 8625, 8625, 8625, 8626, 8626,    0, 8626, 8626, 8626,
+     8626, 8626, 8626, 8626, 8626, 8626, 8626, 8626, 8626, 8626,
+     8626, 8626, 8626, 8626, 8626, 8626, 8626, 8626, 8626, 8626,
+     8626, 8626, 8626, 8626, 8626, 8626, 8627, 8627,    0, 8627,
+     8627,    0, 8627, 8627, 8627,    0,    0,    0, 8627, 8627,
+     8627, 8627, 8627, 8627, 8627, 8627, 8627, 8627, 8627, 8627,
+     8627, 8627, 8627, 8627, 8627, 8627, 8627, 8627, 8628, 8628,
+     8628, 8628, 8628, 8628, 8628, 8628, 8628, 8628, 8628, 8628,
+     8628, 8628, 8628, 8628, 8628, 8628, 8628, 8628, 8628, 8628,
+
+     8628, 8628, 8628, 8628, 8628, 8628, 8628, 8628, 8628, 8628,
+     8629, 8629,    0, 8629,    0, 8629, 8629, 8629, 8629,    0,
+     8629, 8629, 8629, 8629, 8629, 8629, 8629, 8629, 8629, 8629,
+     8629, 8629, 8629, 8629, 8629, 8629, 8629, 8629, 8629, 8629,
+     8629, 8629, 8630, 8630,    0, 8630, 8630,    0, 8630, 8630,
+     8630,    0, 8630, 8630, 8630, 8630, 8630, 8630,    0, 8630,
+     8630, 8630, 8630, 8630, 8630, 8630, 8630, 8630, 8630, 8630,
+     8630,    0,    0, 8630, 8631, 8631, 8631, 8631, 8631, 8631,
+     8631, 8631, 8631, 8631, 8631, 8631, 8631, 8631, 8631, 8631,
+     8631, 8631, 8631, 8631, 8631, 8631, 8631, 8631, 8631, 8631,
+
+     8631, 8631, 8631, 8631, 8631, 8631, 8632, 8632,    0, 8632,
+        0, 8632, 8632, 8632, 8632,    0, 8632, 8632, 8632, 8632,
+     8632, 8632, 8632, 8632, 8632, 8632, 8632, 8632, 8632, 8632,
+     8632, 8632, 8632, 8632, 8632, 8632, 8632, 8632, 8639, 8639,
+     8639, 8639,    0,    0, 8639,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0, 8639,    0,    0,    0, 8639, 8640, 8640, 8640, 8640,
+        0,    0,    0,    0,    0,    0,    0, 8640,    0,    0,
+        0,    0, 8640,    0,    0,    0,    0,    0,    0, 8640,
+        0,    0,    0, 8640, 8642, 8642, 8642, 8642,    0,    0,
+
+        0,    0,    0,    0,    0,    0,    0,    0, 8642,    0,
+     8642,    0,    0,    0,    0,    0,    0, 8642,    0,    0,
+        0, 8642, 8643, 8643,    0, 8643, 8643, 8643, 8643, 8643,
+     8643, 8643, 8643, 8643, 8643, 8643, 8643, 8643, 8643, 8643,
+     8643, 8643, 8643, 8643, 8643, 8643, 8643, 8643, 8643, 8643,
+     8643, 8643, 8643, 8643, 8645,    0,    0,    0, 8645,    0,
+        0,    0,    0,    0,    0,    0, 8645,    0,    0,    0,
+        0,    0,    0, 8645,    0,    0,    0, 8645, 8648, 8648,
+        0, 8648, 8648,    0, 8648, 8648, 8648, 8648, 8648, 8648,
+     8648, 8648, 8648, 8648, 8648, 8648, 8648, 8648, 8648, 8648,
+
+     8648, 8648, 8648, 8648, 8648, 8648, 8648, 8648, 8648, 8648,
+     8649, 8649, 8649, 8649, 8649, 8649, 8649, 8649, 8649, 8649,
+     8649, 8649, 8649, 8649, 8649, 8649, 8649, 8649, 8649, 8649,
+     8649, 8649, 8649, 8649, 8649, 8649, 8649, 8649, 8649, 8649,
+     8649, 8649, 8652, 8652, 8652, 8652, 8652, 8652, 8652, 8652,
+     8652, 8652, 8652,    0, 8652, 8652, 8652, 8652, 8652, 8652,
+     8652, 8652, 8652, 8652, 8652, 8652, 8652, 8652, 8652, 8652,
+     8652, 8652, 8652, 8652, 8653, 8653, 8653, 8653, 8653, 8653,
+     8653, 8653, 8653, 8653, 8653, 8653, 8653, 8653, 8653, 8653,
+     8653, 8653, 8653, 8653, 8653, 8653, 8653, 8653, 8653, 8653,
+
+     8653, 8653, 8653, 8653, 8653, 8653, 8655, 8655, 8655, 8655,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0, 8655, 8655,    0,    0,    0,    0,    0, 8655,
+        0,    0,    0, 8655, 8656, 8656, 8656, 8656, 8656, 8656,
+     8656, 8656, 8656, 8656, 8656,    0, 8656, 8656, 8656, 8656,
+     8656, 8656, 8656, 8656, 8656, 8656, 8656, 8656, 8656, 8656,
+     8656, 8656, 8656, 8656, 8656, 8656, 8657, 8657, 8657, 8657,
+     8657, 8657, 8657, 8657, 8657, 8657, 8657, 8657, 8657, 8657,
+     8657, 8657, 8657, 8657, 8657, 8657, 8657, 8657, 8657, 8657,
+     8657, 8657, 8657, 8657, 8657, 8657, 8657, 8657, 8662,    0,
+
+        0, 8662,    0,    0,    0,    0,    0, 8662,    0,    0,
+        0,    0,    0,    0, 8662,    0,    0,    0,    0,    0,
+        0, 8662,    0,    0,    0, 8662, 8663, 8663, 8663, 8663,
+        0,    0, 8663,    0,    0,    0,    0,    0,    0,    0,
+     8663,    0,    0,    0,    0,    0,    0,    0,    0, 8663,
+        0,    0,    0, 8663,    0,    0, 8663, 8665, 8665, 8665,
+     8665,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0, 8665,    0, 8665, 8665, 8665, 8665,    0,    0,    0,
+     8665,    0,    0,    0, 8665, 8666, 8666, 8666, 8666,    0,
+        0, 8666,    0,    0,    0,    0,    0,    0,    0,    0,
+
+        0,    0,    0,    0,    0,    0,    0,    0, 8666,    0,
+        0,    0, 8666, 8667, 8667, 8667, 8667,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0, 8667,    0, 8667,
+        0,    0,    0,    0,    0,    0, 8667,    0,    0,    0,
+     8667, 8668, 8668, 8668, 8668,    0,    0, 8668,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0, 8668,    0,    0,    0, 8668, 8669,
+     8669, 8669, 8669,    0,    0, 8669,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0, 8669,    0,    0,    0, 8669, 8670, 8670, 8670,
+
+     8670,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0, 8670,    0, 8670, 8670,    0,    0,    0,
+     8670,    0,    0,    0, 8670, 8672, 8672, 8672, 8672,    0,
+        0,    0,    0,    0, 8672,    0,    0,    0,    0,    0,
+        0, 8672, 8672,    0,    0,    0,    0,    0, 8672,    0,
+        0,    0, 8672, 8673, 8673, 8673, 8673,    0,    0, 8673,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0, 8673,    0,    0,    0,
+     8673, 8674, 8674, 8674, 8674,    0,    0,    0,    0,    0,
+     8674,    0,    0,    0,    0,    0,    0, 8674,    0,    0,
+
+        0,    0,    0,    0, 8674,    0,    0,    0, 8674, 8676,
+     8676, 8676, 8676,    0,    0, 8676,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0, 8676,    0,    0,    0, 8676, 8676, 8677, 8677,
+     8677, 8677,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0, 8677,    0, 8677, 8677,    0,    0,    0,    0,
+        0, 8677,    0,    0,    0, 8677, 8678, 8678, 8678, 8678,
+        0,    0, 8678,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0, 8678,
+        0,    0,    0, 8678, 8680, 8680,    0, 8680,    0, 8680,
+
+     8680, 8680, 8680, 8680, 8680, 8680, 8680, 8680, 8680, 8680,
+     8680, 8680, 8680, 8680, 8680, 8680, 8680, 8680, 8680, 8680,
+        0, 8680, 8680, 8680, 8680, 8680, 8681, 8681,    0, 8681,
+     8681, 8681, 8681, 8681, 8681, 8681, 8681, 8681, 8681, 8681,
+     8681, 8681, 8681, 8681, 8681, 8681, 8681, 8681, 8681, 8681,
+     8681, 8681, 8681, 8681, 8681, 8681, 8681, 8681, 8683, 8683,
+     8683, 8683,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0, 8683, 8683,    0, 8683,    0,    0,
+        0, 8683,    0,    0,    0, 8683, 8684, 8684, 8684, 8684,
+        0,    0, 8684,    0,    0,    0,    0,    0,    0,    0,
+
+        0,    0,    0,    0,    0,    0,    0,    0,    0, 8684,
+        0,    0,    0, 8684, 8685, 8685, 8685, 8685,    0,    0,
+     8685,    0,    0,    0,    0, 8685,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0, 8685,    0,    0,
+        0, 8685, 8687, 8687, 8687, 8687,    0,    0,    0,    0,
+        0,    0, 8687, 8687,    0,    0,    0,    0, 8687, 8687,
+        0,    0,    0,    0,    0, 8687,    0,    0,    0, 8687,
+     8688, 8688, 8688, 8688,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0, 8688,    0,    0, 8688,
+        0,    0,    0, 8688,    0,    0,    0, 8688, 8689, 8689,
+
+        0, 8689, 8689, 8689, 8689, 8689, 8689, 8689, 8689, 8689,
+     8689, 8689, 8689, 8689, 8689, 8689, 8689, 8689,    0, 8689,
+     8689, 8689, 8689, 8689, 8689, 8689, 8689, 8689, 8689, 8689,
+     8690, 8690, 8690, 8690, 8690, 8690, 8690, 8690, 8690, 8690,
+     8690, 8690, 8690, 8690, 8690, 8690, 8690, 8690, 8690, 8690,
+     8690, 8690, 8690, 8690, 8690, 8690, 8690, 8690, 8690, 8690,
+     8690, 8690, 8692, 8692, 8692, 8692,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0, 8692, 8692,
+        0, 8692,    0,    0,    0, 8692,    0,    0,    0, 8692,
+     8693, 8693, 8693, 8693,    0,    0, 8693,    0,    0,    0,
+
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0, 8693,    0,    0,    0, 8693, 8694, 8694,
+     8694, 8694,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0, 8694,    0,    0, 8694,    0,    0,
+        0, 8694,    0,    0,    0, 8694, 8697, 8697,    0,    0,
+     8697,    0,    0, 8697, 8697,    0, 8697, 8697, 8697, 8697,
+     8697, 8697,    0, 8697, 8697, 8697, 8697, 8697, 8697,    0,
+     8697, 8697, 8697, 8697, 8697,    0,    0, 8697, 8698, 8698,
+     8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698,
+     8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698,
+
+     8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698,
+     8699, 8699,    0, 8699, 8699, 8699, 8699, 8699, 8699, 8699,
+     8699, 8699, 8699, 8699, 8699, 8699, 8699, 8699, 8699, 8699,
+     8699, 8699, 8699, 8699, 8699, 8699, 8699, 8699, 8699, 8699,
+     8699, 8699, 8700, 8700,    0, 8700,    0, 8700, 8700, 8700,
+     8700, 8700, 8700, 8700, 8700, 8700, 8700, 8700, 8700, 8700,
+     8700, 8700, 8700, 8700, 8700, 8700, 8700, 8700,    0, 8700,
+     8700, 8700, 8700, 8700, 8701, 8701,    0, 8701, 8701, 8701,
+     8701, 8701, 8701, 8701, 8701, 8701, 8701, 8701, 8701, 8701,
+     8701, 8701, 8701, 8701, 8701, 8701, 8701, 8701, 8701, 8701,
+
+     8701, 8701, 8701, 8701, 8701, 8701, 8702, 8702,    0, 8702,
+     8702, 8702, 8702, 8702, 8702, 8702, 8702, 8702, 8702, 8702,
+     8702, 8702, 8702, 8702, 8702, 8702, 8702, 8702, 8702, 8702,
+     8702, 8702, 8702, 8702, 8702, 8702, 8702, 8702, 8703, 8703,
+     8703, 8703,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0, 8703,    0, 8703, 8703,    0,    0,    0,    0,
+        0, 8703,    0,    0,    0, 8703, 8704, 8704, 8704, 8704,
+        0,    0, 8704,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0, 8704,
+        0,    0,    0, 8704, 8706, 8706, 8706, 8706,    0,    0,
+
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+     8706, 8706,    0,    0,    0,    0,    0, 8706,    0,    0,
+        0, 8706, 8707, 8707, 8707, 8707,    0,    0, 8707,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0, 8707,    0,    0,    0, 8707,
+     8710, 8710, 8710, 8710,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0, 8710, 8710,    0,    0,
+        0,    0,    0, 8710,    0,    0,    0, 8710, 8711, 8711,
+     8711, 8711,    0,    0, 8711,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+
+        0, 8711,    0,    0,    0, 8711, 8715, 8715,    0, 8715,
+     8715,    0, 8715, 8715, 8715,    0, 8715, 8715, 8715, 8715,
+     8715, 8715,    0, 8715, 8715, 8715, 8715, 8715, 8715,    0,
+     8715, 8715,    0, 8715, 8715,    0,    0, 8715, 8716, 8716,
+     8716, 8716, 8716, 8716, 8716, 8716, 8716, 8716, 8716, 8716,
+     8716, 8716, 8716, 8716, 8716, 8716, 8716, 8716, 8716, 8716,
+     8716, 8716, 8716, 8716, 8716, 8716, 8716, 8716, 8716, 8716,
+     8717, 8717,    0, 8717,    0, 8717, 8717, 8717, 8717, 8717,
+     8717, 8717, 8717, 8717, 8717, 8717, 8717, 8717, 8717, 8717,
+     8717, 8717, 8717, 8717, 8717, 8717,    0, 8717, 8717, 8717,
+
+     8717, 8717, 8718, 8718,    0, 8718, 8718, 8718, 8718, 8718,
+     8718, 8718, 8718, 8718, 8718, 8718, 8718, 8718, 8718, 8718,
+     8718, 8718, 8718, 8718, 8718, 8718, 8718, 8718, 8718, 8718,
+     8718, 8718, 8718, 8718, 8719, 8719,    0, 8719,    0, 8719,
+     8719, 8719, 8719, 8719, 8719, 8719, 8719, 8719, 8719, 8719,
+     8719, 8719, 8719, 8719, 8719, 8719, 8719, 8719, 8719, 8719,
+        0, 8719, 8719, 8719, 8719, 8719, 8720, 8720,    0, 8720,
+     8720, 8720, 8720, 8720, 8720, 8720, 8720, 8720, 8720, 8720,
+     8720, 8720, 8720, 8720, 8720, 8720, 8720, 8720, 8720, 8720,
+     8720, 8720, 8720, 8720, 8720, 8720, 8720, 8720, 8721, 8721,
+
+        0, 8721, 8721, 8721, 8721, 8721, 8721, 8721, 8721, 8721,
+        0, 8721, 8721, 8721, 8721, 8721, 8721, 8721, 8721, 8721,
+     8721, 8721, 8721, 8721, 8721, 8721, 8721, 8721, 8721, 8721,
+     8722, 8722, 8722, 8722, 8722, 8722, 8722, 8722, 8722, 8722,
+     8722, 8722, 8722, 8722, 8722, 8722, 8722, 8722, 8722, 8722,
+     8722, 8722, 8722, 8722, 8722, 8722, 8722, 8722, 8722, 8722,
+     8722, 8722, 8723, 8723, 8723, 8723, 8723, 8723, 8723, 8723,
+     8723, 8723, 8723, 8723, 8723, 8723, 8723, 8723, 8723, 8723,
+     8723, 8723, 8723, 8723, 8723, 8723, 8723, 8723, 8723, 8723,
+     8723, 8723, 8723, 8723, 8724, 8724, 8724, 8724, 8724, 8724,
+
+     8724, 8724, 8724, 8724, 8724, 8724, 8724, 8724, 8724, 8724,
+     8724, 8724, 8724, 8724, 8724, 8724, 8724, 8724, 8724, 8724,
+     8724, 8724, 8724, 8724, 8724, 8724, 8725, 8725, 8725, 8725,
+     8725, 8725, 8725, 8725, 8725, 8725, 8725, 8725, 8725, 8725,
+     8725, 8725, 8725, 8725, 8725, 8725, 8725, 8725, 8725, 8725,
+     8725, 8725, 8725, 8725, 8725, 8725, 8725, 8725, 8726,    0,
+        0, 8726,    0, 8726, 8726, 8726, 8726, 8726, 8726, 8726,
+        0, 8726, 8726, 8726,    0, 8726, 8726, 8726,    0, 8726,
+     8726, 8726, 8726, 8726,    0, 8726, 8726, 8726, 8726, 8726,
+     8727, 8727, 8727, 8727, 8727, 8727, 8727, 8727, 8727, 8727,
+
+     8727, 8727, 8727, 8727, 8727, 8727, 8727, 8727, 8727, 8727,
+     8727, 8727, 8727, 8727, 8727, 8727, 8727, 8727, 8727, 8727,
+     8727, 8727, 8728, 8728,    0, 8728, 8728,    0, 8728, 8728,
+     8728, 8728, 8728, 8728, 8728, 8728, 8728, 8728, 8728, 8728,
+     8728, 8728, 8728, 8728, 8728, 8728, 8728,    0, 8728,    0,
+     8728, 8728, 8728, 8728, 8729, 8729, 8729, 8729, 8729, 8729,
+     8729, 8729, 8729, 8729, 8729, 8729, 8729, 8729, 8729, 8729,
+     8729, 8729, 8729, 8729, 8729, 8729, 8729, 8729, 8729, 8729,
+     8729, 8729, 8729, 8729, 8729, 8729, 8730,    0,    0, 8730,
+        0, 8730, 8730, 8730, 8730, 8730, 8730, 8730, 8730, 8730,
+
+     8730, 8730, 8730, 8730, 8730, 8730, 8730, 8730, 8730, 8730,
+     8730, 8730, 8730, 8730, 8730, 8730, 8730, 8730, 8731, 8731,
+     8731, 8731, 8731, 8731, 8731, 8731, 8731, 8731, 8731, 8731,
+     8731, 8731, 8731, 8731, 8731, 8731, 8731, 8731, 8731, 8731,
+     8731, 8731, 8731, 8731, 8731, 8731, 8731, 8731, 8731, 8731,
+     8732,    0,    0, 8732,    0, 8732, 8732, 8732, 8732, 8732,
+     8732, 8732, 8732, 8732, 8732, 8732, 8732, 8732, 8732, 8732,
+     8732, 8732, 8732, 8732, 8732, 8732, 8732, 8732, 8732, 8732,
+     8732, 8732, 8733, 8733, 8733, 8733, 8733, 8733, 8733, 8733,
+     8733, 8733, 8733, 8733, 8733, 8733, 8733, 8733, 8733, 8733,
+
+     8733, 8733, 8733, 8733, 8733, 8733, 8733, 8733, 8733, 8733,
+     8733, 8733, 8733, 8733, 8735, 8735,    0, 8735,    0, 8735,
+     8735, 8735, 8735, 8735, 8735, 8735,    0, 8735, 8735,    0,
+        0, 8735, 8735, 8735, 8735, 8735, 8735, 8735, 8735, 8735,
+     8735, 8735, 8735, 8735, 8735, 8735, 8736, 8736, 8736, 8736,
+     8736, 8736, 8736, 8736, 8736, 8736, 8736, 8736, 8736, 8736,
+     8736, 8736, 8736, 8736, 8736, 8736, 8736, 8736, 8736, 8736,
+     8736, 8736, 8736, 8736, 8736, 8736, 8736, 8736, 8741, 8741,
+     8741, 8741, 8741, 8741, 8741, 8741, 8741, 8741, 8741, 8741,
+     8741, 8741, 8741, 8741,    0, 8741, 8741, 8741, 8741, 8741,
+
+     8741, 8741, 8741, 8741, 8741, 8741, 8741, 8741, 8741, 8741,
+     8745, 8745, 8745, 8745, 8745, 8745, 8745, 8745, 8745, 8745,
+     8745, 8745, 8745, 8745, 8745, 8745,    0, 8745, 8745, 8745,
+     8745, 8745, 8745, 8745, 8745, 8745, 8745, 8745, 8745, 8745,
+     8745, 8745, 8746,    0,    0, 8746,    0,    0,    0,    0,
+        0,    0,    0, 8746,    0,    0,    0,    0, 8746,    0,
+        0,    0,    0,    0, 8746, 8746,    0, 8746,    0, 8746,
+     8748, 8748, 8748, 8748,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0, 8748, 8748,    0, 8748,
+        0,    0,    0, 8748,    0,    0,    0, 8748, 8749, 8749,
+
+     8749, 8749,    0,    0, 8749,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0, 8749,    0,    0,    0, 8749, 8752, 8752, 8752, 8752,
+        0,    0,    0,    0,    0, 8752,    0,    0,    0,    0,
+        0,    0, 8752, 8752,    0,    0,    0,    0,    0, 8752,
+        0,    0,    0, 8752, 8753, 8753, 8753, 8753,    0,    0,
+     8753,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0, 8753,    0,    0,
+        0, 8753, 8754, 8754, 8754, 8754, 8754, 8754, 8754, 8754,
+     8754, 8754, 8754,    0, 8754, 8754, 8754, 8754, 8754, 8754,
+
+     8754, 8754, 8754, 8754, 8754, 8754, 8754, 8754, 8754, 8754,
+     8754, 8754, 8754, 8754, 8755,    0,    0, 8755,    0,    0,
+        0,    0,    0, 8755,    0,    0,    0,    0,    0,    0,
+     8755,    0,    0,    0,    0,    0,    0, 8755,    0,    0,
+        0, 8755, 8756, 8756,    0, 8756, 8756, 8756, 8756, 8756,
+     8756, 8756, 8756, 8756, 8756, 8756, 8756, 8756, 8756, 8756,
+     8756, 8756, 8756, 8756, 8756, 8756, 8756, 8756, 8756, 8756,
+     8756, 8756, 8756, 8756, 8757, 8757, 8757, 8757, 8757, 8757,
+        0,    0,    0,    0,    0, 8757,    0, 8757,    0, 8757,
+     8758, 8758,    0, 8758, 8758, 8758,    0,    0,    0,    0,
+
+        0, 8758,    0, 8758,    0, 8758, 8759, 8759,    0, 8759,
+     8759, 8759, 8759, 8759, 8759, 8759, 8759, 8759, 8759, 8759,
+     8759, 8759, 8759, 8759, 8759, 8759, 8759, 8759, 8759, 8759,
+     8759, 8759, 8759, 8759, 8759, 8759, 8759, 8759, 8760, 8760,
+     8760, 8760, 8760, 8760,    0,    0,    0, 8760,    0, 8760,
+        0, 8760,    0, 8760, 8761, 8761,    0, 8761, 8761, 8761,
+        0,    0,    0,    0,    0, 8761,    0, 8761,    0, 8761,
+     8765, 8765, 8765, 8765,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0, 8765, 8765,    0,    0,
+        0,    0,    0, 8765,    0,    0,    0, 8765, 8766, 8766,
+
+     8766, 8766,    0,    0, 8766,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0, 8766,    0,    0,    0, 8766, 8774, 8774, 8774, 8774,
+     8774, 8774, 8774, 8774, 8774, 8774, 8774, 8774, 8774, 8774,
+     8774, 8774, 8774, 8774, 8774, 8774, 8774, 8774, 8774, 8774,
+     8774, 8774, 8774, 8774, 8774, 8774, 8774, 8774, 8777, 8777,
+        0, 8777, 8777, 8777, 8777, 8777, 8777, 8777, 8777, 8777,
+        0, 8777, 8777, 8777, 8777, 8777, 8777, 8777, 8777, 8777,
+     8777, 8777, 8777, 8777, 8777, 8777, 8777, 8777, 8777, 8777,
+     8778, 8778, 8778, 8778, 8778, 8778, 8778, 8778, 8778, 8778,
+
+     8778, 8778, 8778, 8778, 8778, 8778, 8778, 8778, 8778, 8778,
+     8778, 8778, 8778, 8778, 8778, 8778, 8778, 8778, 8778, 8778,
+     8778, 8778, 8783, 8783, 8783, 8783, 8783, 8783, 8783, 8783,
+     8783, 8783, 8783, 8783, 8783, 8783, 8783, 8783,    0, 8783,
+     8783, 8783, 8783, 8783, 8783, 8783, 8783, 8783, 8783, 8783,
+     8783, 8783, 8783, 8783, 8784,    0,    0, 8784,    0,    0,
+        0,    0,    0,    0,    0, 8784,    0,    0,    0,    0,
+     8784,    0,    0,    0,    0,    0, 8784, 8784,    0, 8784,
+        0, 8784, 8785, 8785,    0, 8785, 8785, 8785, 8785, 8785,
+     8785, 8785, 8785, 8785, 8785, 8785, 8785, 8785, 8785, 8785,
+
+     8785, 8785, 8785, 8785, 8785, 8785, 8785, 8785, 8785, 8785,
+     8785, 8785, 8785, 8785, 8786, 8786, 8786, 8786, 8786, 8786,
+        0,    0,    0,    0,    0, 8786,    0, 8786,    0, 8786,
+     8787, 8787,    0, 8787, 8787, 8787,    0,    0,    0,    0,
+        0, 8787,    0, 8787,    0, 8787, 8788, 8788, 8788, 8788,
+     8788, 8788, 8788, 8788, 8788, 8788, 8788, 8788, 8788, 8788,
+     8788, 8788, 8788, 8788, 8788, 8788, 8788, 8788, 8788, 8788,
+     8788, 8788, 8788, 8788, 8788, 8788, 8788, 8788, 8789, 8789,
+     8789, 8789, 8789, 8789, 8789, 8789, 8789, 8789, 8789, 8789,
+     8789, 8789, 8789, 8789, 8789, 8789, 8789, 8789, 8789, 8789,
+
+     8789, 8789, 8789, 8789, 8789, 8789, 8789, 8789, 8789, 8789,
+     8790, 8790, 8790, 8790, 8790, 8790, 8790, 8790, 8790, 8790,
+     8790, 8790, 8790, 8790, 8790, 8790, 8790, 8790, 8790, 8790,
+     8790, 8790, 8790, 8790, 8790, 8790, 8790, 8790, 8790, 8790,
+     8790, 8790, 8791, 8791,    0, 8791, 8791, 8791, 8791, 8791,
+     8791, 8791, 8791, 8791, 8791, 8791, 8791, 8791, 8791, 8791,
+     8791, 8791, 8791, 8791, 8791, 8791, 8791, 8791, 8791, 8791,
+     8791, 8791, 8791, 8791, 8792, 8792, 8792, 8792, 8792, 8792,
+        0,    0,    0,    0,    0, 8792,    0, 8792,    0, 8792,
+     8793, 8793,    0, 8793, 8793, 8793,    0,    0,    0,    0,
+
+        0, 8793,    0, 8793,    0, 8793, 8794, 8794,    0, 8794,
+     8794, 8794, 8794, 8794, 8794, 8794, 8794, 8794, 8794, 8794,
+     8794, 8794, 8794, 8794, 8794, 8794, 8794, 8794, 8794, 8794,
+     8794, 8794, 8794, 8794, 8794, 8794, 8794, 8794, 8795, 8795,
+     8795, 8795, 8795, 8795,    0,    0,    0,    0,    0, 8795,
+        0, 8795,    0, 8795, 8796, 8796,    0, 8796, 8796, 8796,
+        0,    0,    0,    0,    0, 8796,    0, 8796,    0, 8796,
+     8797, 8797, 8797, 8797,    0,    0, 8797,    0,    0,    0,
+        0,    0,    0,    0,    0,    0, 8797, 8797,    0,    0,
+        0,    0,    0, 8797,    0,    0,    0, 8797, 8799, 8799,
+
+     8799, 8799,    0,    0, 8799,    0,    0,    0,    0,    0,
+        0,    0,    0,    0, 8799, 8799,    0,    0,    0,    0,
+        0, 8799,    0,    0,    0, 8799, 8801, 8801, 8801, 8801,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0, 8801, 8801,    0,    0,    0,    0,    0, 8801,
+        0,    0,    0, 8801, 8802, 8802, 8802, 8802,    0,    0,
+     8802,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0, 8802,    0,    0,
+        0, 8802, 8804, 8804,    0, 8804, 8804, 8804, 8804, 8804,
+     8804, 8804, 8804, 8804, 8804, 8804, 8804, 8804, 8804, 8804,
+
+     8804, 8804, 8804, 8804, 8804, 8804, 8804, 8804, 8804, 8804,
+     8804, 8804, 8804, 8804, 8806, 8806,    0, 8806,    0, 8806,
+     8806, 8806, 8806, 8806, 8806, 8806, 8806, 8806, 8806, 8806,
+     8806, 8806, 8806, 8806, 8806, 8806, 8806, 8806, 8806, 8806,
+        0, 8806, 8806, 8806, 8806, 8806, 8807, 8807,    0, 8807,
+     8807, 8807, 8807, 8807, 8807, 8807, 8807, 8807, 8807, 8807,
+     8807, 8807, 8807, 8807, 8807, 8807, 8807, 8807, 8807, 8807,
+     8807, 8807, 8807, 8807, 8807, 8807, 8807, 8807, 8808, 8808,
+     8808, 8808,    0,    0, 8808, 8808,    0,    0,    0, 8808,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+
+        0, 8808,    0,    0,    0, 8808, 8811,    0,    0, 8811,
+        0, 8811, 8811, 8811, 8811, 8811, 8811, 8811, 8811, 8811,
+     8811, 8811,    0, 8811, 8811, 8811, 8811, 8811, 8811,    0,
+     8811, 8811,    0, 8811, 8811, 8811, 8811, 8811, 8812, 8812,
+     8812, 8812, 8812, 8812, 8812, 8812, 8812, 8812, 8812, 8812,
+     8812, 8812, 8812, 8812, 8812, 8812, 8812, 8812, 8812, 8812,
+     8812, 8812, 8812, 8812, 8812, 8812, 8812, 8812, 8812, 8812,
+     8814, 8814,    0, 8814, 8814, 8814, 8814, 8814, 8814, 8814,
+     8814, 8814, 8814, 8814, 8814, 8814, 8814, 8814, 8814, 8814,
+     8814, 8814, 8814, 8814, 8814, 8814, 8814, 8814, 8814, 8814,
+
+     8814, 8814, 8815, 8815,    0, 8815, 8815, 8815, 8815, 8815,
+     8815, 8815, 8815, 8815, 8815, 8815, 8815, 8815, 8815, 8815,
+     8815, 8815, 8815, 8815, 8815, 8815, 8815, 8815, 8815, 8815,
+     8815, 8815, 8815, 8815, 8817, 8817, 8817, 8817, 8817, 8817,
+     8817, 8817, 8817, 8817, 8817, 8817,    0, 8817, 8817, 8817,
+     8817, 8817, 8817, 8817, 8817, 8817, 8817, 8817, 8817, 8817,
+     8817, 8817, 8817, 8817, 8817, 8817, 8818, 8818, 8818, 8818,
+     8818, 8818, 8818, 8818, 8818, 8818, 8818, 8818, 8818, 8818,
+     8818, 8818, 8818, 8818, 8818, 8818, 8818, 8818, 8818, 8818,
+     8818, 8818, 8818, 8818, 8818, 8818, 8818, 8818, 8819, 8819,
+
+     8819, 8819, 8819, 8819, 8819, 8819, 8819, 8819, 8819, 8819,
+     8819, 8819, 8819, 8819, 8819, 8819, 8819, 8819, 8819, 8819,
+     8819, 8819, 8819, 8819, 8819, 8819, 8819, 8819, 8819, 8819,
+     8820, 8820, 8820, 8820,    0,    0, 8820,    0,    0,    0,
+        0, 8820,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0, 8820,    0,    0,    0, 8820, 8821, 8821,
+        0, 8821, 8821,    0, 8821, 8821, 8821,    0, 8821, 8821,
+     8821, 8821, 8821, 8821, 8821, 8821, 8821, 8821, 8821, 8821,
+     8821, 8821, 8821, 8821,    0, 8821, 8821, 8821, 8821, 8821,
+     8822, 8822, 8822, 8822, 8822, 8822, 8822, 8822, 8822, 8822,
+
+     8822, 8822, 8822, 8822, 8822, 8822, 8822, 8822, 8822, 8822,
+     8822, 8822, 8822, 8822, 8822, 8822, 8822, 8822, 8822, 8822,
+     8822, 8822, 8823, 8823,    0, 8823, 8823,    0, 8823, 8823,
+     8823,    0,    0,    0, 8823, 8823, 8823, 8823,    0, 8823,
+     8823, 8823, 8823, 8823, 8823, 8823, 8823, 8823, 8823, 8823,
+     8823, 8823, 8823, 8823, 8824, 8824, 8824, 8824, 8824, 8824,
+     8824, 8824, 8824, 8824, 8824, 8824, 8824, 8824, 8824, 8824,
+     8824, 8824, 8824, 8824, 8824, 8824, 8824, 8824, 8824, 8824,
+     8824, 8824, 8824, 8824, 8824, 8824, 8825, 8825,    0, 8825,
+        0, 8825, 8825, 8825, 8825, 8825, 8825, 8825, 8825, 8825,
+
+     8825, 8825, 8825, 8825, 8825, 8825, 8825, 8825, 8825, 8825,
+     8825, 8825,    0, 8825, 8825, 8825, 8825, 8825, 8826, 8826,
+        0, 8826, 8826, 8826, 8826, 8826, 8826, 8826, 8826, 8826,
+     8826, 8826, 8826, 8826, 8826, 8826, 8826, 8826, 8826, 8826,
+     8826, 8826, 8826, 8826, 8826, 8826, 8826, 8826, 8826, 8826,
+     8827, 8827,    0, 8827, 8827, 8827, 8827, 8827, 8827, 8827,
+     8827, 8827,    0, 8827, 8827, 8827, 8827, 8827, 8827, 8827,
+     8827, 8827, 8827,    0, 8827, 8827,    0, 8827, 8827, 8827,
+     8827, 8827, 8828, 8828, 8828, 8828, 8828, 8828, 8828, 8828,
+     8828, 8828, 8828, 8828, 8828, 8828, 8828, 8828, 8828, 8828,
+
+     8828, 8828, 8828, 8828, 8828, 8828, 8828, 8828, 8828, 8828,
+     8828, 8828, 8828, 8828, 8830, 8830,    0, 8830, 8830, 8830,
+     8830, 8830, 8830, 8830, 8830, 8830, 8830, 8830, 8830, 8830,
+     8830, 8830, 8830, 8830, 8830, 8830, 8830,    0, 8830, 8830,
+        0, 8830, 8830, 8830, 8830, 8830, 8831, 8831, 8831, 8831,
+     8831, 8831, 8831, 8831, 8831, 8831, 8831, 8831, 8831, 8831,
+     8831, 8831, 8831, 8831, 8831, 8831, 8831, 8831, 8831, 8831,
+     8831, 8831, 8831, 8831, 8831, 8831, 8831, 8831, 8833,    0,
+        0,    0,    0,    0,    0, 8833, 8833,    0,    0,    0,
+     8833, 8833, 8833, 8833,    0, 8833, 8833, 8833, 8833, 8833,
+
+     8833, 8833, 8833, 8833, 8833, 8833, 8833, 8833, 8833, 8833,
+     8834, 8834, 8834, 8834, 8834, 8834, 8834, 8834, 8834, 8834,
+     8834, 8834, 8834, 8834, 8834, 8834, 8834, 8834, 8834, 8834,
+     8834, 8834, 8834, 8834, 8834, 8834, 8834, 8834, 8834, 8834,
+     8834, 8834, 8836, 8836,    0, 8836,    0, 8836, 8836, 8836,
+     8836, 8836, 8836, 8836, 8836, 8836, 8836, 8836, 8836, 8836,
+     8836, 8836, 8836, 8836, 8836, 8836, 8836, 8836,    0, 8836,
+     8836, 8836, 8836, 8836, 8837, 8837,    0, 8837, 8837, 8837,
+     8837, 8837, 8837, 8837, 8837, 8837, 8837, 8837, 8837, 8837,
+     8837, 8837, 8837, 8837, 8837, 8837, 8837, 8837, 8837, 8837,
+
+     8837, 8837, 8837, 8837, 8837, 8837, 8838, 8838,    0, 8838,
+     8838,    0, 8838, 8838, 8838,    0,    0,    0, 8838, 8838,
+     8838, 8838, 8838, 8838, 8838, 8838, 8838, 8838, 8838, 8838,
+     8838, 8838, 8838, 8838, 8838, 8838, 8838, 8838, 8839, 8839,
+     8839, 8839, 8839, 8839, 8839, 8839, 8839, 8839, 8839, 8839,
+     8839, 8839, 8839, 8839, 8839, 8839, 8839, 8839, 8839, 8839,
+     8839, 8839, 8839, 8839, 8839, 8839, 8839, 8839, 8839, 8839,
+     8840, 8840,    0, 8840,    0, 8840, 8840, 8840, 8840, 8840,
+     8840, 8840, 8840, 8840, 8840, 8840, 8840, 8840, 8840, 8840,
+     8840, 8840, 8840, 8840, 8840, 8840,    0, 8840, 8840, 8840,
+
+     8840, 8840, 8841, 8841,    0, 8841, 8841, 8841, 8841, 8841,
+     8841, 8841, 8841, 8841, 8841, 8841, 8841, 8841, 8841, 8841,
+     8841, 8841, 8841, 8841, 8841, 8841, 8841, 8841, 8841, 8841,
+     8841, 8841, 8841, 8841, 8842, 8842,    0, 8842, 8842,    0,
+     8842, 8842, 8842,    0, 8842, 8842, 8842, 8842, 8842, 8842,
+        0, 8842, 8842, 8842, 8842, 8842, 8842, 8842, 8842, 8842,
+     8842, 8842, 8842,    0,    0, 8842, 8843, 8843, 8843, 8843,
+     8843, 8843, 8843, 8843, 8843, 8843, 8843, 8843, 8843, 8843,
+     8843, 8843, 8843, 8843, 8843, 8843, 8843, 8843, 8843, 8843,
+     8843, 8843, 8843, 8843, 8843, 8843, 8843, 8843, 8844, 8844,
+
+        0, 8844,    0, 8844, 8844, 8844, 8844, 8844, 8844, 8844,
+     8844, 8844, 8844, 8844, 8844, 8844, 8844, 8844, 8844, 8844,
+     8844, 8844, 8844, 8844,    0, 8844, 8844, 8844, 8844, 8844,
+     8845, 8845,    0, 8845, 8845, 8845, 8845, 8845, 8845, 8845,
+     8845, 8845, 8845, 8845, 8845, 8845, 8845, 8845, 8845, 8845,
+     8845, 8845, 8845, 8845, 8845, 8845, 8845, 8845, 8845, 8845,
+     8845, 8845, 8850, 8850, 8850, 8850,    0,    0, 8850,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0, 8850,    0,    0,    0, 8850,
+     8851, 8851, 8851, 8851,    0,    0,    0,    0,    0,    0,
+
+        0, 8851,    0,    0,    0,    0, 8851,    0,    0,    0,
+        0,    0,    0, 8851,    0,    0,    0, 8851, 8852, 8852,
+     8852, 8852,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0, 8852,    0, 8852,    0,    0,    0,    0,    0,
+        0, 8852,    0,    0,    0, 8852, 8853, 8853, 8853, 8853,
+        0,    0, 8853,    0,    0,    0,    0, 8853,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0, 8853,
+        0,    0,    0, 8853, 8854, 8854,    0, 8854, 8854, 8854,
+     8854, 8854, 8854, 8854, 8854, 8854, 8854, 8854, 8854, 8854,
+     8854, 8854, 8854, 8854, 8854, 8854, 8854, 8854, 8854, 8854,
+
+     8854, 8854, 8854, 8854, 8854, 8854, 8855,    0,    0,    0,
+     8855,    0,    0,    0,    0,    0,    0,    0, 8855,    0,
+        0,    0,    0,    0,    0, 8855,    0,    0,    0, 8855,
+     8857, 8857,    0, 8857, 8857,    0, 8857, 8857, 8857, 8857,
+     8857, 8857, 8857, 8857, 8857, 8857, 8857, 8857, 8857, 8857,
+     8857, 8857, 8857, 8857, 8857, 8857, 8857, 8857, 8857, 8857,
+     8857, 8857, 8858, 8858, 8858, 8858, 8858, 8858, 8858, 8858,
+     8858, 8858, 8858, 8858, 8858, 8858, 8858, 8858, 8858, 8858,
+     8858, 8858, 8858, 8858, 8858, 8858, 8858, 8858, 8858, 8858,
+     8858, 8858, 8858, 8858, 8860, 8860, 8860, 8860, 8860, 8860,
+
+     8860, 8860, 8860, 8860, 8860,    0, 8860, 8860, 8860, 8860,
+     8860, 8860, 8860, 8860, 8860, 8860, 8860, 8860, 8860, 8860,
+     8860, 8860, 8860, 8860, 8860, 8860, 8861, 8861, 8861, 8861,
+     8861, 8861, 8861, 8861, 8861, 8861, 8861, 8861, 8861, 8861,
+     8861, 8861, 8861, 8861, 8861, 8861, 8861, 8861, 8861, 8861,
+     8861, 8861, 8861, 8861, 8861, 8861, 8861, 8861, 8862, 8862,
+     8862, 8862,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0, 8862, 8862,    0,    0,    0,    0,
+        0, 8862,    0,    0,    0, 8862, 8863, 8863, 8863, 8863,
+     8863, 8863, 8863, 8863, 8863, 8863, 8863,    0, 8863, 8863,
+
+     8863, 8863, 8863, 8863, 8863, 8863, 8863, 8863, 8863, 8863,
+     8863, 8863, 8863, 8863, 8863, 8863, 8863, 8863, 8864, 8864,
+     8864, 8864, 8864, 8864, 8864, 8864, 8864, 8864, 8864, 8864,
+     8864, 8864, 8864, 8864, 8864, 8864, 8864, 8864, 8864, 8864,
+     8864, 8864, 8864, 8864, 8864, 8864, 8864, 8864, 8864, 8864,
+     8867, 8867, 8867, 8867,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0, 8867, 8867, 8867, 8867,
+        0,    0,    0, 8867,    0,    0,    0, 8867, 8868, 8868,
+     8868, 8868,    0,    0, 8868,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+
+        0, 8868,    0,    0,    0, 8868, 8869, 8869, 8869, 8869,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0, 8869,    0, 8869, 8869,    0,    0,    0, 8869,
+        0,    0,    0, 8869, 8870, 8870, 8870, 8870,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0, 8870,    0,
+     8870,    0,    0,    0,    0,    0,    0, 8870,    0,    0,
+        0, 8870, 8871, 8871, 8871, 8871,    0,    0, 8871,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0, 8871,    0,    0,    0, 8871,
+     8873, 8873, 8873, 8873,    0,    0, 8873,    0,    0,    0,
+
+        0,    0,    0,    0,    0,    0,    0, 8873,    0,    0,
+        0,    0,    0, 8873,    0,    0,    0, 8873,    0,    0,
+     8873, 8874, 8874, 8874, 8874,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0, 8874,    0, 8874,
+     8874,    0,    0,    0, 8874,    0,    0,    0, 8874, 8875,
+     8875, 8875, 8875,    0,    0,    0,    0,    0, 8875,    0,
+        0,    0,    0,    0,    0, 8875, 8875,    0,    0,    0,
+        0,    0, 8875,    0,    0,    0, 8875, 8876, 8876, 8876,
+     8876, 8876, 8876, 8876, 8876, 8876, 8876, 8876, 8876,    0,
+     8876, 8876, 8876,    0, 8876, 8876, 8876, 8876, 8876, 8876,
+
+     8876, 8876, 8876, 8876, 8876, 8876, 8876, 8876, 8876, 8877,
+     8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
+     8877, 8877, 8877, 8877, 8877,    0, 8877, 8877, 8877, 8877,
+     8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877, 8877,
+     8877, 8878, 8878, 8878, 8878,    0,    0, 8878,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0, 8878,    0,
+        0,    0,    0,    0, 8878,    0,    0,    0, 8878,    0,
+        0, 8878, 8879, 8879, 8879, 8879,    0,    0,    0,    0,
+        0, 8879,    0,    0,    0,    0,    0,    0, 8879,    0,
+        0,    0,    0,    0,    0, 8879,    0,    0,    0, 8879,
+
+     8880, 8880, 8880, 8880,    0,    0, 8880,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0, 8880,    0,    0,
+        0,    0,    0, 8880,    0,    0,    0, 8880,    0,    0,
+     8880, 8881, 8881, 8881, 8881,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0, 8881,    0, 8881, 8881,    0,
+        0,    0,    0,    0, 8881,    0,    0,    0, 8881, 8882,
+     8882, 8882, 8882,    0,    0, 8882,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0, 8882,    0,    0,    0, 8882, 8883, 8883, 8883,
+     8883,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+
+        0,    0,    0, 8883, 8883,    0,    0,    0,    0,    0,
+     8883,    0,    0,    0, 8883, 8886, 8886,    0, 8886,    0,
+     8886, 8886, 8886, 8886, 8886, 8886, 8886, 8886, 8886, 8886,
+     8886, 8886, 8886, 8886, 8886, 8886, 8886, 8886, 8886, 8886,
+     8886,    0, 8886, 8886, 8886, 8886, 8886, 8887, 8887, 8887,
+     8887,    0,    0, 8887,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0, 8887,    0,    0,    0,    0,    0,
+     8887,    0,    0,    0, 8887,    0,    0, 8887, 8889, 8889,
+     8889, 8889,    0,    0,    0,    0,    0,    0,    0, 8889,
+        0,    0,    0,    0, 8889, 8889,    0,    0,    0,    0,
+
+        0, 8889,    0,    0,    0, 8889, 8890, 8890, 8890, 8890,
+        0,    0, 8890,    0,    0,    0,    0, 8890,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0, 8890,
+        0,    0,    0, 8890, 8891, 8891, 8891, 8891,    0,    0,
+     8891,    0,    0,    0, 8891,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0, 8891,    0,    0,
+        0, 8891, 8892, 8892, 8892, 8892,    0,    0,    0,    0,
+        0,    0, 8892, 8892,    0,    0,    0,    0, 8892, 8892,
+        0,    0,    0,    0,    0, 8892,    0,    0,    0, 8892,
+     8893, 8893, 8893, 8893, 8893, 8893, 8893, 8893, 8893, 8893,
+
+     8893, 8893,    0, 8893, 8893, 8893,    0, 8893, 8893, 8893,
+     8893, 8893, 8893, 8893, 8893, 8893, 8893, 8893, 8893, 8893,
+     8893, 8893, 8894, 8894, 8894, 8894, 8894, 8894, 8894, 8894,
+     8894, 8894, 8894, 8894, 8894, 8894, 8894, 8894,    0, 8894,
+     8894, 8894, 8894, 8894, 8894, 8894, 8894, 8894, 8894, 8894,
+     8894, 8894, 8894, 8894, 8895, 8895, 8895, 8895,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+     8895, 8895,    0, 8895,    0,    0,    0, 8895,    0,    0,
+        0, 8895, 8896, 8896, 8896, 8896,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0, 8896,    0,
+
+        0, 8896,    0,    0,    0, 8896,    0,    0,    0, 8896,
+     8897, 8897, 8897, 8897,    0,    0, 8897,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0, 8897,    0,    0,
+        0,    0,    0, 8897,    0,    0,    0, 8897,    0,    0,
+     8897, 8898, 8898, 8898, 8898,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0, 8898,    0,    0,
+     8898,    0,    0,    0, 8898,    0,    0,    0, 8898, 8900,
+     8900,    0, 8900, 8900, 8900, 8900, 8900, 8900, 8900, 8900,
+     8900, 8900, 8900, 8900, 8900, 8900, 8900, 8900, 8900, 8900,
+     8900, 8900, 8900, 8900, 8900, 8900, 8900, 8900, 8900, 8900,
+
+     8900, 8901, 8901,    0, 8901,    0, 8901, 8901, 8901, 8901,
+     8901, 8901, 8901, 8901, 8901, 8901, 8901, 8901, 8901, 8901,
+     8901, 8901, 8901, 8901, 8901, 8901, 8901,    0, 8901, 8901,
+     8901, 8901, 8901, 8902, 8902,    0, 8902, 8902, 8902, 8902,
+     8902, 8902, 8902, 8902, 8902, 8902, 8902, 8902, 8902, 8902,
+     8902, 8902, 8902, 8902, 8902, 8902, 8902, 8902, 8902, 8902,
+     8902, 8902, 8902, 8902, 8902, 8903, 8903, 8903, 8903,    0,
+        0, 8903,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0, 8903,    0,
+        0,    0, 8903, 8904, 8904, 8904, 8904,    0,    0,    0,
+
+        0,    0,    0,    0,    0,    0,    0, 8904,    0, 8904,
+     8904,    0,    0,    0,    0,    0, 8904,    0,    0,    0,
+     8904, 8905, 8905, 8905, 8905,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0, 8905,    0, 8905, 8905,    0,
+        0,    0,    0,    0, 8905,    0,    0,    0, 8905, 8906,
+     8906, 8906, 8906,    0,    0, 8906,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0, 8906,    0,    0,    0,
+        0,    0, 8906,    0,    0,    0, 8906,    0,    0, 8906,
+     8908, 8908, 8908, 8908,    0,    0, 8908,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0, 8908,    0,    0,
+
+        0,    0,    0, 8908,    0,    0,    0, 8908,    0,    0,
+     8908, 8912, 8912,    0, 8912, 8912,    0, 8912, 8912, 8912,
+        0, 8912, 8912, 8912, 8912, 8912, 8912,    0, 8912, 8912,
+     8912, 8912, 8912, 8912,    0, 8912, 8912,    0, 8912, 8912,
+        0,    0, 8912, 8913, 8913,    0, 8913,    0, 8913, 8913,
+     8913, 8913, 8913, 8913, 8913, 8913, 8913, 8913, 8913, 8913,
+     8913, 8913, 8913, 8913, 8913, 8913, 8913, 8913, 8913,    0,
+     8913, 8913, 8913, 8913, 8913, 8914, 8914,    0, 8914,    0,
+     8914, 8914, 8914, 8914, 8914, 8914, 8914, 8914, 8914, 8914,
+     8914, 8914, 8914, 8914, 8914, 8914, 8914, 8914, 8914, 8914,
+
+     8914,    0, 8914, 8914, 8914, 8914, 8914, 8915,    0,    0,
+     8915,    0, 8915, 8915, 8915, 8915, 8915, 8915, 8915,    0,
+     8915, 8915, 8915,    0, 8915, 8915, 8915,    0, 8915, 8915,
+     8915, 8915, 8915,    0, 8915, 8915, 8915, 8915, 8915, 8916,
+     8916, 8916, 8916, 8916, 8916, 8916, 8916, 8916, 8916, 8916,
+     8916, 8916, 8916, 8916, 8916, 8916,    0, 8916, 8916, 8916,
+     8916, 8916, 8916,    0, 8916, 8916, 8916,    0, 8916, 8916,
+     8916, 8917, 8917,    0, 8917,    0, 8917, 8917, 8917, 8917,
+     8917, 8917, 8917,    0, 8917, 8917,    0,    0, 8917, 8917,
+     8917, 8917, 8917, 8917, 8917, 8917, 8917, 8917, 8917, 8917,
+
+     8917, 8917, 8917, 8921, 8921,    0, 8921, 8921, 8921, 8921,
+     8921, 8921, 8921, 8921, 8921, 8921, 8921, 8921, 8921, 8921,
+     8921, 8921, 8921, 8921, 8921, 8921, 8921, 8921, 8921, 8921,
+     8921, 8921, 8921, 8921, 8921, 8925, 8925, 8925, 8925,    0,
+        0, 8925,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0, 8925,    0,    0,    0,    0,    0, 8925,    0,
+        0,    0, 8925,    0,    0, 8925, 8927, 8927, 8927, 8927,
+        0,    0, 8927,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0, 8927,    0,    0,    0,    0,    0, 8927,
+        0,    0,    0, 8927,    0,    0, 8927, 8928, 8928, 8928,
+
+     8928, 8928, 8928, 8928, 8928, 8928, 8928, 8928, 8928, 8928,
+     8928, 8928, 8928, 8928, 8928, 8928, 8928, 8928, 8928, 8928,
+     8928, 8928, 8928, 8928, 8928, 8928, 8928, 8928, 8928, 8929,
+        0,    0, 8929,    0,    0,    0,    0,    0, 8929,    0,
+        0,    0,    0,    0,    0, 8929,    0,    0,    0,    0,
+        0,    0, 8929,    0,    0,    0, 8929, 8930, 8930, 8930,
+     8930, 8930, 8930,    0,    0,    0,    0,    0, 8930,    0,
+     8930,    0, 8930, 8931, 8931, 8931, 8931, 8931, 8931,    0,
+        0,    0, 8931,    0, 8931,    0, 8931,    0, 8931, 8933,
+     8933, 8933, 8933,    0,    0, 8933,    0,    0,    0,    0,
+
+        0,    0,    0,    0,    0,    0, 8933,    0,    0,    0,
+        0,    0, 8933,    0,    0,    0, 8933,    0,    0, 8933,
+     8937, 8937, 8937, 8937, 8937, 8937, 8937, 8937, 8937, 8937,
+     8937, 8937, 8937, 8937, 8937, 8937,    0, 8937, 8937, 8937,
+     8937, 8937, 8937, 8937, 8937, 8937, 8937, 8937, 8937, 8937,
+     8937, 8937, 8938, 8938, 8938, 8938, 8938, 8938,    0,    0,
+        0,    0,    0, 8938,    0, 8938,    0, 8938, 8939, 8939,
+     8939, 8939, 8939, 8939,    0,    0,    0,    0,    0, 8939,
+        0, 8939,    0, 8939, 8940, 8940, 8940, 8940, 8940, 8940,
+        0,    0,    0,    0,    0, 8940,    0, 8940,    0, 8940,
+
+     8941, 8941, 8941, 8941,    0,    0, 8941,    0,    0,    0,
+        0,    0,    0,    0,    0,    0, 8941, 8941,    0,    0,
+        0,    0,    0, 8941,    0,    0,    0, 8941, 8942, 8942,
+     8942, 8942,    0,    0, 8942,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0, 8942,    0,    0,    0,    0,
+        0, 8942,    0,    0,    0, 8942, 8943, 8943, 8943, 8943,
+        0,    0, 8943,    0,    0,    0,    0,    0,    0,    0,
+        0,    0, 8943, 8943,    0,    0,    0,    0,    0, 8943,
+        0,    0,    0, 8943, 8944, 8944, 8944, 8944,    0,    0,
+     8944,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+
+        0, 8944,    0,    0,    0,    0,    0, 8944,    0,    0,
+        0, 8944,    0,    0, 8944, 8946, 8946,    0, 8946,    0,
+     8946, 8946, 8946, 8946, 8946, 8946, 8946, 8946, 8946, 8946,
+     8946, 8946, 8946, 8946, 8946, 8946, 8946, 8946, 8946, 8946,
+     8946,    0, 8946, 8946, 8946, 8946, 8946, 8948, 8948, 8948,
+     8948,    0,    0, 8948,    0,    0,    0,    0, 8948,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+     8948,    0,    0,    0, 8948, 8949, 8949, 8949, 8949,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0, 8949, 8949,    0,    0,    0,    0,    0, 8949,    0,
+
+        0,    0, 8949, 8950, 8950,    0, 8950,    0, 8950, 8950,
+     8950, 8950, 8950, 8950, 8950, 8950, 8950, 8950, 8950, 8950,
+     8950, 8950, 8950, 8950, 8950, 8950, 8950, 8950, 8950,    0,
+     8950, 8950, 8950, 8950, 8950, 8951, 8951,    0, 8951,    0,
+     8951, 8951, 8951, 8951, 8951, 8951, 8951, 8951, 8951, 8951,
+     8951, 8951, 8951, 8951, 8951, 8951, 8951, 8951, 8951, 8951,
+     8951,    0, 8951, 8951, 8951, 8951, 8951, 8952, 8952,    0,
+     8952,    0, 8952, 8952, 8952, 8952, 8952, 8952, 8952, 8952,
+     8952, 8952, 8952, 8952, 8952, 8952, 8952, 8952, 8952, 8952,
+     8952, 8952, 8952,    0, 8952, 8952, 8952, 8952, 8952, 8953,
+
+     8953,    0, 8953,    0, 8953, 8953, 8953, 8953, 8953, 8953,
+     8953, 8953, 8953, 8953, 8953, 8953, 8953, 8953, 8953, 8953,
+     8953, 8953, 8953, 8953, 8953,    0, 8953, 8953, 8953, 8953,
+     8953, 8957, 8957, 8957, 8957,    0,    0, 8957,    0,    0,
+        0,    0, 8957,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0, 8957,    0,    0,    0, 8957, 8958,
+     8958, 8958, 8958,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0, 8958,    0, 8958,    0,    0,    0,    0,
+        0,    0, 8958,    0,    0,    0, 8958, 8959, 8959, 8959,
+     8959, 8959, 8959, 8959, 8959, 8959, 8959, 8959, 8959,    0,
+
+     8959, 8959, 8959,    0, 8959, 8959, 8959, 8959, 8959, 8959,
+     8959, 8959, 8959, 8959, 8959, 8959, 8959, 8959, 8959, 8960,
+     8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960,
+     8960, 8960, 8960, 8960, 8960,    0, 8960, 8960, 8960, 8960,
+     8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960, 8960,
+     8960, 8961, 8961, 8961, 8961,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0, 8961, 8961, 8961,
+     8961,    0,    0,    0, 8961,    0,    0,    0, 8961, 8962,
+     8962, 8962, 8962,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0, 8962,    0, 8962, 8962,    0,
+
+        0,    0, 8962,    0,    0,    0, 8962, 8964, 8964, 8964,
+     8964,    0,    0,    0,    0,    0, 8964,    0,    0,    0,
+        0,    0,    0, 8964, 8964,    0,    0,    0,    0,    0,
+     8964,    0,    0,    0, 8964, 8965, 8965, 8965, 8965,    0,
+        0, 8965,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0, 8965,    0,    0,    0,    0,    0, 8965,    0,
+        0,    0, 8965,    0,    0, 8965, 8966, 8966, 8966, 8966,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0, 8966, 8966,    0,    0,    0,    0,    0, 8966,
+        0,    0,    0, 8966, 8967, 8967, 8967, 8967,    0,    0,
+
+     8967,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0, 8967,    0,    0,
+        0, 8967, 8968, 8968, 8968, 8968,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0, 8968,    0, 8968, 8968,
+        0,    0,    0,    0,    0, 8968,    0,    0,    0, 8968,
+     8969, 8969, 8969, 8969,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0, 8969, 8969,    0,    0,
+        0,    0,    0, 8969,    0,    0,    0, 8969, 8971, 8971,
+     8971, 8971,    0,    0, 8971,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+
+        0, 8971,    0,    0,    0, 8971, 8972, 8972,    0, 8972,
+        0, 8972, 8972, 8972, 8972, 8972, 8972, 8972, 8972, 8972,
+     8972, 8972, 8972, 8972, 8972, 8972, 8972, 8972, 8972, 8972,
+     8972, 8972,    0, 8972, 8972, 8972, 8972, 8972, 8973, 8973,
+     8973, 8973,    0,    0,    0,    0,    0,    0,    0, 8973,
+        0,    0,    0,    0, 8973, 8973,    0,    0,    0,    0,
+        0, 8973,    0,    0,    0, 8973, 8974, 8974, 8974, 8974,
+        0,    0, 8974,    0,    0,    0,    0, 8974,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0, 8974,
+        0,    0,    0, 8974, 8975, 8975, 8975, 8975,    0,    0,
+
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+     8975, 8975,    0,    0,    0,    0,    0, 8975,    0,    0,
+        0, 8975, 8976, 8976, 8976, 8976,    0,    0, 8976,    0,
+        0,    0, 8976,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0, 8976,    0,    0,    0, 8976,
+     8977,    0,    0,    0, 8977,    0,    0,    0,    0,    0,
+     8977,    0,    0,    0,    0,    0,    0, 8977,    0,    0,
+        0, 8977, 8978, 8978, 8978, 8978,    0,    0, 8978,    0,
+        0,    0,    0, 8978,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0, 8978,    0,    0,    0, 8978,
+
+     8979, 8979,    0, 8979, 8979, 8979, 8979, 8979, 8979, 8979,
+     8979, 8979, 8979, 8979, 8979, 8979, 8979, 8979, 8979, 8979,
+     8979, 8979, 8979, 8979, 8979, 8979, 8979, 8979, 8979, 8979,
+     8979, 8979, 8980, 8980,    0, 8980, 8980, 8980, 8980, 8980,
+     8980, 8980, 8980, 8980, 8980, 8980, 8980, 8980, 8980, 8980,
+     8980, 8980, 8980, 8980, 8980, 8980, 8980, 8980, 8980, 8980,
+     8980, 8980, 8980, 8980, 8981, 8981, 8981, 8981,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+     8981, 8981,    0, 8981,    0,    0,    0, 8981,    0,    0,
+        0, 8981, 8983, 8983,    0, 8983, 8983, 8983, 8983, 8983,
+
+     8983, 8983, 8983, 8983, 8983, 8983, 8983, 8983, 8983, 8983,
+     8983, 8983, 8983, 8983, 8983, 8983, 8983, 8983, 8983, 8983,
+     8983, 8983, 8983, 8983, 8984, 8984,    0, 8984,    0, 8984,
+     8984, 8984, 8984, 8984, 8984, 8984, 8984, 8984, 8984, 8984,
+     8984, 8984, 8984, 8984, 8984, 8984, 8984, 8984, 8984, 8984,
+        0, 8984, 8984, 8984, 8984, 8984, 8985, 8985, 8985, 8985,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+     8985,    0, 8985, 8985,    0,    0,    0,    0,    0, 8985,
+        0,    0,    0, 8985, 8986, 8986, 8986, 8986,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0, 8986,    0,
+
+     8986, 8986,    0,    0,    0,    0,    0, 8986,    0,    0,
+        0, 8986, 8988, 8988,    0, 8988, 8988, 8988, 8988, 8988,
+     8988,    0, 8988, 8988, 8988, 8988, 8988, 8988,    0, 8988,
+     8988, 8988, 8988, 8988, 8988,    0, 8988, 8988,    0, 8988,
+     8988,    0,    0, 8988, 8989, 8989,    0, 8989,    0, 8989,
+     8989, 8989, 8989, 8989, 8989, 8989, 8989, 8989, 8989, 8989,
+     8989, 8989, 8989, 8989, 8989, 8989, 8989, 8989, 8989, 8989,
+        0, 8989, 8989, 8989, 8989, 8989, 8990, 8990,    0, 8990,
+        0, 8990, 8990, 8990, 8990, 8990, 8990, 8990, 8990, 8990,
+     8990, 8990, 8990, 8990, 8990, 8990, 8990, 8990, 8990, 8990,
+
+     8990, 8990,    0, 8990, 8990, 8990, 8990, 8990, 8991,    0,
+        0, 8991,    0, 8991, 8991, 8991, 8991, 8991, 8991, 8991,
+        0, 8991, 8991, 8991,    0, 8991, 8991, 8991,    0, 8991,
+     8991, 8991, 8991, 8991,    0, 8991, 8991, 8991, 8991, 8991,
+     8992, 8992,    0, 8992,    0, 8992, 8992, 8992, 8992, 8992,
+     8992, 8992,    0, 8992, 8992,    0,    0, 8992, 8992, 8992,
+     8992, 8992, 8992, 8992, 8992, 8992, 8992, 8992, 8992, 8992,
+     8992, 8992, 8996, 8996,    0, 8996, 8996, 8996, 8996, 8996,
+     8996, 8996, 8996, 8996, 8996, 8996, 8996, 8996, 8996, 8996,
+     8996, 8996, 8996, 8996, 8996, 8996, 8996, 8996, 8996, 8996,
+
+     8996, 8996, 8996, 8996, 9000,    0,    0, 9000,    0,    0,
+     9000,    0,    0,    0,    0, 9000,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0, 9000,    0,    0,
+        0, 9000, 9003, 9003,    0, 9003, 9003, 9003, 9003, 9003,
+     9003, 9003, 9003, 9003, 9003, 9003, 9003, 9003, 9003, 9003,
+     9003, 9003, 9003, 9003, 9003, 9003, 9003, 9003, 9003, 9003,
+     9003, 9003, 9003, 9003, 9005, 9005, 9005, 9005,    0,    0,
+     9005,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+     9005, 9005,    0,    0,    0,    0,    0, 9005,    0,    0,
+        0, 9005, 9006, 9006, 9006, 9006,    0,    0, 9006,    0,
+
+        0,    0,    0,    0,    0,    0,    0,    0,    0, 9006,
+        0,    0,    0,    0,    0, 9006,    0,    0,    0, 9006,
+     9007, 9007,    0, 9007,    0, 9007, 9007, 9007, 9007, 9007,
+     9007, 9007, 9007, 9007, 9007, 9007, 9007, 9007, 9007, 9007,
+     9007, 9007, 9007, 9007, 9007, 9007,    0, 9007, 9007, 9007,
+     9007, 9007, 9008, 9008, 9008, 9008,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0, 9008, 9008,
+        0,    0,    0,    0,    0, 9008,    0,    0,    0, 9008,
+     9009, 9009,    0, 9009,    0, 9009, 9009, 9009, 9009, 9009,
+     9009, 9009, 9009, 9009, 9009, 9009, 9009, 9009, 9009, 9009,
+
+     9009, 9009, 9009, 9009, 9009, 9009,    0, 9009, 9009, 9009,
+     9009, 9009, 9010, 9010,    0, 9010,    0, 9010, 9010, 9010,
+     9010, 9010, 9010, 9010, 9010, 9010, 9010, 9010, 9010, 9010,
+     9010, 9010, 9010, 9010, 9010, 9010, 9010, 9010,    0, 9010,
+     9010, 9010, 9010, 9010, 9011, 9011,    0, 9011,    0, 9011,
+     9011, 9011, 9011, 9011, 9011, 9011, 9011, 9011, 9011, 9011,
+     9011, 9011, 9011, 9011, 9011, 9011, 9011, 9011, 9011, 9011,
+        0, 9011, 9011, 9011, 9011, 9011, 9012, 9012,    0, 9012,
+        0, 9012, 9012, 9012, 9012, 9012, 9012, 9012, 9012, 9012,
+     9012, 9012, 9012, 9012, 9012, 9012, 9012, 9012, 9012, 9012,
+
+     9012, 9012,    0, 9012, 9012, 9012, 9012, 9012, 9015, 9015,
+     9015, 9015,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0, 9015,    0, 9015,    0,    0,    0,    0,    0,
+        0, 9015,    0,    0,    0, 9015, 9017, 9017, 9017, 9017,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0, 9017, 9017,    0,    0,    0,    0,    0, 9017,
+        0,    0,    0, 9017, 9018, 9018, 9018, 9018,    0,    0,
+     9018,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0, 9018,    0,    0,
+        0, 9018, 9020, 9020, 9020, 9020,    0,    0,    0,    0,
+
+        0,    0,    0,    0,    0,    0, 9020,    0, 9020, 9020,
+        0,    0,    0,    0,    0, 9020,    0,    0,    0, 9020,
+     9021, 9021, 9021, 9021,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0, 9021, 9021,    0,    0,
+        0,    0,    0, 9021,    0,    0,    0, 9021, 9022,    0,
+        0,    0, 9022,    0,    0,    0,    0,    0, 9022,    0,
+        0,    0,    0,    0,    0, 9022,    0,    0,    0, 9022,
+     9023, 9023, 9023, 9023,    0,    0, 9023,    0,    0,    0,
+        0, 9023,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0, 9023,    0,    0,    0, 9023, 9025, 9025,
+
+     9025, 9025,    0,    0,    0,    0,    0,    0, 9025,    0,
+        0,    0,    0,    0, 9025, 9025,    0,    0,    0,    0,
+        0, 9025,    0,    0,    0, 9025, 9026, 9026,    0, 9026,
+     9026, 9026, 9026, 9026, 9026, 9026, 9026, 9026, 9026, 9026,
+     9026, 9026, 9026, 9026, 9026, 9026, 9026, 9026, 9026, 9026,
+     9026, 9026, 9026, 9026, 9026, 9026, 9026, 9026, 9027, 9027,
+        0, 9027, 9027, 9027, 9027, 9027, 9027, 9027, 9027, 9027,
+     9027, 9027, 9027, 9027, 9027, 9027, 9027, 9027, 9027, 9027,
+     9027, 9027, 9027, 9027, 9027, 9027, 9027, 9027, 9027, 9027,
+     9028, 9028, 9028, 9028,    0,    0,    0,    0,    0,    0,
+
+        0,    0,    0,    0,    0,    0, 9028, 9028,    0, 9028,
+        0,    0,    0, 9028,    0,    0,    0, 9028, 9029, 9029,
+     9029, 9029,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0, 9029,    0,    0,    0,    0,    0,
+        0, 9029,    0,    0,    0, 9029, 9030, 9030,    0, 9030,
+     9030, 9030, 9030, 9030, 9030, 9030, 9030, 9030, 9030, 9030,
+     9030, 9030, 9030, 9030, 9030, 9030, 9030, 9030, 9030, 9030,
+     9030, 9030, 9030, 9030, 9030, 9030, 9030, 9030, 9031, 9031,
+     9031, 9031,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0, 9031,    0, 9031, 9031,    0,    0,    0,    0,
+
+        0, 9031,    0,    0,    0, 9031, 9032,    0,    0, 9032,
+        0, 9032, 9032, 9032, 9032, 9032, 9032, 9032,    0, 9032,
+     9032, 9032,    0, 9032, 9032, 9032,    0, 9032, 9032, 9032,
+     9032, 9032,    0, 9032, 9032, 9032, 9032, 9032, 9033, 9033,
+     9033, 9033, 9033, 9033, 9033, 9033, 9033, 9033, 9033, 9033,
+     9033, 9033, 9033, 9033, 9033,    0, 9033, 9033, 9033, 9033,
+     9033, 9033,    0, 9033, 9033, 9033, 9033, 9033, 9033, 9033,
+     9034, 9034,    0, 9034,    0, 9034, 9034, 9034, 9034, 9034,
+     9034, 9034,    0, 9034, 9034,    0,    0, 9034, 9034, 9034,
+     9034, 9034, 9034, 9034, 9034, 9034, 9034, 9034, 9034, 9034,
+
+     9034, 9034, 9035, 9035,    0, 9035, 9035, 9035, 9035, 9035,
+     9035, 9035, 9035, 9035, 9035, 9035, 9035, 9035, 9035, 9035,
+     9035, 9035, 9035, 9035, 9035, 9035, 9035, 9035, 9035, 9035,
+     9035, 9035, 9035, 9035, 9039, 9039,    0, 9039, 9039, 9039,
+     9039, 9039, 9039, 9039, 9039, 9039, 9039, 9039, 9039, 9039,
+     9039, 9039, 9039, 9039, 9039, 9039, 9039, 9039, 9039, 9039,
+     9039, 9039, 9039, 9039, 9039, 9039, 9043, 9043,    0, 9043,
+     9043, 9043, 9043, 9043, 9043, 9043, 9043, 9043, 9043, 9043,
+     9043, 9043, 9043, 9043, 9043, 9043, 9043, 9043, 9043, 9043,
+     9043, 9043, 9043, 9043, 9043, 9043, 9043, 9043, 9044, 9044,
+
+     9044, 9044,    0,    0, 9044,    0,    0,    0,    0,    0,
+        0,    0,    0,    0, 9044, 9044,    0,    0,    0,    0,
+        0, 9044,    0,    0,    0, 9044, 9045, 9045, 9045, 9045,
+        0,    0, 9045,    0,    0,    0,    0, 9045,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0, 9045,
+        0,    0,    0, 9045, 9046, 9046, 9046, 9046,    0,    0,
+     9046,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0, 9046,    0,    0,    0,    0,    0, 9046,    0,    0,
+        0, 9046,    0,    0, 9046, 9048, 9048, 9048, 9048,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0, 9048,
+
+        0, 9048, 9048,    0,    0,    0,    0,    0, 9048,    0,
+        0,    0, 9048, 9049, 9049, 9049, 9049,    0,    0, 9049,
+        0,    0,    0,    0, 9049,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0, 9049,    0,    0,    0,
+     9049, 9051, 9051, 9051, 9051,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0, 9051, 9051,    0,
+        0,    0,    0,    0, 9051,    0,    0,    0, 9051, 9052,
+     9052, 9052, 9052,    0,    0,    0,    0,    0,    0, 9052,
+        0,    0,    0,    0,    0, 9052, 9052,    0,    0,    0,
+        0,    0, 9052,    0,    0,    0, 9052, 9053, 9053,    0,
+
+     9053, 9053, 9053, 9053, 9053, 9053, 9053, 9053, 9053, 9053,
+     9053, 9053, 9053, 9053, 9053, 9053, 9053, 9053, 9053, 9053,
+     9053, 9053, 9053, 9053, 9053, 9053, 9053, 9053, 9053, 9054,
+     9054, 9054, 9054,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0, 9054, 9054,    0, 9054,    0,
+        0,    0, 9054,    0,    0,    0, 9054, 9055, 9055, 9055,
+     9055,    0,    0,    0,    0,    0, 9055,    0,    0,    0,
+        0,    0,    0, 9055,    0,    0,    0,    0,    0,    0,
+     9055,    0,    0,    0, 9055, 9056, 9056, 9056, 9056,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0, 9056,
+
+        0, 9056, 9056,    0,    0,    0,    0,    0, 9056,    0,
+        0,    0, 9056, 9057, 9057,    0, 9057, 9057, 9057, 9057,
+     9057, 9057, 9057, 9057, 9057, 9057, 9057, 9057, 9057, 9057,
+     9057, 9057, 9057, 9057, 9057, 9057, 9057, 9057, 9057, 9057,
+     9057, 9057, 9057, 9057, 9057, 9058,    0,    0, 9058,    0,
+     9058, 9058, 9058, 9058, 9058, 9058, 9058,    0, 9058, 9058,
+     9058,    0, 9058, 9058, 9058,    0, 9058, 9058, 9058, 9058,
+     9058,    0, 9058, 9058, 9058, 9058, 9058, 9059, 9059, 9059,
+     9059, 9059, 9059, 9059, 9059, 9059, 9059, 9059, 9059, 9059,
+     9059, 9059, 9059, 9059,    0, 9059, 9059, 9059, 9059, 9059,
+
+     9059,    0, 9059, 9059, 9059,    0, 9059, 9059, 9059, 9060,
+     9060,    0, 9060,    0, 9060, 9060, 9060, 9060, 9060, 9060,
+     9060,    0, 9060, 9060,    0,    0, 9060, 9060, 9060, 9060,
+     9060, 9060, 9060, 9060, 9060, 9060, 9060, 9060, 9060, 9060,
+     9060, 9061, 9061,    0, 9061, 9061, 9061, 9061, 9061, 9061,
+     9061, 9061, 9061, 9061, 9061, 9061, 9061, 9061, 9061, 9061,
+     9061, 9061, 9061, 9061, 9061, 9061, 9061, 9061, 9061, 9061,
+     9061, 9061, 9061, 9063, 9063,    0, 9063, 9063, 9063, 9063,
+     9063, 9063, 9063, 9063, 9063, 9063, 9063, 9063, 9063, 9063,
+     9063, 9063, 9063, 9063, 9063, 9063, 9063, 9063, 9063, 9063,
+
+     9063, 9063, 9063, 9063, 9063, 9067, 9067, 9067, 9067, 9067,
+     9067, 9067, 9067, 9067, 9067, 9067, 9067, 9067, 9067, 9067,
+     9067, 9067, 9067, 9067, 9067, 9067, 9067, 9067, 9067, 9067,
+     9067, 9067, 9067, 9067, 9067, 9067, 9067, 9068, 9068, 9068,
+     9068,    0,    0, 9068,    0,    0,    0,    0,    0,    0,
+        0,    0,    0, 9068, 9068,    0,    0,    0,    0,    0,
+     9068,    0,    0,    0, 9068, 9069, 9069, 9069, 9069,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0, 9069,
+        0, 9069, 9069,    0,    0,    0,    0,    0, 9069,    0,
+        0,    0, 9069, 9070, 9070, 9070, 9070,    0,    0,    0,
+
+        0,    0,    0,    0,    0,    0,    0,    0,    0, 9070,
+     9070,    0,    0,    0,    0,    0, 9070,    0,    0,    0,
+     9070, 9071, 9071, 9071, 9071,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0, 9071, 9071,    0,
+     9071,    0,    0,    0, 9071,    0,    0,    0, 9071, 9073,
+     9073, 9073, 9073,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0, 9073,    0, 9073, 9073,    0,    0,    0,
+        0,    0, 9073,    0,    0,    0, 9073, 9074, 9074,    0,
+     9074, 9074, 9074, 9074, 9074, 9074, 9074, 9074, 9074, 9074,
+     9074, 9074, 9074, 9074, 9074, 9074, 9074, 9074, 9074, 9074,
+
+     9074, 9074, 9074, 9074, 9074, 9074, 9074, 9074, 9074, 9075,
+        0,    0, 9075,    0, 9075, 9075, 9075, 9075, 9075, 9075,
+     9075,    0, 9075, 9075, 9075,    0, 9075, 9075, 9075,    0,
+     9075, 9075, 9075, 9075, 9075,    0, 9075, 9075, 9075, 9075,
+     9075, 9076, 9076, 9076, 9076, 9076, 9076, 9076, 9076, 9076,
+     9076, 9076, 9076, 9076, 9076, 9076, 9076, 9076,    0, 9076,
+     9076, 9076, 9076, 9076, 9076,    0, 9076, 9076, 9076,    0,
+     9076, 9076, 9076, 9077, 9077, 9077, 9077, 9077, 9077, 9077,
+     9077, 9077, 9077, 9077, 9077, 9077, 9077, 9077, 9077, 9077,
+        0, 9077, 9077, 9077, 9077, 9077, 9077,    0, 9077, 9077,
+
+     9077,    0, 9077, 9077, 9077, 9078, 9078,    0, 9078,    0,
+     9078, 9078, 9078, 9078, 9078, 9078, 9078,    0, 9078, 9078,
+        0,    0, 9078, 9078, 9078, 9078, 9078, 9078, 9078, 9078,
+     9078, 9078, 9078, 9078, 9078, 9078, 9078, 9083, 9083, 9083,
+     9083, 9083, 9083, 9083, 9083, 9083, 9083, 9083, 9083, 9083,
+     9083, 9083, 9083, 9083,    0, 9083, 9083, 9083, 9083, 9083,
+     9083,    0, 9083, 9083, 9083,    0, 9083, 9083, 9083, 9084,
+     9084, 9084, 9084,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0, 9084,    0, 9084, 9084,    0,    0,    0,
+        0,    0, 9084,    0,    0,    0, 9084, 9085, 9085, 9085,
+
+     9085,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0, 9085, 9085,    0, 9085,    0,    0,    0,
+     9085,    0,    0,    0, 9085, 9086, 9086, 9086, 9086,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0, 9086,    0,    0,    0,    0,    0,    0, 9086,    0,
+        0,    0, 9086, 9087, 9087, 9087, 9087,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0, 9087,    0, 9087,
+     9087,    0,    0,    0,    0,    0, 9087,    0,    0,    0,
+     9087, 9088, 9088, 9088, 9088, 9088, 9088, 9088, 9088, 9088,
+     9088, 9088, 9088, 9088, 9088, 9088, 9088, 9088,    0, 9088,
+
+     9088, 9088, 9088, 9088, 9088,    0, 9088, 9088, 9088,    0,
+     9088, 9088, 9088, 9089, 9089,    0, 9089,    0, 9089, 9089,
+     9089, 9089, 9089, 9089, 9089,    0, 9089, 9089,    0,    0,
+     9089, 9089, 9089, 9089, 9089, 9089, 9089, 9089, 9089, 9089,
+     9089, 9089, 9089, 9089, 9089, 9090, 9090, 9090, 9090, 9090,
+     9090, 9090, 9090, 9090, 9090, 9090, 9090, 9090, 9090, 9090,
+     9090, 9090, 9090, 9090, 9090, 9090, 9090, 9090, 9090, 9090,
+     9090, 9090, 9090, 9090, 9090, 9090, 9090, 9091, 9091, 9091,
+     9091,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0, 9091,    0, 9091, 9091,    0,    0,    0,    0,    0,
+
+     9091,    0,    0,    0, 9091, 9092, 9092, 9092, 9092, 9092,
+     9092, 9092, 9092, 9092, 9092, 9092, 9092, 9092, 9092, 9092,
+     9092, 9092,    0, 9092, 9092, 9092, 9092, 9092, 9092,    0,
+     9092, 9092, 9092,    0, 9092, 9092, 9092, 9093, 9093, 9093,
+     9093,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0, 9093, 9093,    0, 9093,    0,    0,    0,
+     9093,    0,    0,    0, 9093, 9094, 9094,    0, 9094,    0,
+     9094, 9094, 9094, 9094, 9094, 9094, 9094,    0, 9094, 9094,
+        0,    0, 9094, 9094, 9094, 9094, 9094, 9094, 9094, 9094,
+     9094, 9094, 9094, 9094, 9094, 9094, 9094, 9096, 9096,    0,
+
+     9096, 9096, 9096, 9096, 9096, 9096, 9096, 9096, 9096, 9096,
+     9096, 9096, 9096, 9096, 9096, 9096, 9096, 9096, 9096, 9096,
+     9096, 9096, 9096, 9096, 9096, 9096, 9096, 9096, 9096, 9100,
+     9100,    0, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100,
+     9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100,
+     9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100, 9100,
+     9100, 9101, 9101, 9101, 9101,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0, 9101,    0, 9101, 9101,    0,
+        0,    0,    0,    0, 9101,    0,    0,    0, 9101, 9102,
+     9102, 9102, 9102, 9102, 9102, 9102, 9102, 9102, 9102, 9102,
+
+     9102, 9102, 9102, 9102, 9102, 9102,    0, 9102, 9102, 9102,
+     9102, 9102, 9102,    0, 9102, 9102, 9102,    0, 9102, 9102,
+     9102, 9104, 9104, 9104, 9104,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0, 9104,    0,    0,
+        0, 9104,    0,    0, 9104,    0,    0,    0, 9104, 9105,
+     9105,    0, 9105,    0, 9105, 9105, 9105, 9105, 9105, 9105,
+     9105,    0, 9105, 9105,    0,    0, 9105, 9105, 9105, 9105,
+     9105, 9105, 9105, 9105, 9105, 9105, 9105, 9105, 9105, 9105,
+     9105, 9107, 9107,    0, 9107, 9107, 9107, 9107, 9107, 9107,
+     9107, 9107, 9107, 9107, 9107, 9107, 9107, 9107, 9107, 9107,
+
+     9107, 9107, 9107, 9107, 9107, 9107, 9107, 9107, 9107, 9107,
+     9107, 9107, 9107, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398, 8398,
+     8398, 8398, 8398
+
+    } ;
+
+static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
+static char *yy_full_match;
+static int yy_lp;
+static int yy_looking_for_trail_begin = 0;
+static int yy_full_lp;
+static int *yy_full_state;
+#define YY_TRAILING_MASK 0x2000
+#define YY_TRAILING_HEAD_MASK 0x4000
+#define REJECT \
+{ \
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
+yy_cp = yy_full_match; /* restore poss. backed-over text */ \
+yy_lp = yy_full_lp; /* restore orig. accepting pos. */ \
+yy_state_ptr = yy_full_state; /* restore orig. state */ \
+yy_current_state = *yy_state_ptr; /* restore curr. state */ \
+++yy_lp; \
+goto find_rule; \
+}
+#define yymore() yymore_used_but_not_detected
+#define YY_MORE_ADJ 0
+#define YY_RESTORE_YY_MORE_OFFSET
+char *yytext;
+#line 1 "scanner.l"
+#define INITIAL 0
+/*****************************************************************************
+ *
+ * $Id: doxygen.patch,v 1.2 2007/12/12 14:03:17 mpasquat Exp $
+ *
+ * Copyright (C) 1997-2004 by Dimitri van Heesch.
+ *
+ * Permission to use, copy, modify, and distribute this software and its
+ * documentation under the terms of the GNU General Public License is hereby 
+ * granted. No representations are made about the suitability of this software 
+ * for any purpose. It is provided "as is" without express or implied warranty.
+ * See the GNU General Public License for more details.
+ *
+ * Documents produced by Doxygen are derivative works derived from the
+ * input used in their production; they are not affected by this license.
+ *
+ */
+#line 19 "scanner.l"
+
+/*
+ *	includes
+ */
+#include <stdio.h>
+#include <stdlib.h>
+#include <assert.h>
+#include <ctype.h>
+
+#include "qtbc.h"
+#include <qarray.h>
+#include <qstack.h>
+#include <qregexp.h>
+#include <unistd.h>
+  
+#include "scanner.h"
+#include "entry.h"
+#include "doxygen.h"
+#include "message.h"
+#include "config.h"
+#include "util.h"
+#include "index.h"
+#include "defargs.h"
+#include "language.h"
+#include "outputlist.h"
+#include "membergroup.h"
+#include "reflist.h"
+#include "code.h"
+
+  
+#define YY_NEVER_INTERACTIVE 1
+
+/* -----------------------------------------------------------------
+ *
+ *	statics
+ */
+static const char *     inputString;
+static int		inputPosition;
+static int		lastContext;
+static int		lastCContext;
+static int              lastDocContext;
+static int              lastDocRelContext;
+static int              lastDocRelAlsoContext;
+static int              lastCPPContext;
+static int              lastSkipSharpContext;
+static int              lastSkipRoundContext;
+static int              lastBriefContext;
+static int              lastVerbState;
+static int              lastStringContext;
+static int              lastCurlyContext;
+static int              lastRoundContext;
+static int              lastSquareContext;
+static int              lastCodeState;
+static int              lastAfterDocContext;
+static int              lastGroupContext;
+static int              lastFormulaContext;
+static int              lastAnchorContext;
+static int              lastInitializerContext;
+static int              lastClassTemplSpecContext;
+static int              lastSkipHtmlCommentContext;
+static int              lastIfContext;
+static int              lastInternalDocContext;
+static int              lastPreLineCtrlContext;
+static int              lastSkipVerbStringContext;
+static int              lastCommentInArgContext;
+static int              nextDefContext;
+static int              overloadContext;
+static Protection	protection;
+static Protection	baseProt;
+static int		sharpCount   = 0 ;
+static int		roundCount   = 0 ;
+static int		curlyCount   = 0 ;
+static int		squareCount  = 0 ;
+static int              padCount     = 0 ;
+static int              slStartContext = 0;
+static QCString         slString;
+static Entry*		current_root = 0 ;
+static Entry*		global_root  = 0 ;
+static Entry*		current      = 0 ;
+static Entry*		previous     = 0 ;
+static Entry*		tempEntry    = 0 ;
+static int		yyLineNr     = 1 ;
+static int              anonCount    = 0 ;        
+static char		yyFileName[4096] ;
+static int              lastMemberGroupLine;
+static MethodTypes 	mtype;
+static bool    		gstat;
+static bool             removeSlashes;
+static Specifier 	virt;
+static Specifier 	baseVirt;
+static QCString         msType,msName,msArgs;
+static int              memberGroupId = DOX_NOGROUP;
+static QCString         memberGroupHeader;
+static QCString         memberGroupDocs;
+static bool             isTypedef;
+static char             afterDocTerminator;
+static int              tmpDocType;
+static QCString         sectionLabel;
+static QCString		sectionTitle;
+//static SectionInfo::SectionType      
+//                        sectionType;
+static QCString         funcPtrType;
+static QCString         templateStr;
+static QCString         aliasName;
+static QCString         baseName;
+static QCString*        specName;
+static QCString         formulaText;
+static bool             useOverrideCommands = FALSE;
+static bool             insideIDL = FALSE;		//!< processing IDL code?
+static bool             insideJava = FALSE;		//!< processing Java code?
+static bool             insideCS = FALSE;		//!< processing C# code?
+static bool             insideD = FALSE;		//!< processing D code?
+static bool             insidePHP = FALSE;		//!< processing PHP code?
+static bool             insideCppQuote = FALSE;
+static bool             insideObjC = FALSE;             //!< processing Objective C code?
+static bool             insideProtocolList = FALSE;
+
+static int              argRoundCount;
+static int              argSharpCount;
+static int              currentArgumentContext;
+static int              lastCopyArgStringContext;
+static int              lastCopyArgContext;
+static QCString         *copyArgString;
+static QCString         fullArgString;
+
+static ArgumentList     *currentArgumentList;
+//static QCString         *currentTemplateSpec;
+static char             lastCopyArgChar;
+static QCString         *pCopyRoundString;
+static QCString         *pCopyCurlyString;
+static QCString         *pCopyQuotedString;
+static QCString         *pSkipDoc;
+static QCString         *pSkipVerbString;
+static QStack<Grouping> autoGroupStack;
+static Grouping  lastDefGroup( "", Grouping::GROUPING_LOWEST );
+
+static bool             insideFormula;
+static bool  	        insideTryBlock=FALSE;
+static bool             insideCode;
+static bool             needsSemi;
+
+static int              depthIf;
+//static int  	        initializerSharpCount;
+static QCString         memberGroupRelates;
+static QCString         memberGroupInside;
+static QCString         xrefItemKey;
+static QCString         xrefItemTitle;
+static QCString         xrefListTitle;
+
+static QCString         g_skipBlockName;
+static QCString         oldStyleArgType;
+static QCString         docBackup;
+static QCString         briefBackup;
+
+
+//-----------------------------------------------------------------------------
+
+static void initParser()
+{
+  sectionLabel.resize(0);
+  sectionTitle.resize(0);
+  baseName.resize(0);
+  formulaText.resize(0);
+  protection = Public;
+  baseProt = Public;
+  sharpCount = 0;
+  roundCount = 0;
+  curlyCount = 0;
+  memberGroupId = DOX_NOGROUP;
+  memberGroupRelates.resize(0);
+  memberGroupInside.resize(0);
+  mtype = Method;
+  gstat = FALSE;
+  virt = Normal;
+  baseVirt = Normal;
+  isTypedef = FALSE;
+  autoGroupStack.clear();
+  insideTryBlock = FALSE;
+  autoGroupStack.setAutoDelete(TRUE);
+  lastDefGroup.groupname.resize(0);
+  insideFormula = FALSE;
+}
+
+static void initEntry()
+{
+  if (insideJava) protection = Package;
+  current->protection = protection ;
+  current->mtype      = mtype;
+  current->virt       = virt;
+  current->stat       = gstat;
+  current->mGrpId     = memberGroupId;
+  current->relates    = memberGroupRelates.copy();
+  current->inside     = memberGroupInside.copy();
+  if (!autoGroupStack.isEmpty())
+  {
+    //printf("Appending group %s\n",autoGroupStack.top()->groupname.data());
+    current->groups->append(new Grouping(*autoGroupStack.top()));
+  }
+}
+
+
+//-----------------------------------------------------------------------------
+
+/// remove any automatic grouping and add new one (if given)
+static void setCurrentGroup( QCString *newgroup, Grouping::GroupPri_t pri )
+{
+   /* remove auto group name from current entry and discard it */
+   Grouping *g = current->groups->first();
+   int i=0; 
+   while (g)
+   {
+     if (g->pri <= Grouping::GROUPING_AUTO_DEF)
+     {
+       current->groups->remove(i);
+       i--;
+     }
+     g=current->groups->next();
+     i++;
+   }
+
+   /* use new group name instead? */
+   if ( newgroup )
+   {
+      current->groups->append(new Grouping(*newgroup, pri));
+   } 
+}
+
+static int newMemberGroupId()
+{
+  static int curGroupId=0;
+  return curGroupId++;
+}
+
+// forward declarations
+static void startGroup();
+static void startGroupInDoc();
+static void endGroup();
+
+//-----------------------------------------------------------------------------
+
+static void lineCount()
+{
+  for( const char* c = yytext ; *c ; ++c )
+    yyLineNr += (*c == '\n') ;
+}
+
+static void addType( Entry* current )
+{
+    uint tl=current->type.length();
+    if( tl>0 && !current->name.isEmpty() && current->type.at(tl-1)!='.') 
+    {
+      current->type += ' ' ;
+    }
+    current->type += current->name ;
+    current->name.resize(0) ;
+    tl=current->type.length();
+    if( tl>0 && !current->args.isEmpty() && current->type.at(tl-1)!='.') 
+    {
+      current->type += ' ' ;
+    }
+    current->type += current->args ;
+    current->args.resize(0) ;
+    current->argList->clear();
+}
+
+
+static QCString stripQuotes(const char *s)
+{
+  QCString name;
+  if (s==0 || *s==0) return name;
+  name=s;
+  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
+  {
+    name=name.mid(1,name.length()-2);
+  }
+  return name;
+}
+
+//static QCString stripCComments(const QCString &s)
+//{
+//  int p=0,i;
+//  QCString result;
+//  while ((i=s.find("/*",p))!=-1)
+//  {
+//    result+=s.mid(p,i-p);
+//    int ei = s.find("*/",i+1);
+//    if (ei!=-1)
+//    {
+//      p=ei+2;
+//    }
+//    else
+//    {
+//      return result;
+//    }
+//  }
+//  result+=s.right(s.length()-p);
+//  printf("stripCComments: input=%s output=%s\n",s.data(),result.data());
+//  return result;
+//}
+
+static void newDocState();
+
+//-----------------------------------------------------------------
+
+static void addXRefItem(const char *listName,const char *itemTitle,const char *listTitle)
+{
+  if (listName==0) return;
+
+  //printf("addXRefItem(%s,%s,%s)\n",listName,itemTitle,listTitle);
+  ListItemInfo *lii=0;
+  RefList *refList = Doxygen::xrefLists->find(listName);
+  if (refList==0) // new list
+  {
+    refList = new RefList(listName,listTitle,itemTitle);
+    Doxygen::xrefLists->insert(listName,refList);
+    //printf("new list!\n");
+  }
+  if (current->sli)
+  {
+    QListIterator<ListItemInfo> slii(*current->sli);
+    for (slii.toFirst();(lii=slii.current());++slii)
+    {
+      if (strcmp(lii->type,listName)==0) 
+      {
+	//printf("found %s lii->type=%s\n",listName,lii->type);
+	break;
+      }
+    }
+  }
+  if (lii) // already found item of same type before
+  {
+    //printf("listName=%s item id = %d\n",listName,lii->itemId);
+    RefItem *item = refList->getRefItem(lii->itemId);
+    ASSERT(item!=0);
+    item->text += " <p>";
+    item->text += current->brief;
+    //printf("%s: text +=%s\n",listName,item->text.data());
+  }
+  else // new item
+  {
+    int itemId  = refList->addRefItem();
+    //printf("listName=%s item id = %d\n",listName,itemId);
+    char anchorLabel[1024];
+    sprintf(anchorLabel,"_%s%06d",listName,itemId);
+    RefItem *item = refList->getRefItem(itemId);
+    ASSERT(item!=0);
+    item->text = current->brief.copy();
+    item->listAnchor = anchorLabel;
+    current->addSpecialListItem(listName,itemId);
+    QCString cmdString;
+    cmdString.sprintf("\\xrefitem %s %d\n",listName,itemId);
+    current->doc += cmdString;
+    SectionInfo *si=new SectionInfo(listName,anchorLabel,
+	                            sectionTitle,SectionInfo::Anchor);
+    Doxygen::sectionDict.insert(anchorLabel,si);
+    current->anchors->append(new SectionInfo(*si));
+  }
+  current->brief  = slString.copy(); // restore orginial brief desc.
+}
+
+//-----------------------------------------------------------------------------
+
+// Adds a formula text to the list/dictionary of formulas if it was
+// not already added. Returns the label of the formula.
+static QCString addFormula()
+{
+  QCString formLabel;
+  QCString fText=formulaText.simplifyWhiteSpace();
+  Formula *f=0;
+  if ((f=Doxygen::formulaDict[fText])==0)
+  {
+    f = new Formula(fText);
+    Doxygen::formulaList.append(f);
+    Doxygen::formulaDict.insert(fText,f);
+    formLabel.sprintf("\\form#%d",f->getId());
+    Doxygen::formulaNameDict.insert(formLabel,f);
+  }
+  else
+  {
+    formLabel.sprintf("\\form#%d",f->getId());
+  }
+  return formLabel;
+}
+
+static bool nameIsOperator(QCString &name)
+{
+  int i=name.find("operator");
+  if (i==-1) return FALSE;
+  if (i==0 && !isId(name.at(8))) return TRUE; // case operator ::X
+  if (i>0 && !isId(name.at(i-1)) && !isId(name.at(i+8))) return TRUE; // case X::operator
+  return FALSE; // case TEXToperatorTEXT
+}
+
+static void checkFormula()
+{
+  if (insideFormula)
+  {
+    warn(yyFileName,yyLineNr,"Warning: End of comment block while inside formula.");
+  }
+}
+
+static void checkDocs()
+{
+  checkFormula();
+  if ((current->brief.length()>2 && 
+       current->brief.at(0)=='<' && current->brief.at(1)==' ') ||
+      (current->doc.length()>2 && 
+       current->doc.at(0)=='<' && current->doc.at(1)==' ')
+     )
+  {
+    warn(yyFileName,yyLineNr,"Warning: Found lonely '<' symbol at the start of the documentation.");
+	 
+  }
+}
+
+#if 0
+static QCString extractName(const QCString &s)
+{
+  //static const QRegExp id("[a-z_A-Z][a-z_A-Z0-9]*");
+  //int i,p=0,l;
+  //while ((i=id.match(s,p,&l))!=-1)
+  //{
+  //  QCString idstr=s.mid(i,l);
+  //  if (idstr!="struct" && idstr!="class" && idstr!="union") 
+  //  {
+  //    
+  //    return idstr;
+  //  }
+  //  p=i+l;
+  //}
+  //return "";
+  QCString result=s;
+  if (result.left(7)=="struct ") result=result.right(result.length()-7);
+  if (result.left(6)=="class " ) result=result.right(result.length()-6);
+  if (result.left(6)=="union " ) result=result.right(result.length()-6);
+  int l=result.length()-1;
+  while (l>=0 && 
+         (result.at(l)=='*' || result.at(l)==' ' || isspace(result.at(l)))
+        ) l--;
+  return removeRedundantWhiteSpace(result.left(l+1));
+}
+#endif
+
+static void setContext()
+{
+  QCString fileName = yyFileName;
+  insideIDL  = fileName.right(4)==".idl" || fileName.right(5)==".pidl" || 
+               fileName.right(4)==".odl";
+  insideJava = fileName.right(5)==".java";
+  insideCS   = fileName.right(3)==".cs"; // for normal keywords add colon
+  insideD    = fileName.right(3)==".d"; // for normal keywords add colon
+  insidePHP  = fileName.right(4)==".php" || fileName.right(5)==".php4" || 
+               fileName.right(4)==".inc" || fileName.right(6)==".phtml";
+  insideObjC = fileName.right(2)==".m" || fileName.right(2)==".M" ||
+               fileName.right(3)==".mm";
+  if ( insidePHP )
+  {
+    useOverrideCommands = TRUE;
+  }
+  //printf("setContext(%s) insideIDL=%d\n",yyFileName,insideIDL);
+}
+
+static void prependScope()
+{
+  if (current_root->section & Entry::SCOPE_MASK)
+  {
+    //printf("--- prependScope %s to %s\n",current_root->name.data(),current->name.data());
+    current->name.prepend(current_root->name+"::");
+    if (current_root->tArgLists)
+    {
+      if (current->tArgLists==0)
+      {
+	current->tArgLists = new QList<ArgumentList>;
+	current->tArgLists->setAutoDelete(TRUE);
+      }
+      //printf("prependScope #=%d #current=%d\n",current_root->tArgLists->count(),current->tArgLists->count());
+      QListIterator<ArgumentList> talsi(*current_root->tArgLists);
+      ArgumentList *srcAl=0;
+      for (talsi.toLast();(srcAl=talsi.current());--talsi)
+      {
+        ArgumentList *dstAl = new ArgumentList;
+	dstAl->setAutoDelete(TRUE);
+	QListIterator<Argument> tali(*srcAl);
+        Argument *a;
+        for (;(a=tali.current());++tali)
+        {
+          dstAl->append(new Argument(*a));
+        //printf("appending argument %s %s\n",a->type.data(),a->name.data());
+        }	  
+        current->tArgLists->insert(0,dstAl);	
+      }
+    }
+  }
+}
+
+/*! Returns TRUE iff the current entry could be a K&R style C function */
+static bool checkForKnRstyleC()
+{
+  if (((QCString)yyFileName).right(2).lower()!=".c") return FALSE; // must be a C file
+  if (!current->argList) return FALSE;
+  ArgumentListIterator ali(*current->argList);
+  Argument *a;
+  for (ali.toFirst();(a=ali.current());++ali)
+  {
+    // in K&R style argument do not have a type, but doxygen expects a type
+    // so it will think the argument has no name
+    if (a->type.isEmpty() || !a->name.isEmpty()) return FALSE;
+  }
+  return TRUE;
+}
+
+static void splitKnRArg(QCString &oldStyleArgPtr,QCString &oldStyleArgName)
+{
+  int si = current->args.length();
+  if (oldStyleArgType.isEmpty()) // new argument
+  {
+    static QRegExp re("([^)]*)");
+    int bi1 = current->args.findRev(re);
+    int bi2 = bi1!=-1 ? current->args.findRev(re,bi1-1) : -1; 
+    char c;
+    if (bi1!=-1 && bi2!=-1) // found something like "int (*func)(int arg)"
+    {
+      int s=bi2+1;
+      oldStyleArgType = current->args.left(s);
+      int i=s;
+      while (i<si && ((c=current->args.at(i))=='*' || isspace((uchar)c))) i++;
+      oldStyleArgType += current->args.mid(s,i-s);
+      s=i;
+      while (i<si && isId(current->args.at(i))) i++;
+      oldStyleArgName = current->args.mid(s,i-s);
+      oldStyleArgType+=current->args.mid(i);
+    }
+    else if (bi1!=-1) // redundant braces like in "int (*var)"
+    {
+      int s=bi1;
+      oldStyleArgType = current->args.left(s);
+      s++;
+      int i=s+1;
+      while (i<si && ((c=current->args.at(i))=='*' || isspace((uchar)c))) i++;
+      oldStyleArgType += current->args.mid(s,i-s);
+      s=i;
+      while (i<si && isId(current->args.at(i))) i++;
+      oldStyleArgName = current->args.mid(s,i-s);
+    }
+    else // normal "int *var"
+    {
+      int l=si,i=l-1,j;
+      char c;
+      // look for start of name in "type *name"
+      while (i>=0 && isId(current->args.at(i))) i--;
+      j=i+1;
+      // look for start of *'s
+      while (i>=0 && ((c=current->args.at(i))=='*' || isspace((uchar)c))) i--;
+      i++;
+      if (i!=l)
+      {
+	oldStyleArgType=current->args.left(i);
+	oldStyleArgPtr=current->args.mid(i,j-i);
+	oldStyleArgName=current->args.mid(j).stripWhiteSpace();
+      }
+      else
+      {
+	oldStyleArgName=current->args.copy().stripWhiteSpace();
+      }
+    }
+  }
+  else // continuation like *arg2 in "int *args,*arg2"
+  {
+    int l=si,j=0;
+    char c;
+    while (j<l && ((c=current->args.at(j))=='*' || isspace((uchar)c))) j++;
+    if (j>0)
+    {
+      oldStyleArgPtr=current->args.left(j);
+      oldStyleArgName=current->args.mid(j).stripWhiteSpace();
+    }
+    else
+    {
+      oldStyleArgName=current->args.copy().stripWhiteSpace();
+    }
+  }
+  //fprintf(stderr,"type=%s ptr=%s name=%s\n",oldStyleArgType.data(),oldStyleArgPtr.data(),oldStyleArgName.data());
+}
+
+/*! Update the argument \a name with additional \a type info. For K&R style
+ *  function the type is found \e after the argument list, so this routine
+ *  in needed to fix up.
+ */
+static void addKnRArgInfo(const QCString &type,const QCString &name,
+                          const QCString &brief,const QCString &docs)
+{
+  if (current->argList==0) return;
+  ArgumentListIterator ali(*current->argList);
+  Argument *a;
+  for (ali.toFirst();(a=ali.current());++ali)
+  {
+    if (a->type==name)
+    {
+      a->type=type.stripWhiteSpace();
+      if (a->type.left(9)=="register ") // strip keyword
+      {
+	a->type=a->type.mid(9);
+      }
+      a->name=name.stripWhiteSpace();
+      if (!brief.isEmpty() && !docs.isEmpty())
+      {
+        a->docs=brief+"\n\n"+docs;
+      }
+      else if (!brief.isEmpty())
+      {
+        a->docs=brief;
+      }
+      else
+      {
+	a->docs=docs;
+      }
+    }
+  }
+}
+
+/* ----------------------------------------------------------------- */
+#undef	YY_INPUT
+#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);
+
+static int yyread(char *buf,int max_size)
+{
+    int c=0;
+    while( c < max_size && inputString[inputPosition] )
+    {
+	*buf = inputString[inputPosition++] ;
+	//printf("%d (%c)\n",*buf,*buf);
+	c++; buf++;
+    }
+    return c;
+}
+
+/* start command character */
+#define Define 1
+
+#define DefineArg 2
+
+#define DefineEnd 3
+
+#define CompoundName 4
+
+#define ClassVar 5
+
+#define ClassCategory 6
+
+#define ClassTemplSpec 7
+
+#define Bases 8
+
+#define BasesProt 9
+
+#define NextSemi 10
+
+#define BitFields 11
+
+#define FindMembers 12
+
+#define FindMembersPHP 13
+
+#define FindMemberName 14
+
+#define FindFields 15
+
+#define FindFieldArg 16
+
+#define Function 17
+
+#define FuncRound 18
+
+#define ExcpRound 19
+
+#define ExcpList 20
+
+#define FuncQual 21
+
+#define Operator 22
+
+#define Array 23
+
+#define ReadBody 24
+
+#define ReadNSBody 25
+
+#define ReadBodyIntf 26
+
+#define Using 27
+
+#define UsingDirective 28
+
+#define NameSpaceDocArg1 29
+
+#define PackageDocArg1 30
+
+#define SkipCurly 31
+
+#define SkipCurlyCpp 32
+
+#define SkipCurlyEndDoc 33
+
+#define SkipString 34
+
+#define SkipPHPString 35
+
+#define SkipInits 36
+
+#define SkipCPP 37
+
+#define SkipCPPBlock 38
+
+#define SkipComment 39
+
+#define SkipCxxComment 40
+
+#define SkipCurlyBlock 41
+
+#define SkipRoundBlock 42
+
+#define SkipCode 43
+
+#define Sharp 44
+
+#define SkipSharp 45
+
+#define SkipRound 46
+
+#define SkipSquare 47
+
+#define SkipSection 48
+
+#define IfGuard 49
+
+#define IfNotGuard 50
+
+#define TypedefName 51
+
+#define TryFunctionBlock 52
+
+#define TryFunctionBlockEnd 53
+
+#define Comment 54
+
+#define Doc 55
+
+#define JavaDoc 56
+
+#define ClassDoc 57
+
+#define LineDoc 58
+
+#define DefLineDoc 59
+
+#define ClassDocArg1 60
+
+#define CategoryDocArg1 61
+
+#define ClassDocArg2 62
+
+#define ClassDocArg3 63
+
+#define ClassDocFunc 64
+
+#define ClassDocFuncPtr 65
+
+#define ClassDocFuncQual 66
+
+#define ClassDocFuncSkipLine 67
+
+#define ClassDocFuncExc 68
+
+#define ClassDocDefine 69
+
+#define ClassDocRelates 70
+
+#define ClassDocRelatesAlso 71
+
+#define ClassDocBrief 72
+
+#define ClassDocOverload 73
+
+#define ClassDefineArgs 74
+
+#define DocInternal 75
+
+#define DocInternalLine 76
+
+#define DocBaseClass 77
+
+#define CppQuote 78
+
+#define EndCppQuote 79
+
+#define GroupDocArg1 80
+
+#define GroupDocArg2 81
+
+#define GroupName 82
+
+#define GroupHeader 83
+
+#define StoreGroupDocs 84
+
+#define AfterDoc 85
+
+#define AfterDocBrief 86
+
+#define AfterDocLine 87
+
+#define PageDoc 88
+
+#define PageDocTitle 89
+
+#define PageDocArg1 90
+
+#define PageDocArg2 91
+
+#define FileDocArg1 92
+
+#define FileDocArg2 93
+
+#define ExampleDocArg1 94
+
+#define EnumDocArg1 95
+
+#define FuncPtr 96
+
+#define EndFuncPtr 97
+
+#define FuncPtrInit 98
+
+#define FuncFunc 99
+
+#define FuncFuncEnd 100
+
+#define FuncFuncType 101
+
+#define MemberSpec 102
+
+#define MemberSpecSkip 103
+
+#define SkipVerbatim 104
+
+#define TodoParam 105
+
+#define TestParam 106
+
+#define BugParam 107
+
+#define DeprecatedParam 108
+
+#define XRefItemParam1 109
+
+#define XRefItemParam2 110
+
+#define XRefItemParam3 111
+
+#define XRefItemParam4 112
+
+#define SectionLabel 113
+
+#define SectionTitle 114
+
+#define SkipTemplate 115
+
+#define EndTemplate 116
+
+#define CopyArgString 117
+
+#define CopyArgRound 118
+
+#define CopyArgSharp 119
+
+#define CopyArgComment 120
+
+#define CopyArgCommentLine 121
+
+#define SkipUnionSwitch 122
+
+#define ReadFuncArgType 123
+
+#define ReadTempArgs 124
+
+#define Specialization 125
+
+#define SkipHtmlComment 126
+
+#define ReadFormulaShort 127
+
+#define ReadFormulaLong 128
+
+#define AnchorLabel 129
+
+#define ReadInitializer 130
+
+#define CopyString 131
+
+#define CopyPHPString 132
+
+#define CopyRound 133
+
+#define CopyCurly 134
+
+#define IDLUnionCase 135
+
+#define NSAliasName 136
+
+#define NSAliasArg 137
+
+#define PackageName 138
+
+#define GetCallType 139
+
+#define JavaImport 140
+
+#define CSAccessorDecl 141
+
+#define PreLineCtrl 142
+
+#define DefinePHP 143
+
+#define DefinePHPEnd 144
+
+#define OldStyleArgs 145
+
+#define SkipVerbString 146
+
+#define ObjCMethod 147
+
+#define ObjCReturnType 148
+
+#define ObjCParams 149
+
+#define ObjCParamType 150
+
+#define ObjCProtocolList 151
+
+#define QtPropType 152
+
+#define QtPropName 153
+
+#define QtPropRW 154
+
+
+/* Macros after this point can all be overridden by user definitions in
+ * section 1.
+ */
+
+#ifndef YY_SKIP_YYWRAP
+#ifdef __cplusplus
+extern "C" int yywrap YY_PROTO(( void ));
+#else
+extern int yywrap YY_PROTO(( void ));
+#endif
+#endif
+
+#ifndef YY_NO_UNPUT
+static void yyunput YY_PROTO(( int c, char *buf_ptr ));
+#endif
+
+#ifndef yytext_ptr
+static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
+#endif
+
+#ifdef YY_NEED_STRLEN
+static int yy_flex_strlen YY_PROTO(( yyconst char * ));
+#endif
+
+#ifndef YY_NO_INPUT
+#ifdef __cplusplus
+static int yyinput YY_PROTO(( void ));
+#else
+static int input YY_PROTO(( void ));
+#endif
+#endif
+
+#if YY_STACK_USED
+static int yy_start_stack_ptr = 0;
+static int yy_start_stack_depth = 0;
+static int *yy_start_stack = 0;
+#ifndef YY_NO_PUSH_STATE
+static void yy_push_state YY_PROTO(( int new_state ));
+#endif
+#ifndef YY_NO_POP_STATE
+static void yy_pop_state YY_PROTO(( void ));
+#endif
+#ifndef YY_NO_TOP_STATE
+static int yy_top_state YY_PROTO(( void ));
+#endif
+
+#else
+#define YY_NO_PUSH_STATE 1
+#define YY_NO_POP_STATE 1
+#define YY_NO_TOP_STATE 1
+#endif
+
+#ifdef YY_MALLOC_DECL
+YY_MALLOC_DECL
+#else
+#if __STDC__
+#ifndef __cplusplus
+#include <stdlib.h>
+#endif
+#else
+/* Just try to get by without declaring the routines.  This will fail
+ * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
+ * or sizeof(void*) != sizeof(int).
+ */
+#endif
+#endif
+
+/* Amount of stuff to slurp up with each read. */
+#ifndef YY_READ_BUF_SIZE
+#define YY_READ_BUF_SIZE 8192
+#endif
+
+/* Copy whatever the last rule matched to the standard output. */
+
+#ifndef ECHO
+/* This used to be an fputs(), but since the string might contain NUL's,
+ * we now use fwrite().
+ */
+#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
+#endif
+
+/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
+ * is returned in "result".
+ */
+#ifndef YY_INPUT
+#define YY_INPUT(buf,result,max_size) \
+	if ( yy_current_buffer->yy_is_interactive ) \
+		{ \
+		int c = '*', n; \
+		for ( n = 0; n < max_size && \
+			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
+			buf[n] = (char) c; \
+		if ( c == '\n' ) \
+			buf[n++] = (char) c; \
+		if ( c == EOF && ferror( yyin ) ) \
+			YY_FATAL_ERROR( "input in flex scanner failed" ); \
+		result = n; \
+		} \
+	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
+		  && ferror( yyin ) ) \
+		YY_FATAL_ERROR( "input in flex scanner failed" );
+#endif
+
+/* No semi-colon after return; correct usage is to write "yyterminate();" -
+ * we don't want an extra ';' after the "return" because that will cause
+ * some compilers to complain about unreachable statements.
+ */
+#ifndef yyterminate
+#define yyterminate() return YY_NULL
+#endif
+
+/* Number of entries by which start-condition stack grows. */
+#ifndef YY_START_STACK_INCR
+#define YY_START_STACK_INCR 25
+#endif
+
+/* Report a fatal error. */
+#ifndef YY_FATAL_ERROR
+#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
+#endif
+
+/* Default declaration of generated scanner - a define so the user can
+ * easily add parameters.
+ */
+#ifndef YY_DECL
+#define YY_DECL int yylex YY_PROTO(( void ))
+#endif
+
+/* Code executed at the beginning of each rule, after yytext and yyleng
+ * have been set up.
+ */
+#ifndef YY_USER_ACTION
+#define YY_USER_ACTION
+#endif
+
+/* Code executed at the end of each rule. */
+#ifndef YY_BREAK
+#define YY_BREAK break;
+#endif
+
+#define YY_RULE_SETUP \
+	if ( yyleng > 0 ) \
+		yy_current_buffer->yy_at_bol = \
+				(yytext[yyleng - 1] == '\n'); \
+	YY_USER_ACTION
+
+YY_DECL
+	{
+	register yy_state_type yy_current_state;
+	register char *yy_cp, *yy_bp;
+	register int yy_act;
+
+#line 842 "scanner.l"
+
+
+
+	if ( yy_init )
+		{
+		yy_init = 0;
+
+#ifdef YY_USER_INIT
+		YY_USER_INIT;
+#endif
+
+		if ( ! yy_start )
+			yy_start = 1;	/* first start state */
+
+		if ( ! yyin )
+			yyin = stdin;
+
+		if ( ! yyout )
+			yyout = stdout;
+
+		if ( ! yy_current_buffer )
+			yy_current_buffer =
+				yy_create_buffer( yyin, YY_BUF_SIZE );
+
+		yy_load_buffer_state();
+		}
+
+	while ( 1 )		/* loops until end-of-file is reached */
+		{
+		yy_cp = yy_c_buf_p;
+
+		/* Support of yytext. */
+		*yy_cp = yy_hold_char;
+
+		/* yy_bp points to the position in yy_ch_buf of the start of
+		 * the current run.
+		 */
+		yy_bp = yy_cp;
+
+		yy_current_state = yy_start;
+		yy_current_state += YY_AT_BOL();
+		yy_state_ptr = yy_state_buf;
+		*yy_state_ptr++ = yy_current_state;
+yy_match:
+		do
+			{
+			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
+			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
+				{
+				yy_current_state = (int) yy_def[yy_current_state];
+				if ( yy_current_state >= 8399 )
+					yy_c = yy_meta[(unsigned int) yy_c];
+				}
+			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
+			*yy_state_ptr++ = yy_current_state;
+			++yy_cp;
+			}
+		while ( yy_base[yy_current_state] != 42114 );
+
+yy_find_action:
+		yy_current_state = *--yy_state_ptr;
+		yy_lp = yy_accept[yy_current_state];
+find_rule: /* we branch to this label when backing up */
+		for ( ; ; ) /* until we find what rule we matched */
+			{
+			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
+				{
+				yy_act = yy_acclist[yy_lp];
+				if ( yy_act & YY_TRAILING_HEAD_MASK ||
+				     yy_looking_for_trail_begin )
+					{
+					if ( yy_act == yy_looking_for_trail_begin )
+						{
+						yy_looking_for_trail_begin = 0;
+						yy_act &= ~YY_TRAILING_HEAD_MASK;
+						break;
+						}
+					}
+				else if ( yy_act & YY_TRAILING_MASK )
+					{
+					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
+					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
+					yy_full_match = yy_cp;
+					yy_full_state = yy_state_ptr;
+					yy_full_lp = yy_lp;
+					}
+				else
+					{
+					yy_full_match = yy_cp;
+					yy_full_state = yy_state_ptr;
+					yy_full_lp = yy_lp;
+					break;
+					}
+				++yy_lp;
+				goto find_rule;
+				}
+			--yy_cp;
+			yy_current_state = *--yy_state_ptr;
+			yy_lp = yy_accept[yy_current_state];
+			}
+
+		YY_DO_BEFORE_ACTION;
+
+
+do_action:	/* This label is used only to access EOF actions. */
+
+
+		switch ( yy_act )
+	{ /* beginning of action switch */
+case 1:
+YY_RULE_SETUP
+#line 844 "scanner.l"
+{ // new file
+  					  if (memberGroupId!=DOX_NOGROUP)
+					  {
+					    warn(yyFileName,yyLineNr,"Warning: Missing //@}");
+					    memberGroupId=DOX_NOGROUP;
+					  }
+  					  yyLineNr= 0 ; // there is always an extra newline at the start of the file
+					  int i; 
+					  for( i = 0 ; yytext[i+1] != 6 ; i++ )
+					    yyFileName[i] = yytext[i+1] ;
+					  yyFileName[i] = 0 ;
+					  setContext();
+					  msg("Parsing file %s...\n",yyFileName);
+					  current_root  = global_root ;
+					  initParser();
+					  current->reset();
+					  int sec=guessSection(yyFileName);
+					  if (sec)
+					  {
+					    current->name    = yyFileName;
+					    current->section = sec;
+					    current_root->addSubEntry(current);
+					    current          = new Entry;
+					  }
+					  if ( insidePHP )
+					  {
+					    BEGIN( FindMembersPHP );
+					  }
+					  else
+					  {
+					    BEGIN( FindMembers );
+					  }
+                                        }
+	YY_BREAK
+case 2:
+YY_RULE_SETUP
+#line 877 "scanner.l"
+{
+  					  curlyCount=0;
+					  needsSemi = TRUE;
+  					  BEGIN(SkipCurlyBlock); 
+					}
+	YY_BREAK
+case 3:
+YY_RULE_SETUP
+#line 882 "scanner.l"
+{
+  				 	  roundCount=0;
+  					  BEGIN(SkipRoundBlock);
+  					}
+	YY_BREAK
+case 4:
+YY_RULE_SETUP
+#line 886 "scanner.l"
+{
+					  ++roundCount;
+  					}
+	YY_BREAK
+case 5:
+YY_RULE_SETUP
+#line 889 "scanner.l"
+{
+  					  if (roundCount )
+					    --roundCount ;
+					  else
+					    BEGIN( NextSemi ) ;
+  					}
+	YY_BREAK
+case 6:
+YY_RULE_SETUP
+#line 895 "scanner.l"
+{
+  					  ++curlyCount ; 
+					}
+	YY_BREAK
+case 7:
+YY_RULE_SETUP
+#line 898 "scanner.l"
+{ 
+  				          if( curlyCount )
+					  {
+					    --curlyCount ;
+					  }
+					  else if (needsSemi)
+					  {
+					    BEGIN( NextSemi );
+					  }
+					  else
+					  {
+					    BEGIN( FindMembers );
+					  }
+					}
+	YY_BREAK
+case 8:
+YY_RULE_SETUP
+#line 912 "scanner.l"
+{ if (insidePHP) REJECT; }
+	YY_BREAK
+case 9:
+YY_RULE_SETUP
+#line 913 "scanner.l"
+{
+  					  lastStringContext=NextSemi;
+					  BEGIN(SkipString);
+  					}
+	YY_BREAK
+case 10:
+YY_RULE_SETUP
+#line 917 "scanner.l"
+{ 
+  					  unput(*yytext);
+  					  BEGIN( FindMembers ); 
+					}
+	YY_BREAK
+case 11:
+YY_RULE_SETUP
+#line 921 "scanner.l"
+{
+  					  unput(*yytext);
+					  BEGIN( FindMembers );
+  					}
+	YY_BREAK
+case 12:
+YY_RULE_SETUP
+#line 925 "scanner.l"
+{ // PHP code start
+                                           BEGIN( FindMembers );
+					}
+	YY_BREAK
+case 13:
+YY_RULE_SETUP
+#line 928 "scanner.l"
+{ // Non-PHP code text, ignore
+  					}
+	YY_BREAK
+case 14:
+YY_RULE_SETUP
+#line 930 "scanner.l"
+{ // Non-PHP code text, ignore
+  					  yyLineNr++;
+  					}
+	YY_BREAK
+case 15:
+YY_RULE_SETUP
+#line 933 "scanner.l"
+{ // Non-PHP code text, ignore
+				        }
+	YY_BREAK
+case 16:
+YY_RULE_SETUP
+#line 935 "scanner.l"
+{ // PHP code end
+					  if (insidePHP)
+					    BEGIN( FindMembersPHP );
+					  else
+					    REJECT;
+                                        }
+	YY_BREAK
+case 17:
+YY_RULE_SETUP
+#line 942 "scanner.l"
+{ if (insidePHP)
+					    BEGIN( NextSemi );
+					  else
+					    REJECT;
+					}
+	YY_BREAK
+case 18:
+YY_RULE_SETUP
+#line 947 "scanner.l"
+{ // IDL or Borland C++ builder property 
+  					  current->mtype = mtype = Property;
+					  current->protection = protection = Public ;
+					  current->type.resize(0); 
+					  current->name.resize(0); 
+					  current->args.resize(0);
+					  current->argList->clear();
+					  lineCount() ;
+					}
+	YY_BREAK
+case 19:
+YY_RULE_SETUP
+#line 957 "scanner.l"
+{ current->mtype = mtype = DCOP;
+					  current->protection = protection = Public ;
+					  current->type.resize(0); 
+					  current->name.resize(0); 
+					  current->args.resize(0);
+					  current->argList->clear();
+					  lineCount() ;
+					}
+	YY_BREAK
+case 20:
+YY_RULE_SETUP
+#line 966 "scanner.l"
+{ current->mtype = mtype = Signal;
+					  current->protection = protection = Public ;
+					  current->type.resize(0); 
+					  current->name.resize(0); 
+					  current->args.resize(0);
+					  current->argList->clear();
+					  lineCount() ;
+					}
+	YY_BREAK
+case 21:
+YY_RULE_SETUP
+#line 975 "scanner.l"
+{
+					  current->protection = protection = Public ;
+					  current->mtype = mtype = Slot;
+					  current->type.resize(0); 
+					  current->name.resize(0); 
+					  current->args.resize(0);
+					  current->argList->clear();
+					  lineCount();
+					}
+	YY_BREAK
+case 22:
+YY_RULE_SETUP
+#line 985 "scanner.l"
+{
+					  current->protection = protection = Protected ;
+					  current->mtype = mtype = Slot;
+					  current->type.resize(0); 
+					  current->name.resize(0); 
+					  current->args.resize(0);
+					  current->argList->clear();
+					  lineCount();
+					}
+	YY_BREAK
+case 23:
+YY_RULE_SETUP
+#line 995 "scanner.l"
+{
+					  current->protection = protection = Private ;
+					  current->mtype = mtype = Slot;
+					  current->type.resize(0); 
+					  current->name.resize(0); 
+					  current->args.resize(0);
+					  current->argList->clear();
+					  lineCount();
+					}
+	YY_BREAK
+case 24:
+YY_RULE_SETUP
+#line 1004 "scanner.l"
+{ 
+					  current->protection = protection = Public ;
+					  current->mtype = mtype = Method;
+					  current->type.resize(0); 
+					  current->name.resize(0); 
+					  current->args.resize(0);
+					  current->argList->clear();
+					  lineCount() ;
+					}
+	YY_BREAK
+case 25:
+YY_RULE_SETUP
+#line 1013 "scanner.l"
+{ 
+  					  current->protection = protection = Protected ;
+					  current->mtype = mtype = Method;
+					  current->type.resize(0); 
+					  current->name.resize(0); 
+					  current->args.resize(0);
+					  current->argList->clear();
+					  lineCount() ;
+					}
+	YY_BREAK
+case 26:
+YY_RULE_SETUP
+#line 1022 "scanner.l"
+{ 
+  					  current->protection = protection = Private ;
+					  current->mtype = mtype = Method;
+					  current->type.resize(0); 
+					  current->name.resize(0); 
+					  current->args.resize(0);
+					  current->argList->clear();
+					  lineCount() ;
+					}
+	YY_BREAK
+case 27:
+YY_RULE_SETUP
+#line 1031 "scanner.l"
+{
+  					  current->protection = protection = Private ;
+					  current->mtype = mtype = Method;
+					  current->type.resize(0); 
+					  current->name.resize(0); 
+					  current->args.resize(0);
+					  current->argList->clear();
+					  lineCount() ;
+  					}
+	YY_BREAK
+case 28:
+YY_RULE_SETUP
+#line 1040 "scanner.l"
+{
+  					  current->protection = protection = Protected ;
+					  current->mtype = mtype = Method;
+					  current->type.resize(0); 
+					  current->name.resize(0); 
+					  current->args.resize(0);
+					  current->argList->clear();
+					  lineCount() ;
+  					}
+	YY_BREAK
+case 29:
+YY_RULE_SETUP
+#line 1049 "scanner.l"
+{
+  					  current->protection = protection = Public ;
+					  current->mtype = mtype = Method;
+					  current->type.resize(0); 
+					  current->name.resize(0); 
+					  current->args.resize(0);
+					  current->argList->clear();
+					  lineCount() ;
+  					}
+	YY_BREAK
+case 30:
+YY_RULE_SETUP
+#line 1058 "scanner.l"
+{
+  					  if (!insideObjC) 
+					  {
+					    REJECT;
+					  }
+					  else
+					  {
+  					    lineCount();
+					    current->fileName  = yyFileName;
+					    current->startLine = yyLineNr;
+					    current->bodyLine  = yyLineNr;
+					    current->section = Entry::FUNCTION_SEC;
+					    current->protection = protection = Public ;
+					    current->virt = Virtual;
+					    current->stat=yytext[0]=='+';
+					    current->mtype = mtype = Method;
+					    current->type.resize(0); 
+					    current->name.resize(0); 
+					    current->args.resize(0);
+					    current->argList->clear();
+					    BEGIN( ObjCMethod );
+					  }
+  					}
+	YY_BREAK
+case 31:
+YY_RULE_SETUP
+#line 1081 "scanner.l"
+{ // start of method's return type
+  					  BEGIN( ObjCReturnType );
+  					}
+	YY_BREAK
+case 32:
+YY_RULE_SETUP
+#line 1084 "scanner.l"
+{ // found method name
+  					  if (current->type.isEmpty())
+					  {
+					    current->type = "id";
+					  }
+					  current->name = yytext;
+  					}
+	YY_BREAK
+case 33:
+YY_RULE_SETUP
+#line 1091 "scanner.l"
+{ // start of parameter list
+  					  current->name += ':';
+  					  Argument *a = new Argument;
+					  current->argList->append(a);
+  					  BEGIN( ObjCParams );
+  					}
+	YY_BREAK
+case 34:
+YY_RULE_SETUP
+#line 1097 "scanner.l"
+{ // TODO: check if nested braches are possible.
+  					  current->type = yytext;
+  					}
+	YY_BREAK
+case 35:
+YY_RULE_SETUP
+#line 1100 "scanner.l"
+{
+  					  BEGIN( ObjCMethod );
+  					}
+	YY_BREAK
+case 36:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 1103 "scanner.l"
+{ // Keyword of parameter
+  					  lineCount();
+					  QCString keyw = QCString(yytext).stripWhiteSpace();
+					  current->name += keyw;
+					  if (current->argList->getLast()->type.isEmpty())
+					  {
+					    current->argList->getLast()->type="id";
+					  }
+  					  Argument *a = new Argument;
+  					  a->attrib=(QCString)"["+keyw+"]";
+					  current->argList->append(a);
+  					}
+	YY_BREAK
+case 37:
+YY_RULE_SETUP
+#line 1115 "scanner.l"
+{ // name of parameter
+  					  lineCount();
+  					  current->argList->getLast()->name=QCString(yytext).stripWhiteSpace();
+  					}
+	YY_BREAK
+case 38:
+YY_RULE_SETUP
+#line 1119 "scanner.l"
+{ // name of parameter
+  					  current->argList->getLast()->attrib="[,]";
+  					  current->argList->getLast()->type="...";
+  					}
+	YY_BREAK
+case 39:
+YY_RULE_SETUP
+#line 1123 "scanner.l"
+{ 
+					  current->name += ':';
+					}
+	YY_BREAK
+case 40:
+YY_RULE_SETUP
+#line 1126 "scanner.l"
+{
+  					  BEGIN( ObjCParamType );
+  					}
+	YY_BREAK
+case 41:
+YY_RULE_SETUP
+#line 1129 "scanner.l"
+{
+  					  current->argList->getLast()->type=yytext;
+  					}
+	YY_BREAK
+case 42:
+YY_RULE_SETUP
+#line 1132 "scanner.l"
+{
+  					  BEGIN( ObjCParams );
+  					}
+	YY_BREAK
+case 43:
+YY_RULE_SETUP
+#line 1135 "scanner.l"
+{ // end of method declaration
+  					  current->args = argListToString(current->argList);
+					  //printf("argList=%s\n",current->args.data());
+  					  unput(';');
+  					  BEGIN( Function );
+  					}
+	YY_BREAK
+case 44:
+YY_RULE_SETUP
+#line 1141 "scanner.l"
+{ // start of a method body
+                                          //printf("Type=%s Name=%s args=%s\n",
+					  //    current->type.data(),current->name.data(),argListToString(current->argList).data()
+					  //    );
+                                          unput('{');
+  					  BEGIN( Function );
+  					}
+	YY_BREAK
+case 45:
+YY_RULE_SETUP
+#line 1148 "scanner.l"
+{
+  					  lineCount();
+  					}
+	YY_BREAK
+case 46:
+YY_RULE_SETUP
+#line 1151 "scanner.l"
+{
+  					  isTypedef=FALSE;
+					  current->name = yytext;
+					  current->name = substitute(current->name,".","::");
+					  current->section = Entry::NAMESPACE_SEC;
+					  current->type = "namespace" ;
+					  current->fileName  = yyFileName;
+					  current->startLine = yyLineNr;
+					  current->bodyLine  = yyLineNr;
+					  lineCount();
+					  curlyCount=0;
+					  current_root->addSubEntry(current);
+                                          current_root = current ;
+					  current             = new Entry ;
+					  initEntry();
+					  BEGIN( FindMembers ) ;
+  					}
+	YY_BREAK
+case 47:
+YY_RULE_SETUP
+#line 1168 "scanner.l"
+{
+  					  BEGIN(FindMembers);
+  					}
+	YY_BREAK
+case 48:
+YY_RULE_SETUP
+#line 1171 "scanner.l"
+{ //current->type += " static ";
+  					  current->stat = TRUE;
+					  lineCount();
+					}
+	YY_BREAK
+case 49:
+YY_RULE_SETUP
+#line 1175 "scanner.l"
+{
+  					  current->stat = FALSE;
+					  current->explicitExternal = TRUE;
+					  lineCount();
+  					}
+	YY_BREAK
+case 50:
+YY_RULE_SETUP
+#line 1180 "scanner.l"
+{ current->type += " virtual ";
+					  current->virt = Virtual;
+					  lineCount();
+					}
+	YY_BREAK
+case 51:
+YY_RULE_SETUP
+#line 1184 "scanner.l"
+{ current->type += " abstract ";
+					  current->virt = Pure;
+					  lineCount();
+					}
+	YY_BREAK
+case 52:
+YY_RULE_SETUP
+#line 1188 "scanner.l"
+{ current->memSpec|=Entry::Inline;
+                                          lineCount(); 
+                                        }
+	YY_BREAK
+case 53:
+YY_RULE_SETUP
+#line 1191 "scanner.l"
+{ current->memSpec|=Entry::Mutable;
+                                          lineCount(); 
+                                        }
+	YY_BREAK
+case 54:
+YY_RULE_SETUP
+#line 1194 "scanner.l"
+{ current->memSpec|=Entry::Explicit;
+                                          lineCount(); 
+                                        }
+	YY_BREAK
+/*
+<FindMembers>{B}*"import"{BN}+		{ // IDL import keyword
+  					  BEGIN( NextSemi );
+  					}
+  */
+case 55:
+YY_RULE_SETUP
+#line 1202 "scanner.l"
+{ lineCount(); }
+	YY_BREAK
+case 56:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 1203 "scanner.l"
+{ 
+  					  isTypedef=FALSE;
+					  current->section = Entry::NAMESPACE_SEC;
+					  current->type = "namespace" ;
+					  current->fileName  = yyFileName;
+					  current->startLine = yyLineNr;
+					  current->bodyLine  = yyLineNr;
+					  lineCount();
+  					  BEGIN( CompoundName ); 
+					}
+	YY_BREAK
+case 57:
+YY_RULE_SETUP
+#line 1213 "scanner.l"
+{ 
+					  lineCount();
+                                          if (insideIDL)
+					  {
+  					    isTypedef=FALSE;
+					    current->section = Entry::NAMESPACE_SEC;
+					    current->type = "module" ;
+					    current->fileName  = yyFileName;
+					    current->startLine = yyLineNr;
+					    current->bodyLine  = yyLineNr;
+  					    BEGIN( CompoundName ); 
+					  }
+					  else if (insideD)
+					  {
+					    lineCount();
+					    BEGIN(PackageName);
+					  }
+					  else
+					  {
+					    addType( current ) ;
+					    current->name = QCString(yytext).stripWhiteSpace();
+					  }
+					}
+	YY_BREAK
+case 58:
+YY_RULE_SETUP
+#line 1236 "scanner.l"
+{ 
+					  lineCount();
+                                          if (insideIDL)
+					  {
+  					    isTypedef=FALSE;
+					    current->section = Entry::NAMESPACE_SEC;
+					    current->type = "library" ;
+					    current->fileName  = yyFileName;
+					    current->startLine = yyLineNr;
+					    current->bodyLine  = yyLineNr;
+  					    BEGIN( CompoundName ); 
+					  }
+					  else
+					  {
+					    addType( current ) ;
+					    current->name = QCString(yytext).stripWhiteSpace();
+					  }
+					}
+	YY_BREAK
+case 59:
+YY_RULE_SETUP
+#line 1254 "scanner.l"
+{ // M$/Corba IDL interface
+					  lineCount();
+                                          if (insideIDL || insideJava || insideCS || insideD)
+					  {
+  					    isTypedef=FALSE;
+					    current->section = Entry::INTERFACE_SEC;
+					    addType( current ) ;
+					    current->type += " interface" ;
+					    current->fileName  = yyFileName;
+					    current->startLine = yyLineNr;
+					    current->bodyLine  = yyLineNr;
+					    BEGIN( CompoundName );
+					  }
+					  else
+					  {
+					    addType( current ) ;
+					    current->name = QCString(yytext).stripWhiteSpace();
+					  }
+  					}
+	YY_BREAK
+case 60:
+YY_RULE_SETUP
+#line 1273 "scanner.l"
+{ // Objective-C class implementation
+					  lineCount();
+  					  isTypedef=FALSE;
+					  current->section = Entry::OBJCIMPL_SEC;
+					  current->objc = insideObjC = TRUE;
+					  current->protection = protection = Public ;
+					  addType( current ) ;
+					  current->type += " implementation" ;
+					  current->fileName  = yyFileName;
+					  current->startLine = yyLineNr;
+					  current->bodyLine  = yyLineNr;
+					  BEGIN( CompoundName );
+  					}
+	YY_BREAK
+case 61:
+YY_RULE_SETUP
+#line 1286 "scanner.l"
+{ // Objective-C class interface
+					  lineCount();
+  					  isTypedef=FALSE;
+					  current->section = Entry::INTERFACE_SEC;
+					  current->objc = insideObjC = TRUE;
+					  current->protection = protection = Public ;
+					  addType( current ) ;
+					  current->type += " interface" ;
+					  current->fileName  = yyFileName;
+					  current->startLine = yyLineNr;
+					  current->bodyLine  = yyLineNr;
+					  BEGIN( CompoundName );
+  					}
+	YY_BREAK
+case 62:
+YY_RULE_SETUP
+#line 1299 "scanner.l"
+{ // Objective-C protocol definition
+					  lineCount();
+  					  isTypedef=FALSE;
+					  current->section = Entry::PROTOCOL_SEC;
+					  current->objc = insideObjC = TRUE;
+					  current->protection = protection = Public ;
+					  addType( current ) ;
+					  current->type += " protocol" ;
+					  current->fileName  = yyFileName;
+					  current->startLine = yyLineNr;
+					  current->bodyLine  = yyLineNr;
+					  BEGIN( CompoundName );
+  					}
+	YY_BREAK
+case 63:
+YY_RULE_SETUP
+#line 1312 "scanner.l"
+{ // Corba IDL exception
+  					  isTypedef=FALSE;
+					  current->section = Entry::EXCEPTION_SEC;
+					  addType( current ) ;
+					  current->type += " exception" ;
+					  current->fileName  = yyFileName;
+					  current->startLine = yyLineNr;
+					  current->bodyLine  = yyLineNr;
+					  lineCount();
+					  BEGIN( CompoundName );
+  					}
+	YY_BREAK
+case 64:
+#line 1324 "scanner.l"
+case 65:
+#line 1325 "scanner.l"
+case 66:
+YY_RULE_SETUP
+#line 1325 "scanner.l"
+{ 
+					  isTypedef=((QCString)yytext).find("typedef")!=-1;
+  					  current->section = Entry::CLASS_SEC;
+					  addType( current ) ;
+					  current->type += " class" ;
+					  current->fileName  = yyFileName;
+					  current->startLine = yyLineNr;
+					  current->bodyLine  = yyLineNr;
+					  lineCount() ;
+					  if (yytext[yyleng-1]=='{') unput('{');
+					  BEGIN( CompoundName ) ;
+					}
+	YY_BREAK
+case 67:
+YY_RULE_SETUP
+#line 1337 "scanner.l"
+{
+  					  if (insideIDL)
+					  {
+					    isTypedef=FALSE;
+					    current->section = Entry::CLASS_SEC;
+					    addType( current ) ;
+					    current->type += " coclass" ;
+					    current->fileName  = yyFileName;
+					    current->startLine = yyLineNr;
+					    current->bodyLine  = yyLineNr;
+					    lineCount() ;
+					    BEGIN( CompoundName ) ;
+					  }
+					  else
+					  {
+  					    addType(current);
+					    current->name = yytext;
+					    current->name = current->name.stripWhiteSpace();
+					    lineCount();
+					  }
+  					}
+	YY_BREAK
+case 68:
+#line 1359 "scanner.l"
+case 69:
+YY_RULE_SETUP
+#line 1359 "scanner.l"
+{ 
+					  isTypedef=((QCString)yytext).find("typedef")!=-1;
+  					  current->section = Entry::STRUCT_SEC ;
+					  addType( current ) ;
+					  current->type += " struct" ;
+					  current->fileName  = yyFileName;
+					  current->startLine = yyLineNr;
+					  current->bodyLine  = yyLineNr;
+					  lineCount() ;
+					  if (yytext[yyleng-1]=='{') unput('{');
+					  BEGIN( CompoundName ) ;
+					}
+	YY_BREAK
+case 70:
+#line 1372 "scanner.l"
+case 71:
+YY_RULE_SETUP
+#line 1372 "scanner.l"
+{ 
+					  isTypedef=((QCString)yytext).find("typedef")!=-1;
+  					  current->section = Entry::UNION_SEC ;
+					  addType( current ) ;
+					  current->type += " union" ;
+					  current->fileName  = yyFileName;
+					  current->startLine = yyLineNr;
+					  current->bodyLine  = yyLineNr;
+					  lineCount() ;
+					  if (yytext[yyleng-1]=='{') unput('{');
+					  BEGIN( CompoundName ) ;
+					}
+	YY_BREAK
+case 72:
+#line 1385 "scanner.l"
+case 73:
+YY_RULE_SETUP
+#line 1385 "scanner.l"
+{ 
+					  isTypedef=((QCString)yytext).find("typedef")!=-1;
+  					  current->section = Entry::ENUM_SEC ;
+					  addType( current ) ;
+					  current->type += " enum" ;
+					  current->fileName  = yyFileName;
+					  current->startLine = yyLineNr;
+					  current->bodyLine  = yyLineNr;
+					  lineCount() ;
+					  if (yytext[yyleng-1]=='{') unput('{');
+					  BEGIN( CompoundName ) ;
+					}
+	YY_BREAK
+case 74:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 1397 "scanner.l"
+{
+  					  lineCount();
+    					  current->name += yytext ;
+					  current->name = current->name.simplifyWhiteSpace();
+					  BEGIN( FindMembers ) ;
+  					}
+	YY_BREAK
+case 75:
+YY_RULE_SETUP
+#line 1403 "scanner.l"
+{ // can occur when importing members
+  					  unput(';');
+					  BEGIN( FindMembers ) ;
+  					}
+	YY_BREAK
+case 76:
+YY_RULE_SETUP
+#line 1407 "scanner.l"
+{ 
+    					  lineCount();
+    					  current->name += *yytext ;
+					}
+	YY_BREAK
+case 77:
+YY_RULE_SETUP
+#line 1411 "scanner.l"
+{ /* skip guided templ specifiers */ }
+	YY_BREAK
+case 78:
+YY_RULE_SETUP
+#line 1412 "scanner.l"
+{
+					  current->name = current->name.simplifyWhiteSpace();
+					  unput(*yytext);
+					  BEGIN( FindMembers ) ;
+					}
+	YY_BREAK
+case 79:
+YY_RULE_SETUP
+#line 1417 "scanner.l"
+{ 
+  					  lineCount();
+					  if (current->tArgLists==0)
+					  {
+					    current->tArgLists = new QList<ArgumentList>;
+					    current->tArgLists->setAutoDelete(TRUE);
+					  }
+					  ArgumentList *al = new ArgumentList;
+					  al->setAutoDelete(TRUE);
+					  current->tArgLists->append(al);
+					  currentArgumentList = al;
+					  templateStr="<";
+					  fullArgString = templateStr.copy();
+					  copyArgString = &templateStr;
+					  currentArgumentContext = FindMembers;
+					  BEGIN( ReadTempArgs );
+  					}
+	YY_BREAK
+case 80:
+YY_RULE_SETUP
+#line 1434 "scanner.l"
+{ // namespace alias
+                                          lineCount(); 
+  					  BEGIN( NSAliasName );
+					}
+	YY_BREAK
+case 81:
+YY_RULE_SETUP
+#line 1438 "scanner.l"
+{
+  					  aliasName = yytext;
+					  BEGIN( NSAliasArg );
+  					}
+	YY_BREAK
+case 82:
+YY_RULE_SETUP
+#line 1442 "scanner.l"
+{
+  					  //printf("Inserting namespace alias %s::%s->%s\n",current_root->name.data(),aliasName.data(),yytext);
+					  //if (current_root->name.isEmpty())
+					  //{
+                                          // TODO: namespace aliases are now treated as global entities
+                                          // while they should be aware of the scope they are in
+                                            Doxygen::namespaceAliasDict.insert(aliasName,new QCString(yytext));
+					  //}
+					  //else
+					  //{
+                                          //  Doxygen::namespaceAliasDict.insert(current_root->name+"::"+aliasName,
+					  //	new QCString(current_root->name+"::"+yytext));
+					  //}
+  					}
+	YY_BREAK
+case 83:
+YY_RULE_SETUP
+#line 1456 "scanner.l"
+{
+  					  BEGIN( FindMembers );
+  					}
+	YY_BREAK
+case 84:
+YY_RULE_SETUP
+#line 1459 "scanner.l"
+{ // package import => add as a using directive
+  					  lineCount();
+  					  QCString scope=yytext;
+					  current->name=removeRedundantWhiteSpace(substitute(scope.left(scope.length()-2),".","::"));
+                                          current->fileName = yyFileName; 
+  					  current->section=Entry::USINGDIR_SEC;
+					  current_root->addSubEntry(current);
+					  current = new Entry ;
+					  initEntry();
+					  BEGIN(Using);
+  					}
+	YY_BREAK
+case 85:
+YY_RULE_SETUP
+#line 1470 "scanner.l"
+{ // class import => add as a using declaration
+                                          lineCount();
+  					  QCString scope=yytext;
+					  current->name=removeRedundantWhiteSpace(substitute(scope,".","::"));
+					  //printf("import name = %s -> %s\n",yytext,current->name.data());
+                                          current->fileName = yyFileName; 
+  					  current->section=Entry::USINGDECL_SEC;
+					  current_root->addSubEntry(current);
+					  current = new Entry ;
+					  initEntry();
+					  BEGIN(Using);
+  					}
+	YY_BREAK
+case 86:
+YY_RULE_SETUP
+#line 1482 "scanner.l"
+{ 
+					  current->startLine=yyLineNr; 
+                                          lineCount(); 
+                                          BEGIN(Using); 
+                                        }
+	YY_BREAK
+case 87:
+YY_RULE_SETUP
+#line 1487 "scanner.l"
+{ lineCount(); BEGIN(UsingDirective); }
+	YY_BREAK
+case 88:
+YY_RULE_SETUP
+#line 1488 "scanner.l"
+{
+                                          lineCount();
+  					  current->name=yytext;
+                                          current->fileName = yyFileName; 
+  					  current->section=Entry::USINGDECL_SEC;
+					  current_root->addSubEntry(current);
+					  current             = new Entry ;
+					  if (insideCS) /* Hack: in C# a using declaration and 
+							   directive have the same syntax, so we
+							   also add it as a using directive here
+							 */
+					  {
+					    current->name=yytext;
+					    current->fileName = yyFileName; 
+					    current->startLine = yyLineNr;
+					    current->section=Entry::USINGDIR_SEC;
+					    current_root->addSubEntry(current);
+					    current             = new Entry ;
+					  }
+					  initEntry();
+					  BEGIN(Using);
+  					}
+	YY_BREAK
+case 89:
+YY_RULE_SETUP
+#line 1510 "scanner.l"
+{ current->name=yytext;
+                                          current->fileName = yyFileName; 
+  					  current->section=Entry::USINGDIR_SEC;
+					  current_root->addSubEntry(current);
+					  current             = new Entry ;
+					  initEntry();
+					  BEGIN(Using);
+  					}
+	YY_BREAK
+case 90:
+YY_RULE_SETUP
+#line 1518 "scanner.l"
+{ BEGIN(FindMembers); }
+	YY_BREAK
+case 91:
+YY_RULE_SETUP
+#line 1519 "scanner.l"
+{ // guided template decl
+					  QCString n=yytext;
+					  addType( current );
+					  current->name=n.left(n.length()-2);
+					}
+	YY_BREAK
+case 92:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 1524 "scanner.l"
+{ // Note: this could be a return type!
+  					  sharpCount=0;
+					  lineCount();
+					  addType( current );
+  					  current->name=yytext;
+					  current->name=current->name.stripWhiteSpace();
+					  //current->scopeSpec.resize(0);
+					  // currentTemplateSpec = &current->scopeSpec;
+					  if (nameIsOperator(current->name))
+					    BEGIN( Operator );
+					  else
+					    BEGIN( EndTemplate );
+					}
+	YY_BREAK
+case 93:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 1537 "scanner.l"
+{
+  					  sharpCount=0;
+					  lineCount();
+  					  current->name+=((QCString)yytext).stripWhiteSpace();
+					  //current->memberSpec.resize(0);
+					  // currentTemplateSpec = &current->memberSpec;
+					  if (nameIsOperator(current->name))
+					    BEGIN( Operator );
+					  else
+					    BEGIN( EndTemplate );
+  					}
+	YY_BREAK
+case 94:
+YY_RULE_SETUP
+#line 1548 "scanner.l"
+{
+  					  current->name+=yytext;
+  					  // *currentTemplateSpec+=yytext; 
+  					}
+	YY_BREAK
+case 95:
+YY_RULE_SETUP
+#line 1552 "scanner.l"
+{ 
+  					  current->name+='<';
+  					  // *currentTemplateSpec+='<'; 
+					  sharpCount++; 
+					}
+	YY_BREAK
+case 96:
+YY_RULE_SETUP
+#line 1557 "scanner.l"
+{
+  					  current->name+=yytext;
+  					  // *currentTemplateSpec+=yytext; 
+  					}
+	YY_BREAK
+case 97:
+YY_RULE_SETUP
+#line 1561 "scanner.l"
+{
+  					  current->name+='>';
+					  // *currentTemplateSpec+='>';
+					  if (--sharpCount<=0)
+					  {  
+					    //printf("Found %s\n",current->name.data());
+					    BEGIN(FindMembers);
+					  }
+					}
+	YY_BREAK
+case 98:
+YY_RULE_SETUP
+#line 1570 "scanner.l"
+{ 
+  					  lineCount();
+  					  current->name+='>';
+					  // *currentTemplateSpec+='>';
+					  if (--sharpCount<=0)
+					  {
+					    current->args = "(";
+					    currentArgumentContext = FuncQual;
+					    fullArgString = current->args.copy();
+					    copyArgString = &current->args;
+					    //printf("Found %s\n",current->name.data());
+					    BEGIN( ReadFuncArgType ) ;
+					  }
+					}
+	YY_BREAK
+case 99:
+YY_RULE_SETUP
+#line 1584 "scanner.l"
+{ // function pointer returning a template instance
+  					  lineCount();
+  					  current->name+='>';
+					  BEGIN(FindMembers);
+  					}
+	YY_BREAK
+case 100:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 2;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 1589 "scanner.l"
+{
+  					  lineCount();
+  					  current->name+='>';
+  					  // *currentTemplateSpec+='>';
+					  if (--sharpCount<=0)
+					  {
+					    BEGIN(FindMemberName);
+					  }
+  					}
+	YY_BREAK
+case 101:
+YY_RULE_SETUP
+#line 1598 "scanner.l"
+{ 
+  					  current->name+=*yytext;
+  					  // *currentTemplateSpec+=*yytext; 
+					}
+	YY_BREAK
+case 102:
+YY_RULE_SETUP
+#line 1602 "scanner.l"
+{
+					  if (insidePHP)
+					  {
+					    current->bodyLine = yyLineNr;
+					    BEGIN( DefinePHP );
+					  }
+					  else
+					    REJECT;
+					}
+	YY_BREAK
+case 103:
+YY_RULE_SETUP
+#line 1611 "scanner.l"
+{ // Qt object macro
+  					}
+	YY_BREAK
+case 104:
+YY_RULE_SETUP
+#line 1613 "scanner.l"
+{ // Qt property declaration
+					  current->protection = protection = Public ;
+  					  current->mtype = mtype = Property;
+  					  BEGIN(QtPropType);
+  					}
+	YY_BREAK
+case 105:
+YY_RULE_SETUP
+#line 1618 "scanner.l"
+{
+  					  current->type=yytext;
+                                          BEGIN(QtPropName);
+  					}
+	YY_BREAK
+case 106:
+YY_RULE_SETUP
+#line 1622 "scanner.l"
+{
+  					  current->name=yytext;
+  					  BEGIN(QtPropRW);
+  					}
+	YY_BREAK
+case 107:
+YY_RULE_SETUP
+#line 1626 "scanner.l"
+{
+  					  current->memSpec |= Entry::Readable;
+  					}
+	YY_BREAK
+case 108:
+YY_RULE_SETUP
+#line 1629 "scanner.l"
+{
+  					  current->memSpec |= Entry::Writable;
+  					}
+	YY_BREAK
+case 109:
+YY_RULE_SETUP
+#line 1632 "scanner.l"
+{
+  					  unput(';');
+					  BEGIN(FindMembers);
+  					}
+	YY_BREAK
+case 110:
+YY_RULE_SETUP
+#line 1636 "scanner.l"
+{
+					  lineCount();
+                                          if (insideIDL && yyleng==9 && strcmp(yytext,"cpp_quote")==0)
+					  {
+					    BEGIN(CppQuote);
+					  }
+					  else if ((insideIDL || insideJava || insideD) && yyleng==6 && strcmp(yytext,"import")==0)
+					  {
+					    if (insideIDL)
+					      BEGIN(NextSemi);
+					    else // insideJava or insideD
+					      BEGIN(JavaImport);
+					  }
+					  else if (insideJava && strcmp(yytext,"package")==0)
+					  {
+  					    lineCount();
+					    BEGIN(PackageName);
+					  }
+					  else if (insideIDL && strcmp(yytext,"case")==0)
+					  {
+					    BEGIN(IDLUnionCase);
+					  }
+					  else if (insideTryBlock && strcmp(yytext,"catch")==0)
+					  {
+					    insideTryBlock=FALSE;
+					    BEGIN(TryFunctionBlock);
+					  }
+					  else
+					  {
+					    if (YY_START==FindMembers)
+					    {
+					      addType( current ) ;
+					    }
+					    bool javaLike = insideJava || insideCS || insideD;
+					    if (javaLike && strcmp(yytext,"public")==0)
+					    {
+					      current->protection = Public;
+					    }
+					    else if (javaLike && strcmp(yytext,"protected")==0)
+					    {
+					      current->protection = Protected;
+					    }
+					    else if (javaLike && strcmp(yytext,"private")==0)
+					    {
+					      current->protection = Private;
+					    }
+					    else
+					    {
+					      if (YY_START==FindMembers)
+					        current->name  = yytext;
+					      else
+						current->name += yytext;
+					      if (current->name.left(7)=="static ")
+					      {
+						current->stat = TRUE;
+						current->name= current->name.mid(7);
+					      }
+					      else if (current->name.left(7)=="inline ")
+					      {
+						if (current->type.isEmpty())
+						{
+						  current->type="inline";
+						}
+						else
+						{
+						  current->type+="inline ";
+						}
+						current->name= current->name.mid(7);
+					      }
+					      else if (current->name.left(6)=="const ")
+					      {
+						if (current->type.isEmpty())
+						{
+						  current->type="const";
+						}
+						else
+						{
+						  current->type+="const ";
+						}
+						current->name=current->name.mid(6);
+					      }
+					    }
+					    QCString tmp=yytext;
+					    if (nameIsOperator(tmp))
+                                            {
+					      BEGIN( Operator );
+                                            }
+					    else
+                                            {
+		 			      BEGIN(FindMembers);
+                                            }
+					  }
+					}
+	YY_BREAK
+case 111:
+YY_RULE_SETUP
+#line 1729 "scanner.l"
+{
+  					  if (insideJava || insideCS || insideD)
+					  {
+					    current->name+=".";
+					  }
+  					}
+	YY_BREAK
+case 112:
+YY_RULE_SETUP
+#line 1735 "scanner.l"
+{
+					  current->name+=yytext;
+  					}
+	YY_BREAK
+case 113:
+YY_RULE_SETUP
+#line 1738 "scanner.l"
+{
+  					  insideCppQuote=TRUE;
+  					  BEGIN(FindMembers);
+  					}
+	YY_BREAK
+case 114:
+YY_RULE_SETUP
+#line 1742 "scanner.l"
+
+	YY_BREAK
+case 115:
+YY_RULE_SETUP
+#line 1743 "scanner.l"
+{ BEGIN(FindMembers); }
+	YY_BREAK
+case 116:
+YY_RULE_SETUP
+#line 1744 "scanner.l"
+{ yyLineNr++; }
+	YY_BREAK
+case 117:
+YY_RULE_SETUP
+#line 1745 "scanner.l"
+
+	YY_BREAK
+case 118:
+YY_RULE_SETUP
+#line 1746 "scanner.l"
+{ yyLineNr++; }
+	YY_BREAK
+case 119:
+YY_RULE_SETUP
+#line 1747 "scanner.l"
+{ 
+					  curlyCount=0;
+					  lastCurlyContext = TryFunctionBlockEnd ;
+  					  BEGIN( SkipCurly );
+					}
+	YY_BREAK
+case 120:
+YY_RULE_SETUP
+#line 1752 "scanner.l"
+
+	YY_BREAK
+case 121:
+YY_RULE_SETUP
+#line 1753 "scanner.l"
+{ BEGIN(TryFunctionBlock); }
+	YY_BREAK
+case 122:
+YY_RULE_SETUP
+#line 1754 "scanner.l"
+{ unput(*yytext); 
+  					  BEGIN( FindMembers );
+					}
+	YY_BREAK
+case 123:
+YY_RULE_SETUP
+#line 1757 "scanner.l"
+{
+  					  insideCppQuote=FALSE;
+					  BEGIN(FindMembers);
+  					}
+	YY_BREAK
+case 124:
+YY_RULE_SETUP
+#line 1761 "scanner.l"
+{ if (insidePHP)
+					    REJECT;
+					  lastCPPContext = YY_START;
+					  BEGIN( SkipCPP ) ;
+					}
+	YY_BREAK
+case 125:
+YY_RULE_SETUP
+#line 1766 "scanner.l"
+{ if (insidePHP)
+					    REJECT;
+  					  current->bodyLine = yyLineNr;
+  					  BEGIN( Define );
+  					}
+	YY_BREAK
+case 126:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 1771 "scanner.l"
+{ /* line control directive */
+                                          yyLineNr = atoi(&yytext[1]);
+					  //printf("setting line number to %d\n",yyLineNr);
+					  lastPreLineCtrlContext = YY_START;
+  					  BEGIN( PreLineCtrl );
+  					}
+	YY_BREAK
+case 127:
+YY_RULE_SETUP
+#line 1777 "scanner.l"
+{
+				          strncpy(yyFileName,stripQuotes(yytext),4096);	
+  					}
+	YY_BREAK
+case 128:
+YY_RULE_SETUP
+#line 1780 "scanner.l"
+{}
+	YY_BREAK
+case 129:
+YY_RULE_SETUP
+#line 1781 "scanner.l"
+{
+                                          yyLineNr++;
+  					  BEGIN( lastPreLineCtrlContext );
+  					}
+	YY_BREAK
+case 130:
+YY_RULE_SETUP
+#line 1785 "scanner.l"
+
+	YY_BREAK
+case 131:
+YY_RULE_SETUP
+#line 1786 "scanner.l"
+{ yyLineNr++ ; }
+	YY_BREAK
+case 132:
+YY_RULE_SETUP
+#line 1787 "scanner.l"
+{ yyLineNr++ ;
+					  BEGIN( lastCPPContext) ;
+					}
+	YY_BREAK
+case 133:
+YY_RULE_SETUP
+#line 1790 "scanner.l"
+{
+  					  current->name = yytext;
+					  current->name = current->name.left(current->name.length()-1).stripWhiteSpace();
+					  current->args = "(";
+  					  current->bodyLine = yyLineNr;
+					  currentArgumentContext = DefineEnd;
+					  fullArgString=current->args.copy();
+					  copyArgString=&current->args;
+					  BEGIN( ReadFuncArgType ) ;
+  					}
+	YY_BREAK
+/*
+<DefineArg>")"				{
+  					  //printf("Define with args\n");
+  					  current->args += ')';
+  					  BEGIN( DefineEnd );
+  					}
+<DefineArg>.				{
+  					  current->args += *yytext;
+  					}
+  */
+case 134:
+YY_RULE_SETUP
+#line 1810 "scanner.l"
+{
+  					  //printf("Define `%s' without args\n",yytext);
+  					  current->bodyLine = yyLineNr;
+  					  current->name = yytext;
+					  BEGIN(DefineEnd);
+  					}
+	YY_BREAK
+case 135:
+YY_RULE_SETUP
+#line 1816 "scanner.l"
+{
+  					  //printf("End define\n");
+					  yyLineNr++;
+					  current->fileName   = yyFileName;
+					  current->startLine  = yyLineNr;
+					  current->type.resize(0);
+  					  current->args       = current->args.simplifyWhiteSpace();
+  					  current->name       = current->name.stripWhiteSpace();
+					  current->section    = Entry::DEFINE_SEC;
+					  current_root->addSubEntry(current);
+					  current             = new Entry ;
+					  initEntry();
+					  BEGIN(FindMembers);
+  					}
+	YY_BREAK
+case 136:
+YY_RULE_SETUP
+#line 1830 "scanner.l"
+{
+  					  //printf("End define\n");
+					  current->fileName   = yyFileName;
+					  current->startLine  = yyLineNr;
+					  current->type.resize(0);
+  					  current->args       = current->args.simplifyWhiteSpace();
+  					  current->name       = current->name.stripWhiteSpace();
+					  current->section    = Entry::ENUM_SEC;  //HACK!
+					  current_root->addSubEntry(current);
+					  current             = new Entry ;
+					  initEntry();
+					  BEGIN(FindMembers);
+  					}
+	YY_BREAK
+case 137:
+YY_RULE_SETUP
+#line 1843 "scanner.l"
+
+	YY_BREAK
+case 138:
+YY_RULE_SETUP
+#line 1844 "scanner.l"
+{
+  					  yyLineNr++;
+  					}
+	YY_BREAK
+case 139:
+YY_RULE_SETUP
+#line 1847 "scanner.l"
+{
+					  if (insideIDL && insideCppQuote)
+					  {
+					    BEGIN(EndCppQuote);
+					  }
+					  else
+					  {
+					    lastStringContext=DefineEnd;
+					    BEGIN(SkipString);
+					  }
+  					}
+	YY_BREAK
+case 140:
+YY_RULE_SETUP
+#line 1858 "scanner.l"
+
+	YY_BREAK
+case 141:
+YY_RULE_SETUP
+#line 1859 "scanner.l"
+{
+  					  current->name = yytext;
+					  current->name = current->name.stripWhiteSpace();
+					  current->name = current->name.left(current->name.length()-1).stripWhiteSpace();
+					  current->name = current->name.left(current->name.length()-1);
+					  current->args = "(";
+  					  current->bodyLine = yyLineNr;
+  					  lastRoundContext = DefinePHPEnd;
+  					  pCopyRoundString = &current->args;
+					  roundCount = 0;
+  					  BEGIN( CopyRound );
+					}
+	YY_BREAK
+case 142:
+YY_RULE_SETUP
+#line 1872 "scanner.l"
+{ current->name += yytext ; 
+  					  addType( current );
+					}
+	YY_BREAK
+case 143:
+YY_RULE_SETUP
+#line 1875 "scanner.l"
+{
+  					  lineCount();
+					  if (current->bodyLine==-1)
+					    current->bodyLine=yyLineNr;
+					  lastAfterDocContext = YY_START;
+					  afterDocTerminator = ';';
+					  if (yytext[yyleng-3]=='/')
+					  {
+					    current->brief.resize(0);
+					    current->briefLine = yyLineNr;
+					    current->briefFile = yyFileName;
+					    BEGIN(AfterDocLine);
+					  }
+					  else if (yytext[yyleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF"))
+					  {
+					    current->brief.resize(0);
+					    current->briefLine = yyLineNr;
+					    current->briefFile = yyLineNr;
+					    current->docLine = yyLineNr;
+					    current->docFile = yyFileName;
+					    BEGIN(AfterDocBrief);
+					  }
+					  else
+					  {
+					    current->doc.resize(0);
+					    current->docLine = yyLineNr;
+					    current->docFile = yyFileName;
+					    BEGIN(AfterDoc);
+					  }
+  					}
+	YY_BREAK
+case 144:
+YY_RULE_SETUP
+#line 1905 "scanner.l"
+{
+  					  lineCount();
+					  lastAfterDocContext = YY_START;
+					  afterDocTerminator = ',';
+					  if (yytext[yyleng-3]=='/')
+					  {
+					    current->brief.resize(0);
+					    current->briefLine = yyLineNr;
+					    current->briefFile = yyLineNr;
+					    BEGIN(AfterDocLine);
+					  }
+					  else if (yytext[yyleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF"))
+					  {
+					    current->brief.resize(0);
+					    current->briefLine = yyLineNr;
+					    current->briefFile = yyLineNr;
+					    current->docLine = yyLineNr;
+					    current->docFile = yyFileName;
+					    BEGIN(AfterDocBrief);
+					  }
+					  else
+					  {
+					    current->doc.resize(0);
+					    current->docLine = yyLineNr;
+					    current->docFile = yyFileName;
+					    BEGIN(AfterDoc);
+					  }
+  					}
+	YY_BREAK
+case 145:
+YY_RULE_SETUP
+#line 1933 "scanner.l"
+{
+  					  lineCount();
+					  lastAfterDocContext = YY_START;
+					  if (YY_START==DefineEnd)
+					  {
+					    afterDocTerminator = '\n';
+					    yyLineNr--;
+					  }
+					  else
+					    afterDocTerminator = 0;
+					  if (yytext[yyleng-3]=='/')
+					  {
+					    current->brief.resize(0);
+					    current->briefLine = yyLineNr;
+					    current->briefFile = yyFileName;
+					    BEGIN(AfterDocLine);
+					  }
+					  else if (yytext[yyleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF"))
+					  {
+					    current->brief.resize(0);
+					    current->briefLine = yyLineNr;
+					    current->briefFile = yyFileName;
+					    BEGIN(AfterDocBrief);
+					  }
+					  else
+					  {
+					    current->doc.resize(0);
+					    current->docLine = yyLineNr;
+					    current->docFile = yyFileName;
+					    BEGIN(AfterDoc);
+					  }
+  					}
+	YY_BREAK
+case 146:
+YY_RULE_SETUP
+#line 1965 "scanner.l"
+{
+  					  startGroup();
+					  tmpDocType=-1;
+					  if (current_root->section & Entry::SCOPE_MASK)
+                                          {
+					      current->inside = current_root->name+"::";
+                                              if (current->mGrpId!=DOX_NOGROUP)
+                                              {
+                                                memberGroupInside = current->inside.copy();
+                                              }
+                                          }
+					  if (yytext[1]=='/') // C++ style comment
+					  {
+  					    current->brief.resize(0);
+					    current->briefLine = yyLineNr;
+					    current->briefFile = yyFileName;
+					    lastDocContext = YY_START;
+					    BEGIN( LineDoc );
+					  }
+					  else // C style comment 
+					  {
+					    current->doc.resize(0);
+					    current->docLine = yyLineNr;
+					    current->docFile = yyFileName;
+					    lastDocContext = YY_START;
+					    removeSlashes=FALSE;
+					    BEGIN( Doc );
+					  }
+  					}
+	YY_BREAK
+case 147:
+YY_RULE_SETUP
+#line 1994 "scanner.l"
+{
+                                          if (memberGroupId==DOX_NOGROUP && autoGroupStack.isEmpty())
+                                          {
+                                            warn(yyFileName,yyLineNr,
+	                                        "Warning: end of group without matching begin.");
+                                          }
+                                          //printf("end of member group marker ends group %d\n",memberGroupId);
+  					  endGroup();
+                                          memberGroupHeader.resize(0);
+  					}
+	YY_BREAK
+case 148:
+YY_RULE_SETUP
+#line 2004 "scanner.l"
+{
+  					  current->bodyLine = yyLineNr;
+					  lastInitializerContext = YY_START;
+					  //initializerSharpCount=0;
+					  BEGIN(ReadInitializer);
+  					}
+	YY_BREAK
+/* Read initializer rules */
+case 149:
+YY_RULE_SETUP
+#line 2011 "scanner.l"
+{
+  					  lastRoundContext=YY_START;
+  					  pCopyRoundString=&current->initializer;
+					  roundCount=0;
+  					  current->initializer+=*yytext; 
+  					  BEGIN(CopyRound);
+  					}
+	YY_BREAK
+case 150:
+YY_RULE_SETUP
+#line 2018 "scanner.l"
+{
+  					  lastCurlyContext=YY_START;
+  					  pCopyCurlyString=&current->initializer;
+					  curlyCount=0;
+  					  current->initializer+=*yytext; 
+  					  BEGIN(CopyCurly);
+  					}
+	YY_BREAK
+case 151:
+YY_RULE_SETUP
+#line 2025 "scanner.l"
+{
+  					  //printf(">> initializer `%s' <<\n",current->initializer.data());
+  					  //if (initializerSharpCount==0)
+					  //{
+  					  if (*yytext==';' || lastInitializerContext==FindFields)
+					  {
+  					    unput(*yytext);
+  					    BEGIN(lastInitializerContext);
+					  }
+					  //}
+					  //else
+					  //{
+  					  //  current->initializer+=*yytext; 
+					  //}
+  					}
+	YY_BREAK
+case 152:
+YY_RULE_SETUP
+#line 2040 "scanner.l"
+{
+					  if (insideIDL && insideCppQuote)
+  					  {
+					    BEGIN(EndCppQuote);
+					  }
+					  else
+					  {
+                                            lastStringContext=YY_START;
+  					    current->initializer+=*yytext; 
+  					    pCopyQuotedString=&current->initializer;
+					    BEGIN(CopyString);
+					  }
+					}
+	YY_BREAK
+/*
+<ReadInitializer>"->"			{
+  					  current->initializer+=yytext; 
+					}
+<ReadInitializer>"<<"			{
+  					  current->initializer+=yytext; 
+					}
+<ReadInitializer>">>"			{
+  					  current->initializer+=yytext; 
+  					}
+<ReadInitializer>\<			{
+  					  initializerSharpCount++;
+  					  current->initializer+=*yytext; 
+  					}
+<ReadInitializer>\>			{
+  					  initializerSharpCount--;
+  					  current->initializer+=*yytext; 
+  					}
+  */
+case 153:
+YY_RULE_SETUP
+#line 2072 "scanner.l"
+{ 
+                                          if (insidePHP) 
+					  {
+					    REJECT;
+					  }
+					  else
+					  {  
+					    current->initializer+=yytext; 
+					  }
+                                        } 
+	YY_BREAK
+case 154:
+YY_RULE_SETUP
+#line 2082 "scanner.l"
+{
+  					  current->initializer+=*yytext;
+					  yyLineNr++;
+  					}
+	YY_BREAK
+case 155:
+YY_RULE_SETUP
+#line 2086 "scanner.l"
+{ 
+  					  current->initializer+=yytext;
+                                          if (!insideCS) REJECT;
+					  // C# verbatim string
+					  lastSkipVerbStringContext=YY_START;
+					  pSkipVerbString=&current->initializer;
+					  BEGIN(SkipVerbString);
+					}
+	YY_BREAK
+case 156:
+YY_RULE_SETUP
+#line 2094 "scanner.l"
+{
+					  *pSkipVerbString+=yytext;
+					}
+	YY_BREAK
+case 157:
+YY_RULE_SETUP
+#line 2097 "scanner.l"
+{ // quote escape
+					  *pSkipVerbString+=yytext;
+					}
+	YY_BREAK
+case 158:
+YY_RULE_SETUP
+#line 2100 "scanner.l"
+{
+					  *pSkipVerbString+=*yytext;
+					  BEGIN(lastSkipVerbStringContext);
+					}
+	YY_BREAK
+case 159:
+YY_RULE_SETUP
+#line 2104 "scanner.l"
+{
+					  *pSkipVerbString+=*yytext;
+					  yyLineNr++;
+  					}
+	YY_BREAK
+case 160:
+YY_RULE_SETUP
+#line 2108 "scanner.l"
+{
+					  *pSkipVerbString+=*yytext;
+  					}
+	YY_BREAK
+case 161:
+YY_RULE_SETUP
+#line 2111 "scanner.l"
+{ 
+  					  current->initializer+=*yytext; 
+					}
+	YY_BREAK
+/* generic quoted string copy rules */
+case 162:
+YY_RULE_SETUP
+#line 2116 "scanner.l"
+{
+  					  *pCopyQuotedString+=yytext;
+  					}
+	YY_BREAK
+case 163:
+YY_RULE_SETUP
+#line 2119 "scanner.l"
+{ 
+  					  *pCopyQuotedString+=*yytext;
+  					  BEGIN( lastStringContext ); 
+					}
+	YY_BREAK
+case 164:
+YY_RULE_SETUP
+#line 2123 "scanner.l"
+{ 
+  					  *pCopyQuotedString+=*yytext;
+  					  BEGIN( lastStringContext ); 
+					}
+	YY_BREAK
+case 165:
+YY_RULE_SETUP
+#line 2127 "scanner.l"
+{
+  					  *pCopyQuotedString+=yytext;
+  					}
+	YY_BREAK
+case 166:
+YY_RULE_SETUP
+#line 2130 "scanner.l"
+{
+  					  *pCopyQuotedString+=*yytext;
+  					  yyLineNr++;
+  					}
+	YY_BREAK
+case 167:
+YY_RULE_SETUP
+#line 2134 "scanner.l"
+{
+  					  *pCopyQuotedString+=*yytext;
+  					}
+	YY_BREAK
+/* generic round bracket list copy rules */
+case 168:
+YY_RULE_SETUP
+#line 2139 "scanner.l"
+{
+					  *pCopyRoundString+=*yytext;
+  					  pCopyQuotedString=pCopyRoundString;
+					  lastStringContext=YY_START;
+					  BEGIN(CopyString);
+					}
+	YY_BREAK
+case 169:
+YY_RULE_SETUP
+#line 2145 "scanner.l"
+{
+  					  *pCopyRoundString+=*yytext;
+  					  roundCount++;
+  					}
+	YY_BREAK
+case 170:
+YY_RULE_SETUP
+#line 2149 "scanner.l"
+{
+  					  *pCopyRoundString+=*yytext;
+					  if (--roundCount<0)
+					    BEGIN(lastRoundContext);
+  					}
+	YY_BREAK
+case 171:
+YY_RULE_SETUP
+#line 2154 "scanner.l"
+{
+  					  yyLineNr++;
+  					  *pCopyRoundString+=*yytext;
+  					}
+	YY_BREAK
+case 172:
+YY_RULE_SETUP
+#line 2158 "scanner.l"
+{ 
+                                          if (insidePHP)
+					  {
+					    REJECT;
+					  }
+					  else
+					  {
+                                            *pCopyRoundString+=yytext; 
+					  }
+                                        }
+	YY_BREAK
+case 173:
+YY_RULE_SETUP
+#line 2168 "scanner.l"
+{
+  					  *pCopyRoundString+=yytext;
+  					}
+	YY_BREAK
+case 174:
+YY_RULE_SETUP
+#line 2171 "scanner.l"
+{
+  					  *pCopyRoundString+=*yytext;
+  					}
+	YY_BREAK
+/* generic curly bracket list copy rules */
+case 175:
+YY_RULE_SETUP
+#line 2176 "scanner.l"
+{
+					  *pCopyCurlyString+=*yytext;
+  					  pCopyQuotedString=pCopyCurlyString;
+					  lastStringContext=YY_START;
+					  BEGIN(CopyString);
+					}
+	YY_BREAK
+case 176:
+YY_RULE_SETUP
+#line 2182 "scanner.l"
+{
+  					  *pCopyCurlyString+=*yytext;
+					  curlyCount++;
+  					}
+	YY_BREAK
+case 177:
+YY_RULE_SETUP
+#line 2186 "scanner.l"
+{
+					  *pCopyCurlyString+=*yytext;
+					  if (--curlyCount<0)
+					    BEGIN(lastCurlyContext); 
+  					}
+	YY_BREAK
+case 178:
+YY_RULE_SETUP
+#line 2191 "scanner.l"
+{ if (insidePHP) 
+                                          { 
+					    REJECT; 
+					  } 
+					  else 
+					  {
+					    *pCopyCurlyString+=yytext; 
+					  }
+                                        }
+	YY_BREAK
+case 179:
+YY_RULE_SETUP
+#line 2200 "scanner.l"
+{
+  					  *pCopyCurlyString+=yytext;
+  					}
+	YY_BREAK
+case 180:
+YY_RULE_SETUP
+#line 2203 "scanner.l"
+{ *pCopyCurlyString+=yytext; }
+	YY_BREAK
+case 181:
+YY_RULE_SETUP
+#line 2204 "scanner.l"
+{
+  					  yyLineNr++;
+					  *pCopyCurlyString+=*yytext;
+  					}
+	YY_BREAK
+case 182:
+YY_RULE_SETUP
+#line 2208 "scanner.l"
+{
+					  *pCopyCurlyString+=*yytext;
+  					}
+	YY_BREAK
+case 183:
+YY_RULE_SETUP
+#line 2211 "scanner.l"
+{
+  					  if (current->type.isEmpty()) // bit pad field
+					  {
+					    addType(current);
+					    current->name.sprintf("__pad%d__",padCount++);
+					  }
+  					  BEGIN(BitFields);
+					  current->bitfields+=":";
+  					}
+	YY_BREAK
+case 184:
+YY_RULE_SETUP
+#line 2220 "scanner.l"
+{
+  					  current->bitfields+=*yytext;
+  					}
+	YY_BREAK
+case 185:
+YY_RULE_SETUP
+#line 2223 "scanner.l"
+{ 
+  					  QCString oldType = current->type.copy();
+					  if (current->bodyLine==-1)
+					  {
+					    current->bodyLine = yyLineNr;
+					  }
+                                          if ( insidePHP && current->type.left(3) == "var" )
+                                          {
+                                            current->type = current->type.mid(3);
+                                          }
+					  current->type=current->type.simplifyWhiteSpace();
+					  current->args=removeRedundantWhiteSpace(current->args);
+					                // was: current->args.simplifyWhiteSpace();
+					  current->name=current->name.stripWhiteSpace();
+					  //if (!current->name.isEmpty() && current->type.left(8)=="typedef ")
+					  //{
+					  //  // add typedef to dictionary
+					  //  QCString dest = extractName(current->type.right(current->type.length()-8));
+					  //  if (Doxygen::typedefDict[current->name]==0 && !dest.isEmpty())
+					  //  {		
+					  //    //printf("1>>>>>>>>>> adding %s->%s\n",current->name.data(),dest.data());
+					  //    QCString scope;
+					  //    if (current_root->section & Entry::SCOPE_MASK) scope=current_root->name;
+                                          //    Doxygen::typedefDict.insert(current->name, new TypedefInfo(dest,scope));
+					  //  }
+					  //}
+					  current->section = Entry::VARIABLE_SEC ;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  //printf("New variable type=`%s' name=`%s' groupId=%d\n",current->type.data(),current->name.data(),current->mGrpId);
+					  current_root->addSubEntry( current ) ;
+					  if ( *yytext == ',')
+					  {
+					    current = new Entry(*current);
+					    current->name.resize(0);
+					    current->args.resize(0);
+					    current->initializer.resize(0);
+					    current->bitfields.resize(0);
+					    int i=oldType.length(); 
+					    while (i>0 && (oldType[i-1]=='*' || oldType[i-1]=='&' || oldType[i-1]==' ')) i--;
+					    current->type = oldType.left(i);
+					  }
+					  else
+					  {
+					    current = new Entry ;
+					    initEntry();
+					  }
+					  BEGIN( FindMembers ) ;
+					}
+	YY_BREAK
+case 186:
+YY_RULE_SETUP
+#line 2273 "scanner.l"
+{ 
+					  if (current->name.isEmpty() || current->name=="typedef") // IDL function property
+					  {
+					    squareCount=1;
+					    lastSquareContext = YY_START;
+					    BEGIN(SkipSquare);
+					  }
+					  else
+					  {
+  					    current->args += yytext ;
+					    squareCount=1;
+					    BEGIN( Array ) ;
+					  }
+					}
+	YY_BREAK
+case 187:
+YY_RULE_SETUP
+#line 2287 "scanner.l"
+{ current->args += *yytext ;
+					  if (--squareCount<=0)
+	                                     BEGIN( FindMembers ) ;
+					}
+	YY_BREAK
+case 188:
+YY_RULE_SETUP
+#line 2291 "scanner.l"
+{ current->args += *yytext ;
+					  squareCount++;	
+					}
+	YY_BREAK
+case 189:
+YY_RULE_SETUP
+#line 2294 "scanner.l"
+{ current->args += *yytext ; }
+	YY_BREAK
+case 190:
+YY_RULE_SETUP
+#line 2295 "scanner.l"
+{ squareCount++; }
+	YY_BREAK
+case 191:
+YY_RULE_SETUP
+#line 2296 "scanner.l"
+{
+  					  if (--squareCount<=0)
+					    BEGIN( lastSquareContext );
+  					}
+	YY_BREAK
+case 192:
+YY_RULE_SETUP
+#line 2300 "scanner.l"
+{
+  					  lastStringContext=YY_START;
+  				          BEGIN( SkipString ); 
+					}
+	YY_BREAK
+case 193:
+YY_RULE_SETUP
+#line 2304 "scanner.l"
+
+	YY_BREAK
+case 194:
+YY_RULE_SETUP
+#line 2305 "scanner.l"
+{ addType( current ) ;
+					  current->type += yytext ;
+					  BEGIN( Sharp ) ;
+					}
+	YY_BREAK
+case 195:
+YY_RULE_SETUP
+#line 2309 "scanner.l"
+{ current->type += *yytext ;
+					  if (--sharpCount<=0)
+	                                     BEGIN( FindMembers ) ;
+					}
+	YY_BREAK
+case 196:
+YY_RULE_SETUP
+#line 2313 "scanner.l"
+{ current->type += *yytext ;
+					  sharpCount++;	
+					}
+	YY_BREAK
+case 197:
+YY_RULE_SETUP
+#line 2316 "scanner.l"
+{
+  					  lineCount();
+					}
+	YY_BREAK
+case 198:
+YY_RULE_SETUP
+#line 2319 "scanner.l"
+{ current->type += *yytext ; }
+	YY_BREAK
+case 199:
+YY_RULE_SETUP
+#line 2320 "scanner.l"
+{
+  					  current->name = yytext;
+					}
+	YY_BREAK
+case 200:
+YY_RULE_SETUP
+#line 2323 "scanner.l"
+{
+  					  lastInitializerContext = YY_START;
+					  //initializerSharpCount=0;
+  					  BEGIN(ReadInitializer);
+  					}
+	YY_BREAK
+case 201:
+YY_RULE_SETUP
+#line 2328 "scanner.l"
+{
+					  //printf("adding `%s' `%s' `%s' to enum `%s' (mGrpId=%d)\n",
+					  //     current->type.data(), current->name.data(),
+					  //     current->args.data(), current_root->name.data(),current->mGrpId);
+  					  if (!current->name.isEmpty())
+					  {
+					    current->fileName   = yyFileName;
+					    current->startLine  = yyLineNr;
+					    current->type       = "@"; // enum marker
+  					    current->args       = current->args.simplifyWhiteSpace();
+  					    current->name       = current->name.stripWhiteSpace();
+					    current->section    = Entry::VARIABLE_SEC;
+					    // add to the scope of the enum
+					    current_root->addSubEntry(current);
+					    current             = new Entry(*current);
+					    // add to the scope surrounding the enum (copy!)
+					    current_root->parent->addSubEntry(current);
+					    current             = new Entry ;
+					    initEntry();
+					  }
+					  else // probably a redundant , 
+					  {
+				     	    current->reset();
+					  }
+  					}
+	YY_BREAK
+case 202:
+YY_RULE_SETUP
+#line 2353 "scanner.l"
+{ // attribute list in IDL
+					  squareCount=1;
+					  lastSquareContext = YY_START;
+					  BEGIN(SkipSquare);
+  					}
+	YY_BREAK
+/*
+<FindFieldArg>","			{ unput(*yytext); BEGIN(FindFields); }
+  */
+case 203:
+YY_RULE_SETUP
+#line 2361 "scanner.l"
+{ current->program += yytext ; }
+	YY_BREAK
+case 204:
+YY_RULE_SETUP
+#line 2362 "scanner.l"
+{ current->program += yytext ; }
+	YY_BREAK
+case 205:
+YY_RULE_SETUP
+#line 2363 "scanner.l"
+{ if (! insidePHP)
+					    REJECT;
+					  current->program += yytext ;
+					}
+	YY_BREAK
+case 206:
+YY_RULE_SETUP
+#line 2367 "scanner.l"
+{ current->program += yytext ; 
+                                          pSkipVerbString = &current->program;
+                                          lastSkipVerbStringContext=YY_START;
+                                          BEGIN( SkipVerbString );
+					}
+	YY_BREAK
+case 207:
+YY_RULE_SETUP
+#line 2372 "scanner.l"
+{ current->program += yytext ; 
+                                          pCopyQuotedString = &current->program;
+                                          lastStringContext=YY_START;
+                                          BEGIN( CopyString );
+					}
+	YY_BREAK
+case 208:
+YY_RULE_SETUP
+#line 2377 "scanner.l"
+{ current->program += yytext ;
+					  lastContext = YY_START ;
+					  BEGIN( Comment ) ;
+					}
+	YY_BREAK
+case 209:
+YY_RULE_SETUP
+#line 2381 "scanner.l"
+{ current->program += yytext ;
+					  ++yyLineNr ;
+					  lastContext = YY_START ;
+					  BEGIN( Comment ) ;
+					}
+	YY_BREAK
+case 210:
+YY_RULE_SETUP
+#line 2386 "scanner.l"
+{ 
+                                              if (insidePHP) 
+					      {
+						REJECT; // for PHP code single quotes 
+					                // are used for strings of arbitrary length
+					      }
+					      else
+					      {
+                                                current->program += yytext; 
+					      }
+                                            }
+	YY_BREAK
+case 211:
+YY_RULE_SETUP
+#line 2397 "scanner.l"
+{ current->program += yytext ;
+					  ++curlyCount ;
+					}
+	YY_BREAK
+case 212:
+YY_RULE_SETUP
+#line 2400 "scanner.l"
+{ //err("ReadBody count=%d\n",curlyCount);
+  					  if ( curlyCount>0 )
+					  {
+					    current->program += yytext ;
+					    --curlyCount ;
+					  }
+					  else
+					  {
+					    current->endBodyLine = yyLineNr;
+					    QCString &cn = current->name;
+					    QCString rn = current_root->name.copy();
+					    //printf("cn=`%s' rn=`%s'\n",cn.data(),rn.data());
+					    if (!cn.isEmpty() && !rn.isEmpty())
+					    {
+					      prependScope();
+					      //cn.prepend(rn+"::");
+					    }
+					    if (isTypedef && cn.isEmpty())
+					    {
+					      //printf("Typedef Name\n");
+					      BEGIN( TypedefName );
+					    }
+					    else
+					    {
+					      if (current->section == Entry::ENUM_SEC)
+					      {
+					        current->program+=','; // add field terminator
+					      }
+					      // add compound definition to the tree
+					      current->args=removeRedundantWhiteSpace(current->args);
+					                // was: current->args.simplifyWhiteSpace();
+  					      current->type = current->type.simplifyWhiteSpace();
+  					      current->name = current->name.stripWhiteSpace();
+					      //printf("adding `%s' `%s' `%s' brief=%s insideObjC=%d %x\n",current->type.data(),current->name.data(),current->args.data(),current->brief.data(),insideObjC,current->section);
+					      if (insideObjC && 
+						  (current->section==Entry::INTERFACE_SEC || current->section==Entry::CATEGORY_SEC)
+						 ) // method definition follows
+					      {
+				                BEGIN( ReadBodyIntf ) ;
+					      }
+					      else
+					      {
+					        current_root->addSubEntry( current ) ;
+						current = new Entry(*current);
+						if (current->section==Entry::NAMESPACE_SEC || 
+						    current->section==Entry::INTERFACE_SEC ||
+						    insideJava || insidePHP || insideCS || insideD
+						   )
+						{ // namespaces and interfaces and java classes ends with a closing bracket without semicolon
+						  current->reset();
+						  initEntry();
+						  BEGIN( FindMembers ) ;
+						}
+						else
+						{
+						  BEGIN( MemberSpec ) ;
+						}
+					      }
+					    }
+					  }
+					}
+	YY_BREAK
+case 213:
+YY_RULE_SETUP
+#line 2461 "scanner.l"
+{ //err("ReadBody count=%d\n",curlyCount);
+  					  if ( curlyCount>0 )
+					  {
+					    current->program += yytext ;
+					    --curlyCount ;
+					  }
+					  else
+					  {
+					    lineCount();
+					    isTypedef = TRUE;
+					    current->endBodyLine = yyLineNr;
+					    QCString &cn = current->name;
+					    QCString rn = current_root->name.copy();
+					    if (!cn.isEmpty() && !rn.isEmpty())
+					    {
+					      prependScope();
+					    }
+					    BEGIN( TypedefName );
+					  }
+					}
+	YY_BREAK
+case 214:
+YY_RULE_SETUP
+#line 2481 "scanner.l"
+{
+  					  if (current->section == Entry::ENUM_SEC)
+					  {
+					    current->program+=","; // add field terminator
+					  }
+  				          current->name=yytext;
+					  prependScope();
+  					  current->args = current->args.simplifyWhiteSpace();
+  					  current->type = current->type.simplifyWhiteSpace();
+					  //printf("Adding compound %s %s %s\n",current->type.data(),current->name.data(),current->args.data());
+					  current_root->addSubEntry( current ) ;
+					  current = new Entry;
+					  initEntry();
+  					  BEGIN(MemberSpecSkip); 
+  					}
+	YY_BREAK
+case 215:
+YY_RULE_SETUP
+#line 2496 "scanner.l"
+{ /* typedef of anonymous type */
+					  current->name.sprintf("@%d",anonCount++);
+					  if (current->section == Entry::ENUM_SEC)
+					  {
+					    current->program+=','; // add field terminator
+					  }
+					  // add compound definition to the tree
+  					  current->args = current->args.simplifyWhiteSpace();
+  					  current->type = current->type.simplifyWhiteSpace();
+					  current_root->addSubEntry( current ) ;
+					  current = new Entry(*current);
+					  unput(';');
+					  BEGIN( MemberSpec ) ;
+  					}
+	YY_BREAK
+case 216:
+YY_RULE_SETUP
+#line 2510 "scanner.l"
+{ // the [] part could be improved.
+  					  lineCount();
+  					  int i=0,l=yyleng,j;
+					  while (i<l && (!isId(yytext[i]))) i++;
+					  msName = yytext; 
+					  msName = msName.right(msName.length()-i);
+					  j=msName.find("[");
+					  if (j!=-1) 
+					  {
+					    msArgs=msName.right(msName.length()-j);
+					    msName=msName.left(j);
+					  }
+					  msType = yytext; msType=msType.left(i);
+					}
+	YY_BREAK
+case 217:
+YY_RULE_SETUP
+#line 2524 "scanner.l"
+{
+                                          //printf("current->name=`%s' msName=`%s'\n",current->name.data(),msName.data());
+  					  if (msName.isEmpty() && !current->name.isEmpty())
+					   /* && (current->section & Entry::COMPOUND_MASK)) */
+					  { 
+					    // see if the compound does not have a name or is inside another
+					    // annonymous compound. If so we insert a 
+					    // special `annonymous' variable.
+					    Entry *p=current_root;
+					    while (p)
+					    {
+					      // only look for class scopes, not namespace scopes
+					      if ((p->section & Entry::COMPOUND_MASK) && !p->name.isEmpty())
+					      {
+						//printf("Trying scope `%s'\n",p->name.data());
+						int i=p->name.findRev("::");
+						int pi = (i==-1) ? 0 : i+2;
+						if (p->name.at(pi)=='@')
+						{
+						  // annonymous compound inside -> insert dummy variable name
+						  //printf("Adding annonymous variable for scope %s\n",p->name.data());
+						  msName.sprintf("@%d",anonCount++); 
+						  break;
+						}
+					      }
+					      p=p->parent;
+					    }
+					  }
+					  if (!msName.isEmpty())
+					  {
+  					    Entry *varEntry=new Entry;
+					    varEntry->protection = current->protection ;
+                                            varEntry->mtype = current->mtype;
+					    varEntry->virt = current->virt;
+					    varEntry->stat = current->stat;
+					    varEntry->section = Entry::VARIABLE_SEC;
+					    varEntry->name = msName.stripWhiteSpace();
+					    varEntry->type = current->type.simplifyWhiteSpace()+" ";
+					    varEntry->args = msArgs; //current->args.simplifyWhiteSpace();
+					    //if (!current->name.isEmpty() && current->name[0]!='@' && 
+					    //    current->parent->section & Entry::COMPOUND_MASK)
+					    //  varEntry->type+=current->parent->name+"::";
+					    if (isTypedef)
+					    {
+					      varEntry->type.prepend("typedef ");
+					    //  //printf("current->name = %s %s\n",current->name.data(),msName.data());
+					    //  if (!current->name.isEmpty() && current->name.at(0)!='@')
+					    //  {
+					    //	//printf("2>>>>>>>>>> adding %s->%s\n",msName.data(),current->name.data());
+					    //    QCString scope;
+					    //    if (current_root->section & Entry::SCOPE_MASK) scope=current_root->name;
+                                            //    Doxygen::typedefDict.insert(msName,new TypedefInfo(current->name,scope));
+					    //  }
+					    }
+					    varEntry->type+=current->name+msType;
+					    varEntry->fileName = yyFileName;
+					    varEntry->startLine = yyLineNr;
+					    varEntry->doc = current->doc.copy();
+					    varEntry->brief = current->brief.copy();
+					    varEntry->mGrpId = current->mGrpId;
+
+					    // deep copy group list
+					    QListIterator<Grouping> gli(*current->groups);
+					    Grouping *g;
+					    for (;(g=gli.current());++gli)
+					    {
+					      varEntry->groups->append(new Grouping(*g));
+					    }
+
+					    //printf("Add: type=`%s',name=`%s',args=`%s'\n",
+					    //      varEntry->type.data(),varEntry->name.data(),varEntry->args.data());
+					    current_root->addSubEntry(varEntry);
+					  }
+					  if (*yytext==';')
+					  {
+					    msType.resize(0);
+					    msName.resize(0);
+					    msArgs.resize(0);
+					    isTypedef=FALSE;
+					    current->reset();
+					    initEntry();
+					    BEGIN( FindMembers );
+					  }
+  					}
+	YY_BREAK
+case 218:
+YY_RULE_SETUP
+#line 2608 "scanner.l"
+{ 
+  					  lastInitializerContext=YY_START;
+					  //initializerSharpCount=0;
+  					  BEGIN(ReadInitializer);
+  					  /* BEGIN(MemberSpecSkip); */
+					}
+	YY_BREAK
+/*
+<MemberSpecSkip>"{"			{
+  					  curlyCount=0;
+					  lastCurlyContext = MemberSpecSkip;
+					  previous = current;
+  					  BEGIN(SkipCurly);
+  					}
+  */
+case 219:
+YY_RULE_SETUP
+#line 2622 "scanner.l"
+{ BEGIN(MemberSpec); }
+	YY_BREAK
+case 220:
+YY_RULE_SETUP
+#line 2623 "scanner.l"
+{ unput(';'); BEGIN(MemberSpec); }
+	YY_BREAK
+case 221:
+YY_RULE_SETUP
+#line 2624 "scanner.l"
+{ current->program += yytext ;
+					  lineCount() ;
+					}
+	YY_BREAK
+case 222:
+YY_RULE_SETUP
+#line 2627 "scanner.l"
+{ // end of Objective C block
+					  current_root->addSubEntry( current ) ;
+  					  current=new Entry;
+					  initEntry();
+					  insideObjC=FALSE;
+					  BEGIN( FindMembers ); 
+  					}
+	YY_BREAK
+case 223:
+YY_RULE_SETUP
+#line 2634 "scanner.l"
+{
+  					  if (!insidePHP)
+					  {
+					    current->program += yytext;
+					  }
+					  else
+					  { // begin of single quoted string
+					    current->program += yytext;
+                                            pCopyQuotedString = &current->program;
+                                            lastStringContext=YY_START;
+					    BEGIN(CopyPHPString);
+					  }
+  					}
+	YY_BREAK
+case 224:
+YY_RULE_SETUP
+#line 2647 "scanner.l"
+{ current->program += yytext ; }
+	YY_BREAK
+case 225:
+YY_RULE_SETUP
+#line 2648 "scanner.l"
+{ current->program += yytext ; }
+	YY_BREAK
+case 226:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp = yy_bp + 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+#line 2651 "scanner.l"
+case 227:
+YY_RULE_SETUP
+#line 2651 "scanner.l"
+{   /* typedef void (A::*ptr_t)(args...) */
+  					  current->bodyLine = yyLineNr;
+  					  lineCount();
+  					  addType(current);
+					  funcPtrType=yytext;
+					  roundCount=0;
+					  //current->type += yytext;
+					  BEGIN( FuncPtr );
+  					}
+	YY_BREAK
+case 228:
+YY_RULE_SETUP
+#line 2660 "scanner.l"
+{
+  					  current->name = yytext;
+					  if (current->name=="const" || current->name=="volatile")
+					  {
+					    funcPtrType += current->name;
+					  }
+					  else
+					  {
+					    BEGIN( EndFuncPtr );
+					  }
+  					}
+	YY_BREAK
+case 229:
+YY_RULE_SETUP
+#line 2671 "scanner.l"
+{
+  					  //printf("Error: FuncPtr `%c' unexpected at line %d of %s\n",*yytext,yyLineNr,yyFileName);
+  					}
+	YY_BREAK
+case 230:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 2674 "scanner.l"
+{ // a variable with extra braces
+ 					  lineCount();
+					  current->type+=funcPtrType.data()+1;
+  					  BEGIN(FindMembers);
+  					}
+	YY_BREAK
+case 231:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 2679 "scanner.l"
+{ // a function pointer
+  					  lineCount();
+					  current->type+=funcPtrType+")";
+					  BEGIN(FindMembers);
+  					}
+	YY_BREAK
+case 232:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 2684 "scanner.l"
+{ // an array of variables
+  					  lineCount();
+					  current->type+=funcPtrType.data();
+					  current->args += ")";
+					  BEGIN(FindMembers);
+  					}
+	YY_BREAK
+case 233:
+YY_RULE_SETUP
+#line 2690 "scanner.l"
+{ // a function returning a function
+  					  current->args += *yytext ;
+					  roundCount=0;
+					  BEGIN( FuncFunc );
+  					}
+	YY_BREAK
+case 234:
+YY_RULE_SETUP
+#line 2695 "scanner.l"
+{
+  					  funcPtrType+=yytext;
+  					}
+	YY_BREAK
+case 235:
+YY_RULE_SETUP
+#line 2698 "scanner.l"
+{
+  					  BEGIN(FindMembers);
+  					}
+	YY_BREAK
+case 236:
+YY_RULE_SETUP
+#line 2701 "scanner.l"
+{
+  					  current->args += *yytext ;
+  					  ++roundCount;
+					}
+	YY_BREAK
+case 237:
+YY_RULE_SETUP
+#line 2705 "scanner.l"
+{
+  					  current->args += *yytext ;
+  					  if ( roundCount )
+					    --roundCount;
+					  else
+					  {
+					    BEGIN(FuncFuncEnd);
+					  }
+  					}
+	YY_BREAK
+case 238:
+YY_RULE_SETUP
+#line 2714 "scanner.l"
+{
+  					  lineCount();
+					  current->type+=funcPtrType+")(";
+					  BEGIN(FuncFuncType);
+  					}
+	YY_BREAK
+case 239:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 2719 "scanner.l"
+{
+  					  lineCount();
+					  current->type+=funcPtrType.data()+1;
+  					  BEGIN(Function);
+  					}
+	YY_BREAK
+case 240:
+YY_RULE_SETUP
+#line 2724 "scanner.l"
+{
+  					  current->args += *yytext;
+  					}
+	YY_BREAK
+case 241:
+YY_RULE_SETUP
+#line 2727 "scanner.l"
+{
+  					  current->type += *yytext;
+					  roundCount++;
+  					}
+	YY_BREAK
+case 242:
+YY_RULE_SETUP
+#line 2731 "scanner.l"
+{
+  					  current->type += *yytext;
+  					  if (roundCount)
+					    --roundCount;
+					  else
+					    BEGIN(Function);
+					}
+	YY_BREAK
+case 243:
+YY_RULE_SETUP
+#line 2738 "scanner.l"
+{ lineCount() ; current->type += ", " ; }
+	YY_BREAK
+case 244:
+YY_RULE_SETUP
+#line 2739 "scanner.l"
+{ lineCount() ; current->type += ' ' ; }
+	YY_BREAK
+case 245:
+YY_RULE_SETUP
+#line 2740 "scanner.l"
+{
+  					  current->type += *yytext;
+  					}
+	YY_BREAK
+case 246:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp = yy_bp + 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 2743 "scanner.l"
+{ // for catching typedef void (__stdcall *f)() like definitions
+                                          if (current->type.left(7)=="typedef" && current->bodyLine==-1) 
+					    // the bodyLine check is to prevent this guard to be true more than once
+					  {
+  					    current->bodyLine = yyLineNr;
+					    BEGIN( GetCallType );
+					  }
+					  else if (!current->name.isEmpty()) // normal function
+					  {
+					    current->args = yytext;
+					    current->bodyLine = yyLineNr;
+					    currentArgumentContext = FuncQual;
+					    fullArgString=current->args.copy();
+					    copyArgString=&current->args;
+					    BEGIN( ReadFuncArgType ) ;
+					    //printf(">>> Read function arguments!\n");
+					  }
+					}
+	YY_BREAK
+case 247:
+YY_RULE_SETUP
+#line 2761 "scanner.l"
+{
+  					  lineCount();
+  					  addType(current);
+					  funcPtrType="(";
+					  funcPtrType+=yytext;
+					  roundCount=0;
+					  BEGIN( FuncPtr );
+  					}
+	YY_BREAK
+case 248:
+YY_RULE_SETUP
+#line 2769 "scanner.l"
+{ 
+                                          if (!current->name.isEmpty())
+					  {
+					    current->args = yytext;
+					    current->bodyLine = yyLineNr;
+					    currentArgumentContext = FuncQual;
+					    fullArgString=current->args.copy();
+					    copyArgString=&current->args;
+					    BEGIN( ReadFuncArgType ) ;
+					    //printf(">>> Read function arguments!\n");
+					  }
+					}
+	YY_BREAK
+/*
+<FindMembers>"("{BN}*("void"{BN}*)?")"	{
+  					  lineCount();
+  					  current->args = "()"; 
+  					  BEGIN( FuncQual );
+  					}
+  */
+/*- Function argument reading rules ---------------------------------------*/
+case 249:
+YY_RULE_SETUP
+#line 2791 "scanner.l"
+{ *copyArgString+=yytext; 
+  					  fullArgString+=yytext;
+  					}
+	YY_BREAK
+case 250:
+YY_RULE_SETUP
+#line 2794 "scanner.l"
+{ *copyArgString+=yytext; 
+					  fullArgString+=yytext;
+					}
+	YY_BREAK
+case 251:
+YY_RULE_SETUP
+#line 2797 "scanner.l"
+{ 
+  					  *copyArgString+=yytext; 
+  					  fullArgString+=yytext;
+  					}
+	YY_BREAK
+case 252:
+YY_RULE_SETUP
+#line 2801 "scanner.l"
+{
+  					  *copyArgString+=" ";
+  					  fullArgString+=" ";
+  					  lineCount();
+  					}
+	YY_BREAK
+case 253:
+YY_RULE_SETUP
+#line 2806 "scanner.l"
+{
+  					  *copyArgString+=*yytext;
+  					  fullArgString+=*yytext;
+					  lastCopyArgStringContext = YY_START;
+  					  BEGIN( CopyArgString );
+  					}
+	YY_BREAK
+case 254:
+YY_RULE_SETUP
+#line 2812 "scanner.l"
+{
+  					  *copyArgString+=*yytext;
+  					  fullArgString+=*yytext;
+  					  argRoundCount=0; 
+					  lastCopyArgContext = YY_START;
+					  BEGIN( CopyArgRound ); 
+  					}
+	YY_BREAK
+case 255:
+YY_RULE_SETUP
+#line 2819 "scanner.l"
+{ 
+  					  *copyArgString+=*yytext;
+  					  fullArgString+=*yytext;
+					  stringToArgumentList(fullArgString,current->argList);
+
+					  /* remember the current documentation block, since
+					     we could overwrite it with the documentation of
+					     a function argument, which we then have to correct later
+					     on
+					   */
+					  docBackup = current->doc.copy();
+					  briefBackup = current->brief.copy();
+
+					  BEGIN( currentArgumentContext );
+					}
+	YY_BREAK
+/* a special comment */
+case 256:
+YY_RULE_SETUP
+#line 2835 "scanner.l"
+{ 
+                                          if (currentArgumentContext==DefineEnd)
+					  {
+					    // for defines we interpret a comment
+					    // as documentation for the define 
+					    int i;for (i=yyleng-1;i>=0;i--)
+					    {
+					      unput(yytext[i]);
+					    }
+					    stringToArgumentList(fullArgString,current->argList);
+					    BEGIN( currentArgumentContext );
+					  }
+					  else
+					  {
+					    // for functions we interpret a comment
+					    // as documentation for the argument
+					    fullArgString+=yytext;
+					    lastCopyArgChar=0;
+					    lastCommentInArgContext=YY_START;
+					    if (yytext[1]=='/')
+					      BEGIN( CopyArgCommentLine );
+					    else
+					      BEGIN( CopyArgComment );
+					  }
+  					}
+	YY_BREAK
+/* a non-special comment */
+case 257:
+YY_RULE_SETUP
+#line 2861 "scanner.l"
+{
+  					  lastCContext = YY_START;
+					  BEGIN( SkipComment );
+  					}
+	YY_BREAK
+case 258:
+YY_RULE_SETUP
+#line 2865 "scanner.l"
+{
+  					  lastCContext = YY_START;
+					  BEGIN( SkipCxxComment );
+  					}
+	YY_BREAK
+case 259:
+YY_RULE_SETUP
+#line 2869 "scanner.l"
+{ if (! insidePHP)
+                                            REJECT;
+  					  *copyArgString+=yytext; 
+  					  fullArgString+=yytext; 
+					}
+	YY_BREAK
+case 260:
+YY_RULE_SETUP
+#line 2874 "scanner.l"
+{
+  					  if (! insidePHP)
+  					    REJECT;
+  					  lastCContext = YY_START;
+					  BEGIN( SkipCxxComment );
+  					}
+	YY_BREAK
+/* `)' followed by a special comment */
+case 261:
+YY_RULE_SETUP
+#line 2881 "scanner.l"
+{
+  					  lineCount();
+                                          if (currentArgumentContext==DefineEnd)
+					  {
+					    // for defines we interpret a comment
+					    // as documentation for the define 
+					    int i;for (i=yyleng-1;i>0;i--)
+					    {
+					      unput(yytext[i]);
+					    }
+					    *copyArgString+=*yytext;
+					    fullArgString+=*yytext;
+					    stringToArgumentList(fullArgString,current->argList);
+					    BEGIN( currentArgumentContext );
+					  }
+					  else
+					  {
+					    // for functions we interpret a comment
+					    // as documentation for the last argument
+					    lastCopyArgChar=*yytext;
+					    QCString text=&yytext[1];
+					    text=text.stripWhiteSpace();
+					    lastCommentInArgContext=YY_START;
+					    fullArgString+=text;
+					    if (text.find("//")!=-1)
+					      BEGIN( CopyArgCommentLine );
+					    else
+					      BEGIN( CopyArgComment );
+					  }
+  					}
+	YY_BREAK
+case 262:
+YY_RULE_SETUP
+#line 2911 "scanner.l"
+
+	YY_BREAK
+case 263:
+YY_RULE_SETUP
+#line 2912 "scanner.l"
+{ fullArgString+=yytext; }
+	YY_BREAK
+case 264:
+YY_RULE_SETUP
+#line 2913 "scanner.l"
+{ fullArgString+=yytext; 
+  					  if (lastCopyArgChar!=0)
+					    unput(lastCopyArgChar); 
+                                          BEGIN( lastCommentInArgContext ); 
+					}
+	YY_BREAK
+case 265:
+YY_RULE_SETUP
+#line 2918 "scanner.l"
+{ fullArgString+=yytext;
+  					  yyLineNr++;
+  					  if (lastCopyArgChar!=0)
+					    unput(lastCopyArgChar);
+					  BEGIN( lastCommentInArgContext );
+  					}
+	YY_BREAK
+case 266:
+YY_RULE_SETUP
+#line 2924 "scanner.l"
+{ fullArgString+=yytext; }
+	YY_BREAK
+case 267:
+YY_RULE_SETUP
+#line 2925 "scanner.l"
+{ fullArgString+=*yytext; }
+	YY_BREAK
+case 268:
+YY_RULE_SETUP
+#line 2926 "scanner.l"
+{ fullArgString+=*yytext; yyLineNr++; }
+	YY_BREAK
+case 269:
+YY_RULE_SETUP
+#line 2927 "scanner.l"
+{ fullArgString+=*yytext; }
+	YY_BREAK
+case 270:
+YY_RULE_SETUP
+#line 2928 "scanner.l"
+{
+					  *copyArgString+=*yytext;
+					  fullArgString+=*yytext;
+					  argSharpCount=1;
+					  BEGIN( CopyArgSharp );
+					}
+	YY_BREAK
+case 271:
+YY_RULE_SETUP
+#line 2934 "scanner.l"
+{
+					  *copyArgString+=*yytext;
+					  fullArgString+=*yytext;
+					  //printf("end template list %s\n",copyArgString->data());
+					  stringToArgumentList(fullArgString,currentArgumentList);
+					  BEGIN( currentArgumentContext );
+					}
+	YY_BREAK
+case 272:
+YY_RULE_SETUP
+#line 2941 "scanner.l"
+{
+  					  argRoundCount++;
+					  *copyArgString+=*yytext;
+					  fullArgString+=*yytext;
+  					}
+	YY_BREAK
+case 273:
+YY_RULE_SETUP
+#line 2946 "scanner.l"
+{
+					  *copyArgString+=*yytext;
+					  fullArgString+=*yytext;
+					  if (argRoundCount>0) 
+					    argRoundCount--;
+					  else 
+					    BEGIN( lastCopyArgContext );
+  					}
+	YY_BREAK
+case 274:
+YY_RULE_SETUP
+#line 2954 "scanner.l"
+{
+  					  argSharpCount++;
+					  //printf("argSharpCount++=%d  copy\n",argSharpCount);
+					  *copyArgString+=*yytext;
+					  fullArgString+=*yytext;
+  					}
+	YY_BREAK
+case 275:
+YY_RULE_SETUP
+#line 2960 "scanner.l"
+{
+  					  *copyArgString+=*yytext;
+  					  fullArgString+=*yytext;
+					  argSharpCount--;
+					  if (argSharpCount>0)
+					  {
+					    //printf("argSharpCount--=%d copy\n",argSharpCount);
+					  }
+					  else
+					  {
+					    BEGIN( ReadTempArgs );
+					    //printf("end of argSharpCount\n");
+					  }
+  					}
+	YY_BREAK
+case 276:
+YY_RULE_SETUP
+#line 2974 "scanner.l"
+{
+  					  *copyArgString+=yytext;
+  					  fullArgString+=yytext;
+  					}
+	YY_BREAK
+case 277:
+YY_RULE_SETUP
+#line 2978 "scanner.l"
+{
+  					  *copyArgString+=*yytext;
+  					  fullArgString+=*yytext;
+					  BEGIN( lastCopyArgStringContext );
+  					}
+	YY_BREAK
+case 278:
+YY_RULE_SETUP
+#line 2983 "scanner.l"
+{ 
+                                          if (insidePHP)
+					  {
+					    REJECT;
+					  }
+					  else
+					  {
+  					    *copyArgString+=yytext; 
+  					    fullArgString+=yytext; 
+					  }
+					}
+	YY_BREAK
+case 279:
+YY_RULE_SETUP
+#line 2994 "scanner.l"
+{ 
+  					  yyLineNr++; 
+					  *copyArgString+=*yytext; 
+					  fullArgString+=*yytext; 
+					}
+	YY_BREAK
+case 280:
+YY_RULE_SETUP
+#line 2999 "scanner.l"
+{ 
+  					  *copyArgString+=*yytext; 
+  					  fullArgString+=*yytext; 
+					}
+	YY_BREAK
+/*------------------------------------------------------------------------*/
+case 281:
+YY_RULE_SETUP
+#line 3009 "scanner.l"
+{ current->args += *yytext ;
+					  ++roundCount ;
+					}
+	YY_BREAK
+case 282:
+YY_RULE_SETUP
+#line 3012 "scanner.l"
+{ current->args += *yytext ; 
+					  if ( roundCount )
+					    --roundCount ;
+				          else
+					    BEGIN( FuncQual ) ;
+					}
+	YY_BREAK
+/*
+<FuncQual>"#"				{ if (insidePHP)
+  					    REJECT;
+  					  lastCPPContext = YY_START;
+  					  BEGIN(SkipCPP);
+					}
+  */
+case 283:
+YY_RULE_SETUP
+#line 3025 "scanner.l"
+{
+                                          if ( strcmp(yytext,";")==0 && 
+					       insidePHP && 
+					       current->type.left(8) != "function" )
+                                          {
+                                            current->reset();
+                                            initEntry();
+                                            BEGIN( FindMembers );
+                                          }
+                                          else
+                                          {
+                                            unput(*yytext); BEGIN( Function );
+                                          }
+                                        }
+	YY_BREAK
+case 284:
+YY_RULE_SETUP
+#line 3039 "scanner.l"
+{ // const member function
+  					  lineCount() ; 
+  					  current->args += " const "; 
+					  current->argList->constSpecifier=TRUE;
+					}
+	YY_BREAK
+case 285:
+YY_RULE_SETUP
+#line 3044 "scanner.l"
+{ // volatile member function
+  					  lineCount() ; 
+  					  current->args += " volatile "; 
+					  current->argList->volatileSpecifier=TRUE;
+					}
+	YY_BREAK
+case 286:
+YY_RULE_SETUP
+#line 3049 "scanner.l"
+{ // pure virtual member function
+  					  lineCount() ; 
+					  current->args += " = 0"; 
+					  current->virt = Pure; 
+					  current->argList->pureSpecifier=TRUE;
+					}
+	YY_BREAK
+case 287:
+YY_RULE_SETUP
+#line 3055 "scanner.l"
+{ 
+  					  lineCount() ; 
+					  current->args += ", " ; 
+					}
+	YY_BREAK
+case 288:
+YY_RULE_SETUP
+#line 3059 "scanner.l"
+{ 
+  					  lineCount() ; 
+					  current->args += ' ' ; 
+					}
+	YY_BREAK
+case 289:
+YY_RULE_SETUP
+#line 3063 "scanner.l"
+{ if (insidePHP)
+  					    REJECT;
+  					  lastCPPContext = YY_START;
+  					  BEGIN(SkipCPP);
+					}	
+	YY_BREAK
+case 290:
+YY_RULE_SETUP
+#line 3068 "scanner.l"
+{ // typically an initialized function pointer
+                                          current->args += *yytext; 
+					  BEGIN(FuncPtrInit);
+  					}
+	YY_BREAK
+case 291:
+YY_RULE_SETUP
+#line 3072 "scanner.l"
+{
+  					  unput(*yytext);
+					  BEGIN(FuncQual);
+  					}
+	YY_BREAK
+case 292:
+YY_RULE_SETUP
+#line 3076 "scanner.l"
+{
+                                          current->args += *yytext; 
+  					  pCopyQuotedString=&current->args;
+					  lastStringContext=FuncPtrInit;
+					  BEGIN(CopyString);
+					}
+	YY_BREAK
+case 293:
+YY_RULE_SETUP
+#line 3082 "scanner.l"
+{
+                                          if (insidePHP)
+					  {
+					    REJECT;
+					  }
+					  else
+					  {
+                                            current->args += yytext; 
+					  }
+  					}
+	YY_BREAK
+case 294:
+YY_RULE_SETUP
+#line 3092 "scanner.l"
+{
+                                          current->args += yytext; 
+					}
+	YY_BREAK
+case 295:
+YY_RULE_SETUP
+#line 3095 "scanner.l"
+{
+                                          current->args += *yytext; 
+  					}
+	YY_BREAK
+case 296:
+YY_RULE_SETUP
+#line 3098 "scanner.l"
+{
+                                          current->args += *yytext; 
+					  yyLineNr++;
+  					}
+	YY_BREAK
+case 297:
+YY_RULE_SETUP
+#line 3102 "scanner.l"
+{ // typically a K&R style C function
+					  if (checkForKnRstyleC())
+					  {
+					    //fprintf(stderr,"===> got a K&R style function\n");
+                                            current->args = yytext; 
+					    oldStyleArgType.resize(0);
+					    BEGIN(OldStyleArgs);
+					  }
+					  else
+					  {
+                                            current->args += yytext; 
+					  }
+  					}
+	YY_BREAK
+case 298:
+YY_RULE_SETUP
+#line 3115 "scanner.l"
+{
+  					  QCString oldStyleArgPtr;
+  					  QCString oldStyleArgName;
+					  splitKnRArg(oldStyleArgPtr,oldStyleArgName);
+					  QCString doc,brief;
+					  if (current->doc!=docBackup)
+					  {
+                                            doc=current->doc.copy();
+					    current->doc=docBackup;
+					  }
+					  if (current->brief!=briefBackup)
+					  {
+                                            brief=current->brief.copy();
+					    current->brief=briefBackup;
+					  }
+					  addKnRArgInfo(oldStyleArgType+oldStyleArgPtr,
+					                oldStyleArgName,brief,doc);
+					  current->args.resize(0);
+					  if (*yytext==';') oldStyleArgType.resize(0);
+  					}
+	YY_BREAK
+case 299:
+YY_RULE_SETUP
+#line 3135 "scanner.l"
+{ current->args += yytext; }
+	YY_BREAK
+case 300:
+YY_RULE_SETUP
+#line 3136 "scanner.l"
+{
+  					  current->args = argListToString(current->argList);
+  					  unput('{');
+					  BEGIN(FuncQual);
+  					}
+	YY_BREAK
+case 301:
+YY_RULE_SETUP
+#line 3141 "scanner.l"
+{ current->args += *yytext; }
+	YY_BREAK
+case 302:
+YY_RULE_SETUP
+#line 3142 "scanner.l"
+{ current->args += *yytext; }
+	YY_BREAK
+case 303:
+YY_RULE_SETUP
+#line 3143 "scanner.l"
+{ /* try-function-block */ 
+					  insideTryBlock=TRUE;
+					  lineCount();
+					}
+	YY_BREAK
+case 304:
+YY_RULE_SETUP
+#line 3147 "scanner.l"
+{ // C++ style throw clause
+  					  current->exception = " throw (" ;
+					  roundCount=0;
+					  lineCount() ;
+					  BEGIN( ExcpRound ) ;
+					}
+	YY_BREAK
+case 305:
+YY_RULE_SETUP
+#line 3153 "scanner.l"
+{
+  					  current->exception = " raises (" ;
+					  lineCount() ;
+					  roundCount=0;
+					  BEGIN( ExcpRound ) ;
+  					}
+	YY_BREAK
+case 306:
+YY_RULE_SETUP
+#line 3159 "scanner.l"
+{ // Java style throw clause
+  					  current->exception = " throws " ;
+					  lineCount() ;
+					  BEGIN( ExcpList );
+  					}
+	YY_BREAK
+case 307:
+YY_RULE_SETUP
+#line 3164 "scanner.l"
+{ current->exception += *yytext ;
+					  ++roundCount ;
+					}
+	YY_BREAK
+case 308:
+YY_RULE_SETUP
+#line 3167 "scanner.l"
+{ current->exception += *yytext ; 
+					  if ( roundCount )
+					    --roundCount ;
+				          else
+					    BEGIN( FuncQual ) ;
+					}
+	YY_BREAK
+case 309:
+YY_RULE_SETUP
+#line 3173 "scanner.l"
+{
+  					  current->exception += *yytext;
+  					}
+	YY_BREAK
+case 310:
+YY_RULE_SETUP
+#line 3176 "scanner.l"
+{
+  					  unput('{'); BEGIN( FuncQual );
+  					}
+	YY_BREAK
+case 311:
+YY_RULE_SETUP
+#line 3179 "scanner.l"
+{
+  					  unput(';'); BEGIN( FuncQual );
+  					}
+	YY_BREAK
+case 312:
+YY_RULE_SETUP
+#line 3182 "scanner.l"
+{
+  					  current->exception += ' ';
+					  yyLineNr++;
+  					}
+	YY_BREAK
+case 313:
+YY_RULE_SETUP
+#line 3186 "scanner.l"
+{
+  					  current->exception += *yytext;
+  					}
+	YY_BREAK
+case 314:
+YY_RULE_SETUP
+#line 3189 "scanner.l"
+{ current->type += current->name ;
+					  current->name  = current->args ;
+					  current->args  = yytext ;
+					  roundCount=0;
+					  BEGIN( FuncRound ) ;
+					}
+	YY_BREAK
+case 315:
+YY_RULE_SETUP
+#line 3195 "scanner.l"
+{
+  					  if (!insidePHP) BEGIN(SkipInits);
+  					}
+	YY_BREAK
+case 316:
+YY_RULE_SETUP
+#line 3198 "scanner.l"
+{ 
+					  current->name=current->name.simplifyWhiteSpace();
+  					  current->type=current->type.simplifyWhiteSpace();
+					  current->args=removeRedundantWhiteSpace(current->args);
+					                // was: current->args.simplifyWhiteSpace();
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  if (*yytext!=';' || (current_root->section&Entry::COMPOUND_MASK) )
+					  {
+					    int tempArg=current->name.find('<');
+					    QCString tempName;
+					    static QRegExp re("operator[^a-z_A-Z0-9]");
+					    if (tempArg==-1) tempName=current->name; else tempName=current->name.left(tempArg);
+					    if (/*(current->type.isEmpty() && tempName.find(re)==-1) || */
+						 current->type.left(8)=="typedef "
+					       )
+					    {
+					      //printf("Scanner.l: found in class variable: `%s' `%s' `%s'\n",
+					      //   current->type.data(),current->name.data(),current->args.data());
+					      current->section = Entry::VARIABLE_SEC ;
+					    }
+					    else	      
+					    {
+					      //printf("Scanner.l: found in class function: `%s' `%s' `%s'\n",
+					      //   current->type.data(),current->name.data(),current->args.data());
+					      current->section = Entry::FUNCTION_SEC ;
+			                      current->proto = *yytext==';';
+					    }
+					  }
+					  else // a global function prototype or function variable
+					  {
+					    static QRegExp re("([^)]*)");
+					    //printf("Scanner.l: prototype? type=`%s' name=`%s' args=`%s'\n",current->type.data(),current->name.data(),current->args.data());
+					    if (!current->type.isEmpty() && 
+						(current->type.find(re,0)!=-1 || current->type.left(8)=="typedef "))
+					    {
+					      //printf("Scanner.l: found function variable!\n");
+					      current->section = Entry::VARIABLE_SEC;
+					    }
+					    else
+					    {
+					      //printf("Scanner.l: found prototype\n");
+					      current->section = Entry::FUNCTION_SEC;
+					      current->proto = TRUE;
+					    }
+					  }
+					  //printf("Adding entry `%s'\n",current->name.data());
+					  if ( insidePHP && current->type.left(8) != "function" )
+					  {
+					    initEntry();
+					  }
+					  else
+					  {
+					    if ( insidePHP && current->type.left(8) == "function" )
+					    {
+					      current->type = current->type.mid(8);
+					    }
+					    previous = current;
+					    current_root->addSubEntry(current);
+					    current = new Entry ;
+					    initEntry();
+					    lastCurlyContext = FindMembers;
+					    if ( *yytext == ',' )
+					    {
+					      current->type = previous->type.data();
+					    }
+					    if ( *yytext == '{' )
+					    {
+					      if ( !insidePHP && (current_root->section & Entry::COMPOUND_MASK) )
+					      {
+						previous->memSpec |= Entry::Inline;
+					      }
+					      //addToBody(yytext);
+					      curlyCount=0;
+					      BEGIN( SkipCurly ) ;
+					    }
+					    else
+					    {
+					      if (previous->section!=Entry::VARIABLE_SEC)
+						previous->bodyLine=-1; // a function/member declaration
+					      BEGIN( FindMembers ) ;
+					    }
+					  }
+                                        }
+	YY_BREAK
+case 317:
+YY_RULE_SETUP
+#line 3282 "scanner.l"
+{ 
+  				          //addToBody(yytext);
+  				          //lastCurlyContext = FindMembers;
+					  //curlyCount=0;
+  					  //BEGIN( SkipCurly ) ; 
+  					  unput('{');
+					  BEGIN( Function );
+					}
+	YY_BREAK
+case 318:
+YY_RULE_SETUP
+#line 3290 "scanner.l"
+{ 
+  				          //addToBody(yytext);
+  					  ++curlyCount ; 
+					}
+	YY_BREAK
+case 319:
+YY_RULE_SETUP
+#line 3294 "scanner.l"
+{ 
+  				          //addToBody(yytext);
+  					  if( curlyCount )
+					  {
+					    --curlyCount ;
+					  }
+					  else
+					  {
+					    if (!Config_getBool("HIDE_IN_BODY_DOCS") && 
+						!current->doc.isEmpty())
+					    {
+					      // copy documentation found inside the body
+					      // to the previous item
+					      if (previous->inbodyLine==-1)
+					      {
+					        previous->inbodyLine = current->docLine;
+					        previous->inbodyFile = current->docFile;
+					      }
+					      previous->inbodyDocs += current->doc;
+					      current->doc.resize(0);
+					    }
+					    if (current->sli) // copy special list items
+					    {
+					      QListIterator<ListItemInfo> li(*current->sli);
+					      ListItemInfo *lii;
+					      for (li.toFirst();(lii=li.current());++li)
+					      {
+						previous->addSpecialListItem(lii->type,lii->itemId);
+					      }
+					      delete current->sli;
+					      current->sli = 0;
+					    }
+					    previous->endBodyLine=yyLineNr;
+					    BEGIN( lastCurlyContext ) ;
+					  }
+					}
+	YY_BREAK
+case 320:
+YY_RULE_SETUP
+#line 3330 "scanner.l"
+{ 
+  					  if ( curlyCount )
+					  {
+					    //addToBody(yytext);
+					    --curlyCount ;
+					  }
+					  else
+					  {
+					    current->endBodyLine=yyLineNr;
+					    lineCount();
+					    tempEntry = current; // temporarily switch to the previous entry
+					    current = previous;
+					    current->doc.resize(0);
+					    current->brief.resize(0);
+					    lastAfterDocContext = SkipCurlyEndDoc;
+					    afterDocTerminator = '}';
+					    if (yytext[yyleng-3]=='/')
+					    {
+					      current->briefLine = yyLineNr;
+					      current->briefFile = yyFileName;
+					      BEGIN(AfterDocLine);
+					    }
+					    else if (yytext[yyleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF"))
+					    {
+					      current->briefLine = yyLineNr;
+					      current->briefFile = yyFileName;
+					      current->docLine = yyLineNr;
+					      current->docFile = yyFileName;
+					      BEGIN(AfterDocBrief);
+					    }
+					    else
+					    {
+					      current->docLine = yyLineNr;
+					      current->docFile = yyFileName;
+					      BEGIN(AfterDoc);
+					    }
+					  }
+					}
+	YY_BREAK
+case 321:
+YY_RULE_SETUP
+#line 3368 "scanner.l"
+{
+  				          //addToBody("}");
+					  current = tempEntry;
+  					  BEGIN( lastCurlyContext );
+  					}
+	YY_BREAK
+case 322:
+YY_RULE_SETUP
+#line 3373 "scanner.l"
+{
+  				          //addToBody(yytext);
+                                          if (insidePHP) REJECT;
+  					}
+	YY_BREAK
+case 323:
+YY_RULE_SETUP
+#line 3377 "scanner.l"
+{ 
+  				          //addToBody(yytext);
+  					  lastStringContext=SkipCurly;
+  				          BEGIN( SkipString ); 
+					}
+	YY_BREAK
+case 324:
+YY_RULE_SETUP
+#line 3382 "scanner.l"
+{ 
+  				          if (insidePHP)
+  				            REJECT;
+  				          //addToBody(yytext);
+  					  BEGIN( SkipCurlyCpp );
+					}
+	YY_BREAK
+case 325:
+YY_RULE_SETUP
+#line 3388 "scanner.l"
+{
+  					  yyLineNr++;
+  				          //addToBody(yytext);
+  					}
+	YY_BREAK
+case 326:
+YY_RULE_SETUP
+#line 3392 "scanner.l"
+{
+  				          //addToBody(yytext);
+  					}
+	YY_BREAK
+case 327:
+YY_RULE_SETUP
+#line 3395 "scanner.l"
+{ 
+  				          //addToBody(yytext);
+  					  yyLineNr++; 
+  					  lastCurlyContext = FindMembers;
+  					  BEGIN( SkipCurly ); 
+					}
+	YY_BREAK
+case 328:
+YY_RULE_SETUP
+#line 3401 "scanner.l"
+{ 
+  				          //addToBody(yytext);
+  					  yyLineNr++; 
+					}
+	YY_BREAK
+case 329:
+YY_RULE_SETUP
+#line 3405 "scanner.l"
+{
+  				          //addToBody(yytext);
+  					  lastCContext = YY_START;
+					  BEGIN(SkipComment);
+  					}
+	YY_BREAK
+case 330:
+YY_RULE_SETUP
+#line 3410 "scanner.l"
+{
+  				          //addToBody(yytext);
+  					  lastCContext = YY_START;
+					  BEGIN(SkipCxxComment);
+  					}
+	YY_BREAK
+case 331:
+YY_RULE_SETUP
+#line 3415 "scanner.l"
+{
+  					  lastStringContext=YY_START;
+  				          BEGIN( SkipString ); 
+					}
+	YY_BREAK
+case 332:
+YY_RULE_SETUP
+#line 3419 "scanner.l"
+{
+  					  warn(yyFileName,yyLineNr,
+					      "Warning: Found ';' while parsing initializer list! "
+					      "(doxygen could be confused by a macro call without semicolon)"
+					     );
+					  BEGIN( FindMembers );
+  					}
+	YY_BREAK
+case 333:
+YY_RULE_SETUP
+#line 3426 "scanner.l"
+{
+  				          if (! insidePHP)
+  				            REJECT;
+  				          //addToBody(yytext);
+  					  lastCContext = YY_START;
+					  BEGIN(SkipCxxComment);
+  					}
+	YY_BREAK
+case 334:
+YY_RULE_SETUP
+#line 3433 "scanner.l"
+{
+  				          if (! insideCS) REJECT;
+					  // C# verbatim string
+					  lastSkipVerbStringContext=YY_START;
+					  pSkipVerbString=&current->initializer;
+					  BEGIN(SkipVerbString);
+  					}
+	YY_BREAK
+case 335:
+YY_RULE_SETUP
+#line 3440 "scanner.l"
+{
+                                          if (insidePHP) REJECT;
+                                        }
+	YY_BREAK
+case 336:
+YY_RULE_SETUP
+#line 3443 "scanner.l"
+{ }
+	YY_BREAK
+case 337:
+YY_RULE_SETUP
+#line 3444 "scanner.l"
+{ }
+	YY_BREAK
+case 338:
+YY_RULE_SETUP
+#line 3445 "scanner.l"
+{ 
+  					  BEGIN( lastStringContext ); 
+					}
+	YY_BREAK
+case 339:
+YY_RULE_SETUP
+#line 3448 "scanner.l"
+{ 
+  					  BEGIN( lastStringContext ); 
+					}
+	YY_BREAK
+case 340:
+YY_RULE_SETUP
+#line 3451 "scanner.l"
+{ }
+	YY_BREAK
+case 341:
+YY_RULE_SETUP
+#line 3452 "scanner.l"
+{
+  					  yyLineNr++;
+  					}
+	YY_BREAK
+case 342:
+YY_RULE_SETUP
+#line 3455 "scanner.l"
+{ }
+	YY_BREAK
+case 343:
+YY_RULE_SETUP
+#line 3456 "scanner.l"
+{ 
+					  current->section = Entry::EMPTY_SEC ;
+					  current->type.resize(0) ;
+					  current->name.resize(0) ;
+					  current->args.resize(0) ;
+					  current->argList->clear();
+					  BEGIN( FindMembers ) ;
+					}
+	YY_BREAK
+case 344:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 3464 "scanner.l"
+{
+  					  sharpCount = 0;
+  					  current->name = yytext ;
+					  if (current->section==Entry::PROTOCOL_SEC)
+					  {
+					    current->name+="-p";
+					  }
+					  lineCount();
+					  lastClassTemplSpecContext = ClassVar;
+					  if (insideObjC) // protocol list
+					  {
+					    BEGIN( ObjCProtocolList );
+					  }
+					  else // C++ template specialization
+					  {
+					    BEGIN( ClassTemplSpec );
+					  }
+					}
+	YY_BREAK
+case 345:
+YY_RULE_SETUP
+#line 3482 "scanner.l"
+{
+  					  insideProtocolList=TRUE;
+  					  BEGIN( Bases );
+  					}
+	YY_BREAK
+case 346:
+YY_RULE_SETUP
+#line 3486 "scanner.l"
+{
+					  current->name += yytext;
+					  lineCount();
+  					  if (--sharpCount<=0)
+					  {
+					    current->name = removeRedundantWhiteSpace(current->name);
+					    if (current->section == Entry::PROTOCOL_SEC)
+					    { // Objective-C protocol
+					      unput('{'); // fake start of body
+					      BEGIN( ClassVar );
+					    }
+					    else
+					    {
+					      BEGIN( lastClassTemplSpecContext );
+					    }
+					  }
+					}
+	YY_BREAK
+case 347:
+YY_RULE_SETUP
+#line 3503 "scanner.l"
+{
+  					  current->name += yytext;
+  					  sharpCount++;
+  					}
+	YY_BREAK
+case 348:
+YY_RULE_SETUP
+#line 3507 "scanner.l"
+{
+  					  current->name += yytext;
+					}
+	YY_BREAK
+case 349:
+YY_RULE_SETUP
+#line 3510 "scanner.l"
+{ // forward declaration
+    					  unput(';');
+					  if (isTypedef) // typedef of a class, put typedef keyword back
+					  {
+					    current->type.prepend("typedef");
+					  }
+					  BEGIN( FindMembers );
+					}
+	YY_BREAK
+case 350:
+YY_RULE_SETUP
+#line 3518 "scanner.l"
+{ 
+					  current->name = yytext ;
+					  lineCount();
+					  if (current->section == Entry::PROTOCOL_SEC)
+					  {
+					    current->name += "-p";
+					  }
+					  if (current->section == Entry::PROTOCOL_SEC /*|| 
+					      current->section == Entry::OBJCIMPL_SEC*/)
+					  {
+					    unput('{'); // fake start of body
+					  }
+					  BEGIN( ClassVar );
+					}
+	YY_BREAK
+case 351:
+YY_RULE_SETUP
+#line 3532 "scanner.l"
+{ // C# style scope
+					  current->name = substitute(yytext,".","::");
+					  lineCount();
+					  BEGIN( ClassVar );
+                                        }
+	YY_BREAK
+case 352:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 3537 "scanner.l"
+{
+  					  if (insideIDL && strncmp(yytext,"switch",6)==0 && !isId(yytext[6]))
+					  {
+					    // Corba IDL style union
+					    roundCount=0;
+					    BEGIN(SkipUnionSwitch);
+					  }
+					  else
+					  {
+  					    addType(current);
+					    current->name = yytext;
+					    current->name = current->name.stripWhiteSpace();
+					    lineCount();
+  					    BEGIN( FindMembers );
+					  }
+  					}
+	YY_BREAK
+case 353:
+YY_RULE_SETUP
+#line 3553 "scanner.l"
+// Multiple class forward declaration
+	YY_BREAK
+case 354:
+YY_RULE_SETUP
+#line 3554 "scanner.l"
+{
+  					  if (insideIDL && strcmp(yytext,"switch")==0)
+					  {
+					    // Corba IDL style union
+					    roundCount=0;
+					    BEGIN(SkipUnionSwitch);
+					  }
+					  else if (insideJava && (strcmp(yytext,"implements")==0 || strcmp(yytext,"extends")==0))
+					  {
+  					    current->type.resize(0);
+					    baseProt=Public;
+                                            baseVirt=Normal;
+					    baseName.resize(0);
+					    BEGIN( BasesProt ) ;
+					  }
+					  else if (insidePHP && (strcmp(yytext,"extends")==0))
+					  {
+  					    current->type.resize(0);
+					    baseProt=Public;
+                                            baseVirt=Normal;
+					    baseName.resize(0);
+					    BEGIN( BasesProt ) ;
+					  }
+					  else
+					  {
+					    current->type += ' ' ;
+					    current->type += current->name ;
+					    current->name = yytext ;
+					  }
+  					}
+	YY_BREAK
+case 355:
+YY_RULE_SETUP
+#line 3584 "scanner.l"
+{
+    					  if (insideObjC && *yytext=='(') // class category
+					  {
+					    current->name+='(';
+					    current->section=Entry::CATEGORY_SEC;
+					    BEGIN( ClassCategory );
+					  }
+					  else
+					  {
+                                            // probably a function anyway
+                                            unput(*yytext);
+					    BEGIN( FindMembers );
+					  }
+					}
+	YY_BREAK
+case 356:
+YY_RULE_SETUP
+#line 3598 "scanner.l"
+{
+					  current->name+=yytext;
+					}
+	YY_BREAK
+case 357:
+YY_RULE_SETUP
+#line 3601 "scanner.l"
+{
+					  current->name+=')';
+					  // category has no variables so push back an empty body
+					  unput('}');
+					  unput('{');
+					  BEGIN( ClassVar );
+					}
+	YY_BREAK
+case 358:
+YY_RULE_SETUP
+#line 3608 "scanner.l"
+{ 
+  					  current->type.resize(0);
+					  if (current->section == Entry::INTERFACE_SEC || 
+					      current->section == Entry::STRUCT_SEC || 
+					      insidePHP || insideCS || insideD || insideObjC
+					     )
+					    baseProt=Public;
+					  else
+					    baseProt=Private;
+                                          baseVirt=Normal;
+					  baseName.resize(0);
+					  BEGIN( BasesProt ) ;
+					}
+	YY_BREAK
+case 359:
+YY_RULE_SETUP
+#line 3621 "scanner.l"
+{
+    					  unput(*yytext);
+					  if (isTypedef) // typedef of a class, put typedef keyword back
+					  {
+					    current->type.prepend("typedef");
+					  }
+					  BEGIN( FindMembers );
+    					}
+	YY_BREAK
+case 360:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp = yy_bp + 3;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 3629 "scanner.l"
+{
+  					  if (!insideObjC)
+					  {
+					    REJECT;
+					  }
+					  else
+					  {
+					    lineCount();
+					    current->program+=yytext;
+                                            current->fileName = yyFileName ;
+					    current->startLine = yyLineNr ;
+					    curlyCount=0;
+					    BEGIN( ReadBodyIntf );
+					  }
+  					}
+	YY_BREAK
+case 361:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+#line 3645 "scanner.l"
+case 362:
+#line 3646 "scanner.l"
+case 363:
+#line 3647 "scanner.l"
+case 364:
+YY_RULE_SETUP
+#line 3647 "scanner.l"
+{
+  					  if (!insideObjC)
+					  {
+					    REJECT;
+					  }
+					  else
+					  {
+					    lineCount();
+					    current->program+=yytext;
+                                            current->fileName = yyFileName ;
+					    current->startLine = yyLineNr ;
+					    curlyCount=0;
+					    BEGIN( ReadBodyIntf );
+					  }
+  					}
+	YY_BREAK
+case 365:
+YY_RULE_SETUP
+#line 3662 "scanner.l"
+{ 
+                                          current->fileName = yyFileName ;
+					  current->startLine = yyLineNr ;
+					  current->name = removeRedundantWhiteSpace(current->name);
+					  if (current->name.isEmpty() && !isTypedef) // anonymous compound
+					  {
+					    current->name.sprintf("@%d",anonCount++);
+					  }
+					  curlyCount=0;
+					  if (/*current->section==Entry::PROTOCOL_SEC ||
+					      current->section==Entry::OBJCIMPL_SEC*/
+					      insideObjC
+					     )
+					  { // ObjC body that ends with @end
+					    BEGIN( ReadBodyIntf );
+					  }
+					  else if (current->section==Entry::NAMESPACE_SEC)
+					  { // namespace body
+					    BEGIN( ReadNSBody );
+					  }
+					  else
+					  { // class body
+					    BEGIN( ReadBody ) ;
+					  }
+					}
+	YY_BREAK
+case 366:
+YY_RULE_SETUP
+#line 3687 "scanner.l"
+{ baseVirt = Virtual; }
+	YY_BREAK
+case 367:
+YY_RULE_SETUP
+#line 3688 "scanner.l"
+{ baseProt = Public; }
+	YY_BREAK
+case 368:
+YY_RULE_SETUP
+#line 3689 "scanner.l"
+{ baseProt = Protected; }
+	YY_BREAK
+case 369:
+YY_RULE_SETUP
+#line 3690 "scanner.l"
+{ baseProt = Private; }
+	YY_BREAK
+case 370:
+YY_RULE_SETUP
+#line 3691 "scanner.l"
+{ lineCount(); }
+	YY_BREAK
+case 371:
+YY_RULE_SETUP
+#line 3692 "scanner.l"
+{ unput(*yytext); BEGIN(Bases); }
+	YY_BREAK
+case 372:
+YY_RULE_SETUP
+#line 3693 "scanner.l"
+{ 
+  					  baseName+=yytext;
+					  current->args += ' ';
+					  current->args += yytext;
+					}
+	YY_BREAK
+case 373:
+YY_RULE_SETUP
+#line 3698 "scanner.l"
+{ // Java style class
+    					  QCString name = substitute(yytext,".","::");
+					  baseName += name;
+					  current->args += ' ';
+					  current->args += name;
+    					}
+	YY_BREAK
+case 374:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp = yy_bp + 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 3704 "scanner.l"
+{
+                                          if (!insideObjC) 
+					  {
+					    REJECT;
+					  }
+					  else
+					  {
+					    yyLineNr++;
+					    //unput('{');
+					  }
+					}
+	YY_BREAK
+case 375:
+YY_RULE_SETUP
+#line 3715 "scanner.l"
+{ // empty ObjC interface
+  					  unput('d'); // insert fake body: {}@end
+  					  unput('n'); 
+  					  unput('e'); 
+  					  unput('@'); 
+  					  unput('}'); 
+  					  unput('{');
+					}
+	YY_BREAK
+case 376:
+YY_RULE_SETUP
+#line 3723 "scanner.l"
+{ current->name += *yytext;
+  					  sharpCount=1; 
+					  roundCount=0;
+					  lastSkipSharpContext = YY_START;
+					  specName = &current->name;
+					  BEGIN ( Specialization );
+					}
+	YY_BREAK
+case 377:
+YY_RULE_SETUP
+#line 3730 "scanner.l"
+{ 
+  					  sharpCount=1; 
+					  roundCount=0;
+					  lastSkipSharpContext = YY_START;
+					  if (insideObjC) // start of protocol list
+					  {
+					    unput(',');
+					  }
+					  else // template specialization
+					  {
+                                            baseName += *yytext;
+					    specName = &baseName;
+					    BEGIN ( Specialization );
+					  }
+					}
+	YY_BREAK
+case 378:
+YY_RULE_SETUP
+#line 3745 "scanner.l"
+{ *specName += *yytext;
+  					  if (roundCount==0) sharpCount++;
+  					}
+	YY_BREAK
+case 379:
+YY_RULE_SETUP
+#line 3748 "scanner.l"
+{
+  					  *specName += *yytext;
+  					  if (roundCount==0 && --sharpCount<=0)
+					    BEGIN(lastSkipSharpContext);
+  					}
+	YY_BREAK
+case 380:
+YY_RULE_SETUP
+#line 3753 "scanner.l"
+{ lineCount(); *specName +=' '; }
+	YY_BREAK
+case 381:
+YY_RULE_SETUP
+#line 3754 "scanner.l"
+{ *specName += yytext; }
+	YY_BREAK
+case 382:
+YY_RULE_SETUP
+#line 3755 "scanner.l"
+{ *specName += yytext; }
+	YY_BREAK
+case 383:
+YY_RULE_SETUP
+#line 3756 "scanner.l"
+{ lineCount(); }
+	YY_BREAK
+case 384:
+YY_RULE_SETUP
+#line 3757 "scanner.l"
+{ *specName += *yytext; roundCount++; }
+	YY_BREAK
+case 385:
+YY_RULE_SETUP
+#line 3758 "scanner.l"
+{ *specName += *yytext; roundCount--; }
+	YY_BREAK
+case 386:
+YY_RULE_SETUP
+#line 3759 "scanner.l"
+{
+  					  *specName += *yytext;
+  					}
+	YY_BREAK
+case 387:
+YY_RULE_SETUP
+#line 3762 "scanner.l"
+{ ++sharpCount; }
+	YY_BREAK
+case 388:
+YY_RULE_SETUP
+#line 3763 "scanner.l"
+{ if (--sharpCount<=0)
+					    BEGIN ( lastSkipSharpContext );
+					}
+	YY_BREAK
+case 389:
+YY_RULE_SETUP
+#line 3766 "scanner.l"
+{ ++roundCount; }
+	YY_BREAK
+case 390:
+YY_RULE_SETUP
+#line 3767 "scanner.l"
+{ if (--roundCount<=0)
+					    BEGIN ( lastSkipRoundContext );
+					}
+	YY_BREAK
+case 391:
+YY_RULE_SETUP
+#line 3770 "scanner.l"
+{ lineCount();
+                                          if (insideProtocolList)
+					  {
+					    baseName+="-p";
+					  }
+					  else
+					  {
+                                            current->args += ',' ; 
+					  }
+					  current->name = removeRedundantWhiteSpace(current->name);
+  					  if (!baseName.isEmpty())
+					  {
+  					    current->extends->append(
+					      new BaseInfo(baseName,baseProt,baseVirt)
+					    );
+					  }
+					  if (current->section==Entry::INTERFACE_SEC || 
+					      insideJava || insidePHP || insideCS || 
+					      insideD || insideObjC)
+					  {
+					    baseProt=Public;
+					  }
+					  else
+					  {
+					    baseProt=Private;
+					  }
+					  baseVirt=Normal;
+					  baseName.resize(0);
+                                          if (*yytext=='>')
+					  { // end of a ObjC protocol list
+  					    insideProtocolList=FALSE;
+					  }
+					  else
+					  {
+					    if (*yytext==',' && insideObjC) // Begin of protocol list
+					    {
+  					      insideProtocolList=TRUE;
+					    }
+					    BEGIN(BasesProt);
+					  }
+					}
+	YY_BREAK
+case 392:
+YY_RULE_SETUP
+#line 3811 "scanner.l"
+{ current->fileName = yyFileName ;
+					  current->startLine = yyLineNr ;
+					  current->name = removeRedundantWhiteSpace(current->name);
+  					  if (!baseName.isEmpty())
+  					    current->extends->append(
+					      new BaseInfo(baseName,baseProt,baseVirt)
+					    );
+					  curlyCount=0;
+					  if (insideObjC)
+					  {
+					    BEGIN( ReadBodyIntf );
+					  }
+					  else
+					  {
+					    BEGIN( ReadBody ) ;
+					  }
+					}
+	YY_BREAK
+case 393:
+YY_RULE_SETUP
+#line 3828 "scanner.l"
+{
+  					  roundCount++;
+  					}
+	YY_BREAK
+case 394:
+YY_RULE_SETUP
+#line 3831 "scanner.l"
+{
+  					  if (--roundCount==0)
+					  {
+					    BEGIN(ClassVar);
+					  }
+  					}
+	YY_BREAK
+case 395:
+YY_RULE_SETUP
+#line 3837 "scanner.l"
+{ yyLineNr++; }
+	YY_BREAK
+case 396:
+YY_RULE_SETUP
+#line 3838 "scanner.l"
+
+	YY_BREAK
+case 397:
+YY_RULE_SETUP
+#line 3839 "scanner.l"
+{ current->program += yytext ;
+					  lineCount() ;
+					}
+	YY_BREAK
+case 398:
+YY_RULE_SETUP
+#line 3842 "scanner.l"
+{ current->program += yytext ; } 
+	YY_BREAK
+case 399:
+YY_RULE_SETUP
+#line 3843 "scanner.l"
+{ current->program += yytext ; }
+	YY_BREAK
+case 400:
+YY_RULE_SETUP
+#line 3844 "scanner.l"
+{
+                                          insideCode=TRUE;
+  					  current->program += yytext ;
+  					}
+	YY_BREAK
+case 401:
+YY_RULE_SETUP
+#line 3848 "scanner.l"
+{
+                                          insideCode=FALSE;
+  					  current->program += yytext ;
+  					}
+	YY_BREAK
+case 402:
+YY_RULE_SETUP
+#line 3852 "scanner.l"
+{ current->program += yytext ; }
+	YY_BREAK
+case 403:
+YY_RULE_SETUP
+#line 3853 "scanner.l"
+{ current->program += yytext ;
+					  if (!insideCode) BEGIN( lastContext ) ;
+					}
+	YY_BREAK
+case 404:
+YY_RULE_SETUP
+#line 3856 "scanner.l"
+{ current->program += *yytext ; }
+	YY_BREAK
+case 405:
+YY_RULE_SETUP
+#line 3858 "scanner.l"
+{ 
+  					  //printf("Start doc block at %d\n",yyLineNr);
+					  removeSlashes=(yytext[1]=='/');
+					  tmpDocType=-1;
+  					  if (YY_START!=SkipCurly)
+					  {
+					    current->doc.resize(0);
+					    current->docLine = yyLineNr;
+					    current->docFile = yyFileName;
+					  }
+					  lastDocContext = YY_START;
+					  if (current_root->section & Entry::SCOPE_MASK)
+                                          {
+					    current->inside = current_root->name+"::";
+                                            if (current->mGrpId!=DOX_NOGROUP)
+                                            {
+                                              memberGroupInside = current->inside.copy();
+                                            }
+                                          }
+					  BEGIN( Doc );
+					}
+	YY_BREAK
+case 406:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 3879 "scanner.l"
+{
+  					  removeSlashes=(yytext[1]=='/');
+					  lastDocContext = YY_START;
+					  //printf("Found comment block at %s:%d\n",yyFileName,yyLineNr);
+					  if (current_root->section & Entry::SCOPE_MASK)
+                                          {
+					    current->inside = current_root->name+"::";
+                                            if (current->mGrpId!=DOX_NOGROUP)
+                                            {
+                                              memberGroupInside = current->inside.copy();
+                                            }
+                                          }
+					  if (!Config_getBool("JAVADOC_AUTOBRIEF")) // use the Qt style
+					  {
+					    current->docLine = yyLineNr;
+					    current->docFile = yyFileName;
+					    tmpDocType=-1;
+					    if (!Config_getBool("HIDE_IN_BODY_DOCS") && 
+						YY_START==SkipCurly) // inside body
+					    {
+					      current->doc+="\n\n";
+					    }
+					    else
+					    {
+  					      current->doc.resize(0);
+					    }
+					    BEGIN( Doc );
+					  }
+					  else // Use the javadoc style
+					  {
+					    current->docLine = yyLineNr;
+					    current->docFile = yyFileName;
+					    current->briefLine = yyLineNr;
+					    current->briefFile = yyFileName;
+					    if (!Config_getBool("HIDE_IN_BODY_DOCS") &&
+						YY_START==SkipCurly) // inside body
+					    {
+					      tmpDocType=-1;
+					      current->doc+="\n\n";
+					      lastDocContext = SkipCurly;
+					      BEGIN( Doc );
+					    }
+					    else
+					    {  
+					      tmpDocType=Doc;
+					      current->doc.resize(0);
+					      current->brief.resize(0);
+					      BEGIN( JavaDoc );
+					    }
+					  }
+  					}
+	YY_BREAK
+case 407:
+YY_RULE_SETUP
+#line 3930 "scanner.l"
+{ 
+                                          if (YY_START!=SkipCurly)
+					  {
+  					    current->brief.resize(0);
+					    current->briefFile=yyFileName;
+					    current->briefLine=yyLineNr;
+					  }
+					  tmpDocType=-1;
+					  lastDocContext = YY_START;
+					  if (current_root->section & Entry::SCOPE_MASK)
+                                          {
+					    current->inside = current_root->name+"::";
+                                            if (current->mGrpId!=DOX_NOGROUP)
+                                            {
+                                              memberGroupInside = current->inside.copy();
+                                            }
+                                          }
+					  BEGIN( LineDoc );
+					}
+	YY_BREAK
+case 408:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp = yy_bp + 3;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 3949 "scanner.l"
+{ 
+                                          if (YY_START!=SkipCurly)
+					  {
+  					    current->brief.resize(0);
+					    current->briefFile=yyFileName;
+					    current->briefLine=yyLineNr;
+					  }
+					  tmpDocType=-1;
+					  lastDocContext = YY_START;
+					  if (current_root->section & Entry::SCOPE_MASK)
+                                          {
+					    current->inside = current_root->name+"::";
+                                            if (current->mGrpId!=DOX_NOGROUP)
+                                            {
+                                              memberGroupInside = current->inside.copy();
+                                            }
+                                          }
+					  BEGIN( LineDoc );
+					}
+	YY_BREAK
+case 409:
+YY_RULE_SETUP
+#line 3968 "scanner.l"
+{
+					  lineCount();
+					}
+	YY_BREAK
+case 410:
+YY_RULE_SETUP
+#line 3971 "scanner.l"
+{
+                                          if (insideCS && !current->name.isEmpty() && !current->type.isEmpty())
+					  {
+					    if (current->type.left(6)=="event " || current->type.find("event")!=-1) // event
+					    {
+  					      current->mtype = mtype = Event;
+					    }
+					    else // property
+					    {				
+  					      current->mtype = mtype = Property;
+					    }
+					    current->bodyLine = yyLineNr;
+					    curlyCount=0;
+					    BEGIN(CSAccessorDecl);
+					  }
+					  else
+					  {
+					    if ((insideJava || insideCS || insideD) &&
+						current->name.isEmpty() && 
+						current->type.isEmpty()
+					       )
+					    {
+					      // static Java initializer
+					      needsSemi = FALSE;
+					      if (current->stat)
+					      {
+						current->name="[static initializer]";
+					      }
+					      else
+					      {
+						current->name="[instance initializer]";
+					      }
+                                              unput(*yytext); 
+					      BEGIN( Function );
+					    }
+					    else
+					    {
+					      needsSemi = TRUE;
+					      current->type.resize(0);
+					      current->name.resize(0);
+					      current->args.resize(0);
+					      current->argList->clear();
+					      curlyCount=0;
+					      BEGIN( SkipCurlyBlock );
+					    }
+					  }
+  					}
+	YY_BREAK
+case 411:
+YY_RULE_SETUP
+#line 4018 "scanner.l"
+{ curlyCount++; }
+	YY_BREAK
+case 412:
+YY_RULE_SETUP
+#line 4019 "scanner.l"
+{ 
+                                          if (curlyCount) 
+                                          {
+                                            curlyCount--; 
+					  }
+					  else
+					  {
+                                            unput(';');
+					    BEGIN(FindMembers);
+					  }
+                                        }
+	YY_BREAK
+case 413:
+YY_RULE_SETUP
+#line 4030 "scanner.l"
+{ if (curlyCount==0) current->memSpec |= Entry::Settable; }
+	YY_BREAK
+case 414:
+YY_RULE_SETUP
+#line 4031 "scanner.l"
+{ if (curlyCount==0) current->memSpec |= Entry::Gettable; }
+	YY_BREAK
+case 415:
+YY_RULE_SETUP
+#line 4032 "scanner.l"
+{}
+	YY_BREAK
+case 416:
+YY_RULE_SETUP
+#line 4033 "scanner.l"
+{ yyLineNr++; }
+	YY_BREAK
+case 417:
+YY_RULE_SETUP
+#line 4034 "scanner.l"
+{
+  					  lastBriefContext=tmpDocType;
+  					  BEGIN( ClassDocBrief ); 
+					}
+	YY_BREAK
+case 418:
+YY_RULE_SETUP
+#line 4038 "scanner.l"
+{
+					  lineCount();
+					  if (!current->brief.stripWhiteSpace().isEmpty())
+					  {
+					    BEGIN( tmpDocType );
+					  }
+ 					} 
+	YY_BREAK
+/*
+<JavaDoc>"@"				{
+  					  unput(*yytext);
+					  BEGIN(ClassDoc);
+  					}
+  */
+case 419:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 4051 "scanner.l"
+{
+  					  //printf("---> removing %s\n",yytext);
+  					}
+	YY_BREAK
+/*
+<JavaDoc>[^\n\@\*\.\\]+			{
+  					  current->brief+=yytext;
+  					}
+  */
+case 420:
+YY_RULE_SETUP
+#line 4059 "scanner.l"
+{
+  				          //printf("---> copy %c\n",*yytext);
+  					  current->brief+=*yytext;
+  					}
+	YY_BREAK
+case 421:
+YY_RULE_SETUP
+#line 4063 "scanner.l"
+{
+  					  current->brief+=' ';
+					  lineCount();
+  					}
+	YY_BREAK
+case 422:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp = yy_bp + 2;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 4067 "scanner.l"
+{
+					  current->brief+=".";
+					}
+	YY_BREAK
+case 423:
+YY_RULE_SETUP
+#line 4070 "scanner.l"
+{
+  					  lineCount();
+					  current->brief+=".";
+					  BEGIN( tmpDocType );
+					}
+	YY_BREAK
+case 424:
+YY_RULE_SETUP
+#line 4075 "scanner.l"
+{ 
+  					  current->doc+=yytext;
+					  BEGIN( tmpDocType );
+  					}
+	YY_BREAK
+case 425:
+YY_RULE_SETUP
+#line 4079 "scanner.l"
+{  // end brief upon encountering any of these
+					  int i;
+					  for (i=yyleng-1;i>=0;i--)
+					  {
+					    unput(yytext[i]);
+					  }
+					  BEGIN( tmpDocType );
+  					}
+	YY_BREAK
+case 426:
+YY_RULE_SETUP
+#line 4087 "scanner.l"
+{
+					  current->section = Entry::MEMBERDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+  					  BEGIN( ClassDocFunc ); 
+					}
+	YY_BREAK
+case 427:
+YY_RULE_SETUP
+#line 4093 "scanner.l"
+{
+  					  nextDefContext = YY_START==LineDoc ? DefLineDoc : ClassDoc;
+  					  current->section = Entry::DEFINEDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+  					  BEGIN( ClassDocDefine );
+  					}
+	YY_BREAK
+case 428:
+YY_RULE_SETUP
+#line 4100 "scanner.l"
+{ 
+  					  overloadContext = YY_START;
+  					  BEGIN( ClassDocOverload ); 
+					}
+	YY_BREAK
+case 429:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 4104 "scanner.l"
+{
+					  QCString orgDoc = current->doc;
+					  current->doc = getOverloadDocs();
+					  current->doc += "\n\n";
+					  current->doc += orgDoc;
+  					  BEGIN( overloadContext  );
+  				        }
+	YY_BREAK
+case 430:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 2;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 4111 "scanner.l"
+{
+					  QCString orgDoc = current->doc;
+					  current->doc = getOverloadDocs();
+					  current->doc += "\n\n";
+					  current->doc += orgDoc;
+  					  BEGIN( overloadContext );
+  					}
+	YY_BREAK
+case 431:
+YY_RULE_SETUP
+#line 4118 "scanner.l"
+{ unput(*yytext);
+  					  current->section = Entry::OVERLOADDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  BEGIN( ClassDocFunc ); 
+					}
+	YY_BREAK
+case 432:
+YY_RULE_SETUP
+#line 4124 "scanner.l"
+{
+  					  current->section = Entry::ENUMDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  BEGIN( EnumDocArg1 );
+  					}
+	YY_BREAK
+case 433:
+YY_RULE_SETUP
+#line 4130 "scanner.l"
+{
+  					  current->section = Entry::GROUPDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  current->groupDocType = Entry::GROUPDOC_NORMAL;
+					  BEGIN( GroupDocArg1 );
+  					}
+	YY_BREAK
+case 434:
+YY_RULE_SETUP
+#line 4137 "scanner.l"
+{
+  					  current->section = Entry::GROUPDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  current->groupDocType = Entry::GROUPDOC_ADD;
+					  BEGIN( GroupDocArg1 );
+  					}
+	YY_BREAK
+case 435:
+YY_RULE_SETUP
+#line 4144 "scanner.l"
+{
+  					  current->section = Entry::GROUPDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  current->groupDocType = Entry::GROUPDOC_WEAK;
+					  BEGIN( GroupDocArg1 );
+  					}
+	YY_BREAK
+case 436:
+YY_RULE_SETUP
+#line 4151 "scanner.l"
+{
+  					  current->section = Entry::NAMESPACEDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+  					  BEGIN( NameSpaceDocArg1 );
+  					}
+	YY_BREAK
+case 437:
+YY_RULE_SETUP
+#line 4157 "scanner.l"
+{
+  					  current->section = Entry::PACKAGEDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+  					  BEGIN( PackageDocArg1 );
+  					}
+	YY_BREAK
+case 438:
+YY_RULE_SETUP
+#line 4163 "scanner.l"
+{
+  					  current->section = Entry::CLASSDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  BEGIN( ClassDocArg1 ); 
+					}
+	YY_BREAK
+case 439:
+YY_RULE_SETUP
+#line 4169 "scanner.l"
+{ // ObjC protocol
+  					  current->section = Entry::PROTOCOLDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  BEGIN( ClassDocArg1 ); 
+					}
+	YY_BREAK
+case 440:
+YY_RULE_SETUP
+#line 4175 "scanner.l"
+{ // ObjC category
+  					  current->section = Entry::CATEGORYDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  BEGIN( CategoryDocArg1 ); 
+					}
+	YY_BREAK
+case 441:
+YY_RULE_SETUP
+#line 4181 "scanner.l"
+{
+  					  current->section = Entry::UNIONDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  BEGIN( ClassDocArg1 ); 
+					}
+	YY_BREAK
+case 442:
+YY_RULE_SETUP
+#line 4187 "scanner.l"
+{
+  					  current->section = Entry::STRUCTDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  BEGIN( ClassDocArg1 ); 
+					}
+	YY_BREAK
+case 443:
+YY_RULE_SETUP
+#line 4193 "scanner.l"
+{
+  					  current->section = Entry::INTERFACEDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  BEGIN( ClassDocArg1 ); 
+					}
+	YY_BREAK
+case 444:
+YY_RULE_SETUP
+#line 4199 "scanner.l"
+{
+  					  current->section = Entry::EXCEPTIONDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  BEGIN( ClassDocArg1 ); 
+					}
+	YY_BREAK
+case 445:
+YY_RULE_SETUP
+#line 4205 "scanner.l"
+{
+  					  current->section = Entry::PAGEDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  BEGIN( PageDocArg1 );
+  					}
+	YY_BREAK
+case 446:
+YY_RULE_SETUP
+#line 4211 "scanner.l"
+{
+  					  current->section = Entry::MAINPAGEDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  current->name = "mainpage";
+					  BEGIN( PageDocArg2 );
+  					}
+	YY_BREAK
+case 447:
+YY_RULE_SETUP
+#line 4218 "scanner.l"
+{
+  					  current->section = Entry::FILEDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  BEGIN( FileDocArg1 );
+  					}
+	YY_BREAK
+case 448:
+YY_RULE_SETUP
+#line 4224 "scanner.l"
+{
+ 					  current->section = Entry::EXAMPLE_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+ 					  BEGIN( ExampleDocArg1 );
+					}
+	YY_BREAK
+case 449:
+YY_RULE_SETUP
+#line 4230 "scanner.l"
+{ /* nop */
+					}
+	YY_BREAK
+case 450:
+YY_RULE_SETUP
+#line 4232 "scanner.l"
+{
+  					  lastDefGroup.groupname.resize(0);
+  					  memberGroupHeader=&yytext[5];
+					  memberGroupHeader=memberGroupHeader.stripWhiteSpace(); 
+					  current->section = Entry::MEMBERGRP_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  yyLineNr++;  
+					  startGroupInDoc();
+					  BEGIN( lastDocContext );
+  					}
+	YY_BREAK
+case 451:
+YY_RULE_SETUP
+#line 4243 "scanner.l"
+{
+  					  lastDefGroup.groupname.resize(0);
+					  current->section = Entry::MEMBERGRP_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  memberGroupHeader.resize(0);
+					  memberGroupDocs.resize(0);
+					  BEGIN(GroupHeader);
+  					}
+	YY_BREAK
+case 452:
+YY_RULE_SETUP
+#line 4252 "scanner.l"
+{ 
+					  lastSkipHtmlCommentContext = YY_START;
+					  BEGIN(SkipHtmlComment); 
+					}
+	YY_BREAK
+case 453:
+YY_RULE_SETUP
+#line 4256 "scanner.l"
+{ BEGIN(lastSkipHtmlCommentContext); }
+	YY_BREAK
+case 454:
+YY_RULE_SETUP
+#line 4257 "scanner.l"
+
+	YY_BREAK
+case 455:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 4258 "scanner.l"
+{
+  					  current->doc+=yytext;
+  					}
+	YY_BREAK
+case 456:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 4261 "scanner.l"
+{
+  					  current->brief+=yytext;
+  					}
+	YY_BREAK
+case 457:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 4264 "scanner.l"
+{
+  					  slStartContext = YY_START;
+					  lastBriefContext = TodoParam; // this is where we will continue at the end of the argument
+					  slString = current->brief.copy(); // these will be swapped later on.
+					  current->brief.resize(0);
+					  BEGIN(ClassDocBrief);
+  					}
+	YY_BREAK
+case 458:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 4271 "scanner.l"
+{
+  					  slStartContext = YY_START;
+					  lastBriefContext = TestParam; // this is where we will continue at the end of the argument
+					  slString = current->brief.copy(); // these will be swapped later on.
+					  current->brief.resize(0);
+					  BEGIN(ClassDocBrief);
+  					}
+	YY_BREAK
+case 459:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 4278 "scanner.l"
+{
+  					  slStartContext = YY_START;
+					  lastBriefContext = BugParam; // this is where we will continue at the end of the argument
+					  slString = current->brief.copy(); // these will be swapped later on.
+					  current->brief.resize(0);
+					  BEGIN(ClassDocBrief);
+  					}
+	YY_BREAK
+case 460:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 4285 "scanner.l"
+{
+  					  slStartContext = YY_START;
+					  lastBriefContext = DeprecatedParam; // this is where we will continue at the end of the argument
+					  slString = current->brief.copy(); // these will be swapped later on.
+					  current->brief.resize(0);
+					  BEGIN(ClassDocBrief);
+  					}
+	YY_BREAK
+case 461:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 4292 "scanner.l"
+{
+  					  slStartContext = YY_START;
+					  lastBriefContext = XRefItemParam4; // this is where we will continue at the end of the argument
+					  slString = current->brief.copy(); // these will be swapped later on.
+					  current->brief.resize(0);
+					  BEGIN(XRefItemParam1);
+  					}
+	YY_BREAK
+case 462:
+#line 4300 "scanner.l"
+case 463:
+#line 4301 "scanner.l"
+case 464:
+#line 4302 "scanner.l"
+case 465:
+YY_RULE_SETUP
+#line 4302 "scanner.l"
+{
+                                          addXRefItem("todo",theTranslator->trTodo(),theTranslator->trTodoList());
+					  int i;for (i=yyleng-1;i>=0;i--) unput(yytext[i]);
+					  BEGIN(slStartContext);
+  					}
+	YY_BREAK
+case 466:
+#line 4308 "scanner.l"
+case 467:
+#line 4309 "scanner.l"
+case 468:
+#line 4310 "scanner.l"
+case 469:
+YY_RULE_SETUP
+#line 4310 "scanner.l"
+{
+                                          addXRefItem("test",theTranslator->trTest(),theTranslator->trTestList());
+					  int i;for (i=yyleng-1;i>=0;i--) unput(yytext[i]);
+					  BEGIN(slStartContext);
+  					}
+	YY_BREAK
+case 470:
+#line 4316 "scanner.l"
+case 471:
+#line 4317 "scanner.l"
+case 472:
+#line 4318 "scanner.l"
+case 473:
+YY_RULE_SETUP
+#line 4318 "scanner.l"
+{
+                                          addXRefItem("bug",theTranslator->trBug(),theTranslator->trBugList());
+					  int i;for (i=yyleng-1;i>=0;i--) unput(yytext[i]);
+					  BEGIN(slStartContext);
+  					}
+	YY_BREAK
+case 474:
+#line 4324 "scanner.l"
+case 475:
+#line 4325 "scanner.l"
+case 476:
+#line 4326 "scanner.l"
+case 477:
+YY_RULE_SETUP
+#line 4326 "scanner.l"
+{
+                                          addXRefItem("deprecated",theTranslator->trDeprecated(),theTranslator->trDeprecatedList());
+					  int i;for (i=yyleng-1;i>=0;i--) unput(yytext[i]);
+					  BEGIN(slStartContext);
+  					}
+	YY_BREAK
+case 478:
+YY_RULE_SETUP
+#line 4331 "scanner.l"
+{
+  					  xrefItemKey=yytext;
+					  BEGIN(XRefItemParam2);
+					}
+	YY_BREAK
+case 479:
+YY_RULE_SETUP
+#line 4335 "scanner.l"
+
+	YY_BREAK
+case 480:
+YY_RULE_SETUP
+#line 4336 "scanner.l"
+{
+  					  warn(yyFileName,yyLineNr,"Found unexpected character %s while parsing the first argument of \\xrefitem\n",yytext);
+					  unput(*yytext);
+					  BEGIN(slStartContext);
+  					}
+	YY_BREAK
+case 481:
+YY_RULE_SETUP
+#line 4341 "scanner.l"
+{
+  					  xrefItemTitle = stripQuotes(yytext);
+					  BEGIN(XRefItemParam3);
+  					}
+	YY_BREAK
+case 482:
+YY_RULE_SETUP
+#line 4345 "scanner.l"
+
+	YY_BREAK
+case 483:
+YY_RULE_SETUP
+#line 4346 "scanner.l"
+{
+  					  warn(yyFileName,yyLineNr,"Found unexpected character %s while parsing the second argument of \\xrefitem\n",yytext);
+					  unput(*yytext);
+					  BEGIN(slStartContext);
+  					}
+	YY_BREAK
+case 484:
+YY_RULE_SETUP
+#line 4351 "scanner.l"
+
+	YY_BREAK
+case 485:
+YY_RULE_SETUP
+#line 4352 "scanner.l"
+{
+  					  xrefListTitle = stripQuotes(yytext);
+					  BEGIN(ClassDocBrief);
+  					}
+	YY_BREAK
+case 486:
+YY_RULE_SETUP
+#line 4356 "scanner.l"
+{
+  					  warn(yyFileName,yyLineNr,"Found unexpected character %s while parsing the third argument of \\xrefitem\n",yytext);
+					  unput(*yytext);
+					  BEGIN(slStartContext);
+  					}
+	YY_BREAK
+case 487:
+YY_RULE_SETUP
+#line 4361 "scanner.l"
+
+	YY_BREAK
+case 488:
+#line 4363 "scanner.l"
+case 489:
+#line 4364 "scanner.l"
+case 490:
+#line 4365 "scanner.l"
+case 491:
+YY_RULE_SETUP
+#line 4365 "scanner.l"
+{
+                                          addXRefItem(xrefItemKey,xrefItemTitle,xrefListTitle);
+					  int i;for (i=yyleng-1;i>=0;i--) unput(yytext[i]);
+					  BEGIN(slStartContext);
+  					}
+	YY_BREAK
+case 492:
+YY_RULE_SETUP
+#line 4370 "scanner.l"
+{
+				          current->name = stripQuotes(yytext);	
+					  BEGIN( PageDoc );
+					}
+	YY_BREAK
+case 493:
+YY_RULE_SETUP
+#line 4374 "scanner.l"
+{ 
+  					  lastDocRelContext = YY_START;
+  					  BEGIN( ClassDocRelates ); 
+					}
+	YY_BREAK
+case 494:
+YY_RULE_SETUP
+#line 4378 "scanner.l"
+{ 
+  					  current->relates = yytext;
+                                          if (current->mGrpId!=DOX_NOGROUP) 
+                                          {
+                                            memberGroupRelates = yytext;
+                                          }
+					  BEGIN( lastDocRelContext );
+					}
+	YY_BREAK
+case 495:
+YY_RULE_SETUP
+#line 4386 "scanner.l"
+{ 
+                                          lastDocRelAlsoContext = YY_START;
+                                           BEGIN( ClassDocRelatesAlso ); 
+                                        }
+	YY_BREAK
+case 496:
+YY_RULE_SETUP
+#line 4390 "scanner.l"
+{ 
+  					  current->relatesDup = TRUE;
+					  current->relates = yytext;
+					  if (current->mGrpId!=DOX_NOGROUP) 
+					  {
+					    memberGroupRelates = yytext;
+					  }
+					  BEGIN( lastDocRelAlsoContext );
+                                        }
+	YY_BREAK
+case 497:
+YY_RULE_SETUP
+#line 4399 "scanner.l"
+{
+  					  current->name = yytext;
+					  newDocState();
+  					}
+	YY_BREAK
+case 498:
+YY_RULE_SETUP
+#line 4403 "scanner.l"
+{ 
+                                          yyLineNr++; 
+                                        }
+	YY_BREAK
+case 499:
+YY_RULE_SETUP
+#line 4406 "scanner.l"
+{
+  					  warn(yyFileName,yyLineNr,
+                                               "Warning: missing argument after "
+					       "\\namespace."
+                                              );
+  					  yyLineNr++;
+  					}
+	YY_BREAK
+case 500:
+YY_RULE_SETUP
+#line 4413 "scanner.l"
+{
+  					  current->name = yytext;
+					  newDocState();
+  					}
+	YY_BREAK
+case 501:
+YY_RULE_SETUP
+#line 4417 "scanner.l"
+{ 
+                                          yyLineNr++; 
+                                        }
+	YY_BREAK
+case 502:
+YY_RULE_SETUP
+#line 4420 "scanner.l"
+{
+  					  warn(yyFileName,yyLineNr,
+                                               "Warning: missing argument after "
+					       "\\package."
+                                              );
+  					  yyLineNr++;
+  					}
+	YY_BREAK
+case 503:
+YY_RULE_SETUP
+#line 4427 "scanner.l"
+{
+					  current->name = yytext;
+					  prependScope();
+					  BEGIN( ClassDocArg2 );
+   					}
+	YY_BREAK
+case 504:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 4432 "scanner.l"
+{
+					  current->name = yytext;
+					  // prepend outer scope name 
+					  prependScope();
+					  lastClassTemplSpecContext = ClassDocArg2;
+					  BEGIN( ClassTemplSpec );
+  					}
+	YY_BREAK
+case 505:
+YY_RULE_SETUP
+#line 4439 "scanner.l"
+{
+					  current->name = yytext;
+					  if (current->section==Entry::PROTOCOLDOC_SEC)
+					  {
+					    current->name+="-p";
+					  }
+					  // prepend outer scope name 
+					  prependScope();
+					  BEGIN( ClassDocArg2 );
+					}
+	YY_BREAK
+case 506:
+YY_RULE_SETUP
+#line 4449 "scanner.l"
+{ 
+                                          yyLineNr++; 
+                                        }
+	YY_BREAK
+case 507:
+YY_RULE_SETUP
+#line 4452 "scanner.l"
+{
+  					  warn(yyFileName,yyLineNr,
+                                               "Warning: missing argument after "
+					       "\\class."
+                                              );
+  					  yyLineNr++;
+					  
+  					}
+	YY_BREAK
+case 508:
+YY_RULE_SETUP
+#line 4460 "scanner.l"
+{
+  					  warn(yyFileName,yyLineNr,
+                                               "Warning: missing argument after "
+					       "\\category."
+                                              );
+  					  yyLineNr++;
+					  
+  					}
+	YY_BREAK
+case 509:
+YY_RULE_SETUP
+#line 4468 "scanner.l"
+{ 
+  					  current->name = yytext;
+					  lastDefGroup.groupname = yytext;
+					  lastDefGroup.pri = current->groupingPri();
+  					  // the .html stuff is for Qt compatibility
+					  if (current->name.right(5)==".html") 
+					    current->name=current->name.left(current->name.length()-5);
+					  BEGIN(GroupDocArg2);
+  					}
+	YY_BREAK
+case 510:
+YY_RULE_SETUP
+#line 4477 "scanner.l"
+{ yyLineNr++; 
+                                        }
+	YY_BREAK
+case 511:
+YY_RULE_SETUP
+#line 4479 "scanner.l"
+{
+  					  warn(yyFileName,yyLineNr,
+                                               "Warning: missing group name after %s",
+					       current->groupDocCmd()
+                                              );
+					  yyLineNr++;
+					  BEGIN( Doc );
+  					}
+	YY_BREAK
+case 512:
+YY_RULE_SETUP
+#line 4487 "scanner.l"
+{
+                                          // fake input for end of title rule
+                                          yyLineNr--;
+  					  unput('/');unput('*');unput('\n');
+  					}
+	YY_BREAK
+case 513:
+YY_RULE_SETUP
+#line 4492 "scanner.l"
+{ yyLineNr++; 
+                                        }
+	YY_BREAK
+case 514:
+YY_RULE_SETUP
+#line 4494 "scanner.l"
+{
+					  current->type += yytext;
+					  current->type = current->type.stripWhiteSpace();
+  					}
+	YY_BREAK
+case 515:
+YY_RULE_SETUP
+#line 4498 "scanner.l"
+{
+                                          if( current->groupDocType == Entry::GROUPDOC_NORMAL &&
+                                              current->type.length() == 0 )
+  					    warn(yyFileName,yyLineNr,
+                                                 "Warning: missing title after "
+					         "\\defgroup %s", current->name.data()
+                                                );
+  					  yyLineNr++; 
+ 					  newDocState();
+  					}
+	YY_BREAK
+case 516:
+YY_RULE_SETUP
+#line 4508 "scanner.l"
+{
+  					  //printf("ClassDocArg2=%s\n",yytext);
+					  current->includeFile = stripQuotes(yytext);
+					  BEGIN( ClassDocArg3 );
+					}
+	YY_BREAK
+case 517:
+YY_RULE_SETUP
+#line 4513 "scanner.l"
+{ yyLineNr++; 
+                                        }
+	YY_BREAK
+case 518:
+YY_RULE_SETUP
+#line 4515 "scanner.l"
+{ yyLineNr++; 
+					  newDocState();
+					}
+	YY_BREAK
+case 519:
+YY_RULE_SETUP
+#line 4518 "scanner.l"
+{
+					  newDocState();
+  					  unput('/');unput('*');
+  					}
+	YY_BREAK
+case 520:
+YY_RULE_SETUP
+#line 4522 "scanner.l"
+{
+  					  //printf("ClassDocArg3=%s\n",yytext);
+ 					  current->includeName = yytext;
+  					  newDocState();
+					}
+	YY_BREAK
+case 521:
+YY_RULE_SETUP
+#line 4527 "scanner.l"
+{ yyLineNr++;
+                                        }
+	YY_BREAK
+case 522:
+YY_RULE_SETUP
+#line 4529 "scanner.l"
+{ yyLineNr++; 
+  					  newDocState();
+					}
+	YY_BREAK
+case 523:
+YY_RULE_SETUP
+#line 4532 "scanner.l"
+{
+					  newDocState();
+  					  unput('/');unput('*');
+  					}
+	YY_BREAK
+case 524:
+YY_RULE_SETUP
+#line 4536 "scanner.l"
+{
+  					  current->name = stripQuotes(yytext);
+					  newDocState();
+  				        }
+	YY_BREAK
+case 525:
+YY_RULE_SETUP
+#line 4540 "scanner.l"
+{ yyLineNr++;
+                                        }
+	YY_BREAK
+case 526:
+YY_RULE_SETUP
+#line 4542 "scanner.l"
+{
+  					  current->name = yyFileName;
+  					  yyLineNr++;
+					  newDocState();
+  					}
+	YY_BREAK
+case 527:
+YY_RULE_SETUP
+#line 4547 "scanner.l"
+{
+					  current->name = stripQuotes(yytext);
+					  BEGIN( PageDocArg2 ); 
+					}
+	YY_BREAK
+case 528:
+YY_RULE_SETUP
+#line 4551 "scanner.l"
+{ yyLineNr++; 
+					  current->doc+="\n";
+                                        }
+	YY_BREAK
+case 529:
+YY_RULE_SETUP
+#line 4554 "scanner.l"
+{
+  					  warn(yyFileName,yyLineNr,
+                                               "Warning: missing argument after "
+					       "\\page."
+                                              );
+					  current->doc+="\n";
+  					  yyLineNr++;
+					  BEGIN( Doc );
+  					}
+	YY_BREAK
+case 530:
+YY_RULE_SETUP
+#line 4563 "scanner.l"
+{
+  				          yyLineNr++;
+					  current->args = yytext;
+					  current->doc+="\n";
+					  BEGIN( PageDoc );
+					}
+	YY_BREAK
+case 531:
+YY_RULE_SETUP
+#line 4569 "scanner.l"
+{
+  					  current->name = yytext;
+					  prependScope();
+  					  newDocState();
+  					}
+	YY_BREAK
+case 532:
+YY_RULE_SETUP
+#line 4574 "scanner.l"
+{ yyLineNr++;
+					  current->doc+="\n";
+                                        }
+	YY_BREAK
+case 533:
+YY_RULE_SETUP
+#line 4577 "scanner.l"
+{
+  					  warn(yyFileName,yyLineNr,
+                                               "Warning: missing argument after \\enum."
+                                              );
+					  current->doc+="\n";
+  					  yyLineNr++;
+					  BEGIN( Doc );
+  					}
+	YY_BREAK
+case 534:
+YY_RULE_SETUP
+#line 4585 "scanner.l"
+{
+  					  current->doc+=yytext;
+  					}
+	YY_BREAK
+case 535:
+YY_RULE_SETUP
+#line 4588 "scanner.l"
+{
+  					  //sectionType=SectionInfo::Section;
+					  current->doc+=yytext;
+  					  BEGIN(SectionLabel);
+  					}
+	YY_BREAK
+case 536:
+YY_RULE_SETUP
+#line 4593 "scanner.l"
+{
+  					  //sectionType=SectionInfo::Subsection;
+					  current->doc+=yytext;
+  					  BEGIN(SectionLabel);
+  					}
+	YY_BREAK
+case 537:
+YY_RULE_SETUP
+#line 4598 "scanner.l"
+{
+  					  //sectionType=SectionInfo::Subsubsection;
+					  current->doc+=yytext;
+  					  BEGIN(SectionLabel);
+  					}
+	YY_BREAK
+case 538:
+YY_RULE_SETUP
+#line 4603 "scanner.l"
+{
+  					  //sectionType=SectionInfo::Paragraph;
+					  current->doc+=yytext;
+  					  BEGIN(SectionLabel);
+  					}
+	YY_BREAK
+case 539:
+YY_RULE_SETUP
+#line 4608 "scanner.l"
+{ memberGroupHeader+=*yytext; }
+	YY_BREAK
+case 540:
+YY_RULE_SETUP
+#line 4609 "scanner.l"
+{
+  					  unput('/');unput('*');
+					  //printf("Found memberGroup=`%s'\n",memberGroupHeader.data());
+					  startGroupInDoc();
+					  newDocState();
+  					}
+	YY_BREAK
+case 541:
+YY_RULE_SETUP
+#line 4615 "scanner.l"
+{
+  					  yyLineNr++;
+					  current->doc+="\n";
+					  //printf("Found memberGroup=`%s'\n",memberGroupHeader.data());
+					  startGroupInDoc();
+					  newDocState();
+  					}
+	YY_BREAK
+case 542:
+YY_RULE_SETUP
+#line 4622 "scanner.l"
+{
+  					  //printf("StoreGroupDocs memberGroupId=%d brief=`%s' doc=`%s'!\n",memberGroupId,current->brief.data(),current->doc.data());
+					  memberGroupDocs=current->brief.stripWhiteSpace();
+					  current->doc = current->doc.stripWhiteSpace();
+					  if (!memberGroupDocs.isEmpty() && !current->doc.isEmpty())
+					  {
+					    memberGroupDocs+="\n\n";
+					  }
+					  memberGroupDocs+=current->doc;
+					  //Doxygen::memberDocDict.insert(memberGroupId,
+					  //    new QCString(memberGroupDocs)
+					  //    );
+					  MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(memberGroupId);
+					  if (info) 
+					  {
+					    info->doc = memberGroupDocs;
+					    info->docFile = yyFileName;
+					  }
+					  current->doc.resize(0);
+					  current->brief.resize(0);
+					  BEGIN(lastDocContext);
+  					}
+	YY_BREAK
+case 543:
+YY_RULE_SETUP
+#line 4644 "scanner.l"
+{
+  					  lastAnchorContext = YY_START;
+  					  //sectionType=SectionInfo::Anchor;
+					  current->doc+=yytext;
+					  BEGIN(AnchorLabel);
+  					}
+	YY_BREAK
+case 544:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 4650 "scanner.l"
+{
+					  current->doc+=yytext;
+					}
+	YY_BREAK
+case 545:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 4653 "scanner.l"
+{
+					  current->brief+=yytext;
+					}
+	YY_BREAK
+case 546:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 4656 "scanner.l"
+{
+					  lastVerbState=YY_START;
+					  current->doc+="\\verbatim";
+					  g_skipBlockName="verbatim";
+  					  BEGIN(SkipVerbatim);
+  					}
+	YY_BREAK
+case 547:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 4662 "scanner.l"
+{
+					  lastVerbState=YY_START;
+					  current->brief+="\\verbatim";
+					  g_skipBlockName="verbatim";
+  					  BEGIN(SkipVerbatim);
+  					}
+	YY_BREAK
+case 548:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 4668 "scanner.l"
+{
+					  lastVerbState=YY_START;
+					  current->doc+="\\latexonly";
+					  g_skipBlockName="latexonly";
+  					  BEGIN(SkipVerbatim);
+  					}
+	YY_BREAK
+case 549:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 4674 "scanner.l"
+{
+					  lastVerbState=YY_START;
+					  current->brief+="\\latexonly";
+					  g_skipBlockName="latexonly";
+  					  BEGIN(SkipVerbatim);
+  					}
+	YY_BREAK
+case 550:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 4680 "scanner.l"
+{
+					  lastVerbState=YY_START;
+					  current->doc+="\\htmlonly";
+					  g_skipBlockName="htmlonly";
+  					  BEGIN(SkipVerbatim);
+  					}
+	YY_BREAK
+case 551:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 4686 "scanner.l"
+{
+					  lastVerbState=YY_START;
+					  current->brief+="\\htmlonly";
+					  g_skipBlockName="htmlonly";
+  					  BEGIN(SkipVerbatim);
+  					}
+	YY_BREAK
+case 552:
+YY_RULE_SETUP
+#line 4692 "scanner.l"
+{
+  					  current->doc+=yytext;
+  					}
+	YY_BREAK
+case 553:
+YY_RULE_SETUP
+#line 4695 "scanner.l"
+{
+  					  current->brief+=yytext;
+  					}
+	YY_BREAK
+case 554:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 4698 "scanner.l"
+{
+  					  current->doc+="\\\\code";
+  					}
+	YY_BREAK
+case 555:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 4701 "scanner.l"
+{
+  					  current->brief+="\\\\code";
+  					}
+	YY_BREAK
+case 556:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 4704 "scanner.l"
+{
+  					  lastCodeState=YY_START;
+					  current->doc+="\\code";
+					  pSkipDoc=&current->doc;
+					  g_skipBlockName="code";
+					  BEGIN(SkipCode);
+					}
+	YY_BREAK
+case 557:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 4711 "scanner.l"
+{
+  					  lastCodeState=YY_START;
+					  current->brief+="\\code";
+					  pSkipDoc=&current->brief;
+					  g_skipBlockName="code";
+					  BEGIN(SkipCode);
+					}
+	YY_BREAK
+case 558:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 4718 "scanner.l"
+{
+  					  current->doc+="\\\\dot";
+  					}
+	YY_BREAK
+case 559:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 4721 "scanner.l"
+{
+  					  current->brief+="\\\\dot";
+  					}
+	YY_BREAK
+case 560:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 4724 "scanner.l"
+{
+					  lastCodeState=YY_START;
+					  current->doc+="\\dot";
+					  pSkipDoc=&current->doc;
+					  g_skipBlockName="dot";
+  					  BEGIN(SkipCode);
+  					}
+	YY_BREAK
+case 561:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 4731 "scanner.l"
+{
+					  lastCodeState=YY_START;
+					  current->brief+="\\dot";
+					  pSkipDoc=&current->brief;
+					  g_skipBlockName="dot";
+  					  BEGIN(SkipCode);
+  					}
+	YY_BREAK
+case 562:
+YY_RULE_SETUP
+#line 4738 "scanner.l"
+{
+  					  lastCodeState=YY_START;
+					  current->doc+="<PRE>";
+					  pSkipDoc=&current->doc;
+					  g_skipBlockName="pre";
+					  BEGIN(SkipCode);
+  					}
+	YY_BREAK
+case 563:
+YY_RULE_SETUP
+#line 4745 "scanner.l"
+{
+  					  lastCodeState=YY_START;
+					  current->brief+="<PRE>";
+					  pSkipDoc=&current->brief;
+					  g_skipBlockName="pre";
+					  BEGIN(SkipCode);
+  					}
+	YY_BREAK
+case 564:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 4752 "scanner.l"
+{
+  					  current->doc+=yytext;
+  					  BEGIN(lastVerbState);
+  					}
+	YY_BREAK
+case 565:
+YY_RULE_SETUP
+#line 4756 "scanner.l"
+{
+  					  current->doc+=yytext;
+  					}
+	YY_BREAK
+case 566:
+YY_RULE_SETUP
+#line 4759 "scanner.l"
+{
+  					  if (!removeSlashes)
+					    current->doc+=yytext;
+  					}
+	YY_BREAK
+/*
+<SkipVerbatim>^"//"({B}*"*"+)?		{
+  					  if (!removeSlashes)
+					    current->doc+=yytext;
+  					}
+<SkipVerbatim>^{B}*"*"+			
+  */
+case 567:
+YY_RULE_SETUP
+#line 4770 "scanner.l"
+{ 
+  					  current->doc+=yytext; 
+  					}
+	YY_BREAK
+case 568:
+YY_RULE_SETUP
+#line 4773 "scanner.l"
+{
+  					  yyLineNr++;
+					  current->doc+=*yytext;
+  					}
+	YY_BREAK
+case 569:
+YY_RULE_SETUP
+#line 4777 "scanner.l"
+{
+  					  current->doc+=*yytext;
+  					}
+	YY_BREAK
+case YY_STATE_EOF(SkipVerbatim):
+#line 4780 "scanner.l"
+{
+  					  warn(yyFileName,yyLineNr,
+                                               "Warning: reached end of file while inside a @%s block; check for missing @end%s tag!",g_skipBlockName.data(),g_skipBlockName.data()
+                                              );
+					  yyterminate();
+  					}
+	YY_BREAK
+case 570:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 4786 "scanner.l"
+{
+  					  *pSkipDoc+="\\endcode";
+					  if (g_skipBlockName=="code")
+					  {
+					    BEGIN(lastCodeState);
+					  }
+  					}
+	YY_BREAK
+case 571:
+YY_RULE_SETUP
+#line 4793 "scanner.l"
+{
+  					  *pSkipDoc+="</PRE>";
+					  if (g_skipBlockName=="pre")
+					  {
+					    BEGIN(lastCodeState);
+					  }
+  					}
+	YY_BREAK
+case 572:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 4800 "scanner.l"
+{
+  					  *pSkipDoc+="\\enddot";
+					  if (g_skipBlockName=="dot")
+					  {
+					    BEGIN(lastCodeState);
+					  }
+  					}
+	YY_BREAK
+case 573:
+YY_RULE_SETUP
+#line 4807 "scanner.l"
+{
+  					  if (!removeSlashes)
+					    *pSkipDoc+=yytext;
+  					}
+	YY_BREAK
+case 574:
+YY_RULE_SETUP
+#line 4811 "scanner.l"
+
+	YY_BREAK
+case 575:
+YY_RULE_SETUP
+#line 4812 "scanner.l"
+{
+  					  *pSkipDoc+=yytext;
+  					}
+	YY_BREAK
+case 576:
+YY_RULE_SETUP
+#line 4815 "scanner.l"
+{
+  					  *pSkipDoc+=yytext;
+  					}
+	YY_BREAK
+case 577:
+YY_RULE_SETUP
+#line 4818 "scanner.l"
+{
+  					  *pSkipDoc+=yytext;
+  					}
+	YY_BREAK
+case 578:
+YY_RULE_SETUP
+#line 4821 "scanner.l"
+{
+  					  yyLineNr++;
+					  *pSkipDoc+=*yytext;
+  					}
+	YY_BREAK
+case 579:
+YY_RULE_SETUP
+#line 4825 "scanner.l"
+{
+  					  *pSkipDoc+=*yytext;
+  					}
+	YY_BREAK
+case YY_STATE_EOF(SkipCode):
+#line 4828 "scanner.l"
+{
+  					  warn(yyFileName,yyLineNr,
+                                               "Warning: reached end of file while inside a @%s block; check for missing @end%s tag!",
+					       g_skipBlockName.data(),
+					       g_skipBlockName.data()
+                                              );
+					  yyterminate();
+  					}
+	YY_BREAK
+case 580:
+YY_RULE_SETUP
+#line 4836 "scanner.l"
+{
+                                          SectionInfo  *si = new SectionInfo(yyFileName,yytext,0,SectionInfo::Anchor);
+                                          Doxygen::sectionDict.insert(yytext,si);
+  					  current->anchors->append(si);
+                                          current->doc+=yytext;
+					  BEGIN(lastAnchorContext);
+  					}
+	YY_BREAK
+case 581:
+YY_RULE_SETUP
+#line 4843 "scanner.l"
+{
+  					  sectionLabel=yytext;
+					  sectionTitle.resize(0);
+                                          current->doc+=yytext;
+					  BEGIN(SectionTitle);
+  					}
+	YY_BREAK
+case 582:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 4849 "scanner.l"
+{
+					  sectionTitle+=yytext;
+					  sectionTitle=sectionTitle.stripWhiteSpace();
+					  //printf("Adding new section file=%s label=%s title=%s\n",yyFileName,sectionLabel.data(),sectionTitle.data()); 
+  					  SectionInfo *si = new SectionInfo(yyFileName,sectionLabel,sectionTitle,SectionInfo::Anchor);
+  					  current->anchors->append(si);
+                                          Doxygen::sectionDict.insert(yytext,si);
+                                          current->doc+=yytext;
+					  BEGIN(PageDoc);
+  					}
+	YY_BREAK
+case 583:
+YY_RULE_SETUP
+#line 4859 "scanner.l"
+{
+  					  sectionTitle+=yytext;
+                                          current->doc+=yytext;
+  					}
+	YY_BREAK
+case 584:
+YY_RULE_SETUP
+#line 4863 "scanner.l"
+{
+  					  sectionTitle+=yytext;
+                                          current->doc+=yytext;
+  					}
+	YY_BREAK
+case 585:
+YY_RULE_SETUP
+#line 4867 "scanner.l"
+{ yyLineNr++ ; current->doc+=yytext; }
+	YY_BREAK
+case 586:
+YY_RULE_SETUP
+#line 4868 "scanner.l"
+{ current->doc += yytext; }
+	YY_BREAK
+case 587:
+YY_RULE_SETUP
+#line 4869 "scanner.l"
+{
+  							  lastGroupContext = YY_START;
+							  lineCount();
+							  BEGIN( GroupName );
+  							}
+	YY_BREAK
+case 588:
+YY_RULE_SETUP
+#line 4874 "scanner.l"
+{
+                                                          if (memberGroupId==DOX_NOGROUP && current->section==Entry::GROUPDOC_SEC)
+							  {
+							    startGroupInDoc();
+							  }
+  							}
+	YY_BREAK
+case 589:
+YY_RULE_SETUP
+#line 4880 "scanner.l"
+{
+                                                          if (memberGroupId==DOX_NOGROUP && autoGroupStack.isEmpty())
+                                                          {
+                                                             warn(yyFileName,yyLineNr,
+	                                                          "Warning: end of group without matching begin.");
+                                                          }
+                                                          //printf("end of member group marker ends group %d\n",memberGroupId);
+  							  endGroup();
+                                                          memberGroupHeader.resize(0);
+  							}
+	YY_BREAK
+case 590:
+YY_RULE_SETUP
+#line 4890 "scanner.l"
+{ current->doc += yytext; }
+	YY_BREAK
+case 591:
+YY_RULE_SETUP
+#line 4891 "scanner.l"
+
+	YY_BREAK
+case 592:
+YY_RULE_SETUP
+#line 4892 "scanner.l"
+{ current->doc += yytext; }
+	YY_BREAK
+case 593:
+YY_RULE_SETUP
+#line 4893 "scanner.l"
+{ current->brief += yytext; }
+	YY_BREAK
+case 594:
+YY_RULE_SETUP
+#line 4894 "scanner.l"
+{
+							  current->doc += yytext; 
+							}
+	YY_BREAK
+case 595:
+YY_RULE_SETUP
+#line 4897 "scanner.l"
+{ 
+  							  lastFormulaContext = YY_START;
+  							  formulaText="$"; 
+							  insideFormula=TRUE;
+							  BEGIN(ReadFormulaShort); 
+							}
+	YY_BREAK
+case 596:
+YY_RULE_SETUP
+#line 4903 "scanner.l"
+{ 
+  							  lastFormulaContext = YY_START;
+  							  formulaText="\\["; 
+							  insideFormula=TRUE;
+							  BEGIN(ReadFormulaLong); 
+							}
+	YY_BREAK
+case 597:
+YY_RULE_SETUP
+#line 4909 "scanner.l"
+{
+  							  formulaText+="$";
+							  if (lastFormulaContext==ClassDocBrief || 
+							      lastFormulaContext==LineDoc || 
+							      lastFormulaContext==JavaDoc || 
+							      lastFormulaContext==AfterDocBrief ||
+							      lastFormulaContext==AfterDocLine
+							     )
+							  {
+							    current->brief += addFormula();
+							  }
+							  else if (lastFormulaContext==CopyArgComment ||
+							           lastFormulaContext==CopyArgCommentLine)
+							  {
+							    fullArgString += addFormula();
+							  }
+							  else
+							  {
+							    current->doc += addFormula();
+							  }
+							  insideFormula=FALSE;
+							  BEGIN(lastFormulaContext);
+  							}
+	YY_BREAK
+case 598:
+YY_RULE_SETUP
+#line 4932 "scanner.l"
+{
+  							  formulaText+=" ";
+							  yyLineNr++;
+							  if (lastFormulaContext==LineDoc || 
+							      lastFormulaContext==AfterDocLine
+							     )
+							  {
+							    checkFormula();
+							    insideFormula=FALSE;
+							    BEGIN(lastFormulaContext);
+							  }
+  							}
+	YY_BREAK
+case 599:
+YY_RULE_SETUP
+#line 4944 "scanner.l"
+{
+							  formulaText+="\\]";
+							  if (lastFormulaContext==ClassDocBrief ||
+							      lastFormulaContext==LineDoc ||
+							      lastFormulaContext==JavaDoc ||
+							      lastFormulaContext==AfterDocBrief ||
+							      lastFormulaContext==AfterDocLine
+							     )
+							  {
+							    current->brief += addFormula();
+							  }
+							  else if (lastFormulaContext==CopyArgComment ||
+							           lastFormulaContext==CopyArgCommentLine)
+							  {
+							    fullArgString += addFormula();
+							  }
+							  else
+							  {
+							    current->doc += addFormula();
+							  }
+							  insideFormula=FALSE;
+							  BEGIN(lastFormulaContext);
+  							}
+	YY_BREAK
+case 600:
+YY_RULE_SETUP
+#line 4967 "scanner.l"
+{ formulaText+=*yytext; yyLineNr++; }
+	YY_BREAK
+case 601:
+YY_RULE_SETUP
+#line 4968 "scanner.l"
+{ formulaText+=*yytext; }
+	YY_BREAK
+case 602:
+YY_RULE_SETUP
+#line 4969 "scanner.l"
+{
+  					  checkDocs();
+					  //printf("current->section=%x\n",current->section);
+					  if (YY_START==SkipCode) // premature end of code block
+					  {
+					    err("Error: comment block ended inside \\code ... \\endcode block at line %d in %s!\n",
+						yyLineNr,yyFileName);
+					    *pSkipDoc += "\\endcode\n\n";
+					    BEGIN( lastDocContext );
+					  }
+					  else if (YY_START==ClassDocBrief &&
+					      lastBriefContext==TodoParam)
+					  {
+					    unput('/');unput('*'); // make sure we have something to read
+					    BEGIN( TodoParam );
+					  }
+					  else if (YY_START==ClassDocBrief &&
+					      lastBriefContext==TestParam)
+					  {
+					    unput('/');unput('*'); // make sure we have something to read
+					    BEGIN( TestParam );
+					  }
+					  else if (YY_START==ClassDocBrief &&
+					      lastBriefContext==BugParam)
+					  {
+					    unput('/');unput('*'); // make sure we have something to read
+					    BEGIN( BugParam );
+					  }
+					  else if (YY_START==ClassDocBrief &&
+					      lastBriefContext==DeprecatedParam)
+					  {
+					    unput('/');unput('*'); // make sure we have something to read
+					    BEGIN( DeprecatedParam );
+					  }
+					  else if (YY_START==ClassDocBrief &&
+					      lastBriefContext==XRefItemParam4)
+					  {
+					    unput('/');unput('*'); // make sure we have something to read
+					    BEGIN( XRefItemParam4 );
+					  }
+					  else if (YY_START==ClassDocBrief &&
+					      lastBriefContext==Doc)
+					  {
+					    //printf("Add docs %s\n",current->doc.data());
+  					    current->doc += "\n\n";
+  					    BEGIN( lastDocContext ); 
+					  }
+					  else if (current->section==Entry::MEMBERGRP_SEC)
+					  {
+					    unput('$');
+					    BEGIN( StoreGroupDocs );
+					  }
+					  else
+					  {
+  					    current->doc += "\n\n";
+					    //printf("Add docs for %s\n",current->name.data());
+					    current_root->addSubEntry(current);
+					    current = new Entry ;
+					    initEntry();
+					    BEGIN( FindMembers );
+					  }
+					}
+	YY_BREAK
+case 603:
+YY_RULE_SETUP
+#line 5031 "scanner.l"
+{ 
+  					  current->args.resize(0); 
+					  current->argList->clear();
+  					  BEGIN( PageDocTitle); 
+					}
+	YY_BREAK
+case 604:
+YY_RULE_SETUP
+#line 5036 "scanner.l"
+{ yyLineNr++; current->args+=" "; }
+	YY_BREAK
+case 605:
+YY_RULE_SETUP
+#line 5037 "scanner.l"
+{ current->args+=yytext; }
+	YY_BREAK
+case 606:
+YY_RULE_SETUP
+#line 5038 "scanner.l"
+{ BEGIN( PageDoc ); }
+	YY_BREAK
+/* escaped versions of the conditional commands (for putting them in the docs) */
+case 607:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 5041 "scanner.l"
+{ current->doc+=yytext; }
+	YY_BREAK
+case 608:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 5042 "scanner.l"
+{ current->doc+=yytext; }
+	YY_BREAK
+case 609:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 5043 "scanner.l"
+{ current->doc+=yytext; }
+	YY_BREAK
+case 610:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 5044 "scanner.l"
+{ current->doc+=yytext; }
+	YY_BREAK
+case 611:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 5045 "scanner.l"
+{ current->doc+=yytext; }
+	YY_BREAK
+case 612:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 5046 "scanner.l"
+{ current->brief+=yytext; }
+	YY_BREAK
+case 613:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 5047 "scanner.l"
+{ current->brief+=yytext; }
+	YY_BREAK
+case 614:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 5048 "scanner.l"
+{ current->brief+=yytext; }
+	YY_BREAK
+case 615:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 5049 "scanner.l"
+{ current->brief+=yytext; }
+	YY_BREAK
+case 616:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 5050 "scanner.l"
+{ current->brief+=yytext; }
+	YY_BREAK
+/* conditional commands */
+case 617:
+YY_RULE_SETUP
+#line 5053 "scanner.l"
+{
+                                          lastIfContext = YY_START;
+					  BEGIN(IfGuard);
+  					}
+	YY_BREAK
+case 618:
+YY_RULE_SETUP
+#line 5057 "scanner.l"
+{
+                                          lastIfContext = YY_START;
+					  BEGIN(IfNotGuard);
+  					}
+	YY_BREAK
+case 619:
+#line 5062 "scanner.l"
+case 620:
+YY_RULE_SETUP
+#line 5062 "scanner.l"
+{
+  					  warn(yyFileName,yyLineNr,"Missing guard for if statement!");
+					  yyLineNr++;
+					}  
+	YY_BREAK
+case 621:
+YY_RULE_SETUP
+#line 5066 "scanner.l"
+{
+  					  if (Config_getList("ENABLED_SECTIONS").find(yytext)==-1) // not enabled
+					  {
+					    BEGIN(SkipSection);
+  					    depthIf=1;
+					  }
+					  else // section enabled
+					  {
+					    BEGIN(lastIfContext);
+					  }
+  					}
+	YY_BREAK
+case 622:
+YY_RULE_SETUP
+#line 5077 "scanner.l"
+{
+  					  warn(yyFileName,yyLineNr,"Missing guard for ifnot statement!");
+					  yyLineNr++;
+					}  
+	YY_BREAK
+case 623:
+YY_RULE_SETUP
+#line 5081 "scanner.l"
+{
+  					  if (Config_getList("ENABLED_SECTIONS").find(yytext)==-1) // not enabled
+					  {
+					    BEGIN(lastIfContext);
+					  }
+					  else // section enabled
+					  {
+  					    depthIf=1;
+					    BEGIN(SkipSection);
+					  }
+  					}
+	YY_BREAK
+case 624:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 5092 "scanner.l"
+{
+  					  depthIf++;
+  					}
+	YY_BREAK
+case 625:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 5095 "scanner.l"
+{
+  					  if (--depthIf<=0)
+					  {
+					    BEGIN(lastIfContext);
+					  }
+  					}
+	YY_BREAK
+case 626:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 5101 "scanner.l"
+{
+  					  if (depthIf==1)
+					  {
+					    depthIf=0;
+					    BEGIN(lastIfContext);
+					  }
+  					}
+	YY_BREAK
+case 627:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 5108 "scanner.l"
+{
+  					  if (depthIf==1)
+					  {
+					    BEGIN(IfGuard);
+					  }
+  					}
+	YY_BREAK
+case 628:
+YY_RULE_SETUP
+#line 5114 "scanner.l"
+{
+					  BEGIN( SkipSection );
+  					}
+	YY_BREAK
+case 629:
+YY_RULE_SETUP
+#line 5117 "scanner.l"
+{
+					  BEGIN( SkipSection );
+  					}
+	YY_BREAK
+case 630:
+YY_RULE_SETUP
+#line 5120 "scanner.l"
+{
+  					  yyLineNr++;
+  					}
+	YY_BREAK
+case 631:
+YY_RULE_SETUP
+#line 5123 "scanner.l"
+
+	YY_BREAK
+case 632:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 5124 "scanner.l"
+{
+                                          // previous section enabled => skip now
+  					  depthIf=1;
+  					  BEGIN(SkipSection);
+  					}
+	YY_BREAK
+case 633:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 5129 "scanner.l"
+{
+                                          // section was enabled => skip now
+  					  depthIf=1;
+  					  BEGIN(SkipSection);
+  					}
+	YY_BREAK
+case 634:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 5134 "scanner.l"
+{
+                                          // section enabled => absorb endif
+  					}
+	YY_BREAK
+case 635:
+YY_RULE_SETUP
+#line 5139 "scanner.l"
+{ 
+  					  lastGroupContext = YY_START;
+  					  lineCount();
+  					  BEGIN( GroupName ); 
+					}
+	YY_BREAK
+case 636:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 5144 "scanner.l"
+{
+                                          current->subGrouping = FALSE; 
+                                        }
+	YY_BREAK
+case 637:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 5147 "scanner.l"
+{
+					  current->initLines = 100000; // ON
+  					}
+	YY_BREAK
+case 638:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 5150 "scanner.l"
+{
+					  current->initLines = 0; // OFF
+  					}
+	YY_BREAK
+case 639:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 5153 "scanner.l"
+{
+					  current->callGraph = TRUE; // ON
+  					}
+	YY_BREAK
+case 640:
+YY_RULE_SETUP
+#line 5156 "scanner.l"
+{
+  					  current->groups->append(
+					    new Grouping(yytext, Grouping::GROUPING_INGROUP)
+					  );
+  					}
+	YY_BREAK
+case 641:
+YY_RULE_SETUP
+#line 5161 "scanner.l"
+{
+  					  yyLineNr++; 
+					  BEGIN( lastGroupContext );
+  					}
+	YY_BREAK
+case 642:
+YY_RULE_SETUP
+#line 5165 "scanner.l"
+{
+  					  unput('/');unput('*');
+					  BEGIN( lastGroupContext );
+  					}
+	YY_BREAK
+case 643:
+YY_RULE_SETUP
+#line 5169 "scanner.l"
+{ 
+  					  lastBriefContext=YY_START;
+					  current->briefFile = yyFileName;
+					  current->briefLine = yyLineNr;
+  					  BEGIN( ClassDocBrief ); 
+					}
+	YY_BREAK
+case 644:
+YY_RULE_SETUP
+#line 5175 "scanner.l"
+{ BEGIN( DocBaseClass ); }
+	YY_BREAK
+case 645:
+YY_RULE_SETUP
+#line 5176 "scanner.l"
+{
+					  //printf("Adding base class %s\n",yytext);
+					  current->extends->append(
+					    new BaseInfo(removeRedundantWhiteSpace(yytext),Public,Normal)
+					  );
+					}
+	YY_BREAK
+case 646:
+YY_RULE_SETUP
+#line 5182 "scanner.l"
+{ yyLineNr++; BEGIN( ClassDoc ); }
+	YY_BREAK
+case 647:
+YY_RULE_SETUP
+#line 5183 "scanner.l"
+{ 
+					  //if (!current->doc.isEmpty()) current->doc+=" <p>";
+					  if (lastBriefContext==TodoParam || 
+					      lastBriefContext==TestParam || 
+					      lastBriefContext==BugParam ||
+					      lastBriefContext==DeprecatedParam ||
+					      lastBriefContext==XRefItemParam4
+					     )
+					  {
+					    unput('\n');
+					  }
+					  else
+					  {
+  					    current->brief=current->brief.stripWhiteSpace();
+					    if (yytext[yyleng-1]=='\n') yyLineNr++;
+					  }
+					  BEGIN( lastBriefContext );
+					}
+	YY_BREAK
+case 648:
+YY_RULE_SETUP
+#line 5201 "scanner.l"
+{ 
+					  // allow \todo in brief description
+					  if (lastBriefContext==TodoParam &&
+					      (slStartContext==LineDoc ||
+					       slStartContext==AfterDocLine
+					      )
+					     )
+					  {
+					    unput('\n'); // make sure we have something to read
+					    BEGIN( TodoParam );
+					  }
+					  else if
+					     (lastBriefContext==TestParam &&
+					      (slStartContext==LineDoc ||
+					       slStartContext==AfterDocLine
+					      )
+					     )
+					  {
+					    unput('\n'); // make sure we have something to read
+					    BEGIN( TestParam );
+					  }
+					  else if
+					     (lastBriefContext==BugParam &&
+					      (slStartContext==LineDoc ||
+					       slStartContext==AfterDocLine
+					      )
+					     )
+					  {
+					    unput('\n'); // make sure we have something to read
+					    BEGIN( BugParam );
+					  }
+					  else if
+					     (lastBriefContext==DeprecatedParam &&
+					      (slStartContext==LineDoc ||
+					       slStartContext==AfterDocLine
+					      )
+					     )
+					  {
+					    unput('\n'); // make sure we have something to read
+					    BEGIN( DeprecatedParam );
+					  }
+					  else if
+					     (lastBriefContext==XRefItemParam4 &&
+					      (slStartContext==LineDoc ||
+					       slStartContext==AfterDocLine
+					      )
+					     )
+					  {
+					    unput('\n'); // make sure we have something to read
+					    BEGIN( XRefItemParam4 );
+					  }
+					  else
+					  {
+					    current->brief += "\n"; 
+					    if (!current->doc.stripWhiteSpace().isEmpty())
+					    {
+					      current->doc += "<p>";
+					    }
+  					    yyLineNr++ ; 
+					  }
+					}
+	YY_BREAK
+case 649:
+YY_RULE_SETUP
+#line 5262 "scanner.l"
+
+	YY_BREAK
+case 650:
+#line 5264 "scanner.l"
+case 651:
+YY_RULE_SETUP
+#line 5264 "scanner.l"
+{ 
+  					  current->brief=current->brief.stripWhiteSpace();
+                                          BEGIN( lastBriefContext ); 
+                                        }
+	YY_BREAK
+case 652:
+YY_RULE_SETUP
+#line 5268 "scanner.l"
+{
+  					  //lastBriefContext=YY_START;
+					}
+	YY_BREAK
+case 653:
+YY_RULE_SETUP
+#line 5271 "scanner.l"
+{ current->brief += *yytext; }
+	YY_BREAK
+case 654:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 5272 "scanner.l"
+{
+  					  current->name = yytext;
+					  BEGIN( ClassDefineArgs );
+  					}
+	YY_BREAK
+case 655:
+YY_RULE_SETUP
+#line 5276 "scanner.l"
+{
+  					  current->name = yytext;
+					  if (nextDefContext==ClassDoc)
+					    newDocState();
+					  else 
+					    BEGIN( nextDefContext );
+  					}
+	YY_BREAK
+case 656:
+YY_RULE_SETUP
+#line 5283 "scanner.l"
+{
+  					  current->args+=")";
+					  if (nextDefContext==ClassDoc)
+					    newDocState();
+					  else
+					    BEGIN( nextDefContext );
+  					}
+	YY_BREAK
+case 657:
+YY_RULE_SETUP
+#line 5290 "scanner.l"
+{
+  					  current->args+= yytext;
+  					}
+	YY_BREAK
+case 658:
+YY_RULE_SETUP
+#line 5293 "scanner.l"
+{ yyLineNr++; }
+	YY_BREAK
+case 659:
+YY_RULE_SETUP
+#line 5294 "scanner.l"
+{ 
+  					  yyLineNr++; 
+					  current->name = current->name.stripWhiteSpace();
+					  if (current->section == Entry::MEMBERDOC_SEC && current->args.isEmpty())
+					    current->section = Entry::VARIABLEDOC_SEC;
+					  newDocState();
+					}
+	YY_BREAK
+case 660:
+YY_RULE_SETUP
+#line 5301 "scanner.l"
+{
+  					  current->name+=yytext;
+  					}
+	YY_BREAK
+case 661:
+YY_RULE_SETUP
+#line 5304 "scanner.l"
+{
+  					  current->args+=*yytext;
+					  currentArgumentContext = ClassDocFuncQual;
+					  fullArgString = current->args.copy();
+					  copyArgString = &current->args;
+					  BEGIN( ReadFuncArgType ) ;
+  					}
+	YY_BREAK
+case 662:
+YY_RULE_SETUP
+#line 5311 "scanner.l"
+{
+  					  current->type+=current->name+yytext;
+					  current->name.resize(0);
+  					  BEGIN( ClassDocFuncPtr );
+  					}
+	YY_BREAK
+case 663:
+YY_RULE_SETUP
+#line 5316 "scanner.l"
+{
+  					  current->name+=yytext;
+  					}
+	YY_BREAK
+case 664:
+YY_RULE_SETUP
+#line 5319 "scanner.l"
+{
+  					  current->type+=')';
+  					  BEGIN( ClassDocFunc );
+  					}
+	YY_BREAK
+case 665:
+YY_RULE_SETUP
+#line 5323 "scanner.l"
+{
+  					  BEGIN( ClassDocFuncSkipLine);
+  					}
+	YY_BREAK
+case 666:
+YY_RULE_SETUP
+#line 5326 "scanner.l"
+{ 
+  					  current->args += " const "; 
+					  current->argList->constSpecifier=TRUE;
+					}
+	YY_BREAK
+case 667:
+YY_RULE_SETUP
+#line 5330 "scanner.l"
+{ 
+  					  current->args += " volatile "; 
+					  current->argList->volatileSpecifier=TRUE;
+					}
+	YY_BREAK
+case 668:
+YY_RULE_SETUP
+#line 5334 "scanner.l"
+{ 
+					  current->args += " = 0"; 
+					  current->virt = Pure; 
+					  current->argList->pureSpecifier=TRUE;
+					}
+	YY_BREAK
+case 669:
+YY_RULE_SETUP
+#line 5339 "scanner.l"
+{
+  					  current->exception = "throw(";
+					  BEGIN(ClassDocFuncExc);
+  					}
+	YY_BREAK
+case 670:
+YY_RULE_SETUP
+#line 5343 "scanner.l"
+{
+  					  current->exception += ')';
+					  BEGIN(ClassDocFuncQual);
+  					}
+	YY_BREAK
+case 671:
+YY_RULE_SETUP
+#line 5347 "scanner.l"
+{
+  					  current->exception += *yytext;
+  					}
+	YY_BREAK
+case 672:
+YY_RULE_SETUP
+#line 5350 "scanner.l"
+{
+  					  current->name += *yytext;
+  					}
+	YY_BREAK
+case 673:
+YY_RULE_SETUP
+#line 5353 "scanner.l"
+{
+  					  yyLineNr++; 
+					  current->name = current->name.stripWhiteSpace();
+					  newDocState();
+  					}
+	YY_BREAK
+case 674:
+YY_RULE_SETUP
+#line 5358 "scanner.l"
+{
+  					  warn(yyFileName,yyLineNr,"Command %s not allowed in single-line C++ comment! Ignoring.",yytext);
+  					}
+	YY_BREAK
+case 675:
+YY_RULE_SETUP
+#line 5361 "scanner.l"
+{ current->doc += yytext; }
+	YY_BREAK
+case 676:
+YY_RULE_SETUP
+#line 5362 "scanner.l"
+{ current->doc += yytext; }
+	YY_BREAK
+case 677:
+YY_RULE_SETUP
+#line 5363 "scanner.l"
+{ current->doc += *yytext; }
+	YY_BREAK
+case 678:
+YY_RULE_SETUP
+#line 5364 "scanner.l"
+{ current->brief += *yytext; }
+	YY_BREAK
+case 679:
+YY_RULE_SETUP
+#line 5365 "scanner.l"
+{ yyLineNr++; current->doc += *yytext; }
+	YY_BREAK
+case 680:
+YY_RULE_SETUP
+#line 5366 "scanner.l"
+{ lineCount(); }
+	YY_BREAK
+case 681:
+YY_RULE_SETUP
+#line 5367 "scanner.l"
+{ 
+					  yyLineNr++;  
+					  if (lastDocContext==SkipCurly) // inside body
+					  {
+					    if (!Config_getBool("HIDE_IN_BODY_DOCS"))
+					    {
+					      if (!previous->doc.isEmpty())
+					      {
+						previous->doc+="<p>";
+					      }
+					      previous->doc += current->brief;
+					    }
+					    current->brief.resize(0);
+					  }
+					  BEGIN( lastDocContext );
+					}
+	YY_BREAK
+case 682:
+YY_RULE_SETUP
+#line 5383 "scanner.l"
+{
+  					  yyLineNr++; 
+					  unput('/');unput('*');
+					  BEGIN( ClassDoc );
+  					}
+	YY_BREAK
+case 683:
+YY_RULE_SETUP
+#line 5389 "scanner.l"
+{ current->brief+=yytext; }
+	YY_BREAK
+case 684:
+YY_RULE_SETUP
+#line 5390 "scanner.l"
+{
+  					  yyLineNr++;
+                                          if (afterDocTerminator!=0)
+					    unput(afterDocTerminator);
+					  BEGIN(lastAfterDocContext);
+  					}
+	YY_BREAK
+case 685:
+YY_RULE_SETUP
+#line 5396 "scanner.l"
+{ 
+  					  yyLineNr++;
+  					  BEGIN(AfterDocLine);
+  					}
+	YY_BREAK
+case 686:
+YY_RULE_SETUP
+#line 5400 "scanner.l"
+{ 
+  					  yyLineNr++;
+  					  BEGIN(AfterDoc);
+  					}
+	YY_BREAK
+case 687:
+YY_RULE_SETUP
+#line 5404 "scanner.l"
+{ current->brief+=yytext; }
+	YY_BREAK
+case 688:
+YY_RULE_SETUP
+#line 5405 "scanner.l"
+{ 
+  					  current->brief=current->brief.stripWhiteSpace();
+					  yyLineNr++;
+					  BEGIN( AfterDoc );
+					}
+	YY_BREAK
+case 689:
+YY_RULE_SETUP
+#line 5410 "scanner.l"
+{ current->brief+=yytext; }
+	YY_BREAK
+case 690:
+YY_RULE_SETUP
+#line 5411 "scanner.l"
+{
+  					  current->brief=current->brief.stripWhiteSpace();
+  					  BEGIN( AfterDoc );
+  					}
+	YY_BREAK
+case 691:
+YY_RULE_SETUP
+#line 5415 "scanner.l"
+{ current->brief+=yytext; yyLineNr++; }
+	YY_BREAK
+case 692:
+YY_RULE_SETUP
+#line 5416 "scanner.l"
+{ current->brief+=*yytext; }
+	YY_BREAK
+/*
+<AfterDocBrief>"<"{BR}{ATTR}">"
+<AfterDocBrief>{BS}/{CMD}"ingroup"	{
+  					  current->brief=current->brief.stripWhiteSpace();
+					  BEGIN( lastBriefContext ); 
+  					}
+<AfterDocBrief>{BS}/{SECTIONCMD}	{ 
+                                          BEGIN( lastBriefContext ); 
+                                        }
+<AfterDocBrief>{BS}/[^/\n]{BL}		{ yyLineNr++; 
+  					  if (!current->brief.stripWhiteSpace().isEmpty())
+					    BEGIN(AfterDoc); 
+					}
+  */
+case 693:
+YY_RULE_SETUP
+#line 5432 "scanner.l"
+{
+                                          if (afterDocTerminator!=0)
+					    unput(afterDocTerminator);
+					  BEGIN(lastAfterDocContext);
+  					}
+	YY_BREAK
+case 694:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp = yy_bp + 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 5437 "scanner.l"
+{ BEGIN(AfterDoc); }
+	YY_BREAK
+case 695:
+YY_RULE_SETUP
+#line 5438 "scanner.l"
+{ 
+                                          if (!Config_getBool("INTERNAL_DOCS"))
+                                          {
+					    lastInternalDocContext = YY_START;
+                                            BEGIN( DocInternalLine );
+                                          }
+                                          else
+                                          {
+                                            current->doc+="\\internal"; 
+					  }
+					}
+	YY_BREAK
+case 696:
+YY_RULE_SETUP
+#line 5449 "scanner.l"
+{ 
+                                          if (!Config_getBool("INTERNAL_DOCS"))
+                                          {
+					    lastInternalDocContext = YY_START;
+                                            BEGIN( DocInternal );
+                                          }
+                                          else
+                                          { 
+					    current->doc+="\\internal"; 
+					  }
+					}
+	YY_BREAK
+case 697:
+YY_RULE_SETUP
+#line 5460 "scanner.l"
+
+	YY_BREAK
+case 698:
+YY_RULE_SETUP
+#line 5461 "scanner.l"
+{ yyLineNr++; }
+	YY_BREAK
+case 699:
+YY_RULE_SETUP
+#line 5462 "scanner.l"
+
+	YY_BREAK
+case 700:
+YY_RULE_SETUP
+#line 5463 "scanner.l"
+{
+					  unput('/');
+					  unput('*');
+  					  BEGIN( lastInternalDocContext );
+  					}
+	YY_BREAK
+case 701:
+YY_RULE_SETUP
+#line 5468 "scanner.l"
+
+	YY_BREAK
+case 702:
+YY_RULE_SETUP
+#line 5469 "scanner.l"
+{
+  					  yyLineNr++;
+					  unput('\n');
+  					  BEGIN( lastInternalDocContext );
+  					}
+	YY_BREAK
+case 703:
+YY_RULE_SETUP
+#line 5474 "scanner.l"
+{ BEGIN(AfterDocBrief); }
+	YY_BREAK
+case 704:
+YY_RULE_SETUP
+#line 5475 "scanner.l"
+{ current->doc+=yytext; }
+	YY_BREAK
+case 705:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 5476 "scanner.l"
+
+	YY_BREAK
+case 706:
+YY_RULE_SETUP
+#line 5477 "scanner.l"
+{ current->doc+=yytext; yyLineNr++; }
+	YY_BREAK
+case 707:
+YY_RULE_SETUP
+#line 5478 "scanner.l"
+{ current->doc+=*yytext; }
+	YY_BREAK
+case 708:
+YY_RULE_SETUP
+#line 5479 "scanner.l"
+{
+                                          if (afterDocTerminator!=0)
+					    unput(afterDocTerminator);
+					  BEGIN(lastAfterDocContext);
+  					}
+	YY_BREAK
+case 709:
+YY_RULE_SETUP
+#line 5484 "scanner.l"
+{
+                                          // defer "*/" to a later time
+  					  unput('/');
+  					  unput('*');
+					  // insert \n and decrement the line number to compensate for the artifical newline
+					  unput('\n');
+					  yyLineNr--;
+					  BEGIN( Doc );
+					}
+	YY_BREAK
+case 710:
+YY_RULE_SETUP
+#line 5493 "scanner.l"
+{
+  					  current->name = yyFileName;
+  					  current->doc += "\n\n";
+					  current_root->addSubEntry(current);
+					  current = new Entry ;
+					  initEntry();
+					  BEGIN( FindMembers );
+  					}
+	YY_BREAK
+case 711:
+YY_RULE_SETUP
+#line 5501 "scanner.l"
+{ 
+  				          checkDocs();
+					  //printf("End of docs at line %d: %s\n",yyLineNr,current->doc.data());
+					  if (lastDocContext==SkipCurly)
+					  {
+					    if (!Config_getBool("HIDE_IN_BODY_DOCS"))
+					    {
+					      if (!previous->doc.isEmpty())
+					      {
+						previous->doc+="<p>";
+					      }
+					      previous->doc += current->doc;
+					    }
+					    current->doc.resize(0);
+					  }
+					  else
+					  {
+  					    current->doc += "\n\n";
+					  }
+					  if (current->section==Entry::GROUPDOC_SEC)
+					  {
+					    current_root->addSubEntry(current);
+					    current = new Entry ;
+					    initEntry();
+					  }
+  					  BEGIN( lastDocContext ); 
+					}
+	YY_BREAK
+case 712:
+YY_RULE_SETUP
+#line 5528 "scanner.l"
+{ 
+					  unput('/');unput('*');
+					  BEGIN( tmpDocType );
+					}
+	YY_BREAK
+case 713:
+YY_RULE_SETUP
+#line 5532 "scanner.l"
+{ 
+  				         current->doc += yytext; 
+					}
+	YY_BREAK
+case 714:
+YY_RULE_SETUP
+#line 5535 "scanner.l"
+{ 
+  				         current->doc += yytext; 
+					 yyLineNr++;
+					}
+	YY_BREAK
+case 715:
+YY_RULE_SETUP
+#line 5539 "scanner.l"
+{ 
+  				         current->brief += "-"; 
+					}
+	YY_BREAK
+case 716:
+YY_RULE_SETUP
+#line 5542 "scanner.l"
+{ 
+  				         current->brief += "."; yyLineNr++; 
+					}
+	YY_BREAK
+case 717:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 5545 "scanner.l"
+
+	YY_BREAK
+case 718:
+YY_RULE_SETUP
+#line 5546 "scanner.l"
+{ 
+					  current->doc+=' '; 
+					}
+	YY_BREAK
+case 719:
+YY_RULE_SETUP
+#line 5550 "scanner.l"
+{ // directory type of text
+  					  current->doc+=yytext;
+  					}
+	YY_BREAK
+/*
+<SkipSection>{CMD}[a-z_A-Z][a-z_A-Z0-9]*  {
+  					    QCString *pValue=Doxygen::aliasDict[yytext+1];
+					    if (pValue)
+					    {
+					      int i,l=pValue->length();
+					      for (i=l-1;i>=0;i--)
+					      {
+					        unput(pValue->at(i));
+					      }
+					    }
+                                          }
+  */
+case 720:
+YY_RULE_SETUP
+#line 5566 "scanner.l"
+{ /* escaped command */
+					    if (YY_START==CopyArgComment)
+					      fullArgString+=yytext;
+					    else
+  					      current->doc+=yytext;
+                                          }
+	YY_BREAK
+case 721:
+YY_RULE_SETUP
+#line 5572 "scanner.l"
+{
+                                          bool handled=FALSE;
+                                          if ( useOverrideCommands)
+                                          {
+					      if ( strcmp(yytext+1,"static")==0 )
+					      {
+  					        current->stat = TRUE; handled = TRUE;
+					      }
+					      else if ( strcmp(yytext+1,"pure")==0 )
+					      {
+						current->virt = Pure; handled = TRUE;
+					      }
+					      else if ( strcmp(yytext+1,"private")==0 )
+					      {
+						current->protection = Private; handled = TRUE;
+					      }
+					      else if ( strcmp(yytext+1,"privatesection")==0 )
+					      {
+						current->protection = protection = Private; handled = TRUE;
+					      }
+					      else if ( strcmp(yytext+1,"protected")==0 )
+					      {
+						current->protection = Protected; handled = TRUE;
+					      }
+					      else if ( strcmp(yytext+1,"protectedsection")==0 )
+					      {
+						current->protection = protection = Protected ; handled = TRUE;
+					      }
+					      else if ( strcmp(yytext+1,"public")==0 )
+					      {
+						current->protection = Public; handled = TRUE;
+					      }
+					      else if ( strcmp(yytext+1,"publicsection")==0 )
+					      {
+						current->protection = protection = Public; handled = TRUE;
+					      }
+					  }
+                                          if (!handled)
+                                          {
+  					    //QCString *pValue=Doxygen::aliasDict[yytext+1];
+					    //if (pValue)
+					    //{
+					    //  int i,l=pValue->length();
+					    //  char c;
+					    //  for (i=l-1;i>=0;i--)
+					    //  {
+					    //  	c=pValue->at(i);
+					    //    unput(c);
+					    //	if (c=='\n') yyLineNr--;
+					    //  }
+					    //}
+					    //else
+					    //{
+					    if (YY_START==CopyArgComment)
+					      fullArgString+=yytext;
+					   else
+  					      current->doc+=yytext;
+					    //}
+                                          }
+  					}
+	YY_BREAK
+case 722:
+YY_RULE_SETUP
+#line 5632 "scanner.l"
+{ // directory type of text
+  					  current->brief+=yytext;
+  					}
+	YY_BREAK
+case 723:
+YY_RULE_SETUP
+#line 5635 "scanner.l"
+{}
+	YY_BREAK
+case 724:
+YY_RULE_SETUP
+#line 5636 "scanner.l"
+{ /* escaped command */
+					  if (YY_START==CopyArgCommentLine)
+					    fullArgString+=yytext;
+					  else
+  					    current->brief+=yytext;
+                                        }
+	YY_BREAK
+case 725:
+YY_RULE_SETUP
+#line 5642 "scanner.l"
+{
+  					  //QCString *pValue=Doxygen::aliasDict[yytext+1];
+					  //if (pValue)
+					  //{
+					  //  int i,l=pValue->length();
+					  //  for (i=l-1;i>=0;i--)
+					  //  {
+					  //    unput(pValue->at(i));
+					  //  }
+					  //}
+					  //else
+					  //{
+					    if (YY_START==CopyArgCommentLine)
+					      fullArgString+=yytext;
+					    else
+  					      current->brief+=yytext;
+					  //}
+  					}
+	YY_BREAK
+case 726:
+YY_RULE_SETUP
+#line 5660 "scanner.l"
+{ current->doc += yytext; }
+	YY_BREAK
+case 727:
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
+yy_c_buf_p = yy_cp -= 1;
+YY_DO_BEFORE_ACTION; /* set up yytext again */
+YY_RULE_SETUP
+#line 5661 "scanner.l"
+{ 
+					  BEGIN( lastCContext ) ;
+					}
+	YY_BREAK
+case 728:
+YY_RULE_SETUP
+#line 5664 "scanner.l"
+
+	YY_BREAK
+case 729:
+YY_RULE_SETUP
+#line 5665 "scanner.l"
+{ yyLineNr++ ; }
+	YY_BREAK
+case 730:
+YY_RULE_SETUP
+#line 5666 "scanner.l"
+{
+					  if (insideIDL && insideCppQuote)
+					  {
+					    BEGIN(EndCppQuote);
+					  }
+					}
+	YY_BREAK
+case 731:
+YY_RULE_SETUP
+#line 5672 "scanner.l"
+{	
+  					  if (! insidePHP)
+  					    REJECT;
+  					  lastCContext = YY_START ;
+					  BEGIN( SkipCxxComment ) ;
+					}
+	YY_BREAK
+case 732:
+YY_RULE_SETUP
+#line 5678 "scanner.l"
+{
+  					  if (insidePHP)
+					  {
+  					    lastStringContext=YY_START;
+					    BEGIN(SkipPHPString);
+					  }
+  					}
+	YY_BREAK
+case 733:
+YY_RULE_SETUP
+#line 5685 "scanner.l"
+{
+  					  if (insidePHP)
+					  {
+  					    lastStringContext=YY_START;
+					    BEGIN(SkipString);
+					  }
+  					}
+	YY_BREAK
+case 734:
+YY_RULE_SETUP
+#line 5692 "scanner.l"
+
+	YY_BREAK
+case 735:
+YY_RULE_SETUP
+#line 5693 "scanner.l"
+
+	YY_BREAK
+case 736:
+YY_RULE_SETUP
+#line 5694 "scanner.l"
+{ lastCContext = YY_START ;
+					  BEGIN( SkipComment ) ;
+					}
+	YY_BREAK
+case 737:
+YY_RULE_SETUP
+#line 5697 "scanner.l"
+{ BEGIN( lastCContext ) ; }
+	YY_BREAK
+case 738:
+YY_RULE_SETUP
+#line 5698 "scanner.l"
+{	
+  					  lastCContext = YY_START ;
+					  BEGIN( SkipCxxComment ) ;
+					}
+	YY_BREAK
+case 739:
+YY_RULE_SETUP
+#line 5702 "scanner.l"
+ECHO;
+	YY_BREAK
+			case YY_STATE_EOF(INITIAL):
+			case YY_STATE_EOF(Define):
+			case YY_STATE_EOF(DefineArg):
+			case YY_STATE_EOF(DefineEnd):
+			case YY_STATE_EOF(CompoundName):
+			case YY_STATE_EOF(ClassVar):
+			case YY_STATE_EOF(ClassCategory):
+			case YY_STATE_EOF(ClassTemplSpec):
+			case YY_STATE_EOF(Bases):
+			case YY_STATE_EOF(BasesProt):
+			case YY_STATE_EOF(NextSemi):
+			case YY_STATE_EOF(BitFields):
+			case YY_STATE_EOF(FindMembers):
+			case YY_STATE_EOF(FindMembersPHP):
+			case YY_STATE_EOF(FindMemberName):
+			case YY_STATE_EOF(FindFields):
+			case YY_STATE_EOF(FindFieldArg):
+			case YY_STATE_EOF(Function):
+			case YY_STATE_EOF(FuncRound):
+			case YY_STATE_EOF(ExcpRound):
+			case YY_STATE_EOF(ExcpList):
+			case YY_STATE_EOF(FuncQual):
+			case YY_STATE_EOF(Operator):
+			case YY_STATE_EOF(Array):
+			case YY_STATE_EOF(ReadBody):
+			case YY_STATE_EOF(ReadNSBody):
+			case YY_STATE_EOF(ReadBodyIntf):
+			case YY_STATE_EOF(Using):
+			case YY_STATE_EOF(UsingDirective):
+			case YY_STATE_EOF(NameSpaceDocArg1):
+			case YY_STATE_EOF(PackageDocArg1):
+			case YY_STATE_EOF(SkipCurly):
+			case YY_STATE_EOF(SkipCurlyCpp):
+			case YY_STATE_EOF(SkipCurlyEndDoc):
+			case YY_STATE_EOF(SkipString):
+			case YY_STATE_EOF(SkipPHPString):
+			case YY_STATE_EOF(SkipInits):
+			case YY_STATE_EOF(SkipCPP):
+			case YY_STATE_EOF(SkipCPPBlock):
+			case YY_STATE_EOF(SkipComment):
+			case YY_STATE_EOF(SkipCxxComment):
+			case YY_STATE_EOF(SkipCurlyBlock):
+			case YY_STATE_EOF(SkipRoundBlock):
+			case YY_STATE_EOF(Sharp):
+			case YY_STATE_EOF(SkipSharp):
+			case YY_STATE_EOF(SkipRound):
+			case YY_STATE_EOF(SkipSquare):
+			case YY_STATE_EOF(SkipSection):
+			case YY_STATE_EOF(IfGuard):
+			case YY_STATE_EOF(IfNotGuard):
+			case YY_STATE_EOF(TypedefName):
+			case YY_STATE_EOF(TryFunctionBlock):
+			case YY_STATE_EOF(TryFunctionBlockEnd):
+			case YY_STATE_EOF(Comment):
+			case YY_STATE_EOF(Doc):
+			case YY_STATE_EOF(JavaDoc):
+			case YY_STATE_EOF(ClassDoc):
+			case YY_STATE_EOF(LineDoc):
+			case YY_STATE_EOF(DefLineDoc):
+			case YY_STATE_EOF(ClassDocArg1):
+			case YY_STATE_EOF(CategoryDocArg1):
+			case YY_STATE_EOF(ClassDocArg2):
+			case YY_STATE_EOF(ClassDocArg3):
+			case YY_STATE_EOF(ClassDocFunc):
+			case YY_STATE_EOF(ClassDocFuncPtr):
+			case YY_STATE_EOF(ClassDocFuncQual):
+			case YY_STATE_EOF(ClassDocFuncSkipLine):
+			case YY_STATE_EOF(ClassDocFuncExc):
+			case YY_STATE_EOF(ClassDocDefine):
+			case YY_STATE_EOF(ClassDocRelates):
+			case YY_STATE_EOF(ClassDocRelatesAlso):
+			case YY_STATE_EOF(ClassDocBrief):
+			case YY_STATE_EOF(ClassDocOverload):
+			case YY_STATE_EOF(ClassDefineArgs):
+			case YY_STATE_EOF(DocInternal):
+			case YY_STATE_EOF(DocInternalLine):
+			case YY_STATE_EOF(DocBaseClass):
+			case YY_STATE_EOF(CppQuote):
+			case YY_STATE_EOF(EndCppQuote):
+			case YY_STATE_EOF(GroupDocArg1):
+			case YY_STATE_EOF(GroupDocArg2):
+			case YY_STATE_EOF(GroupName):
+			case YY_STATE_EOF(GroupHeader):
+			case YY_STATE_EOF(StoreGroupDocs):
+			case YY_STATE_EOF(AfterDoc):
+			case YY_STATE_EOF(AfterDocBrief):
+			case YY_STATE_EOF(AfterDocLine):
+			case YY_STATE_EOF(PageDoc):
+			case YY_STATE_EOF(PageDocTitle):
+			case YY_STATE_EOF(PageDocArg1):
+			case YY_STATE_EOF(PageDocArg2):
+			case YY_STATE_EOF(FileDocArg1):
+			case YY_STATE_EOF(FileDocArg2):
+			case YY_STATE_EOF(ExampleDocArg1):
+			case YY_STATE_EOF(EnumDocArg1):
+			case YY_STATE_EOF(FuncPtr):
+			case YY_STATE_EOF(EndFuncPtr):
+			case YY_STATE_EOF(FuncPtrInit):
+			case YY_STATE_EOF(FuncFunc):
+			case YY_STATE_EOF(FuncFuncEnd):
+			case YY_STATE_EOF(FuncFuncType):
+			case YY_STATE_EOF(MemberSpec):
+			case YY_STATE_EOF(MemberSpecSkip):
+			case YY_STATE_EOF(TodoParam):
+			case YY_STATE_EOF(TestParam):
+			case YY_STATE_EOF(BugParam):
+			case YY_STATE_EOF(DeprecatedParam):
+			case YY_STATE_EOF(XRefItemParam1):
+			case YY_STATE_EOF(XRefItemParam2):
+			case YY_STATE_EOF(XRefItemParam3):
+			case YY_STATE_EOF(XRefItemParam4):
+			case YY_STATE_EOF(SectionLabel):
+			case YY_STATE_EOF(SectionTitle):
+			case YY_STATE_EOF(SkipTemplate):
+			case YY_STATE_EOF(EndTemplate):
+			case YY_STATE_EOF(CopyArgString):
+			case YY_STATE_EOF(CopyArgRound):
+			case YY_STATE_EOF(CopyArgSharp):
+			case YY_STATE_EOF(CopyArgComment):
+			case YY_STATE_EOF(CopyArgCommentLine):
+			case YY_STATE_EOF(SkipUnionSwitch):
+			case YY_STATE_EOF(ReadFuncArgType):
+			case YY_STATE_EOF(ReadTempArgs):
+			case YY_STATE_EOF(Specialization):
+			case YY_STATE_EOF(SkipHtmlComment):
+			case YY_STATE_EOF(ReadFormulaShort):
+			case YY_STATE_EOF(ReadFormulaLong):
+			case YY_STATE_EOF(AnchorLabel):
+			case YY_STATE_EOF(ReadInitializer):
+			case YY_STATE_EOF(CopyString):
+			case YY_STATE_EOF(CopyPHPString):
+			case YY_STATE_EOF(CopyRound):
+			case YY_STATE_EOF(CopyCurly):
+			case YY_STATE_EOF(IDLUnionCase):
+			case YY_STATE_EOF(NSAliasName):
+			case YY_STATE_EOF(NSAliasArg):
+			case YY_STATE_EOF(PackageName):
+			case YY_STATE_EOF(GetCallType):
+			case YY_STATE_EOF(JavaImport):
+			case YY_STATE_EOF(CSAccessorDecl):
+			case YY_STATE_EOF(PreLineCtrl):
+			case YY_STATE_EOF(DefinePHP):
+			case YY_STATE_EOF(DefinePHPEnd):
+			case YY_STATE_EOF(OldStyleArgs):
+			case YY_STATE_EOF(SkipVerbString):
+			case YY_STATE_EOF(ObjCMethod):
+			case YY_STATE_EOF(ObjCReturnType):
+			case YY_STATE_EOF(ObjCParams):
+			case YY_STATE_EOF(ObjCParamType):
+			case YY_STATE_EOF(ObjCProtocolList):
+			case YY_STATE_EOF(QtPropType):
+			case YY_STATE_EOF(QtPropName):
+			case YY_STATE_EOF(QtPropRW):
+				yyterminate();
+
+	case YY_END_OF_BUFFER:
+		{
+		/* Amount of text matched not including the EOB char. */
+		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;
+
+		/* Undo the effects of YY_DO_BEFORE_ACTION. */
+		*yy_cp = yy_hold_char;
+		YY_RESTORE_YY_MORE_OFFSET
+
+		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
+			{
+			/* We're scanning a new file or input source.  It's
+			 * possible that this happened because the user
+			 * just pointed yyin at a new source and called
+			 * yylex().  If so, then we have to assure
+			 * consistency between yy_current_buffer and our
+			 * globals.  Here is the right place to do so, because
+			 * this is the first action (other than possibly a
+			 * back-up) that will match for the new input source.
+			 */
+			yy_n_chars = yy_current_buffer->yy_n_chars;
+			yy_current_buffer->yy_input_file = yyin;
+			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
+			}
+
+		/* Note that here we test for yy_c_buf_p "<=" to the position
+		 * of the first EOB in the buffer, since yy_c_buf_p will
+		 * already have been incremented past the NUL character
+		 * (since all states make transitions on EOB to the
+		 * end-of-buffer state).  Contrast this with the test
+		 * in input().
+		 */
+		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
+			{ /* This was really a NUL. */
+			yy_state_type yy_next_state;
+
+			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;
+
+			yy_current_state = yy_get_previous_state();
+
+			/* Okay, we're now positioned to make the NUL
+			 * transition.  We couldn't have
+			 * yy_get_previous_state() go ahead and do it
+			 * for us because it doesn't know how to deal
+			 * with the possibility of jamming (and we don't
+			 * want to build jamming into it because then it
+			 * will run more slowly).
+			 */
+
+			yy_next_state = yy_try_NUL_trans( yy_current_state );
+
+			yy_bp = yytext_ptr + YY_MORE_ADJ;
+
+			if ( yy_next_state )
+				{
+				/* Consume the NUL. */
+				yy_cp = ++yy_c_buf_p;
+				yy_current_state = yy_next_state;
+				goto yy_match;
+				}
+
+			else
+				{
+				yy_cp = yy_c_buf_p;
+				goto yy_find_action;
+				}
+			}
+
+		else switch ( yy_get_next_buffer() )
+			{
+			case EOB_ACT_END_OF_FILE:
+				{
+				yy_did_buffer_switch_on_eof = 0;
+
+				if ( yywrap() )
+					{
+					/* Note: because we've taken care in
+					 * yy_get_next_buffer() to have set up
+					 * yytext, we can now set up
+					 * yy_c_buf_p so that if some total
+					 * hoser (like flex itself) wants to
+					 * call the scanner after we return the
+					 * YY_NULL, it'll still work - another
+					 * YY_NULL will get returned.
+					 */
+					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
+
+					yy_act = YY_STATE_EOF(YY_START);
+					goto do_action;
+					}
+
+				else
+					{
+					if ( ! yy_did_buffer_switch_on_eof )
+						YY_NEW_FILE;
+					}
+				break;
+				}
+
+			case EOB_ACT_CONTINUE_SCAN:
+				yy_c_buf_p =
+					yytext_ptr + yy_amount_of_matched_text;
+
+				yy_current_state = yy_get_previous_state();
+
+				yy_cp = yy_c_buf_p;
+				yy_bp = yytext_ptr + YY_MORE_ADJ;
+				goto yy_match;
+
+			case EOB_ACT_LAST_MATCH:
+				yy_c_buf_p =
+				&yy_current_buffer->yy_ch_buf[yy_n_chars];
+
+				yy_current_state = yy_get_previous_state();
+
+				yy_cp = yy_c_buf_p;
+				yy_bp = yytext_ptr + YY_MORE_ADJ;
+				goto yy_find_action;
+			}
+		break;
+		}
+
+	default:
+		YY_FATAL_ERROR(
+			"fatal flex scanner internal error--no action found" );
+	} /* end of action switch */
+		} /* end of scanning one token */
+	} /* end of yylex */
+
+
+/* yy_get_next_buffer - try to read in a new buffer
+ *
+ * Returns a code representing an action:
+ *	EOB_ACT_LAST_MATCH -
+ *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
+ *	EOB_ACT_END_OF_FILE - end of file
+ */
+
+static int yy_get_next_buffer()
+	{
+	register char *dest = yy_current_buffer->yy_ch_buf;
+	register char *source = yytext_ptr;
+	register int number_to_move, i;
+	int ret_val;
+
+	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
+		YY_FATAL_ERROR(
+		"fatal flex scanner internal error--end of buffer missed" );
+
+	if ( yy_current_buffer->yy_fill_buffer == 0 )
+		{ /* Don't try to fill the buffer, so this is an EOF. */
+		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
+			{
+			/* We matched a single character, the EOB, so
+			 * treat this as a final EOF.
+			 */
+			return EOB_ACT_END_OF_FILE;
+			}
+
+		else
+			{
+			/* We matched some text prior to the EOB, first
+			 * process it.
+			 */
+			return EOB_ACT_LAST_MATCH;
+			}
+		}
+
+	/* Try to read more data. */
+
+	/* First move last chars to start of buffer. */
+	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;
+
+	for ( i = 0; i < number_to_move; ++i )
+		*(dest++) = *(source++);
+
+	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
+		/* don't do the read, it's not guaranteed to return an EOF,
+		 * just force an EOF
+		 */
+		yy_current_buffer->yy_n_chars = yy_n_chars = 0;
+
+	else
+		{
+		int num_to_read =
+			yy_current_buffer->yy_buf_size - number_to_move - 1;
+
+		while ( num_to_read <= 0 )
+			{ /* Not enough room in the buffer - grow it. */
+#ifdef YY_USES_REJECT
+			YY_FATAL_ERROR(
+"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
+#else
+
+			/* just a shorter name for the current buffer */
+			YY_BUFFER_STATE b = yy_current_buffer;
+
+			int yy_c_buf_p_offset =
+				(int) (yy_c_buf_p - b->yy_ch_buf);
+
+			if ( b->yy_is_our_buffer )
+				{
+				int new_size = b->yy_buf_size * 2;
+
+				if ( new_size <= 0 )
+					b->yy_buf_size += b->yy_buf_size / 8;
+				else
+					b->yy_buf_size *= 2;
+
+				b->yy_ch_buf = (char *)
+					/* Include room in for 2 EOB chars. */
+					yy_flex_realloc( (void *) b->yy_ch_buf,
+							 b->yy_buf_size + 2 );
+				}
+			else
+				/* Can't grow it, we don't own it. */
+				b->yy_ch_buf = 0;
+
+			if ( ! b->yy_ch_buf )
+				YY_FATAL_ERROR(
+				"fatal error - scanner input buffer overflow" );
+
+			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];
+
+			num_to_read = yy_current_buffer->yy_buf_size -
+						number_to_move - 1;
+#endif
+			}
+
+		if ( num_to_read > YY_READ_BUF_SIZE )
+			num_to_read = YY_READ_BUF_SIZE;
+
+		/* Read in more data. */
+		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
+			yy_n_chars, num_to_read );
+
+		yy_current_buffer->yy_n_chars = yy_n_chars;
+		}
+
+	if ( yy_n_chars == 0 )
+		{
+		if ( number_to_move == YY_MORE_ADJ )
+			{
+			ret_val = EOB_ACT_END_OF_FILE;
+			yyrestart( yyin );
+			}
+
+		else
+			{
+			ret_val = EOB_ACT_LAST_MATCH;
+			yy_current_buffer->yy_buffer_status =
+				YY_BUFFER_EOF_PENDING;
+			}
+		}
+
+	else
+		ret_val = EOB_ACT_CONTINUE_SCAN;
+
+	yy_n_chars += number_to_move;
+	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
+	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;
+
+	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];
+
+	return ret_val;
+	}
+
+
+/* yy_get_previous_state - get the state just before the EOB char was reached */
+
+static yy_state_type yy_get_previous_state()
+	{
+	register yy_state_type yy_current_state;
+	register char *yy_cp;
+
+	yy_current_state = yy_start;
+	yy_current_state += YY_AT_BOL();
+	yy_state_ptr = yy_state_buf;
+	*yy_state_ptr++ = yy_current_state;
+
+	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
+		{
+		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
+		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
+			{
+			yy_current_state = (int) yy_def[yy_current_state];
+			if ( yy_current_state >= 8399 )
+				yy_c = yy_meta[(unsigned int) yy_c];
+			}
+		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
+		*yy_state_ptr++ = yy_current_state;
+		}
+
+	return yy_current_state;
+	}
+
+
+/* yy_try_NUL_trans - try to make a transition on the NUL character
+ *
+ * synopsis
+ *	next_state = yy_try_NUL_trans( current_state );
+ */
+
+#ifdef YY_USE_PROTOS
+static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
+#else
+static yy_state_type yy_try_NUL_trans( yy_current_state )
+yy_state_type yy_current_state;
+#endif
+	{
+	register int yy_is_jam;
+
+	register YY_CHAR yy_c = 1;
+	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
+		{
+		yy_current_state = (int) yy_def[yy_current_state];
+		if ( yy_current_state >= 8399 )
+			yy_c = yy_meta[(unsigned int) yy_c];
+		}
+	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
+	yy_is_jam = (yy_current_state == 8398);
+	if ( ! yy_is_jam )
+		*yy_state_ptr++ = yy_current_state;
+
+	return yy_is_jam ? 0 : yy_current_state;
+	}
+
+
+#ifndef YY_NO_UNPUT
+#ifdef YY_USE_PROTOS
+static void yyunput( int c, register char *yy_bp )
+#else
+static void yyunput( c, yy_bp )
+int c;
+register char *yy_bp;
+#endif
+	{
+	register char *yy_cp = yy_c_buf_p;
+
+	/* undo effects of setting up yytext */
+	*yy_cp = yy_hold_char;
+
+	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
+		{ /* need to shift things up to make room */
+		/* +2 for EOB chars. */
+		register int number_to_move = yy_n_chars + 2;
+		register char *dest = &yy_current_buffer->yy_ch_buf[
+					yy_current_buffer->yy_buf_size + 2];
+		register char *source =
+				&yy_current_buffer->yy_ch_buf[number_to_move];
+
+		while ( source > yy_current_buffer->yy_ch_buf )
+			*--dest = *--source;
+
+		yy_cp += (int) (dest - source);
+		yy_bp += (int) (dest - source);
+		yy_current_buffer->yy_n_chars =
+			yy_n_chars = yy_current_buffer->yy_buf_size;
+
+		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
+			YY_FATAL_ERROR( "flex scanner push-back overflow" );
+		}
+
+	*--yy_cp = (char) c;
+
+
+	yytext_ptr = yy_bp;
+	yy_hold_char = *yy_cp;
+	yy_c_buf_p = yy_cp;
+	}
+#endif	/* ifndef YY_NO_UNPUT */
+
+
+#ifdef __cplusplus
+static int yyinput()
+#else
+static int input()
+#endif
+	{
+	int c;
+
+	*yy_c_buf_p = yy_hold_char;
+
+	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
+		{
+		/* yy_c_buf_p now points to the character we want to return.
+		 * If this occurs *before* the EOB characters, then it's a
+		 * valid NUL; if not, then we've hit the end of the buffer.
+		 */
+		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
+			/* This was really a NUL. */
+			*yy_c_buf_p = '\0';
+
+		else
+			{ /* need more input */
+			int offset = yy_c_buf_p - yytext_ptr;
+			++yy_c_buf_p;
+
+			switch ( yy_get_next_buffer() )
+				{
+				case EOB_ACT_LAST_MATCH:
+					/* This happens because yy_g_n_b()
+					 * sees that we've accumulated a
+					 * token and flags that we need to
+					 * try matching the token before
+					 * proceeding.  But for input(),
+					 * there's no matching to consider.
+					 * So convert the EOB_ACT_LAST_MATCH
+					 * to EOB_ACT_END_OF_FILE.
+					 */
+
+					/* Reset buffer status. */
+					yyrestart( yyin );
+
+					/* fall through */
+
+				case EOB_ACT_END_OF_FILE:
+					{
+					if ( yywrap() )
+						return EOF;
+
+					if ( ! yy_did_buffer_switch_on_eof )
+						YY_NEW_FILE;
+#ifdef __cplusplus
+					return yyinput();
+#else
+					return input();
+#endif
+					}
+
+				case EOB_ACT_CONTINUE_SCAN:
+					yy_c_buf_p = yytext_ptr + offset;
+					break;
+				}
+			}
+		}
+
+	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
+	*yy_c_buf_p = '\0';	/* preserve yytext */
+	yy_hold_char = *++yy_c_buf_p;
+
+	yy_current_buffer->yy_at_bol = (c == '\n');
+
+	return c;
+	}
+
+
+#ifdef YY_USE_PROTOS
+void yyrestart( FILE *input_file )
+#else
+void yyrestart( input_file )
+FILE *input_file;
+#endif
+	{
+	if ( ! yy_current_buffer )
+		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );
+
+	yy_init_buffer( yy_current_buffer, input_file );
+	yy_load_buffer_state();
+	}
+
+
+#ifdef YY_USE_PROTOS
+void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
+#else
+void yy_switch_to_buffer( new_buffer )
+YY_BUFFER_STATE new_buffer;
+#endif
+	{
+	if ( yy_current_buffer == new_buffer )
+		return;
+
+	if ( yy_current_buffer )
+		{
+		/* Flush out information for old buffer. */
+		*yy_c_buf_p = yy_hold_char;
+		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
+		yy_current_buffer->yy_n_chars = yy_n_chars;
+		}
+
+	yy_current_buffer = new_buffer;
+	yy_load_buffer_state();
+
+	/* We don't actually know whether we did this switch during
+	 * EOF (yywrap()) processing, but the only time this flag
+	 * is looked at is after yywrap() is called, so it's safe
+	 * to go ahead and always set it.
+	 */
+	yy_did_buffer_switch_on_eof = 1;
+	}
+
+
+#ifdef YY_USE_PROTOS
+void yy_load_buffer_state( void )
+#else
+void yy_load_buffer_state()
+#endif
+	{
+	yy_n_chars = yy_current_buffer->yy_n_chars;
+	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
+	yyin = yy_current_buffer->yy_input_file;
+	yy_hold_char = *yy_c_buf_p;
+	}
+
+
+#ifdef YY_USE_PROTOS
+YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
+#else
+YY_BUFFER_STATE yy_create_buffer( file, size )
+FILE *file;
+int size;
+#endif
+	{
+	YY_BUFFER_STATE b;
+
+	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
+	if ( ! b )
+		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
+
+	b->yy_buf_size = size;
+
+	/* yy_ch_buf has to be 2 characters longer than the size given because
+	 * we need to put in 2 end-of-buffer characters.
+	 */
+	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
+	if ( ! b->yy_ch_buf )
+		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
+
+	b->yy_is_our_buffer = 1;
+
+	yy_init_buffer( b, file );
+
+	return b;
+	}
+
+
+#ifdef YY_USE_PROTOS
+void yy_delete_buffer( YY_BUFFER_STATE b )
+#else
+void yy_delete_buffer( b )
+YY_BUFFER_STATE b;
+#endif
+	{
+	if ( ! b )
+		return;
+
+	if ( b == yy_current_buffer )
+		yy_current_buffer = (YY_BUFFER_STATE) 0;
+
+	if ( b->yy_is_our_buffer )
+		yy_flex_free( (void *) b->yy_ch_buf );
+
+	yy_flex_free( (void *) b );
+	}
+
+
+#ifndef YY_ALWAYS_INTERACTIVE
+#ifndef YY_NEVER_INTERACTIVE
+extern int isatty YY_PROTO(( int ));
+#endif
+#endif
+
+#ifdef YY_USE_PROTOS
+void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
+#else
+void yy_init_buffer( b, file )
+YY_BUFFER_STATE b;
+FILE *file;
+#endif
+
+
+	{
+	yy_flush_buffer( b );
+
+	b->yy_input_file = file;
+	b->yy_fill_buffer = 1;
+
+#if YY_ALWAYS_INTERACTIVE
+	b->yy_is_interactive = 1;
+#else
+#if YY_NEVER_INTERACTIVE
+	b->yy_is_interactive = 0;
+#else
+	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
+#endif
+#endif
+	}
+
+
+#ifdef YY_USE_PROTOS
+void yy_flush_buffer( YY_BUFFER_STATE b )
+#else
+void yy_flush_buffer( b )
+YY_BUFFER_STATE b;
+#endif
+
+	{
+	if ( ! b )
+		return;
+
+	b->yy_n_chars = 0;
+
+	/* We always need two end-of-buffer characters.  The first causes
+	 * a transition to the end-of-buffer state.  The second causes
+	 * a jam in that state.
+	 */
+	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
+	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
+
+	b->yy_buf_pos = &b->yy_ch_buf[0];
+
+	b->yy_at_bol = 1;
+	b->yy_buffer_status = YY_BUFFER_NEW;
+
+	if ( b == yy_current_buffer )
+		yy_load_buffer_state();
+	}
+
+
+#ifndef YY_NO_SCAN_BUFFER
+#ifdef YY_USE_PROTOS
+YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
+#else
+YY_BUFFER_STATE yy_scan_buffer( base, size )
+char *base;
+yy_size_t size;
+#endif
+	{
+	YY_BUFFER_STATE b;
+
+	if ( size < 2 ||
+	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
+	     base[size-1] != YY_END_OF_BUFFER_CHAR )
+		/* They forgot to leave room for the EOB's. */
+		return 0;
+
+	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
+	if ( ! b )
+		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
+
+	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
+	b->yy_buf_pos = b->yy_ch_buf = base;
+	b->yy_is_our_buffer = 0;
+	b->yy_input_file = 0;
+	b->yy_n_chars = b->yy_buf_size;
+	b->yy_is_interactive = 0;
+	b->yy_at_bol = 1;
+	b->yy_fill_buffer = 0;
+	b->yy_buffer_status = YY_BUFFER_NEW;
+
+	yy_switch_to_buffer( b );
+
+	return b;
+	}
+#endif
+
+
+#ifndef YY_NO_SCAN_STRING
+#ifdef YY_USE_PROTOS
+YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
+#else
+YY_BUFFER_STATE yy_scan_string( yy_str )
+yyconst char *yy_str;
+#endif
+	{
+	int len;
+	for ( len = 0; yy_str[len]; ++len )
+		;
+
+	return yy_scan_bytes( yy_str, len );
+	}
+#endif
+
+
+#ifndef YY_NO_SCAN_BYTES
+#ifdef YY_USE_PROTOS
+YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
+#else
+YY_BUFFER_STATE yy_scan_bytes( bytes, len )
+yyconst char *bytes;
+int len;
+#endif
+	{
+	YY_BUFFER_STATE b;
+	char *buf;
+	yy_size_t n;
+	int i;
+
+	/* Get memory for full buffer, including space for trailing EOB's. */
+	n = len + 2;
+	buf = (char *) yy_flex_alloc( n );
+	if ( ! buf )
+		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
+
+	for ( i = 0; i < len; ++i )
+		buf[i] = bytes[i];
+
+	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;
+
+	b = yy_scan_buffer( buf, n );
+	if ( ! b )
+		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
+
+	/* It's okay to grow etc. this buffer, and we should throw it
+	 * away when we're done.
+	 */
+	b->yy_is_our_buffer = 1;
+
+	return b;
+	}
+#endif
+
+
+#ifndef YY_NO_PUSH_STATE
+#ifdef YY_USE_PROTOS
+static void yy_push_state( int new_state )
+#else
+static void yy_push_state( new_state )
+int new_state;
+#endif
+	{
+	if ( yy_start_stack_ptr >= yy_start_stack_depth )
+		{
+		yy_size_t new_size;
+
+		yy_start_stack_depth += YY_START_STACK_INCR;
+		new_size = yy_start_stack_depth * sizeof( int );
+
+		if ( ! yy_start_stack )
+			yy_start_stack = (int *) yy_flex_alloc( new_size );
+
+		else
+			yy_start_stack = (int *) yy_flex_realloc(
+					(void *) yy_start_stack, new_size );
+
+		if ( ! yy_start_stack )
+			YY_FATAL_ERROR(
+			"out of memory expanding start-condition stack" );
+		}
+
+	yy_start_stack[yy_start_stack_ptr++] = YY_START;
+
+	BEGIN(new_state);
+	}
+#endif
+
+
+#ifndef YY_NO_POP_STATE
+static void yy_pop_state()
+	{
+	if ( --yy_start_stack_ptr < 0 )
+		YY_FATAL_ERROR( "start-condition stack underflow" );
+
+	BEGIN(yy_start_stack[yy_start_stack_ptr]);
+	}
+#endif
+
+
+#ifndef YY_NO_TOP_STATE
+static int yy_top_state()
+	{
+	return yy_start_stack[yy_start_stack_ptr - 1];
+	}
+#endif
+
+#ifndef YY_EXIT_FAILURE
+#define YY_EXIT_FAILURE 2
+#endif
+
+#ifdef YY_USE_PROTOS
+static void yy_fatal_error( yyconst char msg[] )
+#else
+static void yy_fatal_error( msg )
+char msg[];
+#endif
+	{
+	(void) fprintf( stderr, "%s\n", msg );
+	exit( YY_EXIT_FAILURE );
+	}
+
+
+
+/* Redefine yyless() so it works in section 3 code. */
+
+#undef yyless
+#define yyless(n) \
+	do \
+		{ \
+		/* Undo effects of setting up yytext. */ \
+		yytext[yyleng] = yy_hold_char; \
+		yy_c_buf_p = yytext + n; \
+		yy_hold_char = *yy_c_buf_p; \
+		*yy_c_buf_p = '\0'; \
+		yyleng = n; \
+		} \
+	while ( 0 )
+
+
+/* Internal utility routines. */
+
+#ifndef yytext_ptr
+#ifdef YY_USE_PROTOS
+static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
+#else
+static void yy_flex_strncpy( s1, s2, n )
+char *s1;
+yyconst char *s2;
+int n;
+#endif
+	{
+	register int i;
+	for ( i = 0; i < n; ++i )
+		s1[i] = s2[i];
+	}
+#endif
+
+#ifdef YY_NEED_STRLEN
+#ifdef YY_USE_PROTOS
+static int yy_flex_strlen( yyconst char *s )
+#else
+static int yy_flex_strlen( s )
+yyconst char *s;
+#endif
+	{
+	register int n;
+	for ( n = 0; s[n]; ++n )
+		;
+
+	return n;
+	}
+#endif
+
+
+#ifdef YY_USE_PROTOS
+static void *yy_flex_alloc( yy_size_t size )
+#else
+static void *yy_flex_alloc( size )
+yy_size_t size;
+#endif
+	{
+	return (void *) malloc( size );
+	}
+
+#ifdef YY_USE_PROTOS
+static void *yy_flex_realloc( void *ptr, yy_size_t size )
+#else
+static void *yy_flex_realloc( ptr, size )
+void *ptr;
+yy_size_t size;
+#endif
+	{
+	/* The cast to (char *) in the following accommodates both
+	 * implementations that use char* generic pointers, and those
+	 * that use void* generic pointers.  It works with the latter
+	 * because both ANSI C and C++ allow castless assignment from
+	 * any pointer type to void*, and deal with argument conversions
+	 * as though doing an assignment.
+	 */
+	return (void *) realloc( (char *) ptr, size );
+	}
+
+#ifdef YY_USE_PROTOS
+static void yy_flex_free( void *ptr )
+#else
+static void yy_flex_free( ptr )
+void *ptr;
+#endif
+	{
+	free( ptr );
+	}
+
+#if YY_MAIN
+int main()
+	{
+	yylex();
+	return 0;
+	}
+#endif
+#line 5702 "scanner.l"
+
+
+//----------------------------------------------------------------------------
+
+static void startGroup()
+{
+  if (!lastDefGroup.groupname.isEmpty())
+  {
+    setCurrentGroup( &lastDefGroup.groupname, lastDefGroup.pri );   
+    autoGroupStack.push(new Grouping(lastDefGroup));
+    lastDefGroup.groupname.resize(0);
+  }
+  else 
+  {
+    //if (memberGroupId!=DOX_NOGROUP)
+    //{
+    //  //warn(yyFileName,yyLineNr,"Warning: ignoring nested member group. "
+    //  //	"Previous command was found at line %d.",lastMemberGroupLine);
+    //  printf("startGroup ends group %d\n",memberGroupId);
+    //  endGroup();
+    //}
+    if (memberGroupHeader.isEmpty())
+    {
+      // warn( yyFileName, yyLineNr, "Warning: member group does not have a header" );
+      memberGroupHeader="[NOHEADER]";
+    }
+    memberGroupId = newMemberGroupId();
+    MemberGroupInfo *info = new MemberGroupInfo;
+    info->header = memberGroupHeader.stripWhiteSpace();
+    Doxygen::memGrpInfoDict.insert(memberGroupId,info);
+    //Doxygen::memberHeaderDict.insert(memberGroupId,
+    //	new QCString(memberGroupHeader.stripWhiteSpace())
+    //			   );
+    
+    memberGroupRelates = current->relates.copy();
+    memberGroupInside = current->inside.copy();
+    current->mGrpId = memberGroupId;
+    lastMemberGroupLine = yyLineNr;
+  }
+}
+
+static void startGroupInDoc()
+{
+  if (current->section==Entry::GROUPDOC_SEC ) /* scope for a non-member group: @defgroup */
+  {
+    autoGroupStack.push(new Grouping(current->name,
+	  current->groupingPri()
+	  ));
+  }
+  else if (current->section == Entry::MEMBERGRP_SEC) /* scope for a member group: @name */
+  {
+    //if (memberGroupId!=DOX_NOGROUP)
+    //{
+    //  printf("startGroupInDoc ends group %d\n",memberGroupId);
+    //  endGroup();
+    //}
+    memberGroupId = newMemberGroupId();
+    MemberGroupInfo *info = new MemberGroupInfo;
+    info->header = memberGroupHeader.stripWhiteSpace();
+    Doxygen::memGrpInfoDict.insert(memberGroupId,info);
+    //Doxygen::memberHeaderDict.insert(memberGroupId,
+    //	new QCString(memberGroupHeader.stripWhiteSpace())
+    //			   );
+    memberGroupRelates = current->relates.copy();
+    memberGroupInside = current->inside.copy();
+    current->mGrpId = memberGroupId;
+    lastMemberGroupLine = yyLineNr;
+  }
+  else
+  {
+    warn(yyFileName,yyLineNr,"Warning: @{ may only be used in a group block!\n");
+  }
+}
+
+static void endGroup()
+{
+  if (memberGroupId!=DOX_NOGROUP) // end of member group
+  {
+    //Doxygen::memberDocDict.insert(memberGroupId,
+    //	new QCString(memberGroupDocs)
+    //			);
+    MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(memberGroupId);
+    if (info) 
+    {
+      info->doc = memberGroupDocs;
+      info->docFile = yyFileName;
+    }
+    memberGroupId=DOX_NOGROUP;
+    memberGroupRelates.resize(0);
+    memberGroupInside.resize(0);
+    if (YY_START!=ReadInitializer) 
+    {
+      current->mGrpId=DOX_NOGROUP;
+      current->relates.resize(0);
+    }
+    memberGroupDocs.resize(0);
+  }
+  else if (!autoGroupStack.isEmpty()) // end of group
+  {
+    Grouping *current = autoGroupStack.pop();
+    Grouping *parent = autoGroupStack.top();
+    if( parent ) {
+      setCurrentGroup( &parent->groupname, parent->pri );
+    } else {
+      setCurrentGroup( 0, Grouping::GROUPING_LOWEST );
+    }
+    delete current;
+  }
+}
+
+static void forceEndGroup()
+{
+  while (memberGroupId!=DOX_NOGROUP || !autoGroupStack.isEmpty()) 
+  {
+    //printf("forceEndGroup ends group %d\n",memberGroupId);
+    endGroup();
+  }
+}
+
+//----------------------------------------------------------------------------
+
+static void newDocState()
+{
+  if (tmpDocType!=-1)
+  {
+    tmpDocType=ClassDoc;
+    BEGIN(JavaDoc);
+  }
+  else
+  {
+    BEGIN(ClassDoc);
+  }
+}
+
+//----------------------------------------------------------------------------
+
+static void parseCompounds(Entry *rt)
+{
+  //printf("parseCompounds(%s)\n",rt->name.data());
+  EntryListIterator eli(*rt->sublist);
+  Entry *ce;
+  for (;(ce=eli.current());++eli)
+  {
+    if (!ce->program.isEmpty())
+    {
+      //printf("-- %s ---------\n%s\n---------------\n",
+      //  ce->name.data(),ce->program.data());
+      // init scanner state
+      padCount=0;
+      depthIf = 0;
+      inputString = ce->program;
+      lastDefGroup.groupname.resize(0);
+      inputPosition = 0;
+      scanYYrestart( scanYYin ) ;
+      if (ce->section==Entry::ENUM_SEC)
+	BEGIN( FindFields ) ;
+      else
+	BEGIN( FindMembers ) ;
+      current_root = ce ;
+      strcpy( yyFileName, ce->fileName ) ;
+      setContext();
+      yyLineNr = ce->startLine ;
+      insideObjC = ce->objc;
+      //printf("---> Inner block starts at line %d\n",yyLineNr);
+      //current->reset();
+      current = new Entry;
+      gstat = FALSE;
+      int ni=ce->name.findRev("::"); if (ni==-1) ni=0; else ni+=2;
+      // set default protection based on the compound type
+      if( ce->section==Entry::CLASS_SEC ) // class
+      {
+	if (
+	    ce->fileName.right(4)==".php" ||
+	    ce->fileName.right(4)==".inc" ||
+	    ce->fileName.right(2)==".d"
+	   )
+          current->protection = protection = Public ; 
+	else if (ce->fileName.right(5)==".java")
+          current->protection = protection = Package ; 
+	else 
+          current->protection = protection = Private ;
+      }
+      else if (ce->section == Entry::ENUM_SEC ) // enum
+      {
+	current->protection = protection = ce->protection;
+      }
+      else if (!ce->name.isEmpty() && ce->name.at(ni)=='@') // unnamed union or namespace
+      {
+	if (ce->section == Entry::NAMESPACE_SEC ) // unnamed namespace
+	{
+          current->stat = gstat = TRUE;
+	}
+	current->protection = protection = ce->protection;
+      }
+      else if (ce->section==Entry::INTERFACE_SEC)
+      {
+	if (ce->objc)
+	{
+	  current->protection = protection = Protected ;
+	}
+	else
+	{
+	  current->protection = protection = Public ;
+	}
+      }
+      else // named struct, union, protocol, category
+      {
+	current->protection = protection = Public ;
+      }
+      mtype = Method;
+      virt = Normal;
+      //printf("name=%s current->stat=%d gstat=%d\n",ce->name.data(),current->stat,gstat);
+
+      memberGroupId = DOX_NOGROUP;
+      memberGroupRelates.resize(0);
+      memberGroupInside.resize(0);
+      
+      scanYYlex() ;
+      forceEndGroup();
+      delete current; current=0;
+      ce->program.resize(0);
+
+
+      if (depthIf>0)
+      {
+	warn(yyFileName,yyLineNr,"Documentation block ended in the middle of a conditional section!");
+      }
+    }
+    parseCompounds(ce);
+  }
+}
+
+//----------------------------------------------------------------------------
+
+void parseMain(Entry *rt)
+{
+  initParser();
+  anonCount     = 0;
+  depthIf       = 0;
+  protection    = Public;
+  mtype         = Method;
+  gstat         = FALSE;
+  virt          = Normal;
+  current_root  = rt;
+  global_root   = rt;
+  current       = new Entry;
+  inputString   = rt->program;
+  inputPosition = 0;
+  scanYYrestart( scanYYin );
+  BEGIN( FindMembers );
+  scanYYlex();
+
+  forceEndGroup();
+
+  if (depthIf>0)
+  {
+    warn(yyFileName,yyLineNr,"Documentation block ended in the middle of a conditional section!");
+  }
+
+  rt->program.resize(0);
+  delete current; current=0;
+  parseCompounds(rt);
+}
+
+#if !defined(YY_FLEX_SUBMINOR_VERSION) 
+//----------------------------------------------------------------------------
+extern "C" { // some bogus code to keep the compiler happy
+  void scannerYYdummy() { yy_flex_realloc(0,0); } 
+}
+#endif
+
diff -Naur tmp_unpack/doxygen-1.3.8.orig/src/scanner.l doxygen-1.3.8/src/scanner.l
--- tmp_unpack/doxygen-1.3.8.orig/src/scanner.l	2004-07-04 16:33:02.000000000 +0000
+++ doxygen-1.3.8/src/scanner.l	2007-07-26 07:30:15.000000000 +0000
@@ -462,7 +462,7 @@
 static void setContext()
 {
   QCString fileName = yyFileName;
-  insideIDL  = fileName.right(4)==".idl" || fileName.right(5)==".pidl" || 
+  insideIDL  = fileName.right(4)==".idl" || fileName.right(5)==".midl" || fileName.right(5)==".pidl" || 
                fileName.right(4)==".odl";
   insideJava = fileName.right(5)==".java";
   insideCS   = fileName.right(3)==".cs"; // for normal keywords add colon
diff -Naur tmp_unpack/doxygen-1.3.8.orig/src/scanner.l.orig doxygen-1.3.8/src/scanner.l.orig
--- tmp_unpack/doxygen-1.3.8.orig/src/scanner.l.orig	1970-01-01 00:00:00.000000000 +0000
+++ doxygen-1.3.8/src/scanner.l.orig	2004-07-04 16:33:02.000000000 +0000
@@ -0,0 +1,5972 @@
+/*****************************************************************************
+ *
+ * $Id: doxygen.patch,v 1.2 2007/12/12 14:03:17 mpasquat Exp $
+ *
+ * Copyright (C) 1997-2004 by Dimitri van Heesch.
+ *
+ * Permission to use, copy, modify, and distribute this software and its
+ * documentation under the terms of the GNU General Public License is hereby 
+ * granted. No representations are made about the suitability of this software 
+ * for any purpose. It is provided "as is" without express or implied warranty.
+ * See the GNU General Public License for more details.
+ *
+ * Documents produced by Doxygen are derivative works derived from the
+ * input used in their production; they are not affected by this license.
+ *
+ */
+  
+%{
+
+/*
+ *	includes
+ */
+#include <stdio.h>
+#include <stdlib.h>
+#include <assert.h>
+#include <ctype.h>
+
+#include "qtbc.h"
+#include <qarray.h>
+#include <qstack.h>
+#include <qregexp.h>
+#include <unistd.h>
+  
+#include "scanner.h"
+#include "entry.h"
+#include "doxygen.h"
+#include "message.h"
+#include "config.h"
+#include "util.h"
+#include "index.h"
+#include "defargs.h"
+#include "language.h"
+#include "outputlist.h"
+#include "membergroup.h"
+#include "reflist.h"
+#include "code.h"
+
+  
+#define YY_NEVER_INTERACTIVE 1
+
+/* -----------------------------------------------------------------
+ *
+ *	statics
+ */
+static const char *     inputString;
+static int		inputPosition;
+static int		lastContext;
+static int		lastCContext;
+static int              lastDocContext;
+static int              lastDocRelContext;
+static int              lastDocRelAlsoContext;
+static int              lastCPPContext;
+static int              lastSkipSharpContext;
+static int              lastSkipRoundContext;
+static int              lastBriefContext;
+static int              lastVerbState;
+static int              lastStringContext;
+static int              lastCurlyContext;
+static int              lastRoundContext;
+static int              lastSquareContext;
+static int              lastCodeState;
+static int              lastAfterDocContext;
+static int              lastGroupContext;
+static int              lastFormulaContext;
+static int              lastAnchorContext;
+static int              lastInitializerContext;
+static int              lastClassTemplSpecContext;
+static int              lastSkipHtmlCommentContext;
+static int              lastIfContext;
+static int              lastInternalDocContext;
+static int              lastPreLineCtrlContext;
+static int              lastSkipVerbStringContext;
+static int              lastCommentInArgContext;
+static int              nextDefContext;
+static int              overloadContext;
+static Protection	protection;
+static Protection	baseProt;
+static int		sharpCount   = 0 ;
+static int		roundCount   = 0 ;
+static int		curlyCount   = 0 ;
+static int		squareCount  = 0 ;
+static int              padCount     = 0 ;
+static int              slStartContext = 0;
+static QCString         slString;
+static Entry*		current_root = 0 ;
+static Entry*		global_root  = 0 ;
+static Entry*		current      = 0 ;
+static Entry*		previous     = 0 ;
+static Entry*		tempEntry    = 0 ;
+static int		yyLineNr     = 1 ;
+static int              anonCount    = 0 ;        
+static char		yyFileName[4096] ;
+static int              lastMemberGroupLine;
+static MethodTypes 	mtype;
+static bool    		gstat;
+static bool             removeSlashes;
+static Specifier 	virt;
+static Specifier 	baseVirt;
+static QCString         msType,msName,msArgs;
+static int              memberGroupId = DOX_NOGROUP;
+static QCString         memberGroupHeader;
+static QCString         memberGroupDocs;
+static bool             isTypedef;
+static char             afterDocTerminator;
+static int              tmpDocType;
+static QCString         sectionLabel;
+static QCString		sectionTitle;
+//static SectionInfo::SectionType      
+//                        sectionType;
+static QCString         funcPtrType;
+static QCString         templateStr;
+static QCString         aliasName;
+static QCString         baseName;
+static QCString*        specName;
+static QCString         formulaText;
+static bool             useOverrideCommands = FALSE;
+static bool             insideIDL = FALSE;		//!< processing IDL code?
+static bool             insideJava = FALSE;		//!< processing Java code?
+static bool             insideCS = FALSE;		//!< processing C# code?
+static bool             insideD = FALSE;		//!< processing D code?
+static bool             insidePHP = FALSE;		//!< processing PHP code?
+static bool             insideCppQuote = FALSE;
+static bool             insideObjC = FALSE;             //!< processing Objective C code?
+static bool             insideProtocolList = FALSE;
+
+static int              argRoundCount;
+static int              argSharpCount;
+static int              currentArgumentContext;
+static int              lastCopyArgStringContext;
+static int              lastCopyArgContext;
+static QCString         *copyArgString;
+static QCString         fullArgString;
+
+static ArgumentList     *currentArgumentList;
+//static QCString         *currentTemplateSpec;
+static char             lastCopyArgChar;
+static QCString         *pCopyRoundString;
+static QCString         *pCopyCurlyString;
+static QCString         *pCopyQuotedString;
+static QCString         *pSkipDoc;
+static QCString         *pSkipVerbString;
+static QStack<Grouping> autoGroupStack;
+static Grouping  lastDefGroup( "", Grouping::GROUPING_LOWEST );
+
+static bool             insideFormula;
+static bool  	        insideTryBlock=FALSE;
+static bool             insideCode;
+static bool             needsSemi;
+
+static int              depthIf;
+//static int  	        initializerSharpCount;
+static QCString         memberGroupRelates;
+static QCString         memberGroupInside;
+static QCString         xrefItemKey;
+static QCString         xrefItemTitle;
+static QCString         xrefListTitle;
+
+static QCString         g_skipBlockName;
+static QCString         oldStyleArgType;
+static QCString         docBackup;
+static QCString         briefBackup;
+
+
+//-----------------------------------------------------------------------------
+
+static void initParser()
+{
+  sectionLabel.resize(0);
+  sectionTitle.resize(0);
+  baseName.resize(0);
+  formulaText.resize(0);
+  protection = Public;
+  baseProt = Public;
+  sharpCount = 0;
+  roundCount = 0;
+  curlyCount = 0;
+  memberGroupId = DOX_NOGROUP;
+  memberGroupRelates.resize(0);
+  memberGroupInside.resize(0);
+  mtype = Method;
+  gstat = FALSE;
+  virt = Normal;
+  baseVirt = Normal;
+  isTypedef = FALSE;
+  autoGroupStack.clear();
+  insideTryBlock = FALSE;
+  autoGroupStack.setAutoDelete(TRUE);
+  lastDefGroup.groupname.resize(0);
+  insideFormula = FALSE;
+}
+
+static void initEntry()
+{
+  if (insideJava) protection = Package;
+  current->protection = protection ;
+  current->mtype      = mtype;
+  current->virt       = virt;
+  current->stat       = gstat;
+  current->mGrpId     = memberGroupId;
+  current->relates    = memberGroupRelates.copy();
+  current->inside     = memberGroupInside.copy();
+  if (!autoGroupStack.isEmpty())
+  {
+    //printf("Appending group %s\n",autoGroupStack.top()->groupname.data());
+    current->groups->append(new Grouping(*autoGroupStack.top()));
+  }
+}
+
+
+//-----------------------------------------------------------------------------
+
+/// remove any automatic grouping and add new one (if given)
+static void setCurrentGroup( QCString *newgroup, Grouping::GroupPri_t pri )
+{
+   /* remove auto group name from current entry and discard it */
+   Grouping *g = current->groups->first();
+   int i=0; 
+   while (g)
+   {
+     if (g->pri <= Grouping::GROUPING_AUTO_DEF)
+     {
+       current->groups->remove(i);
+       i--;
+     }
+     g=current->groups->next();
+     i++;
+   }
+
+   /* use new group name instead? */
+   if ( newgroup )
+   {
+      current->groups->append(new Grouping(*newgroup, pri));
+   } 
+}
+
+static int newMemberGroupId()
+{
+  static int curGroupId=0;
+  return curGroupId++;
+}
+
+// forward declarations
+static void startGroup();
+static void startGroupInDoc();
+static void endGroup();
+
+//-----------------------------------------------------------------------------
+
+static void lineCount()
+{
+  for( const char* c = yytext ; *c ; ++c )
+    yyLineNr += (*c == '\n') ;
+}
+
+static void addType( Entry* current )
+{
+    uint tl=current->type.length();
+    if( tl>0 && !current->name.isEmpty() && current->type.at(tl-1)!='.') 
+    {
+      current->type += ' ' ;
+    }
+    current->type += current->name ;
+    current->name.resize(0) ;
+    tl=current->type.length();
+    if( tl>0 && !current->args.isEmpty() && current->type.at(tl-1)!='.') 
+    {
+      current->type += ' ' ;
+    }
+    current->type += current->args ;
+    current->args.resize(0) ;
+    current->argList->clear();
+}
+
+
+static QCString stripQuotes(const char *s)
+{
+  QCString name;
+  if (s==0 || *s==0) return name;
+  name=s;
+  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
+  {
+    name=name.mid(1,name.length()-2);
+  }
+  return name;
+}
+
+//static QCString stripCComments(const QCString &s)
+//{
+//  int p=0,i;
+//  QCString result;
+//  while ((i=s.find("/*",p))!=-1)
+//  {
+//    result+=s.mid(p,i-p);
+//    int ei = s.find("*/",i+1);
+//    if (ei!=-1)
+//    {
+//      p=ei+2;
+//    }
+//    else
+//    {
+//      return result;
+//    }
+//  }
+//  result+=s.right(s.length()-p);
+//  printf("stripCComments: input=%s output=%s\n",s.data(),result.data());
+//  return result;
+//}
+
+static void newDocState();
+
+//-----------------------------------------------------------------
+
+static void addXRefItem(const char *listName,const char *itemTitle,const char *listTitle)
+{
+  if (listName==0) return;
+
+  //printf("addXRefItem(%s,%s,%s)\n",listName,itemTitle,listTitle);
+  ListItemInfo *lii=0;
+  RefList *refList = Doxygen::xrefLists->find(listName);
+  if (refList==0) // new list
+  {
+    refList = new RefList(listName,listTitle,itemTitle);
+    Doxygen::xrefLists->insert(listName,refList);
+    //printf("new list!\n");
+  }
+  if (current->sli)
+  {
+    QListIterator<ListItemInfo> slii(*current->sli);
+    for (slii.toFirst();(lii=slii.current());++slii)
+    {
+      if (strcmp(lii->type,listName)==0) 
+      {
+	//printf("found %s lii->type=%s\n",listName,lii->type);
+	break;
+      }
+    }
+  }
+  if (lii) // already found item of same type before
+  {
+    //printf("listName=%s item id = %d\n",listName,lii->itemId);
+    RefItem *item = refList->getRefItem(lii->itemId);
+    ASSERT(item!=0);
+    item->text += " <p>";
+    item->text += current->brief;
+    //printf("%s: text +=%s\n",listName,item->text.data());
+  }
+  else // new item
+  {
+    int itemId  = refList->addRefItem();
+    //printf("listName=%s item id = %d\n",listName,itemId);
+    char anchorLabel[1024];
+    sprintf(anchorLabel,"_%s%06d",listName,itemId);
+    RefItem *item = refList->getRefItem(itemId);
+    ASSERT(item!=0);
+    item->text = current->brief.copy();
+    item->listAnchor = anchorLabel;
+    current->addSpecialListItem(listName,itemId);
+    QCString cmdString;
+    cmdString.sprintf("\\xrefitem %s %d\n",listName,itemId);
+    current->doc += cmdString;
+    SectionInfo *si=new SectionInfo(listName,anchorLabel,
+	                            sectionTitle,SectionInfo::Anchor);
+    Doxygen::sectionDict.insert(anchorLabel,si);
+    current->anchors->append(new SectionInfo(*si));
+  }
+  current->brief  = slString.copy(); // restore orginial brief desc.
+}
+
+//-----------------------------------------------------------------------------
+
+// Adds a formula text to the list/dictionary of formulas if it was
+// not already added. Returns the label of the formula.
+static QCString addFormula()
+{
+  QCString formLabel;
+  QCString fText=formulaText.simplifyWhiteSpace();
+  Formula *f=0;
+  if ((f=Doxygen::formulaDict[fText])==0)
+  {
+    f = new Formula(fText);
+    Doxygen::formulaList.append(f);
+    Doxygen::formulaDict.insert(fText,f);
+    formLabel.sprintf("\\form#%d",f->getId());
+    Doxygen::formulaNameDict.insert(formLabel,f);
+  }
+  else
+  {
+    formLabel.sprintf("\\form#%d",f->getId());
+  }
+  return formLabel;
+}
+
+static bool nameIsOperator(QCString &name)
+{
+  int i=name.find("operator");
+  if (i==-1) return FALSE;
+  if (i==0 && !isId(name.at(8))) return TRUE; // case operator ::X
+  if (i>0 && !isId(name.at(i-1)) && !isId(name.at(i+8))) return TRUE; // case X::operator
+  return FALSE; // case TEXToperatorTEXT
+}
+
+static void checkFormula()
+{
+  if (insideFormula)
+  {
+    warn(yyFileName,yyLineNr,"Warning: End of comment block while inside formula.");
+  }
+}
+
+static void checkDocs()
+{
+  checkFormula();
+  if ((current->brief.length()>2 && 
+       current->brief.at(0)=='<' && current->brief.at(1)==' ') ||
+      (current->doc.length()>2 && 
+       current->doc.at(0)=='<' && current->doc.at(1)==' ')
+     )
+  {
+    warn(yyFileName,yyLineNr,"Warning: Found lonely '<' symbol at the start of the documentation.");
+	 
+  }
+}
+
+#if 0
+static QCString extractName(const QCString &s)
+{
+  //static const QRegExp id("[a-z_A-Z][a-z_A-Z0-9]*");
+  //int i,p=0,l;
+  //while ((i=id.match(s,p,&l))!=-1)
+  //{
+  //  QCString idstr=s.mid(i,l);
+  //  if (idstr!="struct" && idstr!="class" && idstr!="union") 
+  //  {
+  //    
+  //    return idstr;
+  //  }
+  //  p=i+l;
+  //}
+  //return "";
+  QCString result=s;
+  if (result.left(7)=="struct ") result=result.right(result.length()-7);
+  if (result.left(6)=="class " ) result=result.right(result.length()-6);
+  if (result.left(6)=="union " ) result=result.right(result.length()-6);
+  int l=result.length()-1;
+  while (l>=0 && 
+         (result.at(l)=='*' || result.at(l)==' ' || isspace(result.at(l)))
+        ) l--;
+  return removeRedundantWhiteSpace(result.left(l+1));
+}
+#endif
+
+static void setContext()
+{
+  QCString fileName = yyFileName;
+  insideIDL  = fileName.right(4)==".idl" || fileName.right(5)==".pidl" || 
+               fileName.right(4)==".odl";
+  insideJava = fileName.right(5)==".java";
+  insideCS   = fileName.right(3)==".cs"; // for normal keywords add colon
+  insideD    = fileName.right(3)==".d"; // for normal keywords add colon
+  insidePHP  = fileName.right(4)==".php" || fileName.right(5)==".php4" || 
+               fileName.right(4)==".inc" || fileName.right(6)==".phtml";
+  insideObjC = fileName.right(2)==".m" || fileName.right(2)==".M" ||
+               fileName.right(3)==".mm";
+  if ( insidePHP )
+  {
+    useOverrideCommands = TRUE;
+  }
+  //printf("setContext(%s) insideIDL=%d\n",yyFileName,insideIDL);
+}
+
+static void prependScope()
+{
+  if (current_root->section & Entry::SCOPE_MASK)
+  {
+    //printf("--- prependScope %s to %s\n",current_root->name.data(),current->name.data());
+    current->name.prepend(current_root->name+"::");
+    if (current_root->tArgLists)
+    {
+      if (current->tArgLists==0)
+      {
+	current->tArgLists = new QList<ArgumentList>;
+	current->tArgLists->setAutoDelete(TRUE);
+      }
+      //printf("prependScope #=%d #current=%d\n",current_root->tArgLists->count(),current->tArgLists->count());
+      QListIterator<ArgumentList> talsi(*current_root->tArgLists);
+      ArgumentList *srcAl=0;
+      for (talsi.toLast();(srcAl=talsi.current());--talsi)
+      {
+        ArgumentList *dstAl = new ArgumentList;
+	dstAl->setAutoDelete(TRUE);
+	QListIterator<Argument> tali(*srcAl);
+        Argument *a;
+        for (;(a=tali.current());++tali)
+        {
+          dstAl->append(new Argument(*a));
+        //printf("appending argument %s %s\n",a->type.data(),a->name.data());
+        }	  
+        current->tArgLists->insert(0,dstAl);	
+      }
+    }
+  }
+}
+
+/*! Returns TRUE iff the current entry could be a K&R style C function */
+static bool checkForKnRstyleC()
+{
+  if (((QCString)yyFileName).right(2).lower()!=".c") return FALSE; // must be a C file
+  if (!current->argList) return FALSE;
+  ArgumentListIterator ali(*current->argList);
+  Argument *a;
+  for (ali.toFirst();(a=ali.current());++ali)
+  {
+    // in K&R style argument do not have a type, but doxygen expects a type
+    // so it will think the argument has no name
+    if (a->type.isEmpty() || !a->name.isEmpty()) return FALSE;
+  }
+  return TRUE;
+}
+
+static void splitKnRArg(QCString &oldStyleArgPtr,QCString &oldStyleArgName)
+{
+  int si = current->args.length();
+  if (oldStyleArgType.isEmpty()) // new argument
+  {
+    static QRegExp re("([^)]*)");
+    int bi1 = current->args.findRev(re);
+    int bi2 = bi1!=-1 ? current->args.findRev(re,bi1-1) : -1; 
+    char c;
+    if (bi1!=-1 && bi2!=-1) // found something like "int (*func)(int arg)"
+    {
+      int s=bi2+1;
+      oldStyleArgType = current->args.left(s);
+      int i=s;
+      while (i<si && ((c=current->args.at(i))=='*' || isspace((uchar)c))) i++;
+      oldStyleArgType += current->args.mid(s,i-s);
+      s=i;
+      while (i<si && isId(current->args.at(i))) i++;
+      oldStyleArgName = current->args.mid(s,i-s);
+      oldStyleArgType+=current->args.mid(i);
+    }
+    else if (bi1!=-1) // redundant braces like in "int (*var)"
+    {
+      int s=bi1;
+      oldStyleArgType = current->args.left(s);
+      s++;
+      int i=s+1;
+      while (i<si && ((c=current->args.at(i))=='*' || isspace((uchar)c))) i++;
+      oldStyleArgType += current->args.mid(s,i-s);
+      s=i;
+      while (i<si && isId(current->args.at(i))) i++;
+      oldStyleArgName = current->args.mid(s,i-s);
+    }
+    else // normal "int *var"
+    {
+      int l=si,i=l-1,j;
+      char c;
+      // look for start of name in "type *name"
+      while (i>=0 && isId(current->args.at(i))) i--;
+      j=i+1;
+      // look for start of *'s
+      while (i>=0 && ((c=current->args.at(i))=='*' || isspace((uchar)c))) i--;
+      i++;
+      if (i!=l)
+      {
+	oldStyleArgType=current->args.left(i);
+	oldStyleArgPtr=current->args.mid(i,j-i);
+	oldStyleArgName=current->args.mid(j).stripWhiteSpace();
+      }
+      else
+      {
+	oldStyleArgName=current->args.copy().stripWhiteSpace();
+      }
+    }
+  }
+  else // continuation like *arg2 in "int *args,*arg2"
+  {
+    int l=si,j=0;
+    char c;
+    while (j<l && ((c=current->args.at(j))=='*' || isspace((uchar)c))) j++;
+    if (j>0)
+    {
+      oldStyleArgPtr=current->args.left(j);
+      oldStyleArgName=current->args.mid(j).stripWhiteSpace();
+    }
+    else
+    {
+      oldStyleArgName=current->args.copy().stripWhiteSpace();
+    }
+  }
+  //fprintf(stderr,"type=%s ptr=%s name=%s\n",oldStyleArgType.data(),oldStyleArgPtr.data(),oldStyleArgName.data());
+}
+
+/*! Update the argument \a name with additional \a type info. For K&R style
+ *  function the type is found \e after the argument list, so this routine
+ *  in needed to fix up.
+ */
+static void addKnRArgInfo(const QCString &type,const QCString &name,
+                          const QCString &brief,const QCString &docs)
+{
+  if (current->argList==0) return;
+  ArgumentListIterator ali(*current->argList);
+  Argument *a;
+  for (ali.toFirst();(a=ali.current());++ali)
+  {
+    if (a->type==name)
+    {
+      a->type=type.stripWhiteSpace();
+      if (a->type.left(9)=="register ") // strip keyword
+      {
+	a->type=a->type.mid(9);
+      }
+      a->name=name.stripWhiteSpace();
+      if (!brief.isEmpty() && !docs.isEmpty())
+      {
+        a->docs=brief+"\n\n"+docs;
+      }
+      else if (!brief.isEmpty())
+      {
+        a->docs=brief;
+      }
+      else
+      {
+	a->docs=docs;
+      }
+    }
+  }
+}
+
+/* ----------------------------------------------------------------- */
+#undef	YY_INPUT
+#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);
+
+static int yyread(char *buf,int max_size)
+{
+    int c=0;
+    while( c < max_size && inputString[inputPosition] )
+    {
+	*buf = inputString[inputPosition++] ;
+	//printf("%d (%c)\n",*buf,*buf);
+	c++; buf++;
+    }
+    return c;
+}
+
+%}
+
+       /* start command character */
+CMD	  ("\\"|"@")
+SECTIONCMD {CMD}("image"|"author"|"internal"|"version"|"date"|"deprecated"|"param"|"exception"|"return"[s]?|"retval"|"bug"|"warning"|"par"|"sa"|"see"|"pre"|"post"|"invariant"|"note"|"remark"[s]?|"todo"|"test"|"xrefitem"|"ingroup"|"callgraph"|"latexonly"|"htmlonly"|"xmlonly"|"{"|"verbatim"|"dotfile"|"dot"|"defgroup"|"addtogroup"|"weakgroup"|"class"|"namespace"|"union"|"struct"|"fn"|"var"|"details"|"typedef"|"def"|"overload")|("<"{PRE}">")
+BN        [ \t\n\r]
+BL        [ \t\r]*"\n" 
+B         [ \t]
+BS        ^(({B}*"//")?)(({B}*"*"+)?){B}*
+FILESCHAR [a-z_A-Z0-9\\:\\\/\-\+]
+FILEECHAR [a-z_A-Z0-9\-\+]
+FILE      ({FILESCHAR}*{FILEECHAR}+("."{FILESCHAR}*{FILEECHAR}+)*)|("\""[^\n\"]+"\"")
+ID        "$"?[a-z_A-Z][a-z_A-Z0-9]*
+LABELID   [a-z_A-Z][a-z_A-Z0-9\-]*
+SCOPEID   {ID}({ID}*{BN}*"::"{BN}*)*({ID}?)
+SCOPENAME "$"?(({ID}?{BN}*"::"{BN}*)*)((~{BN}*)?{ID})
+CSSCOPENAME (({ID}?{BN}*"."{BN}*)*)((~{BN}*)?{ID})
+ATTR      ({B}+[^>\n]*)?
+A         [aA]
+BR	  [bB][rR]
+PRE       [pP][rR][eE]
+TABLE	  [tT][aA][bB][lL][eE]
+P	  [pP]
+UL        [uU][lL]
+OL	  [oO][lL]
+DL	  [dD][lL]
+TITLE     [tT][iI][tT][lL][eE]
+CHARLIT   (("'"\\[0-7]{1,3}"'")|("'"\\."'")|("'"[^' \\\n]{1,4}"'"))
+PHPKW	  ("require"|"require_once"|"include"|"include_once"|"echo")[^a-zA-Z0-9_;]
+
+%option noyywrap
+
+%x	Define
+%x      DefineArg
+%x	DefineEnd
+%x	CompoundName
+%x	ClassVar
+%x	ClassCategory
+%x	ClassTemplSpec
+%x	Bases
+%x	BasesProt
+%x	NextSemi
+%x	BitFields
+%x	FindMembers
+%x	FindMembersPHP
+%x	FindMemberName
+%x      FindFields
+%x      FindFieldArg
+%x	Function
+%x	FuncRound
+%x	ExcpRound
+%x	ExcpList
+%x	FuncQual
+%x	Operator
+%x	Array
+%x	ReadBody
+%x	ReadNSBody
+%x	ReadBodyIntf
+%x	Using
+%x	UsingDirective
+%x	NameSpaceDocArg1
+%x	PackageDocArg1
+%x	SkipCurly
+%x	SkipCurlyCpp
+%x	SkipCurlyEndDoc
+%x      SkipString
+%x      SkipPHPString
+%x	SkipInits
+%x	SkipCPP
+%x	SkipCPPBlock
+%x	SkipComment
+%x	SkipCxxComment
+%x      SkipCurlyBlock
+%x      SkipRoundBlock
+%x	SkipCode
+%x	Sharp
+%x      SkipSharp
+%x	SkipRound
+%x	SkipSquare
+%x	SkipSection
+%x	IfGuard
+%x	IfNotGuard
+%x	TypedefName
+%x	TryFunctionBlock
+%x	TryFunctionBlockEnd
+%x	Comment
+%x      Doc
+%x	JavaDoc
+%x      ClassDoc
+%x      LineDoc
+%x      DefLineDoc
+%x      ClassDocArg1
+%x      CategoryDocArg1
+%x      ClassDocArg2
+%x      ClassDocArg3
+%x      ClassDocFunc
+%x      ClassDocFuncPtr
+%x      ClassDocFuncQual
+%x      ClassDocFuncSkipLine
+%x      ClassDocFuncExc
+%x	ClassDocDefine
+%x      ClassDocRelates
+%x      ClassDocRelatesAlso
+%x      ClassDocBrief
+%x      ClassDocOverload
+%x	ClassDefineArgs
+%x	DocInternal
+%x	DocInternalLine
+%x	DocBaseClass
+%x	CppQuote
+%x	EndCppQuote
+%x	GroupDocArg1
+%x	GroupDocArg2
+%x	GroupName
+%x	GroupHeader
+%x	StoreGroupDocs
+%x	AfterDoc
+%x	AfterDocBrief
+%x	AfterDocLine
+%x      PageDoc
+%x      PageDocTitle
+%x      PageDocArg1
+%x      PageDocArg2
+%x      FileDocArg1
+%x      FileDocArg2
+%x	ExampleDocArg1
+%x	EnumDocArg1
+%x	FuncPtr
+%x	EndFuncPtr
+%x	FuncPtrInit
+%x	FuncFunc
+%x	FuncFuncEnd
+%x	FuncFuncType
+%x      MemberSpec
+%x      MemberSpecSkip
+%x	SkipVerbatim
+%x      TodoParam
+%x      TestParam
+%x      BugParam
+%x      DeprecatedParam
+%x      XRefItemParam1
+%x      XRefItemParam2
+%x      XRefItemParam3
+%x      XRefItemParam4
+%x	SectionLabel
+%x	SectionTitle
+%x	SkipTemplate
+%x	EndTemplate
+%x      CopyArgString
+%x	CopyArgRound
+%x	CopyArgSharp
+%x	CopyArgComment
+%x	CopyArgCommentLine
+%x	SkipUnionSwitch
+%x	ReadFuncArgType
+%x	ReadTempArgs
+%x	Specialization
+%x      SkipHtmlComment
+%x      ReadFormulaShort
+%x	ReadFormulaLong
+%x	AnchorLabel
+%x	ReadInitializer
+%x	CopyString
+%x	CopyPHPString
+%x	CopyRound
+%x	CopyCurly
+%x	IDLUnionCase
+%x	NSAliasName
+%x	NSAliasArg
+%x	PackageName
+%x	GetCallType
+%x	JavaImport
+%x	CSAccessorDecl
+%x	PreLineCtrl
+%x	DefinePHP
+%x	DefinePHPEnd
+%x	OldStyleArgs
+%x	SkipVerbString
+%x      ObjCMethod
+%x      ObjCReturnType
+%x      ObjCParams
+%x      ObjCParamType
+%x      ObjCProtocolList
+%x	QtPropType
+%x	QtPropName
+%x	QtPropRW
+
+%%
+
+<*>\x06[^\x06]*\x06			{ // new file
+  					  if (memberGroupId!=DOX_NOGROUP)
+					  {
+					    warn(yyFileName,yyLineNr,"Warning: Missing //@}");
+					    memberGroupId=DOX_NOGROUP;
+					  }
+  					  yyLineNr= 0 ; // there is always an extra newline at the start of the file
+					  int i; 
+					  for( i = 0 ; yytext[i+1] != 6 ; i++ )
+					    yyFileName[i] = yytext[i+1] ;
+					  yyFileName[i] = 0 ;
+					  setContext();
+					  msg("Parsing file %s...\n",yyFileName);
+					  current_root  = global_root ;
+					  initParser();
+					  current->reset();
+					  int sec=guessSection(yyFileName);
+					  if (sec)
+					  {
+					    current->name    = yyFileName;
+					    current->section = sec;
+					    current_root->addSubEntry(current);
+					    current          = new Entry;
+					  }
+					  if ( insidePHP )
+					  {
+					    BEGIN( FindMembersPHP );
+					  }
+					  else
+					  {
+					    BEGIN( FindMembers );
+					  }
+                                        }
+<NextSemi>"{"				{
+  					  curlyCount=0;
+					  needsSemi = TRUE;
+  					  BEGIN(SkipCurlyBlock); 
+					}
+<NextSemi>"("				{
+  				 	  roundCount=0;
+  					  BEGIN(SkipRoundBlock);
+  					}
+<SkipRoundBlock>"("			{
+					  ++roundCount;
+  					}
+<SkipRoundBlock>")"			{
+  					  if (roundCount )
+					    --roundCount ;
+					  else
+					    BEGIN( NextSemi ) ;
+  					}
+<SkipCurlyBlock>"{"			{
+  					  ++curlyCount ; 
+					}
+<SkipCurlyBlock>"}"			{ 
+  				          if( curlyCount )
+					  {
+					    --curlyCount ;
+					  }
+					  else if (needsSemi)
+					  {
+					    BEGIN( NextSemi );
+					  }
+					  else
+					  {
+					    BEGIN( FindMembers );
+					  }
+					}
+<NextSemi>{CHARLIT}			{ if (insidePHP) REJECT; }
+<NextSemi>\"				{
+  					  lastStringContext=NextSemi;
+					  BEGIN(SkipString);
+  					}
+<NextSemi>[;,]				{ 
+  					  unput(*yytext);
+  					  BEGIN( FindMembers ); 
+					}
+<BitFields>[;,]				{
+  					  unput(*yytext);
+					  BEGIN( FindMembers );
+  					}
+<FindMembersPHP>"<?"("php"?)            { // PHP code start
+                                           BEGIN( FindMembers );
+					}
+<FindMembersPHP>[^\n<]+                 { // Non-PHP code text, ignore
+  					}
+<FindMembersPHP>\n                      { // Non-PHP code text, ignore
+  					  yyLineNr++;
+  					}
+<FindMembersPHP>.                       { // Non-PHP code text, ignore
+				        }
+<FindMembers>"?>"                       { // PHP code end
+					  if (insidePHP)
+					    BEGIN( FindMembersPHP );
+					  else
+					    REJECT;
+                                        }
+
+<FindMembers>{PHPKW}			{ if (insidePHP)
+					    BEGIN( NextSemi );
+					  else
+					    REJECT;
+					}
+<FindMembers>{B}*("properties"|"__property"){BN}*":"{BN}*  { // IDL or Borland C++ builder property 
+  					  current->mtype = mtype = Property;
+					  current->protection = protection = Public ;
+					  current->type.resize(0); 
+					  current->name.resize(0); 
+					  current->args.resize(0);
+					  current->argList->clear();
+					  lineCount() ;
+					}
+
+<FindMembers>{B}*"k_dcop"{BN}*":"{BN}*  { current->mtype = mtype = DCOP;
+					  current->protection = protection = Public ;
+					  current->type.resize(0); 
+					  current->name.resize(0); 
+					  current->args.resize(0);
+					  current->argList->clear();
+					  lineCount() ;
+					}
+
+<FindMembers>{B}*"signals"{BN}*":"{BN}* { current->mtype = mtype = Signal;
+					  current->protection = protection = Public ;
+					  current->type.resize(0); 
+					  current->name.resize(0); 
+					  current->args.resize(0);
+					  current->argList->clear();
+					  lineCount() ;
+					}
+
+<FindMembers>{B}*"public"{BN}*"slots"{BN}*":"{BN}* {
+					  current->protection = protection = Public ;
+					  current->mtype = mtype = Slot;
+					  current->type.resize(0); 
+					  current->name.resize(0); 
+					  current->args.resize(0);
+					  current->argList->clear();
+					  lineCount();
+					}
+
+<FindMembers>{B}*"protected"{BN}*"slots"{BN}*":"{BN}* {
+					  current->protection = protection = Protected ;
+					  current->mtype = mtype = Slot;
+					  current->type.resize(0); 
+					  current->name.resize(0); 
+					  current->args.resize(0);
+					  current->argList->clear();
+					  lineCount();
+					}
+
+<FindMembers>{B}*"private"{BN}*"slots"{BN}*":"{BN}* {
+					  current->protection = protection = Private ;
+					  current->mtype = mtype = Slot;
+					  current->type.resize(0); 
+					  current->name.resize(0); 
+					  current->args.resize(0);
+					  current->argList->clear();
+					  lineCount();
+					}
+<FindMembers>{B}*("public"|"methods"|"__published"){BN}*":"{BN}* { 
+					  current->protection = protection = Public ;
+					  current->mtype = mtype = Method;
+					  current->type.resize(0); 
+					  current->name.resize(0); 
+					  current->args.resize(0);
+					  current->argList->clear();
+					  lineCount() ;
+					}
+<FindMembers>{B}*"protected"{BN}*":"{BN}* { 
+  					  current->protection = protection = Protected ;
+					  current->mtype = mtype = Method;
+					  current->type.resize(0); 
+					  current->name.resize(0); 
+					  current->args.resize(0);
+					  current->argList->clear();
+					  lineCount() ;
+					}
+<FindMembers>{B}*"private"{BN}*":"{BN}*	{ 
+  					  current->protection = protection = Private ;
+					  current->mtype = mtype = Method;
+					  current->type.resize(0); 
+					  current->name.resize(0); 
+					  current->args.resize(0);
+					  current->argList->clear();
+					  lineCount() ;
+					}
+<FindMembers>{B}*"@private"{BN}+	{
+  					  current->protection = protection = Private ;
+					  current->mtype = mtype = Method;
+					  current->type.resize(0); 
+					  current->name.resize(0); 
+					  current->args.resize(0);
+					  current->argList->clear();
+					  lineCount() ;
+  					}
+<FindMembers>{B}*"@protected"{BN}+	{
+  					  current->protection = protection = Protected ;
+					  current->mtype = mtype = Method;
+					  current->type.resize(0); 
+					  current->name.resize(0); 
+					  current->args.resize(0);
+					  current->argList->clear();
+					  lineCount() ;
+  					}
+<FindMembers>{B}*"@public"{BN}+	{
+  					  current->protection = protection = Public ;
+					  current->mtype = mtype = Method;
+					  current->type.resize(0); 
+					  current->name.resize(0); 
+					  current->args.resize(0);
+					  current->argList->clear();
+					  lineCount() ;
+  					}
+<FindMembers>[\-+]{BN}*			{
+  					  if (!insideObjC) 
+					  {
+					    REJECT;
+					  }
+					  else
+					  {
+  					    lineCount();
+					    current->fileName  = yyFileName;
+					    current->startLine = yyLineNr;
+					    current->bodyLine  = yyLineNr;
+					    current->section = Entry::FUNCTION_SEC;
+					    current->protection = protection = Public ;
+					    current->virt = Virtual;
+					    current->stat=yytext[0]=='+';
+					    current->mtype = mtype = Method;
+					    current->type.resize(0); 
+					    current->name.resize(0); 
+					    current->args.resize(0);
+					    current->argList->clear();
+					    BEGIN( ObjCMethod );
+					  }
+  					}
+<ObjCMethod>"("				{ // start of method's return type
+  					  BEGIN( ObjCReturnType );
+  					}
+<ObjCMethod>{ID}			{ // found method name
+  					  if (current->type.isEmpty())
+					  {
+					    current->type = "id";
+					  }
+					  current->name = yytext;
+  					}
+<ObjCMethod>":"{B}*			{ // start of parameter list
+  					  current->name += ':';
+  					  Argument *a = new Argument;
+					  current->argList->append(a);
+  					  BEGIN( ObjCParams );
+  					}
+<ObjCReturnType>[^)]*			{ // TODO: check if nested braches are possible.
+  					  current->type = yytext;
+  					}
+<ObjCReturnType>")"			{
+  					  BEGIN( ObjCMethod );
+  					}
+<ObjCParams>{ID}{BN}*/":"		{ // Keyword of parameter
+  					  lineCount();
+					  QCString keyw = QCString(yytext).stripWhiteSpace();
+					  current->name += keyw;
+					  if (current->argList->getLast()->type.isEmpty())
+					  {
+					    current->argList->getLast()->type="id";
+					  }
+  					  Argument *a = new Argument;
+  					  a->attrib=(QCString)"["+keyw+"]";
+					  current->argList->append(a);
+  					}
+<ObjCParams>{ID}{BN}*			{ // name of parameter
+  					  lineCount();
+  					  current->argList->getLast()->name=QCString(yytext).stripWhiteSpace();
+  					}
+<ObjCParams>"..."			{ // name of parameter
+  					  current->argList->getLast()->attrib="[,]";
+  					  current->argList->getLast()->type="...";
+  					}
+<ObjCParams>":"				{ 
+					  current->name += ':';
+					}
+<ObjCParams>"("				{
+  					  BEGIN( ObjCParamType );
+  					}
+<ObjCParamType>[^)]*			{
+  					  current->argList->getLast()->type=yytext;
+  					}
+<ObjCParamType>")"{B}*			{
+  					  BEGIN( ObjCParams );
+  					}
+<ObjCMethod,ObjCParams>";"		{ // end of method declaration
+  					  current->args = argListToString(current->argList);
+					  //printf("argList=%s\n",current->args.data());
+  					  unput(';');
+  					  BEGIN( Function );
+  					}
+<ObjCMethod,ObjCParams>"{"		{ // start of a method body
+                                          //printf("Type=%s Name=%s args=%s\n",
+					  //    current->type.data(),current->name.data(),argListToString(current->argList).data()
+					  //    );
+                                          unput('{');
+  					  BEGIN( Function );
+  					}
+<FindMembers>{BN}{1,80}			{
+  					  lineCount();
+  					}
+<PackageName>{ID}("."{ID})*		{
+  					  isTypedef=FALSE;
+					  current->name = yytext;
+					  current->name = substitute(current->name,".","::");
+					  current->section = Entry::NAMESPACE_SEC;
+					  current->type = "namespace" ;
+					  current->fileName  = yyFileName;
+					  current->startLine = yyLineNr;
+					  current->bodyLine  = yyLineNr;
+					  lineCount();
+					  curlyCount=0;
+					  current_root->addSubEntry(current);
+                                          current_root = current ;
+					  current             = new Entry ;
+					  initEntry();
+					  BEGIN( FindMembers ) ;
+  					}
+<PackageName>";"			{
+  					  BEGIN(FindMembers);
+  					}
+<FindMembers>{B}*"static"{BN}+     	{ //current->type += " static ";
+  					  current->stat = TRUE;
+					  lineCount();
+					}
+<FindMembers>{B}*"extern"{BN}+		{
+  					  current->stat = FALSE;
+					  current->explicitExternal = TRUE;
+					  lineCount();
+  					}
+<FindMembers>{B}*"virtual"{BN}+    	{ current->type += " virtual ";
+					  current->virt = Virtual;
+					  lineCount();
+					}
+<FindMembers>{B}*"abstract"{BN}+    	{ current->type += " abstract ";
+					  current->virt = Pure;
+					  lineCount();
+					}
+<FindMembers>{B}*"inline"{BN}+		{ current->memSpec|=Entry::Inline;
+                                          lineCount(); 
+                                        }
+<FindMembers>{B}*"mutable"{BN}+		{ current->memSpec|=Entry::Mutable;
+                                          lineCount(); 
+                                        }
+<FindMembers>{B}*"explicit"{BN}+	{ current->memSpec|=Entry::Explicit;
+                                          lineCount(); 
+                                        }
+  /*
+<FindMembers>{B}*"import"{BN}+		{ // IDL import keyword
+  					  BEGIN( NextSemi );
+  					}
+  */
+<FindMembers>{B}*"typename"{BN}+	{ lineCount(); }
+<FindMembers>{B}*"namespace"{BN}*/[^a-z_A-Z0-9]	{ 
+  					  isTypedef=FALSE;
+					  current->section = Entry::NAMESPACE_SEC;
+					  current->type = "namespace" ;
+					  current->fileName  = yyFileName;
+					  current->startLine = yyLineNr;
+					  current->bodyLine  = yyLineNr;
+					  lineCount();
+  					  BEGIN( CompoundName ); 
+					}
+<FindMembers>{B}*"module"{BN}+		{ 
+					  lineCount();
+                                          if (insideIDL)
+					  {
+  					    isTypedef=FALSE;
+					    current->section = Entry::NAMESPACE_SEC;
+					    current->type = "module" ;
+					    current->fileName  = yyFileName;
+					    current->startLine = yyLineNr;
+					    current->bodyLine  = yyLineNr;
+  					    BEGIN( CompoundName ); 
+					  }
+					  else if (insideD)
+					  {
+					    lineCount();
+					    BEGIN(PackageName);
+					  }
+					  else
+					  {
+					    addType( current ) ;
+					    current->name = QCString(yytext).stripWhiteSpace();
+					  }
+					}
+<FindMembers>{B}*"library"{BN}+		{ 
+					  lineCount();
+                                          if (insideIDL)
+					  {
+  					    isTypedef=FALSE;
+					    current->section = Entry::NAMESPACE_SEC;
+					    current->type = "library" ;
+					    current->fileName  = yyFileName;
+					    current->startLine = yyLineNr;
+					    current->bodyLine  = yyLineNr;
+  					    BEGIN( CompoundName ); 
+					  }
+					  else
+					  {
+					    addType( current ) ;
+					    current->name = QCString(yytext).stripWhiteSpace();
+					  }
+					}
+<FindMembers>{B}*((("disp")?"interface")|"valuetype"){BN}+ 	{ // M$/Corba IDL interface
+					  lineCount();
+                                          if (insideIDL || insideJava || insideCS || insideD)
+					  {
+  					    isTypedef=FALSE;
+					    current->section = Entry::INTERFACE_SEC;
+					    addType( current ) ;
+					    current->type += " interface" ;
+					    current->fileName  = yyFileName;
+					    current->startLine = yyLineNr;
+					    current->bodyLine  = yyLineNr;
+					    BEGIN( CompoundName );
+					  }
+					  else
+					  {
+					    addType( current ) ;
+					    current->name = QCString(yytext).stripWhiteSpace();
+					  }
+  					}
+<FindMembers>{B}*"@implementation"{BN}+	{ // Objective-C class implementation
+					  lineCount();
+  					  isTypedef=FALSE;
+					  current->section = Entry::OBJCIMPL_SEC;
+					  current->objc = insideObjC = TRUE;
+					  current->protection = protection = Public ;
+					  addType( current ) ;
+					  current->type += " implementation" ;
+					  current->fileName  = yyFileName;
+					  current->startLine = yyLineNr;
+					  current->bodyLine  = yyLineNr;
+					  BEGIN( CompoundName );
+  					}
+<FindMembers>{B}*"@interface"{BN}+	{ // Objective-C class interface
+					  lineCount();
+  					  isTypedef=FALSE;
+					  current->section = Entry::INTERFACE_SEC;
+					  current->objc = insideObjC = TRUE;
+					  current->protection = protection = Public ;
+					  addType( current ) ;
+					  current->type += " interface" ;
+					  current->fileName  = yyFileName;
+					  current->startLine = yyLineNr;
+					  current->bodyLine  = yyLineNr;
+					  BEGIN( CompoundName );
+  					}
+<FindMembers>{B}*"@protocol"{BN}+	{ // Objective-C protocol definition
+					  lineCount();
+  					  isTypedef=FALSE;
+					  current->section = Entry::PROTOCOL_SEC;
+					  current->objc = insideObjC = TRUE;
+					  current->protection = protection = Public ;
+					  addType( current ) ;
+					  current->type += " protocol" ;
+					  current->fileName  = yyFileName;
+					  current->startLine = yyLineNr;
+					  current->bodyLine  = yyLineNr;
+					  BEGIN( CompoundName );
+  					}
+<FindMembers>{B}*"exception"{BN}+ 	{ // Corba IDL exception
+  					  isTypedef=FALSE;
+					  current->section = Entry::EXCEPTION_SEC;
+					  addType( current ) ;
+					  current->type += " exception" ;
+					  current->fileName  = yyFileName;
+					  current->startLine = yyLineNr;
+					  current->bodyLine  = yyLineNr;
+					  lineCount();
+					  BEGIN( CompoundName );
+  					}
+<FindMembers>"@class" | // for Objective C class declarations
+<FindMembers>{B}*(("typedef"{BN}+)?)("volatile"{BN}+)?"class{" |
+<FindMembers>{B}*(("typedef"{BN}+)?)("volatile"{BN}+)?"class"{BN}+ { 
+					  isTypedef=((QCString)yytext).find("typedef")!=-1;
+  					  current->section = Entry::CLASS_SEC;
+					  addType( current ) ;
+					  current->type += " class" ;
+					  current->fileName  = yyFileName;
+					  current->startLine = yyLineNr;
+					  current->bodyLine  = yyLineNr;
+					  lineCount() ;
+					  if (yytext[yyleng-1]=='{') unput('{');
+					  BEGIN( CompoundName ) ;
+					}
+<FindMembers>{B}*"coclass"{BN}+		{
+  					  if (insideIDL)
+					  {
+					    isTypedef=FALSE;
+					    current->section = Entry::CLASS_SEC;
+					    addType( current ) ;
+					    current->type += " coclass" ;
+					    current->fileName  = yyFileName;
+					    current->startLine = yyLineNr;
+					    current->bodyLine  = yyLineNr;
+					    lineCount() ;
+					    BEGIN( CompoundName ) ;
+					  }
+					  else
+					  {
+  					    addType(current);
+					    current->name = yytext;
+					    current->name = current->name.stripWhiteSpace();
+					    lineCount();
+					  }
+  					}
+<FindMembers>{B}*(("typedef"{BN}+)?)("volatile"{BN}+)?"struct{" | 
+<FindMembers>{B}*(("typedef"{BN}+)?)("volatile"{BN}+)?"struct"/{BN}+ { 
+					  isTypedef=((QCString)yytext).find("typedef")!=-1;
+  					  current->section = Entry::STRUCT_SEC ;
+					  addType( current ) ;
+					  current->type += " struct" ;
+					  current->fileName  = yyFileName;
+					  current->startLine = yyLineNr;
+					  current->bodyLine  = yyLineNr;
+					  lineCount() ;
+					  if (yytext[yyleng-1]=='{') unput('{');
+					  BEGIN( CompoundName ) ;
+					}
+<FindMembers>{B}*(("typedef"{BN}+)?)("volatile"{BN}+)?"union{" |
+<FindMembers>{B}*(("typedef"{BN}+)?)("volatile"{BN}+)?"union"{BN}+ { 
+					  isTypedef=((QCString)yytext).find("typedef")!=-1;
+  					  current->section = Entry::UNION_SEC ;
+					  addType( current ) ;
+					  current->type += " union" ;
+					  current->fileName  = yyFileName;
+					  current->startLine = yyLineNr;
+					  current->bodyLine  = yyLineNr;
+					  lineCount() ;
+					  if (yytext[yyleng-1]=='{') unput('{');
+					  BEGIN( CompoundName ) ;
+					}
+<FindMembers>{B}*(("typedef"{BN}+)?)"enum{" | 
+<FindMembers>{B}*(("typedef"{BN}+)?)"enum"{BN}+	{ 
+					  isTypedef=((QCString)yytext).find("typedef")!=-1;
+  					  current->section = Entry::ENUM_SEC ;
+					  addType( current ) ;
+					  current->type += " enum" ;
+					  current->fileName  = yyFileName;
+					  current->startLine = yyLineNr;
+					  current->bodyLine  = yyLineNr;
+					  lineCount() ;
+					  if (yytext[yyleng-1]=='{') unput('{');
+					  BEGIN( CompoundName ) ;
+					}
+<Operator>"("{BN}*")"{BN}*/"("		{
+  					  lineCount();
+    					  current->name += yytext ;
+					  current->name = current->name.simplifyWhiteSpace();
+					  BEGIN( FindMembers ) ;
+  					}
+<Operator>";"				{ // can occur when importing members
+  					  unput(';');
+					  BEGIN( FindMembers ) ;
+  					}
+<Operator>[^(]				{ 
+    					  lineCount();
+    					  current->name += *yytext ;
+					}
+<Operator>"<>"				{ /* skip guided templ specifiers */ }
+<Operator>"("				{
+					  current->name = current->name.simplifyWhiteSpace();
+					  unput(*yytext);
+					  BEGIN( FindMembers ) ;
+					}
+<FindMembers>"template"({BN}*)"<"/[>]?	{ 
+  					  lineCount();
+					  if (current->tArgLists==0)
+					  {
+					    current->tArgLists = new QList<ArgumentList>;
+					    current->tArgLists->setAutoDelete(TRUE);
+					  }
+					  ArgumentList *al = new ArgumentList;
+					  al->setAutoDelete(TRUE);
+					  current->tArgLists->append(al);
+					  currentArgumentList = al;
+					  templateStr="<";
+					  fullArgString = templateStr.copy();
+					  copyArgString = &templateStr;
+					  currentArgumentContext = FindMembers;
+					  BEGIN( ReadTempArgs );
+  					}
+<FindMembers>"namespace"{BN}+/{ID}{BN}*"=" { // namespace alias
+                                          lineCount(); 
+  					  BEGIN( NSAliasName );
+					}
+<NSAliasName>{ID}			{
+  					  aliasName = yytext;
+					  BEGIN( NSAliasArg );
+  					}
+<NSAliasArg>({ID}"::")*{ID}		{
+  					  //printf("Inserting namespace alias %s::%s->%s\n",current_root->name.data(),aliasName.data(),yytext);
+					  //if (current_root->name.isEmpty())
+					  //{
+                                          // TODO: namespace aliases are now treated as global entities
+                                          // while they should be aware of the scope they are in
+                                            Doxygen::namespaceAliasDict.insert(aliasName,new QCString(yytext));
+					  //}
+					  //else
+					  //{
+                                          //  Doxygen::namespaceAliasDict.insert(current_root->name+"::"+aliasName,
+					  //	new QCString(current_root->name+"::"+yytext));
+					  //}
+  					}
+<NSAliasArg>";"				{
+  					  BEGIN( FindMembers );
+  					}
+<JavaImport>({ID}{BN}*"."{BN}*)+"*"	{ // package import => add as a using directive
+  					  lineCount();
+  					  QCString scope=yytext;
+					  current->name=removeRedundantWhiteSpace(substitute(scope.left(scope.length()-2),".","::"));
+                                          current->fileName = yyFileName; 
+  					  current->section=Entry::USINGDIR_SEC;
+					  current_root->addSubEntry(current);
+					  current = new Entry ;
+					  initEntry();
+					  BEGIN(Using);
+  					}
+<JavaImport>({ID}{BN}*"."{BN}*)+{ID}	{ // class import => add as a using declaration
+                                          lineCount();
+  					  QCString scope=yytext;
+					  current->name=removeRedundantWhiteSpace(substitute(scope,".","::"));
+					  //printf("import name = %s -> %s\n",yytext,current->name.data());
+                                          current->fileName = yyFileName; 
+  					  current->section=Entry::USINGDECL_SEC;
+					  current_root->addSubEntry(current);
+					  current = new Entry ;
+					  initEntry();
+					  BEGIN(Using);
+  					}
+<FindMembers>"using"{BN}+		{ 
+					  current->startLine=yyLineNr; 
+                                          lineCount(); 
+                                          BEGIN(Using); 
+                                        }
+<Using>"namespace"{BN}+			{ lineCount(); BEGIN(UsingDirective); }
+<Using>{ID}{BN}*({BN}*("::"|"."){BN}*{ID})*	{
+                                          lineCount();
+  					  current->name=yytext;
+                                          current->fileName = yyFileName; 
+  					  current->section=Entry::USINGDECL_SEC;
+					  current_root->addSubEntry(current);
+					  current             = new Entry ;
+					  if (insideCS) /* Hack: in C# a using declaration and 
+							   directive have the same syntax, so we
+							   also add it as a using directive here
+							 */
+					  {
+					    current->name=yytext;
+					    current->fileName = yyFileName; 
+					    current->startLine = yyLineNr;
+					    current->section=Entry::USINGDIR_SEC;
+					    current_root->addSubEntry(current);
+					    current             = new Entry ;
+					  }
+					  initEntry();
+					  BEGIN(Using);
+  					}
+<UsingDirective>{SCOPENAME}		{ current->name=yytext;
+                                          current->fileName = yyFileName; 
+  					  current->section=Entry::USINGDIR_SEC;
+					  current_root->addSubEntry(current);
+					  current             = new Entry ;
+					  initEntry();
+					  BEGIN(Using);
+  					}
+<Using>";"				{ BEGIN(FindMembers); }
+<FindMembers>{SCOPENAME}{BN}*"<>"	{ // guided template decl
+					  QCString n=yytext;
+					  addType( current );
+					  current->name=n.left(n.length()-2);
+					}
+<FindMembers>{SCOPENAME}{BN}*/"<"	{ // Note: this could be a return type!
+  					  sharpCount=0;
+					  lineCount();
+					  addType( current );
+  					  current->name=yytext;
+					  current->name=current->name.stripWhiteSpace();
+					  //current->scopeSpec.resize(0);
+					  // currentTemplateSpec = &current->scopeSpec;
+					  if (nameIsOperator(current->name))
+					    BEGIN( Operator );
+					  else
+					    BEGIN( EndTemplate );
+					}
+<FindMemberName>{SCOPENAME}{BN}*/"<"	{
+  					  sharpCount=0;
+					  lineCount();
+  					  current->name+=((QCString)yytext).stripWhiteSpace();
+					  //current->memberSpec.resize(0);
+					  // currentTemplateSpec = &current->memberSpec;
+					  if (nameIsOperator(current->name))
+					    BEGIN( Operator );
+					  else
+					    BEGIN( EndTemplate );
+  					}
+<EndTemplate>"<<"			{
+  					  current->name+=yytext;
+  					  // *currentTemplateSpec+=yytext; 
+  					}
+<EndTemplate>"<"			{ 
+  					  current->name+='<';
+  					  // *currentTemplateSpec+='<'; 
+					  sharpCount++; 
+					}
+<EndTemplate>">>"			{
+  					  current->name+=yytext;
+  					  // *currentTemplateSpec+=yytext; 
+  					}
+<EndTemplate>">"			{
+  					  current->name+='>';
+					  // *currentTemplateSpec+='>';
+					  if (--sharpCount<=0)
+					  {  
+					    //printf("Found %s\n",current->name.data());
+					    BEGIN(FindMembers);
+					  }
+					}
+<EndTemplate>">"{BN}*"("		{ 
+  					  lineCount();
+  					  current->name+='>';
+					  // *currentTemplateSpec+='>';
+					  if (--sharpCount<=0)
+					  {
+					    current->args = "(";
+					    currentArgumentContext = FuncQual;
+					    fullArgString = current->args.copy();
+					    copyArgString = &current->args;
+					    //printf("Found %s\n",current->name.data());
+					    BEGIN( ReadFuncArgType ) ;
+					  }
+					}
+<EndTemplate>">"{BN}*/"("({BN}*{ID}{BN}*"::")*({BN}*"*"{BN}*)+ { // function pointer returning a template instance
+  					  lineCount();
+  					  current->name+='>';
+					  BEGIN(FindMembers);
+  					}
+<EndTemplate>">"{BN}*/"::"		{
+  					  lineCount();
+  					  current->name+='>';
+  					  // *currentTemplateSpec+='>';
+					  if (--sharpCount<=0)
+					  {
+					    BEGIN(FindMemberName);
+					  }
+  					}
+<EndTemplate>.				{ 
+  					  current->name+=*yytext;
+  					  // *currentTemplateSpec+=*yytext; 
+					}
+<FindMembers>"define"{BN}*"("{BN}*["']	{
+					  if (insidePHP)
+					  {
+					    current->bodyLine = yyLineNr;
+					    BEGIN( DefinePHP );
+					  }
+					  else
+					    REJECT;
+					}
+<FindMembers>"Q_OBJECT"			{ // Qt object macro
+  					}
+<FindMembers>"Q_PROPERTY"		{ // Qt property declaration
+					  current->protection = protection = Public ;
+  					  current->mtype = mtype = Property;
+  					  BEGIN(QtPropType);
+  					}
+<QtPropType>{ID}			{
+  					  current->type=yytext;
+                                          BEGIN(QtPropName);
+  					}
+<QtPropName>{ID}			{
+  					  current->name=yytext;
+  					  BEGIN(QtPropRW);
+  					}
+<QtPropRW>"READ"			{
+  					  current->memSpec |= Entry::Readable;
+  					}
+<QtPropRW>"WRITE"			{
+  					  current->memSpec |= Entry::Writable;
+  					}
+<QtPropRW>")"				{
+  					  unput(';');
+					  BEGIN(FindMembers);
+  					}
+<FindMembers,FindMemberName>{SCOPENAME}	{
+					  lineCount();
+                                          if (insideIDL && yyleng==9 && strcmp(yytext,"cpp_quote")==0)
+					  {
+					    BEGIN(CppQuote);
+					  }
+					  else if ((insideIDL || insideJava || insideD) && yyleng==6 && strcmp(yytext,"import")==0)
+					  {
+					    if (insideIDL)
+					      BEGIN(NextSemi);
+					    else // insideJava or insideD
+					      BEGIN(JavaImport);
+					  }
+					  else if (insideJava && strcmp(yytext,"package")==0)
+					  {
+  					    lineCount();
+					    BEGIN(PackageName);
+					  }
+					  else if (insideIDL && strcmp(yytext,"case")==0)
+					  {
+					    BEGIN(IDLUnionCase);
+					  }
+					  else if (insideTryBlock && strcmp(yytext,"catch")==0)
+					  {
+					    insideTryBlock=FALSE;
+					    BEGIN(TryFunctionBlock);
+					  }
+					  else
+					  {
+					    if (YY_START==FindMembers)
+					    {
+					      addType( current ) ;
+					    }
+					    bool javaLike = insideJava || insideCS || insideD;
+					    if (javaLike && strcmp(yytext,"public")==0)
+					    {
+					      current->protection = Public;
+					    }
+					    else if (javaLike && strcmp(yytext,"protected")==0)
+					    {
+					      current->protection = Protected;
+					    }
+					    else if (javaLike && strcmp(yytext,"private")==0)
+					    {
+					      current->protection = Private;
+					    }
+					    else
+					    {
+					      if (YY_START==FindMembers)
+					        current->name  = yytext;
+					      else
+						current->name += yytext;
+					      if (current->name.left(7)=="static ")
+					      {
+						current->stat = TRUE;
+						current->name= current->name.mid(7);
+					      }
+					      else if (current->name.left(7)=="inline ")
+					      {
+						if (current->type.isEmpty())
+						{
+						  current->type="inline";
+						}
+						else
+						{
+						  current->type+="inline ";
+						}
+						current->name= current->name.mid(7);
+					      }
+					      else if (current->name.left(6)=="const ")
+					      {
+						if (current->type.isEmpty())
+						{
+						  current->type="const";
+						}
+						else
+						{
+						  current->type+="const ";
+						}
+						current->name=current->name.mid(6);
+					      }
+					    }
+					    QCString tmp=yytext;
+					    if (nameIsOperator(tmp))
+                                            {
+					      BEGIN( Operator );
+                                            }
+					    else
+                                            {
+		 			      BEGIN(FindMembers);
+                                            }
+					  }
+					}
+<FindMembers>"."			{
+  					  if (insideJava || insideCS || insideD)
+					  {
+					    current->name+=".";
+					  }
+  					}
+<FindMembers>"::"			{
+					  current->name+=yytext;
+  					}
+<CppQuote>"("{B}*"\""			{
+  					  insideCppQuote=TRUE;
+  					  BEGIN(FindMembers);
+  					}
+<IDLUnionCase>"::"
+<IDLUnionCase>":"			{ BEGIN(FindMembers); }
+<IDLUnionCase>\n			{ yyLineNr++; }
+<IDLUnionCase>.
+<TryFunctionBlock>\n			{ yyLineNr++; }
+<TryFunctionBlock>"{"			{ 
+					  curlyCount=0;
+					  lastCurlyContext = TryFunctionBlockEnd ;
+  					  BEGIN( SkipCurly );
+					}
+<TryFunctionBlock>.
+<TryFunctionBlockEnd>"catch"		{ BEGIN(TryFunctionBlock); }
+<TryFunctionBlockEnd>.			{ unput(*yytext); 
+  					  BEGIN( FindMembers );
+					}
+<EndCppQuote>")"			{
+  					  insideCppQuote=FALSE;
+					  BEGIN(FindMembers);
+  					}
+<FindMembers>{B}*"#"			{ if (insidePHP)
+					    REJECT;
+					  lastCPPContext = YY_START;
+					  BEGIN( SkipCPP ) ;
+					}
+<FindMembers>{B}*"#"{B}*"define"	{ if (insidePHP)
+					    REJECT;
+  					  current->bodyLine = yyLineNr;
+  					  BEGIN( Define );
+  					}
+<FindMembers,ReadBody,ReadNSBody,ReadBodyIntf,SkipCurly,SkipCurlyCpp>{B}*"#"{B}+[0-9]+{B}+/"\""	{ /* line control directive */
+                                          yyLineNr = atoi(&yytext[1]);
+					  //printf("setting line number to %d\n",yyLineNr);
+					  lastPreLineCtrlContext = YY_START;
+  					  BEGIN( PreLineCtrl );
+  					}
+<PreLineCtrl>"\""[^\n\"]*"\""		{
+				          strncpy(yyFileName,stripQuotes(yytext),4096);	
+  					}
+<PreLineCtrl>.				{}
+<PreLineCtrl>\n				{
+                                          yyLineNr++;
+  					  BEGIN( lastPreLineCtrlContext );
+  					}
+<SkipCPP>.
+<SkipCPP>\\[\r]*"\n"[\r]*		{ yyLineNr++ ; }
+<SkipCPP>[\r]*\n[\r]*			{ yyLineNr++ ;
+					  BEGIN( lastCPPContext) ;
+					}
+<Define>{ID}{B}*"("			{
+  					  current->name = yytext;
+					  current->name = current->name.left(current->name.length()-1).stripWhiteSpace();
+					  current->args = "(";
+  					  current->bodyLine = yyLineNr;
+					  currentArgumentContext = DefineEnd;
+					  fullArgString=current->args.copy();
+					  copyArgString=&current->args;
+					  BEGIN( ReadFuncArgType ) ;
+  					}
+ /*
+<DefineArg>")"				{
+  					  //printf("Define with args\n");
+  					  current->args += ')';
+  					  BEGIN( DefineEnd );
+  					}
+<DefineArg>.				{
+  					  current->args += *yytext;
+  					}
+  */
+<Define>{ID}				{
+  					  //printf("Define `%s' without args\n",yytext);
+  					  current->bodyLine = yyLineNr;
+  					  current->name = yytext;
+					  BEGIN(DefineEnd);
+  					}
+<DefineEnd>\n				{
+  					  //printf("End define\n");
+					  yyLineNr++;
+					  current->fileName   = yyFileName;
+					  current->startLine  = yyLineNr;
+					  current->type.resize(0);
+  					  current->args       = current->args.simplifyWhiteSpace();
+  					  current->name       = current->name.stripWhiteSpace();
+					  current->section    = Entry::DEFINE_SEC;
+					  current_root->addSubEntry(current);
+					  current             = new Entry ;
+					  initEntry();
+					  BEGIN(FindMembers);
+  					}
+<DefinePHPEnd>";"			{
+  					  //printf("End define\n");
+					  current->fileName   = yyFileName;
+					  current->startLine  = yyLineNr;
+					  current->type.resize(0);
+  					  current->args       = current->args.simplifyWhiteSpace();
+  					  current->name       = current->name.stripWhiteSpace();
+					  current->section    = Entry::ENUM_SEC;  //HACK!
+					  current_root->addSubEntry(current);
+					  current             = new Entry ;
+					  initEntry();
+					  BEGIN(FindMembers);
+  					}
+<DefinePHPEnd>.
+<DefineEnd>\\[\r]?\n			{
+  					  yyLineNr++;
+  					}
+<DefineEnd>\"				{
+					  if (insideIDL && insideCppQuote)
+					  {
+					    BEGIN(EndCppQuote);
+					  }
+					  else
+					  {
+					    lastStringContext=DefineEnd;
+					    BEGIN(SkipString);
+					  }
+  					}
+<DefineEnd>.				
+<DefinePHP>{ID}["']{BN}*","{BN}*	{
+  					  current->name = yytext;
+					  current->name = current->name.stripWhiteSpace();
+					  current->name = current->name.left(current->name.length()-1).stripWhiteSpace();
+					  current->name = current->name.left(current->name.length()-1);
+					  current->args = "(";
+  					  current->bodyLine = yyLineNr;
+  					  lastRoundContext = DefinePHPEnd;
+  					  pCopyRoundString = &current->args;
+					  roundCount = 0;
+  					  BEGIN( CopyRound );
+					}
+
+<FindMembers>[*&]+			{ current->name += yytext ; 
+  					  addType( current );
+					}
+<FindMembers,MemberSpec,Function,NextSemi,BitFields,ReadInitializer,OldStyleArgs>";"{BN}*("/**"|"//!"|"/*!"|"///")"<" {
+  					  lineCount();
+					  if (current->bodyLine==-1)
+					    current->bodyLine=yyLineNr;
+					  lastAfterDocContext = YY_START;
+					  afterDocTerminator = ';';
+					  if (yytext[yyleng-3]=='/')
+					  {
+					    current->brief.resize(0);
+					    current->briefLine = yyLineNr;
+					    current->briefFile = yyFileName;
+					    BEGIN(AfterDocLine);
+					  }
+					  else if (yytext[yyleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF"))
+					  {
+					    current->brief.resize(0);
+					    current->briefLine = yyLineNr;
+					    current->briefFile = yyLineNr;
+					    current->docLine = yyLineNr;
+					    current->docFile = yyFileName;
+					    BEGIN(AfterDocBrief);
+					  }
+					  else
+					  {
+					    current->doc.resize(0);
+					    current->docLine = yyLineNr;
+					    current->docFile = yyFileName;
+					    BEGIN(AfterDoc);
+					  }
+  					}
+<MemberSpec,FindFields,FindMembers,NextSemi,BitFields,ReadInitializer,OldStyleArgs>","{BN}*("/**"|"//!"|"/*!"|"///")"<" {
+  					  lineCount();
+					  lastAfterDocContext = YY_START;
+					  afterDocTerminator = ',';
+					  if (yytext[yyleng-3]=='/')
+					  {
+					    current->brief.resize(0);
+					    current->briefLine = yyLineNr;
+					    current->briefFile = yyLineNr;
+					    BEGIN(AfterDocLine);
+					  }
+					  else if (yytext[yyleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF"))
+					  {
+					    current->brief.resize(0);
+					    current->briefLine = yyLineNr;
+					    current->briefFile = yyLineNr;
+					    current->docLine = yyLineNr;
+					    current->docFile = yyFileName;
+					    BEGIN(AfterDocBrief);
+					  }
+					  else
+					  {
+					    current->doc.resize(0);
+					    current->docLine = yyLineNr;
+					    current->docFile = yyFileName;
+					    BEGIN(AfterDoc);
+					  }
+  					}
+<DefineEnd,FindFields,FindFieldArg,ReadInitializer,OldStyleArgs>{BN}*("/**"|"//!"|"/*!"|"///")"<" {
+  					  lineCount();
+					  lastAfterDocContext = YY_START;
+					  if (YY_START==DefineEnd)
+					  {
+					    afterDocTerminator = '\n';
+					    yyLineNr--;
+					  }
+					  else
+					    afterDocTerminator = 0;
+					  if (yytext[yyleng-3]=='/')
+					  {
+					    current->brief.resize(0);
+					    current->briefLine = yyLineNr;
+					    current->briefFile = yyFileName;
+					    BEGIN(AfterDocLine);
+					  }
+					  else if (yytext[yyleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF"))
+					  {
+					    current->brief.resize(0);
+					    current->briefLine = yyLineNr;
+					    current->briefFile = yyFileName;
+					    BEGIN(AfterDocBrief);
+					  }
+					  else
+					  {
+					    current->doc.resize(0);
+					    current->docLine = yyLineNr;
+					    current->docFile = yyFileName;
+					    BEGIN(AfterDoc);
+					  }
+  					}
+<FindMembers,FindFields>("//"([!/]?){B}*{CMD}"{")|("/*"([!*]?){B}*{CMD}"{")	{
+  					  startGroup();
+					  tmpDocType=-1;
+					  if (current_root->section & Entry::SCOPE_MASK)
+                                          {
+					      current->inside = current_root->name+"::";
+                                              if (current->mGrpId!=DOX_NOGROUP)
+                                              {
+                                                memberGroupInside = current->inside.copy();
+                                              }
+                                          }
+					  if (yytext[1]=='/') // C++ style comment
+					  {
+  					    current->brief.resize(0);
+					    current->briefLine = yyLineNr;
+					    current->briefFile = yyFileName;
+					    lastDocContext = YY_START;
+					    BEGIN( LineDoc );
+					  }
+					  else // C style comment 
+					  {
+					    current->doc.resize(0);
+					    current->docLine = yyLineNr;
+					    current->docFile = yyFileName;
+					    lastDocContext = YY_START;
+					    removeSlashes=FALSE;
+					    BEGIN( Doc );
+					  }
+  					}
+<FindMembers,FindFields,ReadInitializer>"//"([!/]?){B}*{CMD}"}".*|"/*"([!*]?){B}*{CMD}"}".*"*/"	{
+                                          if (memberGroupId==DOX_NOGROUP && autoGroupStack.isEmpty())
+                                          {
+                                            warn(yyFileName,yyLineNr,
+	                                        "Warning: end of group without matching begin.");
+                                          }
+                                          //printf("end of member group marker ends group %d\n",memberGroupId);
+  					  endGroup();
+                                          memberGroupHeader.resize(0);
+  					}
+<FindMembers>"="			{
+  					  current->bodyLine = yyLineNr;
+					  lastInitializerContext = YY_START;
+					  //initializerSharpCount=0;
+					  BEGIN(ReadInitializer);
+  					}
+  /* Read initializer rules */
+<ReadInitializer>"("			{
+  					  lastRoundContext=YY_START;
+  					  pCopyRoundString=&current->initializer;
+					  roundCount=0;
+  					  current->initializer+=*yytext; 
+  					  BEGIN(CopyRound);
+  					}
+<ReadInitializer>"{"			{
+  					  lastCurlyContext=YY_START;
+  					  pCopyCurlyString=&current->initializer;
+					  curlyCount=0;
+  					  current->initializer+=*yytext; 
+  					  BEGIN(CopyCurly);
+  					}
+<ReadInitializer>[;,]			{
+  					  //printf(">> initializer `%s' <<\n",current->initializer.data());
+  					  //if (initializerSharpCount==0)
+					  //{
+  					  if (*yytext==';' || lastInitializerContext==FindFields)
+					  {
+  					    unput(*yytext);
+  					    BEGIN(lastInitializerContext);
+					  }
+					  //}
+					  //else
+					  //{
+  					  //  current->initializer+=*yytext; 
+					  //}
+  					}
+<ReadInitializer>\"			{
+					  if (insideIDL && insideCppQuote)
+  					  {
+					    BEGIN(EndCppQuote);
+					  }
+					  else
+					  {
+                                            lastStringContext=YY_START;
+  					    current->initializer+=*yytext; 
+  					    pCopyQuotedString=&current->initializer;
+					    BEGIN(CopyString);
+					  }
+					}
+  /*
+<ReadInitializer>"->"			{
+  					  current->initializer+=yytext; 
+					}
+<ReadInitializer>"<<"			{
+  					  current->initializer+=yytext; 
+					}
+<ReadInitializer>">>"			{
+  					  current->initializer+=yytext; 
+  					}
+<ReadInitializer>\<			{
+  					  initializerSharpCount++;
+  					  current->initializer+=*yytext; 
+  					}
+<ReadInitializer>\>			{
+  					  initializerSharpCount--;
+  					  current->initializer+=*yytext; 
+  					}
+  */
+<ReadInitializer>{CHARLIT}              { 
+                                          if (insidePHP) 
+					  {
+					    REJECT;
+					  }
+					  else
+					  {  
+					    current->initializer+=yytext; 
+					  }
+                                        } 
+<ReadInitializer>\n			{
+  					  current->initializer+=*yytext;
+					  yyLineNr++;
+  					}
+<ReadInitializer>"@\""			{ 
+  					  current->initializer+=yytext;
+                                          if (!insideCS) REJECT;
+					  // C# verbatim string
+					  lastSkipVerbStringContext=YY_START;
+					  pSkipVerbString=&current->initializer;
+					  BEGIN(SkipVerbString);
+					}
+<SkipVerbString>[^\n"]+			{
+					  *pSkipVerbString+=yytext;
+					}
+<SkipVerbString>"\"\""			{ // quote escape
+					  *pSkipVerbString+=yytext;
+					}
+<SkipVerbString>"\""			{
+					  *pSkipVerbString+=*yytext;
+					  BEGIN(lastSkipVerbStringContext);
+					}
+<SkipVerbString>\n			{
+					  *pSkipVerbString+=*yytext;
+					  yyLineNr++;
+  					}
+<SkipVerbString>.			{
+					  *pSkipVerbString+=*yytext;
+  					}
+<ReadInitializer>.			{ 
+  					  current->initializer+=*yytext; 
+					}
+
+  /* generic quoted string copy rules */
+<CopyString,CopyPHPString>\\.		{
+  					  *pCopyQuotedString+=yytext;
+  					}
+<CopyString>\"				{ 
+  					  *pCopyQuotedString+=*yytext;
+  					  BEGIN( lastStringContext ); 
+					}
+<CopyPHPString>\'			{ 
+  					  *pCopyQuotedString+=*yytext;
+  					  BEGIN( lastStringContext ); 
+					}
+<CopyString,CopyPHPString>"/*"|"*/"|"//" {
+  					  *pCopyQuotedString+=yytext;
+  					}
+<CopyString,CopyPHPString>\n		{
+  					  *pCopyQuotedString+=*yytext;
+  					  yyLineNr++;
+  					}
+<CopyString,CopyPHPString>.		{
+  					  *pCopyQuotedString+=*yytext;
+  					}
+
+  /* generic round bracket list copy rules */
+<CopyRound>\"				{
+					  *pCopyRoundString+=*yytext;
+  					  pCopyQuotedString=pCopyRoundString;
+					  lastStringContext=YY_START;
+					  BEGIN(CopyString);
+					}
+<CopyRound>"("				{
+  					  *pCopyRoundString+=*yytext;
+  					  roundCount++;
+  					}
+<CopyRound>")"				{
+  					  *pCopyRoundString+=*yytext;
+					  if (--roundCount<0)
+					    BEGIN(lastRoundContext);
+  					}
+<CopyRound>\n				{
+  					  yyLineNr++;
+  					  *pCopyRoundString+=*yytext;
+  					}
+<CopyRound>{CHARLIT}		        { 
+                                          if (insidePHP)
+					  {
+					    REJECT;
+					  }
+					  else
+					  {
+                                            *pCopyRoundString+=yytext; 
+					  }
+                                        }
+<CopyRound>[^"'()\n]+			{
+  					  *pCopyRoundString+=yytext;
+  					}
+<CopyRound>.				{
+  					  *pCopyRoundString+=*yytext;
+  					}
+
+  /* generic curly bracket list copy rules */
+<CopyCurly>\"				{
+					  *pCopyCurlyString+=*yytext;
+  					  pCopyQuotedString=pCopyCurlyString;
+					  lastStringContext=YY_START;
+					  BEGIN(CopyString);
+					}
+<CopyCurly>"{"				{
+  					  *pCopyCurlyString+=*yytext;
+					  curlyCount++;
+  					}
+<CopyCurly>"}"				{
+					  *pCopyCurlyString+=*yytext;
+					  if (--curlyCount<0)
+					    BEGIN(lastCurlyContext); 
+  					}
+<CopyCurly>{CHARLIT}                    { if (insidePHP) 
+                                          { 
+					    REJECT; 
+					  } 
+					  else 
+					  {
+					    *pCopyCurlyString+=yytext; 
+					  }
+                                        }
+<CopyCurly>[^"'{}\/\n]+			{
+  					  *pCopyCurlyString+=yytext;
+  					}
+<CopyCurly>"/"				{ *pCopyCurlyString+=yytext; }
+<CopyCurly>\n				{
+  					  yyLineNr++;
+					  *pCopyCurlyString+=*yytext;
+  					}
+<CopyCurly>.				{
+					  *pCopyCurlyString+=*yytext;
+  					}
+<FindMembers>":"			{
+  					  if (current->type.isEmpty()) // bit pad field
+					  {
+					    addType(current);
+					    current->name.sprintf("__pad%d__",padCount++);
+					  }
+  					  BEGIN(BitFields);
+					  current->bitfields+=":";
+  					}
+<BitFields>.				{
+  					  current->bitfields+=*yytext;
+  					}
+<FindMembers>[;,]			{ 
+  					  QCString oldType = current->type.copy();
+					  if (current->bodyLine==-1)
+					  {
+					    current->bodyLine = yyLineNr;
+					  }
+                                          if ( insidePHP && current->type.left(3) == "var" )
+                                          {
+                                            current->type = current->type.mid(3);
+                                          }
+					  current->type=current->type.simplifyWhiteSpace();
+					  current->args=removeRedundantWhiteSpace(current->args);
+					                // was: current->args.simplifyWhiteSpace();
+					  current->name=current->name.stripWhiteSpace();
+					  //if (!current->name.isEmpty() && current->type.left(8)=="typedef ")
+					  //{
+					  //  // add typedef to dictionary
+					  //  QCString dest = extractName(current->type.right(current->type.length()-8));
+					  //  if (Doxygen::typedefDict[current->name]==0 && !dest.isEmpty())
+					  //  {		
+					  //    //printf("1>>>>>>>>>> adding %s->%s\n",current->name.data(),dest.data());
+					  //    QCString scope;
+					  //    if (current_root->section & Entry::SCOPE_MASK) scope=current_root->name;
+                                          //    Doxygen::typedefDict.insert(current->name, new TypedefInfo(dest,scope));
+					  //  }
+					  //}
+					  current->section = Entry::VARIABLE_SEC ;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  //printf("New variable type=`%s' name=`%s' groupId=%d\n",current->type.data(),current->name.data(),current->mGrpId);
+					  current_root->addSubEntry( current ) ;
+					  if ( *yytext == ',')
+					  {
+					    current = new Entry(*current);
+					    current->name.resize(0);
+					    current->args.resize(0);
+					    current->initializer.resize(0);
+					    current->bitfields.resize(0);
+					    int i=oldType.length(); 
+					    while (i>0 && (oldType[i-1]=='*' || oldType[i-1]=='&' || oldType[i-1]==' ')) i--;
+					    current->type = oldType.left(i);
+					  }
+					  else
+					  {
+					    current = new Entry ;
+					    initEntry();
+					  }
+					  BEGIN( FindMembers ) ;
+					}
+
+<FindMembers>"["			{ 
+					  if (current->name.isEmpty() || current->name=="typedef") // IDL function property
+					  {
+					    squareCount=1;
+					    lastSquareContext = YY_START;
+					    BEGIN(SkipSquare);
+					  }
+					  else
+					  {
+  					    current->args += yytext ;
+					    squareCount=1;
+					    BEGIN( Array ) ;
+					  }
+					}
+<Array>"]"				{ current->args += *yytext ;
+					  if (--squareCount<=0)
+	                                     BEGIN( FindMembers ) ;
+					}
+<Array>"["				{ current->args += *yytext ;
+					  squareCount++;	
+					}
+<Array>.				{ current->args += *yytext ; }
+<SkipSquare>"["				{ squareCount++; }
+<SkipSquare>"]"				{
+  					  if (--squareCount<=0)
+					    BEGIN( lastSquareContext );
+  					}
+<SkipSquare>\"				{
+  					  lastStringContext=YY_START;
+  				          BEGIN( SkipString ); 
+					}
+<SkipSquare>[^\n\[\]\"]+
+<FindMembers>"<"			{ addType( current ) ;
+					  current->type += yytext ;
+					  BEGIN( Sharp ) ;
+					}
+<Sharp>">"				{ current->type += *yytext ;
+					  if (--sharpCount<=0)
+	                                     BEGIN( FindMembers ) ;
+					}
+<Sharp>"<"				{ current->type += *yytext ;
+					  sharpCount++;	
+					}
+<Sharp>{BN}+				{
+  					  lineCount();
+					}
+<Sharp>.				{ current->type += *yytext ; }
+<FindFields>{ID}			{
+  					  current->name = yytext;
+					}
+<FindFields>"="				{
+  					  lastInitializerContext = YY_START;
+					  //initializerSharpCount=0;
+  					  BEGIN(ReadInitializer);
+  					}
+<FindFields>","				{
+					  //printf("adding `%s' `%s' `%s' to enum `%s' (mGrpId=%d)\n",
+					  //     current->type.data(), current->name.data(),
+					  //     current->args.data(), current_root->name.data(),current->mGrpId);
+  					  if (!current->name.isEmpty())
+					  {
+					    current->fileName   = yyFileName;
+					    current->startLine  = yyLineNr;
+					    current->type       = "@"; // enum marker
+  					    current->args       = current->args.simplifyWhiteSpace();
+  					    current->name       = current->name.stripWhiteSpace();
+					    current->section    = Entry::VARIABLE_SEC;
+					    // add to the scope of the enum
+					    current_root->addSubEntry(current);
+					    current             = new Entry(*current);
+					    // add to the scope surrounding the enum (copy!)
+					    current_root->parent->addSubEntry(current);
+					    current             = new Entry ;
+					    initEntry();
+					  }
+					  else // probably a redundant , 
+					  {
+				     	    current->reset();
+					  }
+  					}
+<FindFields>"["				{ // attribute list in IDL
+					  squareCount=1;
+					  lastSquareContext = YY_START;
+					  BEGIN(SkipSquare);
+  					}
+  /*
+<FindFieldArg>","			{ unput(*yytext); BEGIN(FindFields); }
+  */
+<ReadBody,ReadNSBody,ReadBodyIntf>[^\r\n\#{}"@'/]*	{ current->program += yytext ; }
+<ReadBody,ReadNSBody,ReadBodyIntf>"//".*		{ current->program += yytext ; }
+<ReadBody,ReadNSBody,ReadBodyIntf>"#".*		{ if (! insidePHP)
+					    REJECT;
+					  current->program += yytext ;
+					}
+<ReadBody,ReadNSBody,ReadBodyIntf>@\"	{ current->program += yytext ; 
+                                          pSkipVerbString = &current->program;
+                                          lastSkipVerbStringContext=YY_START;
+                                          BEGIN( SkipVerbString );
+					}
+<ReadBody,ReadNSBody,ReadBodyIntf>\"	{ current->program += yytext ; 
+                                          pCopyQuotedString = &current->program;
+                                          lastStringContext=YY_START;
+                                          BEGIN( CopyString );
+					}
+<ReadBody,ReadNSBody,ReadBodyIntf>"/*"{B}*		{ current->program += yytext ;
+					  lastContext = YY_START ;
+					  BEGIN( Comment ) ;
+					}
+<ReadBody,ReadNSBody,ReadBodyIntf>"/*"{BL}		{ current->program += yytext ;
+					  ++yyLineNr ;
+					  lastContext = YY_START ;
+					  BEGIN( Comment ) ;
+					}
+<ReadBody,ReadNSBody,ReadBodyIntf>{CHARLIT} { 
+                                              if (insidePHP) 
+					      {
+						REJECT; // for PHP code single quotes 
+					                // are used for strings of arbitrary length
+					      }
+					      else
+					      {
+                                                current->program += yytext; 
+					      }
+                                            }
+<ReadBody,ReadNSBody,ReadBodyIntf>"{"       { current->program += yytext ;
+					  ++curlyCount ;
+					}
+<ReadBody,ReadNSBody>"}"		{ //err("ReadBody count=%d\n",curlyCount);
+  					  if ( curlyCount>0 )
+					  {
+					    current->program += yytext ;
+					    --curlyCount ;
+					  }
+					  else
+					  {
+					    current->endBodyLine = yyLineNr;
+					    QCString &cn = current->name;
+					    QCString rn = current_root->name.copy();
+					    //printf("cn=`%s' rn=`%s'\n",cn.data(),rn.data());
+					    if (!cn.isEmpty() && !rn.isEmpty())
+					    {
+					      prependScope();
+					      //cn.prepend(rn+"::");
+					    }
+					    if (isTypedef && cn.isEmpty())
+					    {
+					      //printf("Typedef Name\n");
+					      BEGIN( TypedefName );
+					    }
+					    else
+					    {
+					      if (current->section == Entry::ENUM_SEC)
+					      {
+					        current->program+=','; // add field terminator
+					      }
+					      // add compound definition to the tree
+					      current->args=removeRedundantWhiteSpace(current->args);
+					                // was: current->args.simplifyWhiteSpace();
+  					      current->type = current->type.simplifyWhiteSpace();
+  					      current->name = current->name.stripWhiteSpace();
+					      //printf("adding `%s' `%s' `%s' brief=%s insideObjC=%d %x\n",current->type.data(),current->name.data(),current->args.data(),current->brief.data(),insideObjC,current->section);
+					      if (insideObjC && 
+						  (current->section==Entry::INTERFACE_SEC || current->section==Entry::CATEGORY_SEC)
+						 ) // method definition follows
+					      {
+				                BEGIN( ReadBodyIntf ) ;
+					      }
+					      else
+					      {
+					        current_root->addSubEntry( current ) ;
+						current = new Entry(*current);
+						if (current->section==Entry::NAMESPACE_SEC || 
+						    current->section==Entry::INTERFACE_SEC ||
+						    insideJava || insidePHP || insideCS || insideD
+						   )
+						{ // namespaces and interfaces and java classes ends with a closing bracket without semicolon
+						  current->reset();
+						  initEntry();
+						  BEGIN( FindMembers ) ;
+						}
+						else
+						{
+						  BEGIN( MemberSpec ) ;
+						}
+					      }
+					    }
+					  }
+					}
+<ReadBody>"}"{BN}+"typedef"{BN}+	{ //err("ReadBody count=%d\n",curlyCount);
+  					  if ( curlyCount>0 )
+					  {
+					    current->program += yytext ;
+					    --curlyCount ;
+					  }
+					  else
+					  {
+					    lineCount();
+					    isTypedef = TRUE;
+					    current->endBodyLine = yyLineNr;
+					    QCString &cn = current->name;
+					    QCString rn = current_root->name.copy();
+					    if (!cn.isEmpty() && !rn.isEmpty())
+					    {
+					      prependScope();
+					    }
+					    BEGIN( TypedefName );
+					  }
+					}
+<TypedefName>{ID}			{
+  					  if (current->section == Entry::ENUM_SEC)
+					  {
+					    current->program+=","; // add field terminator
+					  }
+  				          current->name=yytext;
+					  prependScope();
+  					  current->args = current->args.simplifyWhiteSpace();
+  					  current->type = current->type.simplifyWhiteSpace();
+					  //printf("Adding compound %s %s %s\n",current->type.data(),current->name.data(),current->args.data());
+					  current_root->addSubEntry( current ) ;
+					  current = new Entry;
+					  initEntry();
+  					  BEGIN(MemberSpecSkip); 
+  					}
+<TypedefName>";"			{ /* typedef of anonymous type */
+					  current->name.sprintf("@%d",anonCount++);
+					  if (current->section == Entry::ENUM_SEC)
+					  {
+					    current->program+=','; // add field terminator
+					  }
+					  // add compound definition to the tree
+  					  current->args = current->args.simplifyWhiteSpace();
+  					  current->type = current->type.simplifyWhiteSpace();
+					  current_root->addSubEntry( current ) ;
+					  current = new Entry(*current);
+					  unput(';');
+					  BEGIN( MemberSpec ) ;
+  					}
+<MemberSpec>([*&]*{BN}*)*{ID}("["[a-z_A-Z0-9]*"]")* { // the [] part could be improved.
+  					  lineCount();
+  					  int i=0,l=yyleng,j;
+					  while (i<l && (!isId(yytext[i]))) i++;
+					  msName = yytext; 
+					  msName = msName.right(msName.length()-i);
+					  j=msName.find("[");
+					  if (j!=-1) 
+					  {
+					    msArgs=msName.right(msName.length()-j);
+					    msName=msName.left(j);
+					  }
+					  msType = yytext; msType=msType.left(i);
+					}
+<MemberSpec>[,;]			{
+                                          //printf("current->name=`%s' msName=`%s'\n",current->name.data(),msName.data());
+  					  if (msName.isEmpty() && !current->name.isEmpty())
+					   /* && (current->section & Entry::COMPOUND_MASK)) */
+					  { 
+					    // see if the compound does not have a name or is inside another
+					    // annonymous compound. If so we insert a 
+					    // special `annonymous' variable.
+					    Entry *p=current_root;
+					    while (p)
+					    {
+					      // only look for class scopes, not namespace scopes
+					      if ((p->section & Entry::COMPOUND_MASK) && !p->name.isEmpty())
+					      {
+						//printf("Trying scope `%s'\n",p->name.data());
+						int i=p->name.findRev("::");
+						int pi = (i==-1) ? 0 : i+2;
+						if (p->name.at(pi)=='@')
+						{
+						  // annonymous compound inside -> insert dummy variable name
+						  //printf("Adding annonymous variable for scope %s\n",p->name.data());
+						  msName.sprintf("@%d",anonCount++); 
+						  break;
+						}
+					      }
+					      p=p->parent;
+					    }
+					  }
+					  if (!msName.isEmpty())
+					  {
+  					    Entry *varEntry=new Entry;
+					    varEntry->protection = current->protection ;
+                                            varEntry->mtype = current->mtype;
+					    varEntry->virt = current->virt;
+					    varEntry->stat = current->stat;
+					    varEntry->section = Entry::VARIABLE_SEC;
+					    varEntry->name = msName.stripWhiteSpace();
+					    varEntry->type = current->type.simplifyWhiteSpace()+" ";
+					    varEntry->args = msArgs; //current->args.simplifyWhiteSpace();
+					    //if (!current->name.isEmpty() && current->name[0]!='@' && 
+					    //    current->parent->section & Entry::COMPOUND_MASK)
+					    //  varEntry->type+=current->parent->name+"::";
+					    if (isTypedef)
+					    {
+					      varEntry->type.prepend("typedef ");
+					    //  //printf("current->name = %s %s\n",current->name.data(),msName.data());
+					    //  if (!current->name.isEmpty() && current->name.at(0)!='@')
+					    //  {
+					    //	//printf("2>>>>>>>>>> adding %s->%s\n",msName.data(),current->name.data());
+					    //    QCString scope;
+					    //    if (current_root->section & Entry::SCOPE_MASK) scope=current_root->name;
+                                            //    Doxygen::typedefDict.insert(msName,new TypedefInfo(current->name,scope));
+					    //  }
+					    }
+					    varEntry->type+=current->name+msType;
+					    varEntry->fileName = yyFileName;
+					    varEntry->startLine = yyLineNr;
+					    varEntry->doc = current->doc.copy();
+					    varEntry->brief = current->brief.copy();
+					    varEntry->mGrpId = current->mGrpId;
+
+					    // deep copy group list
+					    QListIterator<Grouping> gli(*current->groups);
+					    Grouping *g;
+					    for (;(g=gli.current());++gli)
+					    {
+					      varEntry->groups->append(new Grouping(*g));
+					    }
+
+					    //printf("Add: type=`%s',name=`%s',args=`%s'\n",
+					    //      varEntry->type.data(),varEntry->name.data(),varEntry->args.data());
+					    current_root->addSubEntry(varEntry);
+					  }
+					  if (*yytext==';')
+					  {
+					    msType.resize(0);
+					    msName.resize(0);
+					    msArgs.resize(0);
+					    isTypedef=FALSE;
+					    current->reset();
+					    initEntry();
+					    BEGIN( FindMembers );
+					  }
+  					}
+<MemberSpec>"="				{ 
+  					  lastInitializerContext=YY_START;
+					  //initializerSharpCount=0;
+  					  BEGIN(ReadInitializer);
+  					  /* BEGIN(MemberSpecSkip); */
+					}
+  /*
+<MemberSpecSkip>"{"			{
+  					  curlyCount=0;
+					  lastCurlyContext = MemberSpecSkip;
+					  previous = current;
+  					  BEGIN(SkipCurly);
+  					}
+  */
+<MemberSpecSkip>","			{ BEGIN(MemberSpec); }
+<MemberSpecSkip>";"		        { unput(';'); BEGIN(MemberSpec); }
+<ReadBody,ReadNSBody,ReadBodyIntf>{BN}+	{ current->program += yytext ;
+					  lineCount() ;
+					}
+<ReadBodyIntf>"@end"			{ // end of Objective C block
+					  current_root->addSubEntry( current ) ;
+  					  current=new Entry;
+					  initEntry();
+					  insideObjC=FALSE;
+					  BEGIN( FindMembers ); 
+  					}
+<ReadBody,ReadNSBody,ReadBodyIntf>"'"	{
+  					  if (!insidePHP)
+					  {
+					    current->program += yytext;
+					  }
+					  else
+					  { // begin of single quoted string
+					    current->program += yytext;
+                                            pCopyQuotedString = &current->program;
+                                            lastStringContext=YY_START;
+					    BEGIN(CopyPHPString);
+					  }
+  					}
+<ReadBody,ReadNSBody,ReadBodyIntf>.	{ current->program += yytext ; }
+<ReadBody,ReadNSBody,ReadBodyIntf>"'#"	{ current->program += yytext ; }
+
+<FindMembers>"("/({BN}*{ID}{BN}*"::")*{ID}{BN}*")"{BN}*"(" | /* typedef void (A::func_t)(args...) */
+<FindMembers>("("({BN}*{ID}{BN}*"::")*({BN}*"*"{BN}*)+)+ {   /* typedef void (A::*ptr_t)(args...) */
+  					  current->bodyLine = yyLineNr;
+  					  lineCount();
+  					  addType(current);
+					  funcPtrType=yytext;
+					  roundCount=0;
+					  //current->type += yytext;
+					  BEGIN( FuncPtr );
+  					}
+<FuncPtr>{SCOPENAME}			{
+  					  current->name = yytext;
+					  if (current->name=="const" || current->name=="volatile")
+					  {
+					    funcPtrType += current->name;
+					  }
+					  else
+					  {
+					    BEGIN( EndFuncPtr );
+					  }
+  					}
+<FuncPtr>.				{
+  					  //printf("Error: FuncPtr `%c' unexpected at line %d of %s\n",*yytext,yyLineNr,yyFileName);
+  					}
+<EndFuncPtr>")"{BN}*/";"		{ // a variable with extra braces
+ 					  lineCount();
+					  current->type+=funcPtrType.data()+1;
+  					  BEGIN(FindMembers);
+  					}
+<EndFuncPtr>")"{BN}*/"("		{ // a function pointer
+  					  lineCount();
+					  current->type+=funcPtrType+")";
+					  BEGIN(FindMembers);
+  					}
+<EndFuncPtr>")"{BN}*/"["		{ // an array of variables
+  					  lineCount();
+					  current->type+=funcPtrType.data();
+					  current->args += ")";
+					  BEGIN(FindMembers);
+  					}
+<EndFuncPtr>"("				{ // a function returning a function
+  					  current->args += *yytext ;
+					  roundCount=0;
+					  BEGIN( FuncFunc );
+  					}
+<EndFuncPtr>"["[^\n\]]*"]"		{
+  					  funcPtrType+=yytext;
+  					}
+<EndFuncPtr>")"				{
+  					  BEGIN(FindMembers);
+  					}
+<FuncFunc>"("				{
+  					  current->args += *yytext ;
+  					  ++roundCount;
+					}
+<FuncFunc>")"				{
+  					  current->args += *yytext ;
+  					  if ( roundCount )
+					    --roundCount;
+					  else
+					  {
+					    BEGIN(FuncFuncEnd);
+					  }
+  					}
+<FuncFuncEnd>")"{BN}*"("		{
+  					  lineCount();
+					  current->type+=funcPtrType+")(";
+					  BEGIN(FuncFuncType);
+  					}
+<FuncFuncEnd>")"{BN}*/[;{]		{
+  					  lineCount();
+					  current->type+=funcPtrType.data()+1;
+  					  BEGIN(Function);
+  					}
+<FuncFuncEnd>.				{
+  					  current->args += *yytext;
+  					}
+<FuncFuncType>"("			{
+  					  current->type += *yytext;
+					  roundCount++;
+  					}
+<FuncFuncType>")"			{
+  					  current->type += *yytext;
+  					  if (roundCount)
+					    --roundCount;
+					  else
+					    BEGIN(Function);
+					}
+<FuncFuncType>{BN}*","{BN}*		{ lineCount() ; current->type += ", " ; }
+<FuncFuncType>{BN}+			{ lineCount() ; current->type += ' ' ; }
+<FuncFuncType>.				{
+  					  current->type += *yytext;
+  					}
+<FindMembers>"("/{BN}*{ID}{BN}*"*"{BN}*{ID}*")(" { // for catching typedef void (__stdcall *f)() like definitions
+                                          if (current->type.left(7)=="typedef" && current->bodyLine==-1) 
+					    // the bodyLine check is to prevent this guard to be true more than once
+					  {
+  					    current->bodyLine = yyLineNr;
+					    BEGIN( GetCallType );
+					  }
+					  else if (!current->name.isEmpty()) // normal function
+					  {
+					    current->args = yytext;
+					    current->bodyLine = yyLineNr;
+					    currentArgumentContext = FuncQual;
+					    fullArgString=current->args.copy();
+					    copyArgString=&current->args;
+					    BEGIN( ReadFuncArgType ) ;
+					    //printf(">>> Read function arguments!\n");
+					  }
+					}
+<GetCallType>{BN}*{ID}{BN}*"*"		{
+  					  lineCount();
+  					  addType(current);
+					  funcPtrType="(";
+					  funcPtrType+=yytext;
+					  roundCount=0;
+					  BEGIN( FuncPtr );
+  					}
+<FindMembers>"("			{ 
+                                          if (!current->name.isEmpty())
+					  {
+					    current->args = yytext;
+					    current->bodyLine = yyLineNr;
+					    currentArgumentContext = FuncQual;
+					    fullArgString=current->args.copy();
+					    copyArgString=&current->args;
+					    BEGIN( ReadFuncArgType ) ;
+					    //printf(">>> Read function arguments!\n");
+					  }
+					}
+  /*
+<FindMembers>"("{BN}*("void"{BN}*)?")"	{
+  					  lineCount();
+  					  current->args = "()"; 
+  					  BEGIN( FuncQual );
+  					}
+  */
+
+  /*- Function argument reading rules ---------------------------------------*/
+
+<ReadFuncArgType>[^ \/\r\t\n\)\(\"\'#]+ { *copyArgString+=yytext; 
+  					  fullArgString+=yytext;
+  					}
+<CopyArgString>[^\n\\\"\']+		{ *copyArgString+=yytext; 
+					  fullArgString+=yytext;
+					}
+<CopyArgRound>[^\/\n\)\(\"\']+		{ 
+  					  *copyArgString+=yytext; 
+  					  fullArgString+=yytext;
+  					}
+<ReadFuncArgType,ReadTempArgs>{BN}*	{
+  					  *copyArgString+=" ";
+  					  fullArgString+=" ";
+  					  lineCount();
+  					}
+<ReadFuncArgType,CopyArgRound,CopyArgSharp,ReadTempArgs>\"	{
+  					  *copyArgString+=*yytext;
+  					  fullArgString+=*yytext;
+					  lastCopyArgStringContext = YY_START;
+  					  BEGIN( CopyArgString );
+  					}
+<ReadFuncArgType,ReadTempArgs>"("	{
+  					  *copyArgString+=*yytext;
+  					  fullArgString+=*yytext;
+  					  argRoundCount=0; 
+					  lastCopyArgContext = YY_START;
+					  BEGIN( CopyArgRound ); 
+  					}
+<ReadFuncArgType>")"			{ 
+  					  *copyArgString+=*yytext;
+  					  fullArgString+=*yytext;
+					  stringToArgumentList(fullArgString,current->argList);
+
+					  /* remember the current documentation block, since
+					     we could overwrite it with the documentation of
+					     a function argument, which we then have to correct later
+					     on
+					   */
+					  docBackup = current->doc.copy();
+					  briefBackup = current->brief.copy();
+
+					  BEGIN( currentArgumentContext );
+					}
+	/* a special comment */
+<ReadFuncArgType,ReadTempArgs>("/*"[*!]|"//"[/!])("<"?)	{ 
+                                          if (currentArgumentContext==DefineEnd)
+					  {
+					    // for defines we interpret a comment
+					    // as documentation for the define 
+					    int i;for (i=yyleng-1;i>=0;i--)
+					    {
+					      unput(yytext[i]);
+					    }
+					    stringToArgumentList(fullArgString,current->argList);
+					    BEGIN( currentArgumentContext );
+					  }
+					  else
+					  {
+					    // for functions we interpret a comment
+					    // as documentation for the argument
+					    fullArgString+=yytext;
+					    lastCopyArgChar=0;
+					    lastCommentInArgContext=YY_START;
+					    if (yytext[1]=='/')
+					      BEGIN( CopyArgCommentLine );
+					    else
+					      BEGIN( CopyArgComment );
+					  }
+  					}
+	/* a non-special comment */
+<ReadFuncArgType,ReadTempArgs>"/*"	{
+  					  lastCContext = YY_START;
+					  BEGIN( SkipComment );
+  					}
+<ReadFuncArgType,ReadTempArgs>"//"	{
+  					  lastCContext = YY_START;
+					  BEGIN( SkipCxxComment );
+  					}
+<ReadFuncArgType,ReadTempArgs>"'#"	{ if (! insidePHP)
+                                            REJECT;
+  					  *copyArgString+=yytext; 
+  					  fullArgString+=yytext; 
+					}
+<ReadFuncArgType,ReadTempArgs>"#"	{
+  					  if (! insidePHP)
+  					    REJECT;
+  					  lastCContext = YY_START;
+					  BEGIN( SkipCxxComment );
+  					}
+	/* `)' followed by a special comment */
+<ReadFuncArgType>")"{BN}*("/*"[*!]|"//"[/!])"<"	{
+  					  lineCount();
+                                          if (currentArgumentContext==DefineEnd)
+					  {
+					    // for defines we interpret a comment
+					    // as documentation for the define 
+					    int i;for (i=yyleng-1;i>0;i--)
+					    {
+					      unput(yytext[i]);
+					    }
+					    *copyArgString+=*yytext;
+					    fullArgString+=*yytext;
+					    stringToArgumentList(fullArgString,current->argList);
+					    BEGIN( currentArgumentContext );
+					  }
+					  else
+					  {
+					    // for functions we interpret a comment
+					    // as documentation for the last argument
+					    lastCopyArgChar=*yytext;
+					    QCString text=&yytext[1];
+					    text=text.stripWhiteSpace();
+					    lastCommentInArgContext=YY_START;
+					    fullArgString+=text;
+					    if (text.find("//")!=-1)
+					      BEGIN( CopyArgCommentLine );
+					    else
+					      BEGIN( CopyArgComment );
+					  }
+  					}
+<CopyArgComment>^{B}*"*"+/{BN}+		
+<CopyArgComment>[^\n\\\@\*]+		{ fullArgString+=yytext; }
+<CopyArgComment>"*/"			{ fullArgString+=yytext; 
+  					  if (lastCopyArgChar!=0)
+					    unput(lastCopyArgChar); 
+                                          BEGIN( lastCommentInArgContext ); 
+					}
+<CopyArgCommentLine>\n			{ fullArgString+=yytext;
+  					  yyLineNr++;
+  					  if (lastCopyArgChar!=0)
+					    unput(lastCopyArgChar);
+					  BEGIN( lastCommentInArgContext );
+  					}
+<CopyArgCommentLine>[^\\\@\n]+		{ fullArgString+=yytext; }
+<CopyArgCommentLine>.			{ fullArgString+=*yytext; }
+<CopyArgComment>\n			{ fullArgString+=*yytext; yyLineNr++; }
+<CopyArgComment>.			{ fullArgString+=*yytext; }
+<ReadTempArgs>"<"			{
+					  *copyArgString+=*yytext;
+					  fullArgString+=*yytext;
+					  argSharpCount=1;
+					  BEGIN( CopyArgSharp );
+					}
+<ReadTempArgs>">"			{
+					  *copyArgString+=*yytext;
+					  fullArgString+=*yytext;
+					  //printf("end template list %s\n",copyArgString->data());
+					  stringToArgumentList(fullArgString,currentArgumentList);
+					  BEGIN( currentArgumentContext );
+					}
+<CopyArgRound>"("			{
+  					  argRoundCount++;
+					  *copyArgString+=*yytext;
+					  fullArgString+=*yytext;
+  					}
+<CopyArgRound>")"			{
+					  *copyArgString+=*yytext;
+					  fullArgString+=*yytext;
+					  if (argRoundCount>0) 
+					    argRoundCount--;
+					  else 
+					    BEGIN( lastCopyArgContext );
+  					}
+<CopyArgSharp>"<"			{
+  					  argSharpCount++;
+					  //printf("argSharpCount++=%d  copy\n",argSharpCount);
+					  *copyArgString+=*yytext;
+					  fullArgString+=*yytext;
+  					}
+<CopyArgSharp>">"			{
+  					  *copyArgString+=*yytext;
+  					  fullArgString+=*yytext;
+					  argSharpCount--;
+					  if (argSharpCount>0)
+					  {
+					    //printf("argSharpCount--=%d copy\n",argSharpCount);
+					  }
+					  else
+					  {
+					    BEGIN( ReadTempArgs );
+					    //printf("end of argSharpCount\n");
+					  }
+  					}
+<CopyArgString>\\.			{
+  					  *copyArgString+=yytext;
+  					  fullArgString+=yytext;
+  					}
+<CopyArgString>\"			{
+  					  *copyArgString+=*yytext;
+  					  fullArgString+=*yytext;
+					  BEGIN( lastCopyArgStringContext );
+  					}
+<ReadFuncArgType,ReadTempArgs,CopyArgRound,CopyArgSharp>{CHARLIT}     { 
+                                          if (insidePHP)
+					  {
+					    REJECT;
+					  }
+					  else
+					  {
+  					    *copyArgString+=yytext; 
+  					    fullArgString+=yytext; 
+					  }
+					}
+<ReadFuncArgType,ReadTempArgs,CopyArgString,CopyArgRound,CopyArgSharp>\n  { 
+  					  yyLineNr++; 
+					  *copyArgString+=*yytext; 
+					  fullArgString+=*yytext; 
+					}
+<ReadFuncArgType,ReadTempArgs,CopyArgString,CopyArgRound,CopyArgSharp>.	  { 
+  					  *copyArgString+=*yytext; 
+  					  fullArgString+=*yytext; 
+					}
+
+
+
+  /*------------------------------------------------------------------------*/
+
+
+<FuncRound>"("				{ current->args += *yytext ;
+					  ++roundCount ;
+					}
+<FuncRound>")"                          { current->args += *yytext ; 
+					  if ( roundCount )
+					    --roundCount ;
+				          else
+					    BEGIN( FuncQual ) ;
+					}
+  /*
+<FuncQual>"#"				{ if (insidePHP)
+  					    REJECT;
+  					  lastCPPContext = YY_START;
+  					  BEGIN(SkipCPP);
+					}
+  */
+<FuncQual>[{:;,]                        {
+                                          if ( strcmp(yytext,";")==0 && 
+					       insidePHP && 
+					       current->type.left(8) != "function" )
+                                          {
+                                            current->reset();
+                                            initEntry();
+                                            BEGIN( FindMembers );
+                                          }
+                                          else
+                                          {
+                                            unput(*yytext); BEGIN( Function );
+                                          }
+                                        }
+<FuncQual>{BN}*"const"{BN}*       	{ // const member function
+  					  lineCount() ; 
+  					  current->args += " const "; 
+					  current->argList->constSpecifier=TRUE;
+					}
+<FuncQual>{BN}*"volatile"{BN}*    	{ // volatile member function
+  					  lineCount() ; 
+  					  current->args += " volatile "; 
+					  current->argList->volatileSpecifier=TRUE;
+					}
+<FuncQual>{BN}*"="{BN}*"0"{BN}*  	{ // pure virtual member function
+  					  lineCount() ; 
+					  current->args += " = 0"; 
+					  current->virt = Pure; 
+					  current->argList->pureSpecifier=TRUE;
+					}
+<FuncRound,FuncFunc>{BN}*","{BN}*	{ 
+  					  lineCount() ; 
+					  current->args += ", " ; 
+					}
+<FuncQual,FuncRound,FuncFunc>{BN}+   	{ 
+  					  lineCount() ; 
+					  current->args += ' ' ; 
+					}
+<Function,FuncQual,FuncRound,FuncFunc>"#" { if (insidePHP)
+  					    REJECT;
+  					  lastCPPContext = YY_START;
+  					  BEGIN(SkipCPP);
+					}	
+<FuncQual>"="				{ // typically an initialized function pointer
+                                          current->args += *yytext; 
+					  BEGIN(FuncPtrInit);
+  					}
+<FuncPtrInit>[{;]			{
+  					  unput(*yytext);
+					  BEGIN(FuncQual);
+  					}
+<FuncPtrInit>\"				{
+                                          current->args += *yytext; 
+  					  pCopyQuotedString=&current->args;
+					  lastStringContext=FuncPtrInit;
+					  BEGIN(CopyString);
+					}
+<FuncPtrInit>{CHARLIT}			{
+                                          if (insidePHP)
+					  {
+					    REJECT;
+					  }
+					  else
+					  {
+                                            current->args += yytext; 
+					  }
+  					}
+<FuncPtrInit>{ID}			{
+                                          current->args += yytext; 
+					}
+<FuncPtrInit>.				{
+                                          current->args += *yytext; 
+  					}
+<FuncPtrInit>\n				{
+                                          current->args += *yytext; 
+					  yyLineNr++;
+  					}
+<FuncQual>{ID}				{ // typically a K&R style C function
+					  if (checkForKnRstyleC())
+					  {
+					    //fprintf(stderr,"===> got a K&R style function\n");
+                                            current->args = yytext; 
+					    oldStyleArgType.resize(0);
+					    BEGIN(OldStyleArgs);
+					  }
+					  else
+					  {
+                                            current->args += yytext; 
+					  }
+  					}
+<OldStyleArgs>[,;]			{
+  					  QCString oldStyleArgPtr;
+  					  QCString oldStyleArgName;
+					  splitKnRArg(oldStyleArgPtr,oldStyleArgName);
+					  QCString doc,brief;
+					  if (current->doc!=docBackup)
+					  {
+                                            doc=current->doc.copy();
+					    current->doc=docBackup;
+					  }
+					  if (current->brief!=briefBackup)
+					  {
+                                            brief=current->brief.copy();
+					    current->brief=briefBackup;
+					  }
+					  addKnRArgInfo(oldStyleArgType+oldStyleArgPtr,
+					                oldStyleArgName,brief,doc);
+					  current->args.resize(0);
+					  if (*yytext==';') oldStyleArgType.resize(0);
+  					}
+<OldStyleArgs>{ID} 			{ current->args += yytext; }
+<OldStyleArgs>"{"			{
+  					  current->args = argListToString(current->argList);
+  					  unput('{');
+					  BEGIN(FuncQual);
+  					}
+<OldStyleArgs>.	 			{ current->args += *yytext; }
+<FuncQual,FuncRound,FuncFunc>.		{ current->args += *yytext; }
+<FuncQual>{BN}*"try"{BN}+		{ /* try-function-block */ 
+					  insideTryBlock=TRUE;
+					  lineCount();
+					}
+<FuncQual>{BN}*"throw"{BN}*"("		{ // C++ style throw clause
+  					  current->exception = " throw (" ;
+					  roundCount=0;
+					  lineCount() ;
+					  BEGIN( ExcpRound ) ;
+					}
+<FuncQual>{BN}*"raises"{BN}*"("         {
+  					  current->exception = " raises (" ;
+					  lineCount() ;
+					  roundCount=0;
+					  BEGIN( ExcpRound ) ;
+  					}
+<FuncQual>{BN}*"throws"{BN}+		{ // Java style throw clause
+  					  current->exception = " throws " ;
+					  lineCount() ;
+					  BEGIN( ExcpList );
+  					}
+<ExcpRound>"("				{ current->exception += *yytext ;
+					  ++roundCount ;
+					}
+<ExcpRound>")"                          { current->exception += *yytext ; 
+					  if ( roundCount )
+					    --roundCount ;
+				          else
+					    BEGIN( FuncQual ) ;
+					}
+<ExcpRound>.				{
+  					  current->exception += *yytext;
+  					}
+<ExcpList>"{"				{
+  					  unput('{'); BEGIN( FuncQual );
+  					}
+<ExcpList>";"				{
+  					  unput(';'); BEGIN( FuncQual );
+  					}
+<ExcpList>"\n"				{
+  					  current->exception += ' ';
+					  yyLineNr++;
+  					}
+<ExcpList>.				{
+  					  current->exception += *yytext;
+  					}
+<Function>"("				{ current->type += current->name ;
+					  current->name  = current->args ;
+					  current->args  = yytext ;
+					  roundCount=0;
+					  BEGIN( FuncRound ) ;
+					}
+<Function>":"				{
+  					  if (!insidePHP) BEGIN(SkipInits);
+  					}
+<Function>[;{,]				{ 
+					  current->name=current->name.simplifyWhiteSpace();
+  					  current->type=current->type.simplifyWhiteSpace();
+					  current->args=removeRedundantWhiteSpace(current->args);
+					                // was: current->args.simplifyWhiteSpace();
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  if (*yytext!=';' || (current_root->section&Entry::COMPOUND_MASK) )
+					  {
+					    int tempArg=current->name.find('<');
+					    QCString tempName;
+					    static QRegExp re("operator[^a-z_A-Z0-9]");
+					    if (tempArg==-1) tempName=current->name; else tempName=current->name.left(tempArg);
+					    if (/*(current->type.isEmpty() && tempName.find(re)==-1) || */
+						 current->type.left(8)=="typedef "
+					       )
+					    {
+					      //printf("Scanner.l: found in class variable: `%s' `%s' `%s'\n",
+					      //   current->type.data(),current->name.data(),current->args.data());
+					      current->section = Entry::VARIABLE_SEC ;
+					    }
+					    else	      
+					    {
+					      //printf("Scanner.l: found in class function: `%s' `%s' `%s'\n",
+					      //   current->type.data(),current->name.data(),current->args.data());
+					      current->section = Entry::FUNCTION_SEC ;
+			                      current->proto = *yytext==';';
+					    }
+					  }
+					  else // a global function prototype or function variable
+					  {
+					    static QRegExp re("([^)]*)");
+					    //printf("Scanner.l: prototype? type=`%s' name=`%s' args=`%s'\n",current->type.data(),current->name.data(),current->args.data());
+					    if (!current->type.isEmpty() && 
+						(current->type.find(re,0)!=-1 || current->type.left(8)=="typedef "))
+					    {
+					      //printf("Scanner.l: found function variable!\n");
+					      current->section = Entry::VARIABLE_SEC;
+					    }
+					    else
+					    {
+					      //printf("Scanner.l: found prototype\n");
+					      current->section = Entry::FUNCTION_SEC;
+					      current->proto = TRUE;
+					    }
+					  }
+					  //printf("Adding entry `%s'\n",current->name.data());
+					  if ( insidePHP && current->type.left(8) != "function" )
+					  {
+					    initEntry();
+					  }
+					  else
+					  {
+					    if ( insidePHP && current->type.left(8) == "function" )
+					    {
+					      current->type = current->type.mid(8);
+					    }
+					    previous = current;
+					    current_root->addSubEntry(current);
+					    current = new Entry ;
+					    initEntry();
+					    lastCurlyContext = FindMembers;
+					    if ( *yytext == ',' )
+					    {
+					      current->type = previous->type.data();
+					    }
+					    if ( *yytext == '{' )
+					    {
+					      if ( !insidePHP && (current_root->section & Entry::COMPOUND_MASK) )
+					      {
+						previous->memSpec |= Entry::Inline;
+					      }
+					      //addToBody(yytext);
+					      curlyCount=0;
+					      BEGIN( SkipCurly ) ;
+					    }
+					    else
+					    {
+					      if (previous->section!=Entry::VARIABLE_SEC)
+						previous->bodyLine=-1; // a function/member declaration
+					      BEGIN( FindMembers ) ;
+					    }
+					  }
+                                        }
+<SkipInits>"{"				{ 
+  				          //addToBody(yytext);
+  				          //lastCurlyContext = FindMembers;
+					  //curlyCount=0;
+  					  //BEGIN( SkipCurly ) ; 
+  					  unput('{');
+					  BEGIN( Function );
+					}
+<SkipCurly>"{"				{ 
+  				          //addToBody(yytext);
+  					  ++curlyCount ; 
+					}
+<SkipCurly>"}"				{ 
+  				          //addToBody(yytext);
+  					  if( curlyCount )
+					  {
+					    --curlyCount ;
+					  }
+					  else
+					  {
+					    if (!Config_getBool("HIDE_IN_BODY_DOCS") && 
+						!current->doc.isEmpty())
+					    {
+					      // copy documentation found inside the body
+					      // to the previous item
+					      if (previous->inbodyLine==-1)
+					      {
+					        previous->inbodyLine = current->docLine;
+					        previous->inbodyFile = current->docFile;
+					      }
+					      previous->inbodyDocs += current->doc;
+					      current->doc.resize(0);
+					    }
+					    if (current->sli) // copy special list items
+					    {
+					      QListIterator<ListItemInfo> li(*current->sli);
+					      ListItemInfo *lii;
+					      for (li.toFirst();(lii=li.current());++li)
+					      {
+						previous->addSpecialListItem(lii->type,lii->itemId);
+					      }
+					      delete current->sli;
+					      current->sli = 0;
+					    }
+					    previous->endBodyLine=yyLineNr;
+					    BEGIN( lastCurlyContext ) ;
+					  }
+					}
+<SkipCurly>"}"{BN}*("/*!"|"/**"|"//!"|"///")"<" { 
+  					  if ( curlyCount )
+					  {
+					    //addToBody(yytext);
+					    --curlyCount ;
+					  }
+					  else
+					  {
+					    current->endBodyLine=yyLineNr;
+					    lineCount();
+					    tempEntry = current; // temporarily switch to the previous entry
+					    current = previous;
+					    current->doc.resize(0);
+					    current->brief.resize(0);
+					    lastAfterDocContext = SkipCurlyEndDoc;
+					    afterDocTerminator = '}';
+					    if (yytext[yyleng-3]=='/')
+					    {
+					      current->briefLine = yyLineNr;
+					      current->briefFile = yyFileName;
+					      BEGIN(AfterDocLine);
+					    }
+					    else if (yytext[yyleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF"))
+					    {
+					      current->briefLine = yyLineNr;
+					      current->briefFile = yyFileName;
+					      current->docLine = yyLineNr;
+					      current->docFile = yyFileName;
+					      BEGIN(AfterDocBrief);
+					    }
+					    else
+					    {
+					      current->docLine = yyLineNr;
+					      current->docFile = yyFileName;
+					      BEGIN(AfterDoc);
+					    }
+					  }
+					}
+<SkipCurlyEndDoc>"}"			{
+  				          //addToBody("}");
+					  current = tempEntry;
+  					  BEGIN( lastCurlyContext );
+  					}
+<SkipCurly>{CHARLIT}                    {
+  				          //addToBody(yytext);
+                                          if (insidePHP) REJECT;
+  					}
+<SkipCurly>\"			        { 
+  				          //addToBody(yytext);
+  					  lastStringContext=SkipCurly;
+  				          BEGIN( SkipString ); 
+					}
+<SkipCurly>^{B}*"#"			{ 
+  				          if (insidePHP)
+  				            REJECT;
+  				          //addToBody(yytext);
+  					  BEGIN( SkipCurlyCpp );
+					}
+<SkipCurly,SkipInits>\n			{
+  					  yyLineNr++;
+  				          //addToBody(yytext);
+  					}
+<SkipCurly,SkipCurlyCpp>[^\n"'@\\/{}]+	{
+  				          //addToBody(yytext);
+  					}
+<SkipCurlyCpp>\n			{ 
+  				          //addToBody(yytext);
+  					  yyLineNr++; 
+  					  lastCurlyContext = FindMembers;
+  					  BEGIN( SkipCurly ); 
+					}
+<SkipCurlyCpp>\\[\r]*"\n"[\r]*		{ 
+  				          //addToBody(yytext);
+  					  yyLineNr++; 
+					}
+<SkipInits,SkipCurly,SkipCurlyCpp>"/*"	{
+  				          //addToBody(yytext);
+  					  lastCContext = YY_START;
+					  BEGIN(SkipComment);
+  					}
+<SkipInits,SkipCurly,SkipCurlyCpp>"//"  {
+  				          //addToBody(yytext);
+  					  lastCContext = YY_START;
+					  BEGIN(SkipCxxComment);
+  					}
+<SkipInits>\"				{
+  					  lastStringContext=YY_START;
+  				          BEGIN( SkipString ); 
+					}
+<SkipInits>;	                        {
+  					  warn(yyFileName,yyLineNr,
+					      "Warning: Found ';' while parsing initializer list! "
+					      "(doxygen could be confused by a macro call without semicolon)"
+					     );
+					  BEGIN( FindMembers );
+  					}
+<SkipInits,SkipCurly,SkipCurlyCpp>"#"   {
+  				          if (! insidePHP)
+  				            REJECT;
+  				          //addToBody(yytext);
+  					  lastCContext = YY_START;
+					  BEGIN(SkipCxxComment);
+  					}
+<SkipInits,SkipCurly,SkipCurlyCpp>@\"   {
+  				          if (! insideCS) REJECT;
+					  // C# verbatim string
+					  lastSkipVerbStringContext=YY_START;
+					  pSkipVerbString=&current->initializer;
+					  BEGIN(SkipVerbString);
+  					}
+<SkipInits,SkipCurly,SkipCurlyCpp>{CHARLIT}	{
+                                          if (insidePHP) REJECT;
+                                        }
+<SkipInits,SkipCurly,SkipCurlyCpp>.	{ }
+<SkipString,SkipPHPString>\\.		{ }
+<SkipString>\"				{ 
+  					  BEGIN( lastStringContext ); 
+					}
+<SkipPHPString>\'			{ 
+  					  BEGIN( lastStringContext ); 
+					}
+<SkipString,SkipPHPString>"/*"|"*/"|"//" { }
+<SkipString,SkipPHPString>\n		{
+  					  yyLineNr++;
+  					}
+<SkipString,SkipPHPString>.		{ }
+<Bases,CompoundName>";"			{ 
+					  current->section = Entry::EMPTY_SEC ;
+					  current->type.resize(0) ;
+					  current->name.resize(0) ;
+					  current->args.resize(0) ;
+					  current->argList->clear();
+					  BEGIN( FindMembers ) ;
+					}
+<CompoundName>{SCOPENAME}{BN}*/"<"	{
+  					  sharpCount = 0;
+  					  current->name = yytext ;
+					  if (current->section==Entry::PROTOCOL_SEC)
+					  {
+					    current->name+="-p";
+					  }
+					  lineCount();
+					  lastClassTemplSpecContext = ClassVar;
+					  if (insideObjC) // protocol list
+					  {
+					    BEGIN( ObjCProtocolList );
+					  }
+					  else // C++ template specialization
+					  {
+					    BEGIN( ClassTemplSpec );
+					  }
+					}
+<ObjCProtocolList>"<"			{
+  					  insideProtocolList=TRUE;
+  					  BEGIN( Bases );
+  					}
+<ClassTemplSpec>">"({BN}*"::"{BN}*{SCOPENAME})?	{
+					  current->name += yytext;
+					  lineCount();
+  					  if (--sharpCount<=0)
+					  {
+					    current->name = removeRedundantWhiteSpace(current->name);
+					    if (current->section == Entry::PROTOCOL_SEC)
+					    { // Objective-C protocol
+					      unput('{'); // fake start of body
+					      BEGIN( ClassVar );
+					    }
+					    else
+					    {
+					      BEGIN( lastClassTemplSpecContext );
+					    }
+					  }
+					}
+<ClassTemplSpec>"<"			{
+  					  current->name += yytext;
+  					  sharpCount++;
+  					}
+<ClassTemplSpec>.			{
+  					  current->name += yytext;
+					}
+<CompoundName>{SCOPENAME}{BN}*";"	{ // forward declaration
+    					  unput(';');
+					  if (isTypedef) // typedef of a class, put typedef keyword back
+					  {
+					    current->type.prepend("typedef");
+					  }
+					  BEGIN( FindMembers );
+					}
+<CompoundName>{SCOPENAME}		{ 
+					  current->name = yytext ;
+					  lineCount();
+					  if (current->section == Entry::PROTOCOL_SEC)
+					  {
+					    current->name += "-p";
+					  }
+					  if (current->section == Entry::PROTOCOL_SEC /*|| 
+					      current->section == Entry::OBJCIMPL_SEC*/)
+					  {
+					    unput('{'); // fake start of body
+					  }
+					  BEGIN( ClassVar );
+					}
+<CompoundName>{CSSCOPENAME}	        { // C# style scope
+					  current->name = substitute(yytext,".","::");
+					  lineCount();
+					  BEGIN( ClassVar );
+                                        }
+<ClassVar>{SCOPENAME}{BN}*/"("		{
+  					  if (insideIDL && strncmp(yytext,"switch",6)==0 && !isId(yytext[6]))
+					  {
+					    // Corba IDL style union
+					    roundCount=0;
+					    BEGIN(SkipUnionSwitch);
+					  }
+					  else
+					  {
+  					    addType(current);
+					    current->name = yytext;
+					    current->name = current->name.stripWhiteSpace();
+					    lineCount();
+  					    BEGIN( FindMembers );
+					  }
+  					}
+<ClassVar>","				// Multiple class forward declaration
+<ClassVar>{ID}				{
+  					  if (insideIDL && strcmp(yytext,"switch")==0)
+					  {
+					    // Corba IDL style union
+					    roundCount=0;
+					    BEGIN(SkipUnionSwitch);
+					  }
+					  else if (insideJava && (strcmp(yytext,"implements")==0 || strcmp(yytext,"extends")==0))
+					  {
+  					    current->type.resize(0);
+					    baseProt=Public;
+                                            baseVirt=Normal;
+					    baseName.resize(0);
+					    BEGIN( BasesProt ) ;
+					  }
+					  else if (insidePHP && (strcmp(yytext,"extends")==0))
+					  {
+  					    current->type.resize(0);
+					    baseProt=Public;
+                                            baseVirt=Normal;
+					    baseName.resize(0);
+					    BEGIN( BasesProt ) ;
+					  }
+					  else
+					  {
+					    current->type += ' ' ;
+					    current->type += current->name ;
+					    current->name = yytext ;
+					  }
+  					}
+<ClassVar>[(\[]				{
+    					  if (insideObjC && *yytext=='(') // class category
+					  {
+					    current->name+='(';
+					    current->section=Entry::CATEGORY_SEC;
+					    BEGIN( ClassCategory );
+					  }
+					  else
+					  {
+                                            // probably a function anyway
+                                            unput(*yytext);
+					    BEGIN( FindMembers );
+					  }
+					}
+<ClassCategory>{ID}			{
+					  current->name+=yytext;
+					}
+<ClassCategory>")"			{
+					  current->name+=')';
+					  // category has no variables so push back an empty body
+					  unput('}');
+					  unput('{');
+					  BEGIN( ClassVar );
+					}
+<ClassVar>":"				{ 
+  					  current->type.resize(0);
+					  if (current->section == Entry::INTERFACE_SEC || 
+					      current->section == Entry::STRUCT_SEC || 
+					      insidePHP || insideCS || insideD || insideObjC
+					     )
+					    baseProt=Public;
+					  else
+					    baseProt=Private;
+                                          baseVirt=Normal;
+					  baseName.resize(0);
+					  BEGIN( BasesProt ) ;
+					}
+<ClassVar>[;=*&]			{
+    					  unput(*yytext);
+					  if (isTypedef) // typedef of a class, put typedef keyword back
+					  {
+					    current->type.prepend("typedef");
+					  }
+					  BEGIN( FindMembers );
+    					}
+<Bases,ClassVar>"///"/[^/]              {
+  					  if (!insideObjC)
+					  {
+					    REJECT;
+					  }
+					  else
+					  {
+					    lineCount();
+					    current->program+=yytext;
+                                            current->fileName = yyFileName ;
+					    current->startLine = yyLineNr ;
+					    curlyCount=0;
+					    BEGIN( ReadBodyIntf );
+					  }
+  					}
+<Bases,ClassVar>("//"{B}*)?"/**"/[^/*]  |
+<Bases,ClassVar>("//"{B}*)?"/*!"        |
+<Bases,ClassVar>"//!"                   |
+<Bases,ClassVar>[\-+]{BN}+		{
+  					  if (!insideObjC)
+					  {
+					    REJECT;
+					  }
+					  else
+					  {
+					    lineCount();
+					    current->program+=yytext;
+                                            current->fileName = yyFileName ;
+					    current->startLine = yyLineNr ;
+					    curlyCount=0;
+					    BEGIN( ReadBodyIntf );
+					  }
+  					}
+<CompoundName,ClassVar>{B}*"{"{B}*	{ 
+                                          current->fileName = yyFileName ;
+					  current->startLine = yyLineNr ;
+					  current->name = removeRedundantWhiteSpace(current->name);
+					  if (current->name.isEmpty() && !isTypedef) // anonymous compound
+					  {
+					    current->name.sprintf("@%d",anonCount++);
+					  }
+					  curlyCount=0;
+					  if (/*current->section==Entry::PROTOCOL_SEC ||
+					      current->section==Entry::OBJCIMPL_SEC*/
+					      insideObjC
+					     )
+					  { // ObjC body that ends with @end
+					    BEGIN( ReadBodyIntf );
+					  }
+					  else if (current->section==Entry::NAMESPACE_SEC)
+					  { // namespace body
+					    BEGIN( ReadNSBody );
+					  }
+					  else
+					  { // class body
+					    BEGIN( ReadBody ) ;
+					  }
+					}
+<BasesProt>"virtual"                    { baseVirt = Virtual; }
+<BasesProt>"public"                     { baseProt = Public; }
+<BasesProt>"protected"                  { baseProt = Protected; }
+<BasesProt>"private"                    { baseProt = Private; }
+<BasesProt>{BN}				{ lineCount(); }
+<BasesProt>.				{ unput(*yytext); BEGIN(Bases); }
+<Bases>("::")?{BN}*({ID}{BN}*"::"{BN}*)*{ID}	{ 
+  					  baseName+=yytext;
+					  current->args += ' ';
+					  current->args += yytext;
+					}
+<Bases>{BN}*{ID}("."{ID})*		{ // Java style class
+    					  QCString name = substitute(yytext,".","::");
+					  baseName += name;
+					  current->args += ' ';
+					  current->args += name;
+    					}
+<ClassVar,Bases>\n/{BN}*		{
+                                          if (!insideObjC) 
+					  {
+					    REJECT;
+					  }
+					  else
+					  {
+					    yyLineNr++;
+					    //unput('{');
+					  }
+					}
+<ClassVar,Bases>"@end"			{ // empty ObjC interface
+  					  unput('d'); // insert fake body: {}@end
+  					  unput('n'); 
+  					  unput('e'); 
+  					  unput('@'); 
+  					  unput('}'); 
+  					  unput('{');
+					}
+<ClassVar>"<"   	                { current->name += *yytext;
+  					  sharpCount=1; 
+					  roundCount=0;
+					  lastSkipSharpContext = YY_START;
+					  specName = &current->name;
+					  BEGIN ( Specialization );
+					}
+<Bases>"<"   	       	                { 
+  					  sharpCount=1; 
+					  roundCount=0;
+					  lastSkipSharpContext = YY_START;
+					  if (insideObjC) // start of protocol list
+					  {
+					    unput(',');
+					  }
+					  else // template specialization
+					  {
+                                            baseName += *yytext;
+					    specName = &baseName;
+					    BEGIN ( Specialization );
+					  }
+					}
+<Specialization>"<"			{ *specName += *yytext;
+  					  if (roundCount==0) sharpCount++;
+  					}
+<Specialization>">"			{
+  					  *specName += *yytext;
+  					  if (roundCount==0 && --sharpCount<=0)
+					    BEGIN(lastSkipSharpContext);
+  					}
+<Specialization>{BN}+			{ lineCount(); *specName +=' '; }
+<Specialization>"<<"			{ *specName += yytext; }
+<Specialization>">>"			{ *specName += yytext; }
+<Specialization>"typename"{BN}+		{ lineCount(); }
+<Specialization>"("			{ *specName += *yytext; roundCount++; }
+<Specialization>")"			{ *specName += *yytext; roundCount--; }
+<Specialization>.			{
+  					  *specName += *yytext;
+  					}
+<SkipSharp>"<"				{ ++sharpCount; }
+<SkipSharp>">"				{ if (--sharpCount<=0)
+					    BEGIN ( lastSkipSharpContext );
+					}
+<SkipRound>"("				{ ++roundCount; }
+<SkipRound>")"				{ if (--roundCount<=0)
+					    BEGIN ( lastSkipRoundContext );
+					}
+<Bases>","|">"|({BN}+"implements"{BN}*)	{ lineCount();
+                                          if (insideProtocolList)
+					  {
+					    baseName+="-p";
+					  }
+					  else
+					  {
+                                            current->args += ',' ; 
+					  }
+					  current->name = removeRedundantWhiteSpace(current->name);
+  					  if (!baseName.isEmpty())
+					  {
+  					    current->extends->append(
+					      new BaseInfo(baseName,baseProt,baseVirt)
+					    );
+					  }
+					  if (current->section==Entry::INTERFACE_SEC || 
+					      insideJava || insidePHP || insideCS || 
+					      insideD || insideObjC)
+					  {
+					    baseProt=Public;
+					  }
+					  else
+					  {
+					    baseProt=Private;
+					  }
+					  baseVirt=Normal;
+					  baseName.resize(0);
+                                          if (*yytext=='>')
+					  { // end of a ObjC protocol list
+  					    insideProtocolList=FALSE;
+					  }
+					  else
+					  {
+					    if (*yytext==',' && insideObjC) // Begin of protocol list
+					    {
+  					      insideProtocolList=TRUE;
+					    }
+					    BEGIN(BasesProt);
+					  }
+					}
+<Bases>{B}*"{"{B}*			{ current->fileName = yyFileName ;
+					  current->startLine = yyLineNr ;
+					  current->name = removeRedundantWhiteSpace(current->name);
+  					  if (!baseName.isEmpty())
+  					    current->extends->append(
+					      new BaseInfo(baseName,baseProt,baseVirt)
+					    );
+					  curlyCount=0;
+					  if (insideObjC)
+					  {
+					    BEGIN( ReadBodyIntf );
+					  }
+					  else
+					  {
+					    BEGIN( ReadBody ) ;
+					  }
+					}
+<SkipUnionSwitch>{B}*"("		{
+  					  roundCount++;
+  					}
+<SkipUnionSwitch>")"			{
+  					  if (--roundCount==0)
+					  {
+					    BEGIN(ClassVar);
+					  }
+  					}
+<SkipUnionSwitch>\n			{ yyLineNr++; }
+<SkipUnionSwitch>.			
+<Comment>{BN}+				{ current->program += yytext ;
+					  lineCount() ;
+					}
+<Comment>"/*"				{ current->program += yytext ; } 
+<Comment>"//"				{ current->program += yytext ; }
+<Comment>{CMD}("code"|"verbatim")	{
+                                          insideCode=TRUE;
+  					  current->program += yytext ;
+  					}
+<Comment>{CMD}("endcode"|"endverbatim")	{
+                                          insideCode=FALSE;
+  					  current->program += yytext ;
+  					}
+<Comment>[^ \.\n\/\*]+			{ current->program += yytext ; }
+<Comment>"*/"				{ current->program += yytext ;
+					  if (!insideCode) BEGIN( lastContext ) ;
+					}
+<Comment>.				{ current->program += *yytext ; }
+
+<FindMembers,FindFields,MemberSpec,FuncQual,SkipCurly,Operator,ClassVar,SkipInits,Bases,OldStyleArgs>("//"{B}*)?"/*!" { 
+  					  //printf("Start doc block at %d\n",yyLineNr);
+					  removeSlashes=(yytext[1]=='/');
+					  tmpDocType=-1;
+  					  if (YY_START!=SkipCurly)
+					  {
+					    current->doc.resize(0);
+					    current->docLine = yyLineNr;
+					    current->docFile = yyFileName;
+					  }
+					  lastDocContext = YY_START;
+					  if (current_root->section & Entry::SCOPE_MASK)
+                                          {
+					    current->inside = current_root->name+"::";
+                                            if (current->mGrpId!=DOX_NOGROUP)
+                                            {
+                                              memberGroupInside = current->inside.copy();
+                                            }
+                                          }
+					  BEGIN( Doc );
+					}
+<FindMembers,FindFields,MemberSpec,FuncQual,SkipCurly,Operator,ClassVar,SkipInits,Bases,OldStyleArgs>("//"{B}*)?"/**"/[^/*] {
+  					  removeSlashes=(yytext[1]=='/');
+					  lastDocContext = YY_START;
+					  //printf("Found comment block at %s:%d\n",yyFileName,yyLineNr);
+					  if (current_root->section & Entry::SCOPE_MASK)
+                                          {
+					    current->inside = current_root->name+"::";
+                                            if (current->mGrpId!=DOX_NOGROUP)
+                                            {
+                                              memberGroupInside = current->inside.copy();
+                                            }
+                                          }
+					  if (!Config_getBool("JAVADOC_AUTOBRIEF")) // use the Qt style
+					  {
+					    current->docLine = yyLineNr;
+					    current->docFile = yyFileName;
+					    tmpDocType=-1;
+					    if (!Config_getBool("HIDE_IN_BODY_DOCS") && 
+						YY_START==SkipCurly) // inside body
+					    {
+					      current->doc+="\n\n";
+					    }
+					    else
+					    {
+  					      current->doc.resize(0);
+					    }
+					    BEGIN( Doc );
+					  }
+					  else // Use the javadoc style
+					  {
+					    current->docLine = yyLineNr;
+					    current->docFile = yyFileName;
+					    current->briefLine = yyLineNr;
+					    current->briefFile = yyFileName;
+					    if (!Config_getBool("HIDE_IN_BODY_DOCS") &&
+						YY_START==SkipCurly) // inside body
+					    {
+					      tmpDocType=-1;
+					      current->doc+="\n\n";
+					      lastDocContext = SkipCurly;
+					      BEGIN( Doc );
+					    }
+					    else
+					    {  
+					      tmpDocType=Doc;
+					      current->doc.resize(0);
+					      current->brief.resize(0);
+					      BEGIN( JavaDoc );
+					    }
+					  }
+  					}
+<FindMembers,FindFields,MemberSpec,SkipCurly,FuncQual,Operator,ClassVar,Bases,OldStyleArgs>"//!" { 
+                                          if (YY_START!=SkipCurly)
+					  {
+  					    current->brief.resize(0);
+					    current->briefFile=yyFileName;
+					    current->briefLine=yyLineNr;
+					  }
+					  tmpDocType=-1;
+					  lastDocContext = YY_START;
+					  if (current_root->section & Entry::SCOPE_MASK)
+                                          {
+					    current->inside = current_root->name+"::";
+                                            if (current->mGrpId!=DOX_NOGROUP)
+                                            {
+                                              memberGroupInside = current->inside.copy();
+                                            }
+                                          }
+					  BEGIN( LineDoc );
+					}
+<FindMembers,FindFields,MemberSpec,SkipCurly,FuncQual,Operator,ClassVar,Bases,OldStyleArgs>"///"/[^/] { 
+                                          if (YY_START!=SkipCurly)
+					  {
+  					    current->brief.resize(0);
+					    current->briefFile=yyFileName;
+					    current->briefLine=yyLineNr;
+					  }
+					  tmpDocType=-1;
+					  lastDocContext = YY_START;
+					  if (current_root->section & Entry::SCOPE_MASK)
+                                          {
+					    current->inside = current_root->name+"::";
+                                            if (current->mGrpId!=DOX_NOGROUP)
+                                            {
+                                              memberGroupInside = current->inside.copy();
+                                            }
+                                          }
+					  BEGIN( LineDoc );
+					}
+<FindMembers>"extern"{BN}*"\"C"("++")?"\""{BN}*("{")?  {
+					  lineCount();
+					}
+<FindMembers>"{"			{
+                                          if (insideCS && !current->name.isEmpty() && !current->type.isEmpty())
+					  {
+					    if (current->type.left(6)=="event " || current->type.find("event")!=-1) // event
+					    {
+  					      current->mtype = mtype = Event;
+					    }
+					    else // property
+					    {				
+  					      current->mtype = mtype = Property;
+					    }
+					    current->bodyLine = yyLineNr;
+					    curlyCount=0;
+					    BEGIN(CSAccessorDecl);
+					  }
+					  else
+					  {
+					    if ((insideJava || insideCS || insideD) &&
+						current->name.isEmpty() && 
+						current->type.isEmpty()
+					       )
+					    {
+					      // static Java initializer
+					      needsSemi = FALSE;
+					      if (current->stat)
+					      {
+						current->name="[static initializer]";
+					      }
+					      else
+					      {
+						current->name="[instance initializer]";
+					      }
+                                              unput(*yytext); 
+					      BEGIN( Function );
+					    }
+					    else
+					    {
+					      needsSemi = TRUE;
+					      current->type.resize(0);
+					      current->name.resize(0);
+					      current->args.resize(0);
+					      current->argList->clear();
+					      curlyCount=0;
+					      BEGIN( SkipCurlyBlock );
+					    }
+					  }
+  					}
+<CSAccessorDecl>"{"			{ curlyCount++; }
+<CSAccessorDecl>"}"			{ 
+                                          if (curlyCount) 
+                                          {
+                                            curlyCount--; 
+					  }
+					  else
+					  {
+                                            unput(';');
+					    BEGIN(FindMembers);
+					  }
+                                        }
+<CSAccessorDecl>"set"			{ if (curlyCount==0) current->memSpec |= Entry::Settable; }
+<CSAccessorDecl>"get"			{ if (curlyCount==0) current->memSpec |= Entry::Gettable; }
+<CSAccessorDecl>.			{}
+<CSAccessorDecl>\n			{ yyLineNr++; }
+<JavaDoc>{CMD}("brief"|"short"){B}+	{
+  					  lastBriefContext=tmpDocType;
+  					  BEGIN( ClassDocBrief ); 
+					}
+<JavaDoc>^(({B}*"*"+)?){BL}		{
+					  lineCount();
+					  if (!current->brief.stripWhiteSpace().isEmpty())
+					  {
+					    BEGIN( tmpDocType );
+					  }
+ 					} 
+  /*
+<JavaDoc>"@"				{
+  					  unput(*yytext);
+					  BEGIN(ClassDoc);
+  					}
+  */
+<JavaDoc>^{B}*"*"+/[^/]			{
+  					  //printf("---> removing %s\n",yytext);
+  					}
+  /*
+<JavaDoc>[^\n\@\*\.\\]+			{
+  					  current->brief+=yytext;
+  					}
+  */
+<JavaDoc>.				{
+  				          //printf("---> copy %c\n",*yytext);
+  					  current->brief+=*yytext;
+  					}
+<JavaDoc>\n				{
+  					  current->brief+=' ';
+					  lineCount();
+  					}
+<JavaDoc,AfterDocBrief>".\\"/[ \t\r\n]		{
+					  current->brief+=".";
+					}
+<JavaDoc>"."[ \t\r\n]			{
+  					  lineCount();
+					  current->brief+=".";
+					  BEGIN( tmpDocType );
+					}
+<JavaDoc>{B}*/{SECTIONCMD}		{ 
+  					  current->doc+=yytext;
+					  BEGIN( tmpDocType );
+  					}
+<JavaDoc>"<"({TABLE}|{UL}|{OL}|{DL}|{P}){ATTR}">"	{  // end brief upon encountering any of these
+					  int i;
+					  for (i=yyleng-1;i>=0;i--)
+					  {
+					    unput(yytext[i]);
+					  }
+					  BEGIN( tmpDocType );
+  					}
+<Doc,JavaDoc>{B}*{CMD}("fn"|"var"|"typedef"|"property"){B}+	{
+					  current->section = Entry::MEMBERDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+  					  BEGIN( ClassDocFunc ); 
+					}
+<Doc,JavaDoc>{B}*{CMD}"def"{B}+	{
+  					  nextDefContext = YY_START==LineDoc ? DefLineDoc : ClassDoc;
+  					  current->section = Entry::DEFINEDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+  					  BEGIN( ClassDocDefine );
+  					}
+<LineDoc,Doc,JavaDoc>{B}*{CMD}"overload"{B}* { 
+  					  overloadContext = YY_START;
+  					  BEGIN( ClassDocOverload ); 
+					}
+<ClassDocOverload>{B}*/"\n"	        {
+					  QCString orgDoc = current->doc;
+					  current->doc = getOverloadDocs();
+					  current->doc += "\n\n";
+					  current->doc += orgDoc;
+  					  BEGIN( overloadContext  );
+  				        }
+<ClassDocOverload>{B}*/"*/"		{
+					  QCString orgDoc = current->doc;
+					  current->doc = getOverloadDocs();
+					  current->doc += "\n\n";
+					  current->doc += orgDoc;
+  					  BEGIN( overloadContext );
+  					}
+<ClassDocOverload>.                     { unput(*yytext);
+  					  current->section = Entry::OVERLOADDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  BEGIN( ClassDocFunc ); 
+					}
+<Doc,JavaDoc>{B}*{CMD}"enum"{B}+	{
+  					  current->section = Entry::ENUMDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  BEGIN( EnumDocArg1 );
+  					}
+<Doc,JavaDoc>{B}*{CMD}"defgroup"{B}+ {
+  					  current->section = Entry::GROUPDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  current->groupDocType = Entry::GROUPDOC_NORMAL;
+					  BEGIN( GroupDocArg1 );
+  					}
+<Doc,PageDoc,JavaDoc>{B}*{CMD}"addtogroup"{B}+ {
+  					  current->section = Entry::GROUPDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  current->groupDocType = Entry::GROUPDOC_ADD;
+					  BEGIN( GroupDocArg1 );
+  					}
+<Doc,PageDoc,JavaDoc>{B}*{CMD}"weakgroup"{B}+ {
+  					  current->section = Entry::GROUPDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  current->groupDocType = Entry::GROUPDOC_WEAK;
+					  BEGIN( GroupDocArg1 );
+  					}
+<Doc,JavaDoc>{B}*{CMD}"namespace"{B}+	{
+  					  current->section = Entry::NAMESPACEDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+  					  BEGIN( NameSpaceDocArg1 );
+  					}
+<Doc,JavaDoc>{B}*{CMD}"package"{B}+	{
+  					  current->section = Entry::PACKAGEDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+  					  BEGIN( PackageDocArg1 );
+  					}
+<Doc,JavaDoc>{B}*{CMD}"class"{B}+  	{
+  					  current->section = Entry::CLASSDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  BEGIN( ClassDocArg1 ); 
+					}
+<Doc,JavaDoc>{B}*{CMD}"protocol"{B}+  	{ // ObjC protocol
+  					  current->section = Entry::PROTOCOLDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  BEGIN( ClassDocArg1 ); 
+					}
+<Doc,JavaDoc>{B}*{CMD}"category"{B}+  	{ // ObjC category
+  					  current->section = Entry::CATEGORYDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  BEGIN( CategoryDocArg1 ); 
+					}
+<Doc,JavaDoc>{B}*{CMD}"union"{B}+  	{
+  					  current->section = Entry::UNIONDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  BEGIN( ClassDocArg1 ); 
+					}
+<Doc,JavaDoc>{B}*{CMD}"struct"{B}+ 	{
+  					  current->section = Entry::STRUCTDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  BEGIN( ClassDocArg1 ); 
+					}
+<Doc,JavaDoc>{B}*{CMD}"interface"{B}+ 	{
+  					  current->section = Entry::INTERFACEDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  BEGIN( ClassDocArg1 ); 
+					}
+<Doc,JavaDoc>{B}*{CMD}"idlexcept"{B}+ 	{
+  					  current->section = Entry::EXCEPTIONDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  BEGIN( ClassDocArg1 ); 
+					}
+<Doc,JavaDoc>{B}*{CMD}"page"{B}+   	{
+  					  current->section = Entry::PAGEDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  BEGIN( PageDocArg1 );
+  					}
+<Doc,JavaDoc>{B}*{CMD}"mainpage"{B}* 	{
+  					  current->section = Entry::MAINPAGEDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  current->name = "mainpage";
+					  BEGIN( PageDocArg2 );
+  					}
+<Doc,LineDoc,JavaDoc>{B}*{CMD}"file"{B}*	{
+  					  current->section = Entry::FILEDOC_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  BEGIN( FileDocArg1 );
+  					}
+<Doc,JavaDoc>{B}*{CMD}"example"{B}+ 	{
+ 					  current->section = Entry::EXAMPLE_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+ 					  BEGIN( ExampleDocArg1 );
+					}
+<Doc>{B}*{CMD}"details"{B}+		{ /* nop */
+					}
+<LineDoc>{CMD}"name"[^\n]*\n		{
+  					  lastDefGroup.groupname.resize(0);
+  					  memberGroupHeader=&yytext[5];
+					  memberGroupHeader=memberGroupHeader.stripWhiteSpace(); 
+					  current->section = Entry::MEMBERGRP_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  yyLineNr++;  
+					  startGroupInDoc();
+					  BEGIN( lastDocContext );
+  					}
+<Doc,JavaDoc>{CMD}"name"{B}+ 		{
+  					  lastDefGroup.groupname.resize(0);
+					  current->section = Entry::MEMBERGRP_SEC;
+					  current->fileName = yyFileName;
+					  current->startLine = yyLineNr;
+					  memberGroupHeader.resize(0);
+					  memberGroupDocs.resize(0);
+					  BEGIN(GroupHeader);
+  					}
+<LineDoc,Doc,JavaDoc,ClassDoc,PageDoc>"<!--"	{ 
+					  lastSkipHtmlCommentContext = YY_START;
+					  BEGIN(SkipHtmlComment); 
+					}
+<SkipHtmlComment>"--"[!]?">"		{ BEGIN(lastSkipHtmlCommentContext); }
+<SkipHtmlComment>.
+<AfterDoc,Doc,ClassDoc,PageDoc>("\\\\"|"@@")("todo"|"test"|"bug"|"deprecated"|"xrefitem")/[^a-z_A-Z0-9] {
+  					  current->doc+=yytext;
+  					}
+<AfterDocLine,LineDoc,JavaDoc>("\\\\"|"@@")("todo"|"test"|"bug"|"deprecated"|"xrefitem")/[^a-z_A-Z0-9]	{
+  					  current->brief+=yytext;
+  					}
+<AfterDoc,AfterDocLine,LineDoc,Doc,JavaDoc,ClassDoc,PageDoc>{CMD}"todo"/[^a-z_A-Z0-9]	{
+  					  slStartContext = YY_START;
+					  lastBriefContext = TodoParam; // this is where we will continue at the end of the argument
+					  slString = current->brief.copy(); // these will be swapped later on.
+					  current->brief.resize(0);
+					  BEGIN(ClassDocBrief);
+  					}
+<AfterDoc,AfterDocLine,LineDoc,Doc,JavaDoc,ClassDoc,PageDoc>{CMD}"test"/[^a-z_A-Z0-9]	{
+  					  slStartContext = YY_START;
+					  lastBriefContext = TestParam; // this is where we will continue at the end of the argument
+					  slString = current->brief.copy(); // these will be swapped later on.
+					  current->brief.resize(0);
+					  BEGIN(ClassDocBrief);
+  					}
+<AfterDoc,AfterDocLine,LineDoc,Doc,JavaDoc,ClassDoc,PageDoc>{CMD}"bug"/[^a-z_A-Z0-9]	{
+  					  slStartContext = YY_START;
+					  lastBriefContext = BugParam; // this is where we will continue at the end of the argument
+					  slString = current->brief.copy(); // these will be swapped later on.
+					  current->brief.resize(0);
+					  BEGIN(ClassDocBrief);
+  					}
+<AfterDoc,AfterDocLine,LineDoc,Doc,JavaDoc,ClassDoc,PageDoc>{CMD}"deprecated"/[^a-z_A-Z0-9]	{
+  					  slStartContext = YY_START;
+					  lastBriefContext = DeprecatedParam; // this is where we will continue at the end of the argument
+					  slString = current->brief.copy(); // these will be swapped later on.
+					  current->brief.resize(0);
+					  BEGIN(ClassDocBrief);
+  					}
+<AfterDoc,AfterDocLine,LineDoc,Doc,JavaDoc,ClassDoc,PageDoc>{CMD}"xrefitem"/[^a-z_A-Z0-9]	{
+  					  slStartContext = YY_START;
+					  lastBriefContext = XRefItemParam4; // this is where we will continue at the end of the argument
+					  slString = current->brief.copy(); // these will be swapped later on.
+					  current->brief.resize(0);
+					  BEGIN(XRefItemParam1);
+  					}
+<TodoParam>\n                           |
+<TodoParam>"//"                         |
+<TodoParam>"/*"                         |
+<TodoParam>.				{
+                                          addXRefItem("todo",theTranslator->trTodo(),theTranslator->trTodoList());
+					  int i;for (i=yyleng-1;i>=0;i--) unput(yytext[i]);
+					  BEGIN(slStartContext);
+  					}
+<TestParam>\n                           |
+<TestParam>"//"                         |
+<TestParam>"/*"                         |
+<TestParam>.				{
+                                          addXRefItem("test",theTranslator->trTest(),theTranslator->trTestList());
+					  int i;for (i=yyleng-1;i>=0;i--) unput(yytext[i]);
+					  BEGIN(slStartContext);
+  					}
+<BugParam>\n                            |
+<BugParam>"//"                          |
+<BugParam>"/*"                          |
+<BugParam>.				{
+                                          addXRefItem("bug",theTranslator->trBug(),theTranslator->trBugList());
+					  int i;for (i=yyleng-1;i>=0;i--) unput(yytext[i]);
+					  BEGIN(slStartContext);
+  					}
+<DeprecatedParam>\n                     |
+<DeprecatedParam>"//"                   |
+<DeprecatedParam>"/*"                   |
+<DeprecatedParam>.		        {
+                                          addXRefItem("deprecated",theTranslator->trDeprecated(),theTranslator->trDeprecatedList());
+					  int i;for (i=yyleng-1;i>=0;i--) unput(yytext[i]);
+					  BEGIN(slStartContext);
+  					}
+<XRefItemParam1>{ID}			{
+  					  xrefItemKey=yytext;
+					  BEGIN(XRefItemParam2);
+					}
+<XRefItemParam1>{B}*	                
+<XRefItemParam1>.			{
+  					  warn(yyFileName,yyLineNr,"Found unexpected character %s while parsing the first argument of \\xrefitem\n",yytext);
+					  unput(*yytext);
+					  BEGIN(slStartContext);
+  					}
+<XRefItemParam2>"\""[^\n\"]*"\""	{
+  					  xrefItemTitle = stripQuotes(yytext);
+					  BEGIN(XRefItemParam3);
+  					}
+<XRefItemParam2>{B}*
+<XRefItemParam2>.			{
+  					  warn(yyFileName,yyLineNr,"Found unexpected character %s while parsing the second argument of \\xrefitem\n",yytext);
+					  unput(*yytext);
+					  BEGIN(slStartContext);
+  					}
+<XRefItemParam3>{B}*
+<XRefItemParam3>"\""[^\n\"]*"\""	{
+  					  xrefListTitle = stripQuotes(yytext);
+					  BEGIN(ClassDocBrief);
+  					}
+<XRefItemParam3>.			{
+  					  warn(yyFileName,yyLineNr,"Found unexpected character %s while parsing the third argument of \\xrefitem\n",yytext);
+					  unput(*yytext);
+					  BEGIN(slStartContext);
+  					}
+<XRefItemParam4>{B}*
+<XRefItemParam4>\n                      |
+<XRefItemParam4>"//"                    |
+<XRefItemParam4>"/*"                    |
+<XRefItemParam4>.		        {
+                                          addXRefItem(xrefItemKey,xrefItemTitle,xrefListTitle);
+					  int i;for (i=yyleng-1;i>=0;i--) unput(yytext[i]);
+					  BEGIN(slStartContext);
+  					}
+<ExampleDocArg1>{FILE}			{
+				          current->name = stripQuotes(yytext);	
+					  BEGIN( PageDoc );
+					}
+<ClassDoc,Doc,JavaDoc>{B}*{CMD}"relate"[sd]{B}*    { 
+  					  lastDocRelContext = YY_START;
+  					  BEGIN( ClassDocRelates ); 
+					}
+<ClassDocRelates>({ID}"::")*{ID}	{ 
+  					  current->relates = yytext;
+                                          if (current->mGrpId!=DOX_NOGROUP) 
+                                          {
+                                            memberGroupRelates = yytext;
+                                          }
+					  BEGIN( lastDocRelContext );
+					}
+<ClassDoc,Doc,JavaDoc>{B}*{CMD}"relate"[sd]"also"{B}*    { 
+                                          lastDocRelAlsoContext = YY_START;
+                                           BEGIN( ClassDocRelatesAlso ); 
+                                        }
+<ClassDocRelatesAlso>({ID}"::")*{ID}    { 
+  					  current->relatesDup = TRUE;
+					  current->relates = yytext;
+					  if (current->mGrpId!=DOX_NOGROUP) 
+					  {
+					    memberGroupRelates = yytext;
+					  }
+					  BEGIN( lastDocRelAlsoContext );
+                                        }
+<NameSpaceDocArg1>{SCOPENAME}		{
+  					  current->name = yytext;
+					  newDocState();
+  					}
+<NameSpaceDocArg1>"\\"{B}*"\n"		{ 
+                                          yyLineNr++; 
+                                        }
+<NameSpaceDocArg1>"\n"			{
+  					  warn(yyFileName,yyLineNr,
+                                               "Warning: missing argument after "
+					       "\\namespace."
+                                              );
+  					  yyLineNr++;
+  					}
+<PackageDocArg1>{ID}("."{ID})*		{
+  					  current->name = yytext;
+					  newDocState();
+  					}
+<PackageDocArg1>"\\"{B}*"\n"		{ 
+                                          yyLineNr++; 
+                                        }
+<PackageDocArg1>"\n"			{
+  					  warn(yyFileName,yyLineNr,
+                                               "Warning: missing argument after "
+					       "\\package."
+                                              );
+  					  yyLineNr++;
+  					}
+<CategoryDocArg1>{SCOPENAME}{B}*"("[^\)]+")" {
+					  current->name = yytext;
+					  prependScope();
+					  BEGIN( ClassDocArg2 );
+   					}
+<ClassDocArg1>{SCOPENAME}/"<"		{
+					  current->name = yytext;
+					  // prepend outer scope name 
+					  prependScope();
+					  lastClassTemplSpecContext = ClassDocArg2;
+					  BEGIN( ClassTemplSpec );
+  					}
+<ClassDocArg1>{SCOPENAME}		{
+					  current->name = yytext;
+					  if (current->section==Entry::PROTOCOLDOC_SEC)
+					  {
+					    current->name+="-p";
+					  }
+					  // prepend outer scope name 
+					  prependScope();
+					  BEGIN( ClassDocArg2 );
+					}
+<ClassDocArg1,CategoryDocArg1>"\\"{B}*"\n"		{ 
+                                          yyLineNr++; 
+                                        }
+<ClassDocArg1>"\n"			{
+  					  warn(yyFileName,yyLineNr,
+                                               "Warning: missing argument after "
+					       "\\class."
+                                              );
+  					  yyLineNr++;
+					  
+  					}
+<CategoryDocArg1>"\n"			{
+  					  warn(yyFileName,yyLineNr,
+                                               "Warning: missing argument after "
+					       "\\category."
+                                              );
+  					  yyLineNr++;
+					  
+  					}
+<GroupDocArg1>{ID}(".html"?)		{ 
+  					  current->name = yytext;
+					  lastDefGroup.groupname = yytext;
+					  lastDefGroup.pri = current->groupingPri();
+  					  // the .html stuff is for Qt compatibility
+					  if (current->name.right(5)==".html") 
+					    current->name=current->name.left(current->name.length()-5);
+					  BEGIN(GroupDocArg2);
+  					}
+<GroupDocArg1>"\\"{B}*"\n"		{ yyLineNr++; 
+                                        }
+<GroupDocArg1>"\n"			{
+  					  warn(yyFileName,yyLineNr,
+                                               "Warning: missing group name after %s",
+					       current->groupDocCmd()
+                                              );
+					  yyLineNr++;
+					  BEGIN( Doc );
+  					}
+<GroupDocArg2>{B}*"*/"			{
+                                          // fake input for end of title rule
+                                          yyLineNr--;
+  					  unput('/');unput('*');unput('\n');
+  					}
+<GroupDocArg2>"\\"{B}*"\n"		{ yyLineNr++; 
+                                        }
+<GroupDocArg2>[^\n\*]+			{
+					  current->type += yytext;
+					  current->type = current->type.stripWhiteSpace();
+  					}
+<GroupDocArg2>"\n"			{
+                                          if( current->groupDocType == Entry::GROUPDOC_NORMAL &&
+                                              current->type.length() == 0 )
+  					    warn(yyFileName,yyLineNr,
+                                                 "Warning: missing title after "
+					         "\\defgroup %s", current->name.data()
+                                                );
+  					  yyLineNr++; 
+ 					  newDocState();
+  					}
+<ClassDocArg2>{FILE}			{
+  					  //printf("ClassDocArg2=%s\n",yytext);
+					  current->includeFile = stripQuotes(yytext);
+					  BEGIN( ClassDocArg3 );
+					}
+<ClassDocArg2>"\\"{B}*"\n"		{ yyLineNr++; 
+                                        }
+<ClassDocArg2>"\n"			{ yyLineNr++; 
+					  newDocState();
+					}
+<ClassDocArg2>{B}*"*/"			{
+					  newDocState();
+  					  unput('/');unput('*');
+  					}
+<ClassDocArg3>[<]?{FILE}[>]?		{
+  					  //printf("ClassDocArg3=%s\n",yytext);
+ 					  current->includeName = yytext;
+  					  newDocState();
+					}
+<ClassDocArg3>"\\"{B}*"\n"		{ yyLineNr++;
+                                        }
+<ClassDocArg3>"\n"			{ yyLineNr++; 
+  					  newDocState();
+					}
+<ClassDocArg3>{B}*"*/"			{
+					  newDocState();
+  					  unput('/');unput('*');
+  					}
+<FileDocArg1>{FILE}			{
+  					  current->name = stripQuotes(yytext);
+					  newDocState();
+  				        }
+<FileDocArg1>"\\"{B}*"\n"		{ yyLineNr++;
+                                        }
+<FileDocArg1>"\n"			{
+  					  current->name = yyFileName;
+  					  yyLineNr++;
+					  newDocState();
+  					}
+<PageDocArg1>{FILE}			{
+					  current->name = stripQuotes(yytext);
+					  BEGIN( PageDocArg2 ); 
+					}
+<PageDocArg1>"\\"{B}*"\n"		{ yyLineNr++; 
+					  current->doc+="\n";
+                                        }
+<PageDocArg1>"\n"			{
+  					  warn(yyFileName,yyLineNr,
+                                               "Warning: missing argument after "
+					       "\\page."
+                                              );
+					  current->doc+="\n";
+  					  yyLineNr++;
+					  BEGIN( Doc );
+  					}
+<PageDocArg2>.*"\n"			{
+  				          yyLineNr++;
+					  current->args = yytext;
+					  current->doc+="\n";
+					  BEGIN( PageDoc );
+					}
+<EnumDocArg1>{SCOPEID}			{
+  					  current->name = yytext;
+					  prependScope();
+  					  newDocState();
+  					}
+<EnumDocArg1>"\\"{B}*"\n"		{ yyLineNr++;
+					  current->doc+="\n";
+                                        }
+<EnumDocArg1>"\n"			{
+  					  warn(yyFileName,yyLineNr,
+                                               "Warning: missing argument after \\enum."
+                                              );
+					  current->doc+="\n";
+  					  yyLineNr++;
+					  BEGIN( Doc );
+  					}
+<PageDoc>{CMD}"refitem".*"\n"		{
+  					  current->doc+=yytext;
+  					}
+<ClassDoc,PageDoc,Doc,JavaDoc>{CMD}"section"{B}+		{
+  					  //sectionType=SectionInfo::Section;
+					  current->doc+=yytext;
+  					  BEGIN(SectionLabel);
+  					}
+<ClassDoc,PageDoc,Doc,JavaDoc>{CMD}"subsection"{B}+		{
+  					  //sectionType=SectionInfo::Subsection;
+					  current->doc+=yytext;
+  					  BEGIN(SectionLabel);
+  					}
+<ClassDoc,PageDoc,Doc,JavaDoc>{CMD}"subsubsection"{B}+	{
+  					  //sectionType=SectionInfo::Subsubsection;
+					  current->doc+=yytext;
+  					  BEGIN(SectionLabel);
+  					}
+<ClassDoc,PageDoc,Doc,JavaDoc>{CMD}"paragraph"{B}+		{
+  					  //sectionType=SectionInfo::Paragraph;
+					  current->doc+=yytext;
+  					  BEGIN(SectionLabel);
+  					}
+<GroupHeader>.				{ memberGroupHeader+=*yytext; }
+<GroupHeader>"*/"			{
+  					  unput('/');unput('*');
+					  //printf("Found memberGroup=`%s'\n",memberGroupHeader.data());
+					  startGroupInDoc();
+					  newDocState();
+  					}
+<GroupHeader>\n				{
+  					  yyLineNr++;
+					  current->doc+="\n";
+					  //printf("Found memberGroup=`%s'\n",memberGroupHeader.data());
+					  startGroupInDoc();
+					  newDocState();
+  					}
+<StoreGroupDocs>"$"			{
+  					  //printf("StoreGroupDocs memberGroupId=%d brief=`%s' doc=`%s'!\n",memberGroupId,current->brief.data(),current->doc.data());
+					  memberGroupDocs=current->brief.stripWhiteSpace();
+					  current->doc = current->doc.stripWhiteSpace();
+					  if (!memberGroupDocs.isEmpty() && !current->doc.isEmpty())
+					  {
+					    memberGroupDocs+="\n\n";
+					  }
+					  memberGroupDocs+=current->doc;
+					  //Doxygen::memberDocDict.insert(memberGroupId,
+					  //    new QCString(memberGroupDocs)
+					  //    );
+					  MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(memberGroupId);
+					  if (info) 
+					  {
+					    info->doc = memberGroupDocs;
+					    info->docFile = yyFileName;
+					  }
+					  current->doc.resize(0);
+					  current->brief.resize(0);
+					  BEGIN(lastDocContext);
+  					}
+<Doc,PageDoc,JavaDoc,ClassDoc>{CMD}"anchor"{B}+ {
+  					  lastAnchorContext = YY_START;
+  					  //sectionType=SectionInfo::Anchor;
+					  current->doc+=yytext;
+					  BEGIN(AnchorLabel);
+  					}
+<Doc,PageDoc,ClassDoc>("\\\\"|"@@")("verbatim"|"latexonly"|"htmlonly"|"dot")/[^a-z_A-Z0-9] {
+					  current->doc+=yytext;
+					}
+<JavaDoc>("\\\\"|"@@")("verbatim"|"latexonly"|"htmlonly"|"dot")/[^a-z_A-Z0-9] {
+					  current->brief+=yytext;
+					}
+<Doc,PageDoc,ClassDoc>{CMD}"verbatim"/[^a-z_A-Z0-9] {
+					  lastVerbState=YY_START;
+					  current->doc+="\\verbatim";
+					  g_skipBlockName="verbatim";
+  					  BEGIN(SkipVerbatim);
+  					}
+<JavaDoc>{CMD}"verbatim"/[^a-z_A-Z0-9] 	{
+					  lastVerbState=YY_START;
+					  current->brief+="\\verbatim";
+					  g_skipBlockName="verbatim";
+  					  BEGIN(SkipVerbatim);
+  					}
+<Doc,PageDoc,ClassDoc>{CMD}"latexonly"/[^a-z_A-Z0-9] {
+					  lastVerbState=YY_START;
+					  current->doc+="\\latexonly";
+					  g_skipBlockName="latexonly";
+  					  BEGIN(SkipVerbatim);
+  					}
+<JavaDoc>{CMD}"latexonly"/[^a-z_A-Z0-9]	{
+					  lastVerbState=YY_START;
+					  current->brief+="\\latexonly";
+					  g_skipBlockName="latexonly";
+  					  BEGIN(SkipVerbatim);
+  					}
+<Doc,PageDoc,ClassDoc>{CMD}"htmlonly"/[^a-z_A-Z0-9] {
+					  lastVerbState=YY_START;
+					  current->doc+="\\htmlonly";
+					  g_skipBlockName="htmlonly";
+  					  BEGIN(SkipVerbatim);
+  					}
+<JavaDoc>{CMD}"htmlonly"/[^a-z_A-Z0-9] 	{
+					  lastVerbState=YY_START;
+					  current->brief+="\\htmlonly";
+					  g_skipBlockName="htmlonly";
+  					  BEGIN(SkipVerbatim);
+  					}
+<Doc,PageDoc,ClassDoc>{CMD}"addindex"{B}+[^\n]+ {
+  					  current->doc+=yytext;
+  					}
+<JavaDoc>{CMD}"addindex"{B}+[^\n]+ 	{
+  					  current->brief+=yytext;
+  					}
+<Doc,PageDoc,ClassDoc>("\\\\"|"@@")"code"/[^a-z_A-Z0-9] {
+  					  current->doc+="\\\\code";
+  					}
+<JavaDoc>("\\\\"|"@@")"code"/[^a-z_A-Z0-9] {
+  					  current->brief+="\\\\code";
+  					}
+<Doc,PageDoc,ClassDoc>{CMD}"code"/[^a-z_A-Z0-9] {
+  					  lastCodeState=YY_START;
+					  current->doc+="\\code";
+					  pSkipDoc=&current->doc;
+					  g_skipBlockName="code";
+					  BEGIN(SkipCode);
+					}
+<JavaDoc>{CMD}"code"/[^a-z_A-Z0-9] 	{
+  					  lastCodeState=YY_START;
+					  current->brief+="\\code";
+					  pSkipDoc=&current->brief;
+					  g_skipBlockName="code";
+					  BEGIN(SkipCode);
+					}
+<Doc,PageDoc,ClassDoc>("\\\\"|"@@")"dot"/[^a-z_A-Z0-9] {
+  					  current->doc+="\\\\dot";
+  					}
+<JavaDoc>("\\\\"|"@@")"dot"/[^a-z_A-Z0-9] {
+  					  current->brief+="\\\\dot";
+  					}
+<Doc,PageDoc,ClassDoc>{CMD}"dot"/[^a-z_A-Z0-9] {
+					  lastCodeState=YY_START;
+					  current->doc+="\\dot";
+					  pSkipDoc=&current->doc;
+					  g_skipBlockName="dot";
+  					  BEGIN(SkipCode);
+  					}
+<JavaDoc>{CMD}"dot"/[^a-z_A-Z0-9] 	{
+					  lastCodeState=YY_START;
+					  current->brief+="\\dot";
+					  pSkipDoc=&current->brief;
+					  g_skipBlockName="dot";
+  					  BEGIN(SkipCode);
+  					}
+<Doc,PageDoc,ClassDoc>"<"{PRE}{ATTR}">" {
+  					  lastCodeState=YY_START;
+					  current->doc+="<PRE>";
+					  pSkipDoc=&current->doc;
+					  g_skipBlockName="pre";
+					  BEGIN(SkipCode);
+  					}
+<JavaDoc>"<"{PRE}{ATTR}">" 		{
+  					  lastCodeState=YY_START;
+					  current->brief+="<PRE>";
+					  pSkipDoc=&current->brief;
+					  g_skipBlockName="pre";
+					  BEGIN(SkipCode);
+  					}
+<SkipVerbatim>{CMD}("endverbatim"|"endlatexonly"|"endhtmlonly"|"endxmlonly"|"enddot")/[^a-z_A-Z0-9] {
+  					  current->doc+=yytext;
+  					  BEGIN(lastVerbState);
+  					}
+<SkipVerbatim>[^ \t\/\@\\\n]*		{
+  					  current->doc+=yytext;
+  					}
+<SkipVerbatim>^"//"			{
+  					  if (!removeSlashes)
+					    current->doc+=yytext;
+  					}
+  /*
+<SkipVerbatim>^"//"({B}*"*"+)?		{
+  					  if (!removeSlashes)
+					    current->doc+=yytext;
+  					}
+<SkipVerbatim>^{B}*"*"+			
+  */
+<SkipVerbatim>"//"|"/*"			{ 
+  					  current->doc+=yytext; 
+  					}
+<SkipVerbatim>"\n"			{
+  					  yyLineNr++;
+					  current->doc+=*yytext;
+  					}
+<SkipVerbatim>.				{
+  					  current->doc+=*yytext;
+  					}
+<SkipVerbatim><<EOF>>			{
+  					  warn(yyFileName,yyLineNr,
+                                               "Warning: reached end of file while inside a @%s block; check for missing @end%s tag!",g_skipBlockName.data(),g_skipBlockName.data()
+                                              );
+					  yyterminate();
+  					}
+<SkipCode>{CMD}"endcode"/[^a-z_A-Z0-9]	{
+  					  *pSkipDoc+="\\endcode";
+					  if (g_skipBlockName=="code")
+					  {
+					    BEGIN(lastCodeState);
+					  }
+  					}
+<SkipCode>"</"{PRE}{ATTR}">"		{
+  					  *pSkipDoc+="</PRE>";
+					  if (g_skipBlockName=="pre")
+					  {
+					    BEGIN(lastCodeState);
+					  }
+  					}
+<SkipCode>{CMD}"enddot"/[^a-z_A-Z0-9]	{
+  					  *pSkipDoc+="\\enddot";
+					  if (g_skipBlockName=="dot")
+					  {
+					    BEGIN(lastCodeState);
+					  }
+  					}
+<SkipCode>^"//"({B}*"*"+)?		{
+  					  if (!removeSlashes)
+					    *pSkipDoc+=yytext;
+  					}
+<SkipCode>^{B}*"*"+/{BN}+		
+<SkipCode>"//"				{
+  					  *pSkipDoc+=yytext;
+  					}
+<SkipCode>"/*"|"*/"			{
+  					  *pSkipDoc+=yytext;
+  					}
+<SkipCode>[^ \<\*\t\/\\\n]+		{
+  					  *pSkipDoc+=yytext;
+  					}
+<SkipCode>\n				{
+  					  yyLineNr++;
+					  *pSkipDoc+=*yytext;
+  					}
+<SkipCode>.				{
+  					  *pSkipDoc+=*yytext;
+  					}
+<SkipCode><<EOF>>			{
+  					  warn(yyFileName,yyLineNr,
+                                               "Warning: reached end of file while inside a @%s block; check for missing @end%s tag!",
+					       g_skipBlockName.data(),
+					       g_skipBlockName.data()
+                                              );
+					  yyterminate();
+  					}
+<AnchorLabel>{LABELID}			{
+                                          SectionInfo  *si = new SectionInfo(yyFileName,yytext,0,SectionInfo::Anchor);
+                                          Doxygen::sectionDict.insert(yytext,si);
+  					  current->anchors->append(si);
+                                          current->doc+=yytext;
+					  BEGIN(lastAnchorContext);
+  					}
+<SectionLabel>{LABELID}			{
+  					  sectionLabel=yytext;
+					  sectionTitle.resize(0);
+                                          current->doc+=yytext;
+					  BEGIN(SectionTitle);
+  					}
+<SectionTitle>[^\n*]*/"\n"		{
+					  sectionTitle+=yytext;
+					  sectionTitle=sectionTitle.stripWhiteSpace();
+					  //printf("Adding new section file=%s label=%s title=%s\n",yyFileName,sectionLabel.data(),sectionTitle.data()); 
+  					  SectionInfo *si = new SectionInfo(yyFileName,sectionLabel,sectionTitle,SectionInfo::Anchor);
+  					  current->anchors->append(si);
+                                          Doxygen::sectionDict.insert(yytext,si);
+                                          current->doc+=yytext;
+					  BEGIN(PageDoc);
+  					}
+<SectionTitle>[^\n*]*			{
+  					  sectionTitle+=yytext;
+                                          current->doc+=yytext;
+  					}
+<SectionTitle>"*"			{
+  					  sectionTitle+=yytext;
+                                          current->doc+=yytext;
+  					}
+<PageDoc,ClassDoc>"\n"			{ yyLineNr++ ; current->doc+=yytext; }
+<PageDoc,ClassDoc>[a-z_A-Z0-9 \t]+		{ current->doc += yytext; }
+<PageDoc>{CMD}"ingroup"{B}+			{
+  							  lastGroupContext = YY_START;
+							  lineCount();
+							  BEGIN( GroupName );
+  							}
+<ClassDoc,Doc,JavaDoc>{CMD}"{"				{
+                                                          if (memberGroupId==DOX_NOGROUP && current->section==Entry::GROUPDOC_SEC)
+							  {
+							    startGroupInDoc();
+							  }
+  							}
+<ClassDoc,Doc,JavaDoc>{CMD}"}"				{
+                                                          if (memberGroupId==DOX_NOGROUP && autoGroupStack.isEmpty())
+                                                          {
+                                                             warn(yyFileName,yyLineNr,
+	                                                          "Warning: end of group without matching begin.");
+                                                          }
+                                                          //printf("end of member group marker ends group %d\n",memberGroupId);
+  							  endGroup();
+                                                          memberGroupHeader.resize(0);
+  							}
+<PageDoc,ClassDoc>.    	 	        { current->doc += yytext; }
+<Doc,JavaDoc,LineDoc,PageDoc,ClassDoc>^{B}*"//" 
+<Doc,PageDoc,ClassDoc>"//"  			{ current->doc += yytext; }
+<LineDoc,JavaDoc,ClassDocBrief>"//"			{ current->brief += yytext; }
+<Doc,JavaDoc,LineDoc,ClassDocBrief,PageDoc,ClassDoc,AfterDoc,AfterDocLine,AfterDocBrief>("\\\\"|"@@")"f"[$\[\]] {
+							  current->doc += yytext; 
+							}
+<Doc,JavaDoc,LineDoc,ClassDocBrief,PageDoc,ClassDoc,AfterDoc,AfterDocLine,AfterDocBrief,CopyArgComment,CopyArgCommentLine>{CMD}"f$"	{ 
+  							  lastFormulaContext = YY_START;
+  							  formulaText="$"; 
+							  insideFormula=TRUE;
+							  BEGIN(ReadFormulaShort); 
+							}
+<Doc,JavaDoc,LineDoc,ClassDocBrief,PageDoc,ClassDoc,AfterDoc,AfterDocLine,AfterDocBrief,CopyArgComment,CopyArgCommentLine>{CMD}"f["	{ 
+  							  lastFormulaContext = YY_START;
+  							  formulaText="\\["; 
+							  insideFormula=TRUE;
+							  BEGIN(ReadFormulaLong); 
+							}
+<ReadFormulaShort>{CMD}"f$"				{
+  							  formulaText+="$";
+							  if (lastFormulaContext==ClassDocBrief || 
+							      lastFormulaContext==LineDoc || 
+							      lastFormulaContext==JavaDoc || 
+							      lastFormulaContext==AfterDocBrief ||
+							      lastFormulaContext==AfterDocLine
+							     )
+							  {
+							    current->brief += addFormula();
+							  }
+							  else if (lastFormulaContext==CopyArgComment ||
+							           lastFormulaContext==CopyArgCommentLine)
+							  {
+							    fullArgString += addFormula();
+							  }
+							  else
+							  {
+							    current->doc += addFormula();
+							  }
+							  insideFormula=FALSE;
+							  BEGIN(lastFormulaContext);
+  							}
+<ReadFormulaShort>\n					{
+  							  formulaText+=" ";
+							  yyLineNr++;
+							  if (lastFormulaContext==LineDoc || 
+							      lastFormulaContext==AfterDocLine
+							     )
+							  {
+							    checkFormula();
+							    insideFormula=FALSE;
+							    BEGIN(lastFormulaContext);
+							  }
+  							}
+<ReadFormulaLong>{CMD}"f]"					{
+							  formulaText+="\\]";
+							  if (lastFormulaContext==ClassDocBrief ||
+							      lastFormulaContext==LineDoc ||
+							      lastFormulaContext==JavaDoc ||
+							      lastFormulaContext==AfterDocBrief ||
+							      lastFormulaContext==AfterDocLine
+							     )
+							  {
+							    current->brief += addFormula();
+							  }
+							  else if (lastFormulaContext==CopyArgComment ||
+							           lastFormulaContext==CopyArgCommentLine)
+							  {
+							    fullArgString += addFormula();
+							  }
+							  else
+							  {
+							    current->doc += addFormula();
+							  }
+							  insideFormula=FALSE;
+							  BEGIN(lastFormulaContext);
+  							}
+<ReadFormulaLong>\n					{ formulaText+=*yytext; yyLineNr++; }
+<ReadFormulaLong,ReadFormulaShort>.                     { formulaText+=*yytext; }
+<PageDoc,ClassDocBrief,ClassDoc,ReadFormulaShort,ReadFormulaLong>{B}*"*/"  	{
+  					  checkDocs();
+					  //printf("current->section=%x\n",current->section);
+					  if (YY_START==SkipCode) // premature end of code block
+					  {
+					    err("Error: comment block ended inside \\code ... \\endcode block at line %d in %s!\n",
+						yyLineNr,yyFileName);
+					    *pSkipDoc += "\\endcode\n\n";
+					    BEGIN( lastDocContext );
+					  }
+					  else if (YY_START==ClassDocBrief &&
+					      lastBriefContext==TodoParam)
+					  {
+					    unput('/');unput('*'); // make sure we have something to read
+					    BEGIN( TodoParam );
+					  }
+					  else if (YY_START==ClassDocBrief &&
+					      lastBriefContext==TestParam)
+					  {
+					    unput('/');unput('*'); // make sure we have something to read
+					    BEGIN( TestParam );
+					  }
+					  else if (YY_START==ClassDocBrief &&
+					      lastBriefContext==BugParam)
+					  {
+					    unput('/');unput('*'); // make sure we have something to read
+					    BEGIN( BugParam );
+					  }
+					  else if (YY_START==ClassDocBrief &&
+					      lastBriefContext==DeprecatedParam)
+					  {
+					    unput('/');unput('*'); // make sure we have something to read
+					    BEGIN( DeprecatedParam );
+					  }
+					  else if (YY_START==ClassDocBrief &&
+					      lastBriefContext==XRefItemParam4)
+					  {
+					    unput('/');unput('*'); // make sure we have something to read
+					    BEGIN( XRefItemParam4 );
+					  }
+					  else if (YY_START==ClassDocBrief &&
+					      lastBriefContext==Doc)
+					  {
+					    //printf("Add docs %s\n",current->doc.data());
+  					    current->doc += "\n\n";
+  					    BEGIN( lastDocContext ); 
+					  }
+					  else if (current->section==Entry::MEMBERGRP_SEC)
+					  {
+					    unput('$');
+					    BEGIN( StoreGroupDocs );
+					  }
+					  else
+					  {
+  					    current->doc += "\n\n";
+					    //printf("Add docs for %s\n",current->name.data());
+					    current_root->addSubEntry(current);
+					    current = new Entry ;
+					    initEntry();
+					    BEGIN( FindMembers );
+					  }
+					}
+<PageDoc>"<"{TITLE}">"			{ 
+  					  current->args.resize(0); 
+					  current->argList->clear();
+  					  BEGIN( PageDocTitle); 
+					}
+<PageDocTitle>\n			{ yyLineNr++; current->args+=" "; }
+<PageDocTitle>[^\n\<]			{ current->args+=yytext; }
+<PageDocTitle>"</"{TITLE}">"		{ BEGIN( PageDoc ); }
+
+  /* escaped versions of the conditional commands (for putting them in the docs) */
+<ClassDoc,Doc,AfterDoc,PageDoc>{CMD}{CMD}"if"/[^a-z_A-Z0-9]     { current->doc+=yytext; }
+<ClassDoc,Doc,AfterDoc,PageDoc>{CMD}{CMD}"ifnot"/[^a-z_A-Z0-9]  { current->doc+=yytext; }
+<ClassDoc,Doc,AfterDoc,PageDoc>{CMD}{CMD}"elseif"/[^a-z_A-Z0-9] { current->doc+=yytext; }
+<ClassDoc,Doc,AfterDoc,PageDoc>{CMD}{CMD}"else"/[^a-z_A-Z0-9]   { current->doc+=yytext; }
+<ClassDoc,Doc,AfterDoc,PageDoc>{CMD}{CMD}"endif"/[^a-z_A-Z0-9]  { current->doc+=yytext; }
+<LineDoc,JavaDoc>{CMD}{CMD}"if"/[^a-z_A-Z0-9]     { current->brief+=yytext; }
+<LineDoc,JavaDoc>{CMD}{CMD}"ifnot"/[^a-z_A-Z0-9]  { current->brief+=yytext; }
+<LineDoc,JavaDoc>{CMD}{CMD}"elseif"/[^a-z_A-Z0-9] { current->brief+=yytext; }
+<LineDoc,JavaDoc>{CMD}{CMD}"else"/[^a-z_A-Z0-9]   { current->brief+=yytext; }
+<LineDoc,JavaDoc>{CMD}{CMD}"endif"/[^a-z_A-Z0-9]  { current->brief+=yytext; }
+
+  /* conditional commands */
+<ClassDoc,LineDoc,AfterDocLine,AfterDocBrief,Doc,JavaDoc,AfterDoc,PageDoc>{CMD}"if"{B}+ {
+                                          lastIfContext = YY_START;
+					  BEGIN(IfGuard);
+  					}
+<ClassDoc,LineDoc,AfterDocLine,AfterDocBrief,Doc,JavaDoc,AfterDoc,PageDoc>{CMD}"ifnot"{B}+ {
+                                          lastIfContext = YY_START;
+					  BEGIN(IfNotGuard);
+  					}
+<ClassDoc,LineDoc,AfterDocLine,AfterDocBrief,Doc,JavaDoc,AfterDoc,PageDoc>{CMD}"if"(\r?)\n |
+<IfGuard>\n				{
+  					  warn(yyFileName,yyLineNr,"Missing guard for if statement!");
+					  yyLineNr++;
+					}  
+<IfGuard>[^\n\t ]+			{
+  					  if (Config_getList("ENABLED_SECTIONS").find(yytext)==-1) // not enabled
+					  {
+					    BEGIN(SkipSection);
+  					    depthIf=1;
+					  }
+					  else // section enabled
+					  {
+					    BEGIN(lastIfContext);
+					  }
+  					}
+<IfNotGuard>\n				{
+  					  warn(yyFileName,yyLineNr,"Missing guard for ifnot statement!");
+					  yyLineNr++;
+					}  
+<IfNotGuard>[^\n\t ]+			{
+  					  if (Config_getList("ENABLED_SECTIONS").find(yytext)==-1) // not enabled
+					  {
+					    BEGIN(lastIfContext);
+					  }
+					  else // section enabled
+					  {
+  					    depthIf=1;
+					    BEGIN(SkipSection);
+					  }
+  					}
+<SkipSection>{CMD}"if"/[^a-z_A-Z0-9]	{
+  					  depthIf++;
+  					}
+<SkipSection>{CMD}"endif"/[^a-z_A-Z0-9]	{
+  					  if (--depthIf<=0)
+					  {
+					    BEGIN(lastIfContext);
+					  }
+  					}
+<SkipSection>{CMD}"else"/[^a-z_A-Z0-9]	{
+  					  if (depthIf==1)
+					  {
+					    depthIf=0;
+					    BEGIN(lastIfContext);
+					  }
+  					}
+<SkipSection>{CMD}"elseif"/[^a-z_A-Z0-9] {
+  					  if (depthIf==1)
+					  {
+					    BEGIN(IfGuard);
+					  }
+  					}
+<SkipSection>"*/"			{
+					  BEGIN( SkipSection );
+  					}
+<SkipSection>"/*!"			{
+					  BEGIN( SkipSection );
+  					}
+<SkipSection>\n				{
+  					  yyLineNr++;
+  					}
+<SkipSection>"//"|"*/"
+<ClassDoc,ClassDocBrief,LineDoc,AfterDocLine,AfterDocBrief,Doc,JavaDoc,AfterDoc,PageDoc>{CMD}"elseif"/[^a-z_A-Z0-9] {
+                                          // previous section enabled => skip now
+  					  depthIf=1;
+  					  BEGIN(SkipSection);
+  					}
+<ClassDoc,ClassDocBrief,LineDoc,AfterDocLine,AfterDocBrief,Doc,JavaDoc,AfterDoc,PageDoc>{CMD}"else"/[^a-z_A-Z0-9] {
+                                          // section was enabled => skip now
+  					  depthIf=1;
+  					  BEGIN(SkipSection);
+  					}
+<ClassDoc,ClassDocBrief,LineDoc,AfterDocLine,AfterDocBrief,Doc,JavaDoc,AfterDoc,PageDoc>{CMD}"endif"/[^a-z_A-Z0-9] {
+                                          // section enabled => absorb endif
+  					}
+
+
+<ClassDoc,ClassDocBrief,LineDoc,AfterDocLine,AfterDocBrief,Doc,JavaDoc,AfterDoc>{CMD}"ingroup"{B}+   { 
+  					  lastGroupContext = YY_START;
+  					  lineCount();
+  					  BEGIN( GroupName ); 
+					}
+<ClassDoc,ClassDocBrief,LineDoc,AfterDocLine,AfterDocBrief,Doc,JavaDoc,AfterDoc>{CMD}"nosubgrouping"/[^a-z_A-Z0-9] {
+                                          current->subGrouping = FALSE; 
+                                        }
+<ClassDoc,ClassDocBrief,LineDoc,AfterDocLine,AfterDocBrief,Doc,JavaDoc,AfterDoc>{CMD}"showinitializer"/[^a-z_A-Z0-9] {
+					  current->initLines = 100000; // ON
+  					}
+<ClassDoc,ClassDocBrief,LineDoc,AfterDocLine,AfterDocBrief,Doc,JavaDoc,AfterDoc>{CMD}"hideinitializer"/[^a-z_A-Z0-9] {
+					  current->initLines = 0; // OFF
+  					}
+<ClassDoc,ClassDocBrief,LineDoc,AfterDocLine,AfterDocBrief,Doc,JavaDoc,AfterDoc>{CMD}"callgraph"/[^a-z_A-Z0-9] {
+					  current->callGraph = TRUE; // ON
+  					}
+<GroupName>{ID}				{
+  					  current->groups->append(
+					    new Grouping(yytext, Grouping::GROUPING_INGROUP)
+					  );
+  					}
+<GroupName>\n				{
+  					  yyLineNr++; 
+					  BEGIN( lastGroupContext );
+  					}
+<GroupName>"*/"				{
+  					  unput('/');unput('*');
+					  BEGIN( lastGroupContext );
+  					}
+<ClassDoc,Doc>{B}*{CMD}("brief"|"short")	{ 
+  					  lastBriefContext=YY_START;
+					  current->briefFile = yyFileName;
+					  current->briefLine = yyLineNr;
+  					  BEGIN( ClassDocBrief ); 
+					}
+<ClassDoc>{B}*"\\inherit"{B}+	        { BEGIN( DocBaseClass ); }
+<DocBaseClass>{ID}			{
+					  //printf("Adding base class %s\n",yytext);
+					  current->extends->append(
+					    new BaseInfo(removeRedundantWhiteSpace(yytext),Public,Normal)
+					  );
+					}
+<DocBaseClass>\n			{ yyLineNr++; BEGIN( ClassDoc ); }
+<ClassDocBrief>{BS}({BL}|"\\n\\n")	{ 
+					  //if (!current->doc.isEmpty()) current->doc+=" <p>";
+					  if (lastBriefContext==TodoParam || 
+					      lastBriefContext==TestParam || 
+					      lastBriefContext==BugParam ||
+					      lastBriefContext==DeprecatedParam ||
+					      lastBriefContext==XRefItemParam4
+					     )
+					  {
+					    unput('\n');
+					  }
+					  else
+					  {
+  					    current->brief=current->brief.stripWhiteSpace();
+					    if (yytext[yyleng-1]=='\n') yyLineNr++;
+					  }
+					  BEGIN( lastBriefContext );
+					}
+<ClassDocBrief>"\n"			{ 
+					  // allow \todo in brief description
+					  if (lastBriefContext==TodoParam &&
+					      (slStartContext==LineDoc ||
+					       slStartContext==AfterDocLine
+					      )
+					     )
+					  {
+					    unput('\n'); // make sure we have something to read
+					    BEGIN( TodoParam );
+					  }
+					  else if
+					     (lastBriefContext==TestParam &&
+					      (slStartContext==LineDoc ||
+					       slStartContext==AfterDocLine
+					      )
+					     )
+					  {
+					    unput('\n'); // make sure we have something to read
+					    BEGIN( TestParam );
+					  }
+					  else if
+					     (lastBriefContext==BugParam &&
+					      (slStartContext==LineDoc ||
+					       slStartContext==AfterDocLine
+					      )
+					     )
+					  {
+					    unput('\n'); // make sure we have something to read
+					    BEGIN( BugParam );
+					  }
+					  else if
+					     (lastBriefContext==DeprecatedParam &&
+					      (slStartContext==LineDoc ||
+					       slStartContext==AfterDocLine
+					      )
+					     )
+					  {
+					    unput('\n'); // make sure we have something to read
+					    BEGIN( DeprecatedParam );
+					  }
+					  else if
+					     (lastBriefContext==XRefItemParam4 &&
+					      (slStartContext==LineDoc ||
+					       slStartContext==AfterDocLine
+					      )
+					     )
+					  {
+					    unput('\n'); // make sure we have something to read
+					    BEGIN( XRefItemParam4 );
+					  }
+					  else
+					  {
+					    current->brief += "\n"; 
+					    if (!current->doc.stripWhiteSpace().isEmpty())
+					    {
+					      current->doc += "<p>";
+					    }
+  					    yyLineNr++ ; 
+					  }
+					}
+<ClassDocBrief>"<"{BR}{ATTR}">"
+<ClassDocBrief>{BS}/{SECTIONCMD}	|
+<ClassDocBrief>{B}*/{SECTIONCMD}	{ 
+  					  current->brief=current->brief.stripWhiteSpace();
+                                          BEGIN( lastBriefContext ); 
+                                        }
+<ClassDocBrief>{BS}{CMD}("brief"|"short"){BN}+ {
+  					  //lastBriefContext=YY_START;
+					}
+<ClassDocBrief>.			{ current->brief += *yytext; }
+<ClassDocDefine>{ID}/"("		{
+  					  current->name = yytext;
+					  BEGIN( ClassDefineArgs );
+  					}
+<ClassDocDefine>{ID}			{
+  					  current->name = yytext;
+					  if (nextDefContext==ClassDoc)
+					    newDocState();
+					  else 
+					    BEGIN( nextDefContext );
+  					}
+<ClassDefineArgs>")"			{
+  					  current->args+=")";
+					  if (nextDefContext==ClassDoc)
+					    newDocState();
+					  else
+					    BEGIN( nextDefContext );
+  					}
+<ClassDefineArgs>.			{
+  					  current->args+= yytext;
+  					}
+<ClassDocFunc>"\\"{B}*"\n"		{ yyLineNr++; }
+<ClassDocFunc>"\n"			{ 
+  					  yyLineNr++; 
+					  current->name = current->name.stripWhiteSpace();
+					  if (current->section == Entry::MEMBERDOC_SEC && current->args.isEmpty())
+					    current->section = Entry::VARIABLEDOC_SEC;
+					  newDocState();
+					}
+<ClassDocFunc>"operator"{B}*"("{B}*")"	{
+  					  current->name+=yytext;
+  					}
+<ClassDocFunc>"("			{
+  					  current->args+=*yytext;
+					  currentArgumentContext = ClassDocFuncQual;
+					  fullArgString = current->args.copy();
+					  copyArgString = &current->args;
+					  BEGIN( ReadFuncArgType ) ;
+  					}
+<ClassDocFunc>"("({ID}"::")*({B}*"*")+	{
+  					  current->type+=current->name+yytext;
+					  current->name.resize(0);
+  					  BEGIN( ClassDocFuncPtr );
+  					}
+<ClassDocFuncPtr>{SCOPENAME}		{
+  					  current->name+=yytext;
+  					}
+<ClassDocFuncPtr>")"			{
+  					  current->type+=')';
+  					  BEGIN( ClassDocFunc );
+  					}
+<ClassDocFuncQual>"{"			{
+  					  BEGIN( ClassDocFuncSkipLine);
+  					}
+<ClassDocFuncQual>{B}*"const"{B}*    	{ 
+  					  current->args += " const "; 
+					  current->argList->constSpecifier=TRUE;
+					}
+<ClassDocFuncQual>{B}*"volatile"{B}* 	{ 
+  					  current->args += " volatile "; 
+					  current->argList->volatileSpecifier=TRUE;
+					}
+<ClassDocFuncQual>{B}*"="{B}*"0"{B}*	{ 
+					  current->args += " = 0"; 
+					  current->virt = Pure; 
+					  current->argList->pureSpecifier=TRUE;
+					}
+<ClassDocFuncQual>"throw"{B}*"("	{
+  					  current->exception = "throw(";
+					  BEGIN(ClassDocFuncExc);
+  					}
+<ClassDocFuncExc>")"			{
+  					  current->exception += ')';
+					  BEGIN(ClassDocFuncQual);
+  					}
+<ClassDocFuncExc>.			{
+  					  current->exception += *yytext;
+  					}
+<ClassDocFunc,ClassDocFuncQual>.	{
+  					  current->name += *yytext;
+  					}
+<ClassDocFuncQual,ClassDocFuncSkipLine>"\n"	{
+  					  yyLineNr++; 
+					  current->name = current->name.stripWhiteSpace();
+					  newDocState();
+  					}
+<DefLineDoc,LineDoc,AfterDocLine>{SECTIONCMD}	{
+  					  warn(yyFileName,yyLineNr,"Command %s not allowed in single-line C++ comment! Ignoring.",yytext);
+  					}
+<Doc>[a-z_A-Z0-9]+			{ current->doc += yytext; }
+<Doc,PageDoc,AfterDoc,LineDoc,ClassDoc>("\\\\"|"@@")	{ current->doc += yytext; }
+<Doc>.					{ current->doc += *yytext; }
+<DefLineDoc,LineDoc>.			{ current->brief += *yytext; }
+<Doc>\n					{ yyLineNr++; current->doc += *yytext; }
+<LineDoc>[\n\r]+{B}*"//"[!/]		{ lineCount(); }
+<LineDoc>\n				{ 
+					  yyLineNr++;  
+					  if (lastDocContext==SkipCurly) // inside body
+					  {
+					    if (!Config_getBool("HIDE_IN_BODY_DOCS"))
+					    {
+					      if (!previous->doc.isEmpty())
+					      {
+						previous->doc+="<p>";
+					      }
+					      previous->doc += current->brief;
+					    }
+					    current->brief.resize(0);
+					  }
+					  BEGIN( lastDocContext );
+					}
+<DefLineDoc>\n				{
+  					  yyLineNr++; 
+					  unput('/');unput('*');
+					  BEGIN( ClassDoc );
+  					}
+
+<AfterDocLine>"/*"|"//"			{ current->brief+=yytext; }
+<AfterDocLine>\n			{
+  					  yyLineNr++;
+                                          if (afterDocTerminator!=0)
+					    unput(afterDocTerminator);
+					  BEGIN(lastAfterDocContext);
+  					}
+<AfterDocLine>\n{B}*("//!<"|"///<") 	{ 
+  					  yyLineNr++;
+  					  BEGIN(AfterDocLine);
+  					}
+<AfterDocLine>\n{B}*("/*!<"|"/**<") 	{ 
+  					  yyLineNr++;
+  					  BEGIN(AfterDoc);
+  					}
+<AfterDocLine>.				{ current->brief+=yytext; }
+<AfterDocBrief>{BS}({BL}|"\\n\\n")	{ 
+  					  current->brief=current->brief.stripWhiteSpace();
+					  yyLineNr++;
+					  BEGIN( AfterDoc );
+					}
+<AfterDocBrief>"/*"|"//"		{ current->brief+=yytext; }
+<AfterDocBrief>{B}*/{SECTIONCMD}	{
+  					  current->brief=current->brief.stripWhiteSpace();
+  					  BEGIN( AfterDoc );
+  					}
+<AfterDocBrief>\n			{ current->brief+=yytext; yyLineNr++; }
+<AfterDocBrief>.			{ current->brief+=*yytext; }
+
+  /*
+<AfterDocBrief>"<"{BR}{ATTR}">"
+<AfterDocBrief>{BS}/{CMD}"ingroup"	{
+  					  current->brief=current->brief.stripWhiteSpace();
+					  BEGIN( lastBriefContext ); 
+  					}
+<AfterDocBrief>{BS}/{SECTIONCMD}	{ 
+                                          BEGIN( lastBriefContext ); 
+                                        }
+<AfterDocBrief>{BS}/[^/\n]{BL}		{ yyLineNr++; 
+  					  if (!current->brief.stripWhiteSpace().isEmpty())
+					    BEGIN(AfterDoc); 
+					}
+  */
+<AfterDocBrief>"*/"			{
+                                          if (afterDocTerminator!=0)
+					    unput(afterDocTerminator);
+					  BEGIN(lastAfterDocContext);
+  					}
+<AfterDocBrief>"."/{BN}			{ BEGIN(AfterDoc); }
+<LineDoc,AfterDocLine>{CMD}"internal"	{ 
+                                          if (!Config_getBool("INTERNAL_DOCS"))
+                                          {
+					    lastInternalDocContext = YY_START;
+                                            BEGIN( DocInternalLine );
+                                          }
+                                          else
+                                          {
+                                            current->doc+="\\internal"; 
+					  }
+					}
+<Doc,JavaDoc,PageDoc,ClassDoc,AfterDoc>{CMD}"internal"		{ 
+                                          if (!Config_getBool("INTERNAL_DOCS"))
+                                          {
+					    lastInternalDocContext = YY_START;
+                                            BEGIN( DocInternal );
+                                          }
+                                          else
+                                          { 
+					    current->doc+="\\internal"; 
+					  }
+					}
+<DocInternal>.				
+<DocInternal>\n				{ yyLineNr++; }
+<DocInternal>"/*"|"//"			
+<DocInternal>"*/"			{
+					  unput('/');
+					  unput('*');
+  					  BEGIN( lastInternalDocContext );
+  					}
+<DocInternalLine>.				
+<DocInternalLine>\n			{
+  					  yyLineNr++;
+					  unput('\n');
+  					  BEGIN( lastInternalDocContext );
+  					}
+<AfterDoc>{CMD}"brief"			{ BEGIN(AfterDocBrief); }
+<AfterDoc>"/*"|"//"			{ current->doc+=yytext; }
+<AfterDoc>^{B}*"*"+/[^/]			
+<AfterDoc>\n				{ current->doc+=yytext; yyLineNr++; }
+<AfterDoc>.				{ current->doc+=*yytext; }
+<AfterDoc>"*/"				{
+                                          if (afterDocTerminator!=0)
+					    unput(afterDocTerminator);
+					  BEGIN(lastAfterDocContext);
+  					}
+<ClassDocRelates,ClassDocFunc,ClassDocDefine,GroupDocArg1,CategoryDocArg1,ClassDocArg1,SectionTitle,EnumDocArg1,PageDocArg1,ExampleDocArg1,ClassDefineArgs>"*/" {
+                                          // defer "*/" to a later time
+  					  unput('/');
+  					  unput('*');
+					  // insert \n and decrement the line number to compensate for the artifical newline
+					  unput('\n');
+					  yyLineNr--;
+					  BEGIN( Doc );
+					}
+<FileDocArg1>"*/"			{
+  					  current->name = yyFileName;
+  					  current->doc += "\n\n";
+					  current_root->addSubEntry(current);
+					  current = new Entry ;
+					  initEntry();
+					  BEGIN( FindMembers );
+  					}
+<Doc>"*/"				{ 
+  				          checkDocs();
+					  //printf("End of docs at line %d: %s\n",yyLineNr,current->doc.data());
+					  if (lastDocContext==SkipCurly)
+					  {
+					    if (!Config_getBool("HIDE_IN_BODY_DOCS"))
+					    {
+					      if (!previous->doc.isEmpty())
+					      {
+						previous->doc+="<p>";
+					      }
+					      previous->doc += current->doc;
+					    }
+					    current->doc.resize(0);
+					  }
+					  else
+					  {
+  					    current->doc += "\n\n";
+					  }
+					  if (current->section==Entry::GROUPDOC_SEC)
+					  {
+					    current_root->addSubEntry(current);
+					    current = new Entry ;
+					    initEntry();
+					  }
+  					  BEGIN( lastDocContext ); 
+					}
+<JavaDoc>"*/"				{ 
+					  unput('/');unput('*');
+					  BEGIN( tmpDocType );
+					}
+<Doc,JavaDoc,ClassDoc,PageDoc,ReadFormulaShort,ReadFormulaLong,AfterDoc>^{B}*(("//"{B}*)?)"*"+[ \t]*"-"("#")?{B}+ { 
+  				         current->doc += yytext; 
+					}
+<Doc,JavaDoc,ClassDoc,PageDoc,ReadFormulaShort,ReadFormulaLong,AfterDoc>^{B}*(("//"{B}*)?)"*"+[ \t]*"."{B}*\n { 
+  				         current->doc += yytext; 
+					 yyLineNr++;
+					}
+<ClassDocBrief,AfterDocBrief>^{B}*(("//"{B}*)?)"*"+[ \t]*"-"("#")?{B}+ { 
+  				         current->brief += "-"; 
+					}
+<ClassDocBrief,AfterDocBrief>^{B}*(("//"{B}*)?)"*"+[ \t]*"."{B}*\n { 
+  				         current->brief += "."; yyLineNr++; 
+					}
+<Doc,JavaDoc,ClassDoc,PageDoc,ReadFormulaShort,ReadFormulaLong,ClassDocBrief,AfterDoc,AfterDocBrief>^{B}*(("//"{B}*)?)"*"+/[^/]
+<Doc,JavaDoc,ClassDoc,PageDoc,ReadFormulaShort,ReadFormulaLong,ClassDocBrief,AfterDoc,AfterDocBrief>^{B}*(("//"{B}*)?)"*"+{B}+ { 
+					  current->doc+=' '; 
+					}
+
+<Doc,ClassDoc,PageDoc,AfterDoc>"\\"[a-z_A-Z][a-z_A-Z0-9]*[\\] { // directory type of text
+  					  current->doc+=yytext;
+  					}
+  /*
+<SkipSection>{CMD}[a-z_A-Z][a-z_A-Z0-9]*  {
+  					    QCString *pValue=Doxygen::aliasDict[yytext+1];
+					    if (pValue)
+					    {
+					      int i,l=pValue->length();
+					      for (i=l-1;i>=0;i--)
+					      {
+					        unput(pValue->at(i));
+					      }
+					    }
+                                          }
+  */
+<Doc,ClassDoc,PageDoc,AfterDoc,CopyArgComment>{CMD}{CMD}[a-z_A-Z][a-z_A-Z0-9]* 	{ /* escaped command */
+					    if (YY_START==CopyArgComment)
+					      fullArgString+=yytext;
+					    else
+  					      current->doc+=yytext;
+                                          }
+<Doc,ClassDoc,PageDoc,AfterDoc,CopyArgComment>{CMD}[a-z_A-Z][a-z_A-Z0-9]* 	{
+                                          bool handled=FALSE;
+                                          if ( useOverrideCommands)
+                                          {
+					      if ( strcmp(yytext+1,"static")==0 )
+					      {
+  					        current->stat = TRUE; handled = TRUE;
+					      }
+					      else if ( strcmp(yytext+1,"pure")==0 )
+					      {
+						current->virt = Pure; handled = TRUE;
+					      }
+					      else if ( strcmp(yytext+1,"private")==0 )
+					      {
+						current->protection = Private; handled = TRUE;
+					      }
+					      else if ( strcmp(yytext+1,"privatesection")==0 )
+					      {
+						current->protection = protection = Private; handled = TRUE;
+					      }
+					      else if ( strcmp(yytext+1,"protected")==0 )
+					      {
+						current->protection = Protected; handled = TRUE;
+					      }
+					      else if ( strcmp(yytext+1,"protectedsection")==0 )
+					      {
+						current->protection = protection = Protected ; handled = TRUE;
+					      }
+					      else if ( strcmp(yytext+1,"public")==0 )
+					      {
+						current->protection = Public; handled = TRUE;
+					      }
+					      else if ( strcmp(yytext+1,"publicsection")==0 )
+					      {
+						current->protection = protection = Public; handled = TRUE;
+					      }
+					  }
+                                          if (!handled)
+                                          {
+  					    //QCString *pValue=Doxygen::aliasDict[yytext+1];
+					    //if (pValue)
+					    //{
+					    //  int i,l=pValue->length();
+					    //  char c;
+					    //  for (i=l-1;i>=0;i--)
+					    //  {
+					    //  	c=pValue->at(i);
+					    //    unput(c);
+					    //	if (c=='\n') yyLineNr--;
+					    //  }
+					    //}
+					    //else
+					    //{
+					    if (YY_START==CopyArgComment)
+					      fullArgString+=yytext;
+					   else
+  					      current->doc+=yytext;
+					    //}
+                                          }
+  					}
+<JavaDoc,LineDoc,ClassDocBrief,AfterDocBrief,AfterDocLine>"\\"[a-z_A-Z][a-z_A-Z0-9]*[\\] { // directory type of text
+  					  current->brief+=yytext;
+  					}
+<LineDoc,AfterDocLine,CopyArgCommentLine>{CMD}("brief"|"short") {}
+<JavaDoc,LineDoc,ClassDocBrief,AfterDocBrief,AfterDocLine,CopyArgCommentLine>{CMD}{CMD}[a-z_A-Z][a-z_A-Z0-9]* 	{ /* escaped command */
+					  if (YY_START==CopyArgCommentLine)
+					    fullArgString+=yytext;
+					  else
+  					    current->brief+=yytext;
+                                        }
+<JavaDoc,LineDoc,ClassDocBrief,AfterDocBrief,AfterDocLine,CopyArgCommentLine>{CMD}[a-z_A-Z][a-z_A-Z0-9]* 	{
+  					  //QCString *pValue=Doxygen::aliasDict[yytext+1];
+					  //if (pValue)
+					  //{
+					  //  int i,l=pValue->length();
+					  //  for (i=l-1;i>=0;i--)
+					  //  {
+					  //    unput(pValue->at(i));
+					  //  }
+					  //}
+					  //else
+					  //{
+					    if (YY_START==CopyArgCommentLine)
+					      fullArgString+=yytext;
+					    else
+  					      current->brief+=yytext;
+					  //}
+  					}
+<DefLineDoc,LineDoc,ClassDoc,PageDoc,Doc>"/*"|"//"   { current->doc += yytext; }
+<SkipCxxComment>.*/\n			{ 
+					  BEGIN( lastCContext ) ;
+					}
+<SkipComment>[^\*\n]+
+<*>\n					{ yyLineNr++ ; }
+<*>\"					{
+					  if (insideIDL && insideCppQuote)
+					  {
+					    BEGIN(EndCppQuote);
+					  }
+					}
+<*>"#"				        {	
+  					  if (! insidePHP)
+  					    REJECT;
+  					  lastCContext = YY_START ;
+					  BEGIN( SkipCxxComment ) ;
+					}
+<*>\'					{
+  					  if (insidePHP)
+					  {
+  					    lastStringContext=YY_START;
+					    BEGIN(SkipPHPString);
+					  }
+  					}
+<*>\"					{
+  					  if (insidePHP)
+					  {
+  					    lastStringContext=YY_START;
+					    BEGIN(SkipString);
+					  }
+  					}
+<*>.
+<SkipComment>"//"|"/*"
+<*>"/*"					{ lastCContext = YY_START ;
+					  BEGIN( SkipComment ) ;
+					}
+<SkipComment>{B}*"*/"			{ BEGIN( lastCContext ) ; }
+<*>"//"				        {	
+  					  lastCContext = YY_START ;
+					  BEGIN( SkipCxxComment ) ;
+					}
+%%
+
+//----------------------------------------------------------------------------
+
+static void startGroup()
+{
+  if (!lastDefGroup.groupname.isEmpty())
+  {
+    setCurrentGroup( &lastDefGroup.groupname, lastDefGroup.pri );   
+    autoGroupStack.push(new Grouping(lastDefGroup));
+    lastDefGroup.groupname.resize(0);
+  }
+  else 
+  {
+    //if (memberGroupId!=DOX_NOGROUP)
+    //{
+    //  //warn(yyFileName,yyLineNr,"Warning: ignoring nested member group. "
+    //  //	"Previous command was found at line %d.",lastMemberGroupLine);
+    //  printf("startGroup ends group %d\n",memberGroupId);
+    //  endGroup();
+    //}
+    if (memberGroupHeader.isEmpty())
+    {
+      // warn( yyFileName, yyLineNr, "Warning: member group does not have a header" );
+      memberGroupHeader="[NOHEADER]";
+    }
+    memberGroupId = newMemberGroupId();
+    MemberGroupInfo *info = new MemberGroupInfo;
+    info->header = memberGroupHeader.stripWhiteSpace();
+    Doxygen::memGrpInfoDict.insert(memberGroupId,info);
+    //Doxygen::memberHeaderDict.insert(memberGroupId,
+    //	new QCString(memberGroupHeader.stripWhiteSpace())
+    //			   );
+    
+    memberGroupRelates = current->relates.copy();
+    memberGroupInside = current->inside.copy();
+    current->mGrpId = memberGroupId;
+    lastMemberGroupLine = yyLineNr;
+  }
+}
+
+static void startGroupInDoc()
+{
+  if (current->section==Entry::GROUPDOC_SEC ) /* scope for a non-member group: @defgroup */
+  {
+    autoGroupStack.push(new Grouping(current->name,
+	  current->groupingPri()
+	  ));
+  }
+  else if (current->section == Entry::MEMBERGRP_SEC) /* scope for a member group: @name */
+  {
+    //if (memberGroupId!=DOX_NOGROUP)
+    //{
+    //  printf("startGroupInDoc ends group %d\n",memberGroupId);
+    //  endGroup();
+    //}
+    memberGroupId = newMemberGroupId();
+    MemberGroupInfo *info = new MemberGroupInfo;
+    info->header = memberGroupHeader.stripWhiteSpace();
+    Doxygen::memGrpInfoDict.insert(memberGroupId,info);
+    //Doxygen::memberHeaderDict.insert(memberGroupId,
+    //	new QCString(memberGroupHeader.stripWhiteSpace())
+    //			   );
+    memberGroupRelates = current->relates.copy();
+    memberGroupInside = current->inside.copy();
+    current->mGrpId = memberGroupId;
+    lastMemberGroupLine = yyLineNr;
+  }
+  else
+  {
+    warn(yyFileName,yyLineNr,"Warning: @{ may only be used in a group block!\n");
+  }
+}
+
+static void endGroup()
+{
+  if (memberGroupId!=DOX_NOGROUP) // end of member group
+  {
+    //Doxygen::memberDocDict.insert(memberGroupId,
+    //	new QCString(memberGroupDocs)
+    //			);
+    MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(memberGroupId);
+    if (info) 
+    {
+      info->doc = memberGroupDocs;
+      info->docFile = yyFileName;
+    }
+    memberGroupId=DOX_NOGROUP;
+    memberGroupRelates.resize(0);
+    memberGroupInside.resize(0);
+    if (YY_START!=ReadInitializer) 
+    {
+      current->mGrpId=DOX_NOGROUP;
+      current->relates.resize(0);
+    }
+    memberGroupDocs.resize(0);
+  }
+  else if (!autoGroupStack.isEmpty()) // end of group
+  {
+    Grouping *current = autoGroupStack.pop();
+    Grouping *parent = autoGroupStack.top();
+    if( parent ) {
+      setCurrentGroup( &parent->groupname, parent->pri );
+    } else {
+      setCurrentGroup( 0, Grouping::GROUPING_LOWEST );
+    }
+    delete current;
+  }
+}
+
+static void forceEndGroup()
+{
+  while (memberGroupId!=DOX_NOGROUP || !autoGroupStack.isEmpty()) 
+  {
+    //printf("forceEndGroup ends group %d\n",memberGroupId);
+    endGroup();
+  }
+}
+
+//----------------------------------------------------------------------------
+
+static void newDocState()
+{
+  if (tmpDocType!=-1)
+  {
+    tmpDocType=ClassDoc;
+    BEGIN(JavaDoc);
+  }
+  else
+  {
+    BEGIN(ClassDoc);
+  }
+}
+
+//----------------------------------------------------------------------------
+
+static void parseCompounds(Entry *rt)
+{
+  //printf("parseCompounds(%s)\n",rt->name.data());
+  EntryListIterator eli(*rt->sublist);
+  Entry *ce;
+  for (;(ce=eli.current());++eli)
+  {
+    if (!ce->program.isEmpty())
+    {
+      //printf("-- %s ---------\n%s\n---------------\n",
+      //  ce->name.data(),ce->program.data());
+      // init scanner state
+      padCount=0;
+      depthIf = 0;
+      inputString = ce->program;
+      lastDefGroup.groupname.resize(0);
+      inputPosition = 0;
+      scanYYrestart( scanYYin ) ;
+      if (ce->section==Entry::ENUM_SEC)
+	BEGIN( FindFields ) ;
+      else
+	BEGIN( FindMembers ) ;
+      current_root = ce ;
+      strcpy( yyFileName, ce->fileName ) ;
+      setContext();
+      yyLineNr = ce->startLine ;
+      insideObjC = ce->objc;
+      //printf("---> Inner block starts at line %d\n",yyLineNr);
+      //current->reset();
+      current = new Entry;
+      gstat = FALSE;
+      int ni=ce->name.findRev("::"); if (ni==-1) ni=0; else ni+=2;
+      // set default protection based on the compound type
+      if( ce->section==Entry::CLASS_SEC ) // class
+      {
+	if (
+	    ce->fileName.right(4)==".php" ||
+	    ce->fileName.right(4)==".inc" ||
+	    ce->fileName.right(2)==".d"
+	   )
+          current->protection = protection = Public ; 
+	else if (ce->fileName.right(5)==".java")
+          current->protection = protection = Package ; 
+	else 
+          current->protection = protection = Private ;
+      }
+      else if (ce->section == Entry::ENUM_SEC ) // enum
+      {
+	current->protection = protection = ce->protection;
+      }
+      else if (!ce->name.isEmpty() && ce->name.at(ni)=='@') // unnamed union or namespace
+      {
+	if (ce->section == Entry::NAMESPACE_SEC ) // unnamed namespace
+	{
+          current->stat = gstat = TRUE;
+	}
+	current->protection = protection = ce->protection;
+      }
+      else if (ce->section==Entry::INTERFACE_SEC)
+      {
+	if (ce->objc)
+	{
+	  current->protection = protection = Protected ;
+	}
+	else
+	{
+	  current->protection = protection = Public ;
+	}
+      }
+      else // named struct, union, protocol, category
+      {
+	current->protection = protection = Public ;
+      }
+      mtype = Method;
+      virt = Normal;
+      //printf("name=%s current->stat=%d gstat=%d\n",ce->name.data(),current->stat,gstat);
+
+      memberGroupId = DOX_NOGROUP;
+      memberGroupRelates.resize(0);
+      memberGroupInside.resize(0);
+      
+      scanYYlex() ;
+      forceEndGroup();
+      delete current; current=0;
+      ce->program.resize(0);
+
+
+      if (depthIf>0)
+      {
+	warn(yyFileName,yyLineNr,"Documentation block ended in the middle of a conditional section!");
+      }
+    }
+    parseCompounds(ce);
+  }
+}
+
+//----------------------------------------------------------------------------
+
+void parseMain(Entry *rt)
+{
+  initParser();
+  anonCount     = 0;
+  depthIf       = 0;
+  protection    = Public;
+  mtype         = Method;
+  gstat         = FALSE;
+  virt          = Normal;
+  current_root  = rt;
+  global_root   = rt;
+  current       = new Entry;
+  inputString   = rt->program;
+  inputPosition = 0;
+  scanYYrestart( scanYYin );
+  BEGIN( FindMembers );
+  scanYYlex();
+
+  forceEndGroup();
+
+  if (depthIf>0)
+  {
+    warn(yyFileName,yyLineNr,"Documentation block ended in the middle of a conditional section!");
+  }
+
+  rt->program.resize(0);
+  delete current; current=0;
+  parseCompounds(rt);
+}
+
+#if !defined(YY_FLEX_SUBMINOR_VERSION) 
+//----------------------------------------------------------------------------
+extern "C" { // some bogus code to keep the compiler happy
+  void scannerYYdummy() { yy_flex_realloc(0,0); } 
+}
+#endif
+
diff -Naur tmp_unpack/doxygen-1.3.8.orig/src/util.cpp doxygen-1.3.8/src/util.cpp
--- tmp_unpack/doxygen-1.3.8.orig/src/util.cpp	2004-07-19 19:04:43.000000000 +0000
+++ doxygen-1.3.8/src/util.cpp	2007-07-26 07:30:15.000000000 +0000
@@ -428,6 +428,7 @@
       n.right(4)==".hpp" ||
       n.right(4)==".h++" ||
       n.right(4)==".idl" ||
+      n.right(5)==".midl" ||
       n.right(5)==".pidl"
      ) return Entry::HEADER_SEC;
   return 0;
diff -Naur tmp_unpack/doxygen-1.3.8.orig/src/util.cpp.orig doxygen-1.3.8/src/util.cpp.orig
--- tmp_unpack/doxygen-1.3.8.orig/src/util.cpp.orig	1970-01-01 00:00:00.000000000 +0000
+++ doxygen-1.3.8/src/util.cpp.orig	2004-07-19 19:04:43.000000000 +0000
@@ -0,0 +1,4925 @@
+/*****************************************************************************
+ *
+ * $Id: doxygen.patch,v 1.2 2007/12/12 14:03:17 mpasquat Exp $
+ *
+ * Copyright (C) 1997-2004 by Dimitri van Heesch.
+ *
+ * Permission to use, copy, modify, and distribute this software and its
+ * documentation under the terms of the GNU General Public License is hereby 
+ * granted. No representations are made about the suitability of this software 
+ * for any purpose. It is provided "as is" without express or implied warranty.
+ * See the GNU General Public License for more details.
+ *
+ * Documents produced by Doxygen are derivative works derived from the
+ * input used in their production; they are not affected by this license.
+ *
+ */
+
+#include <stdlib.h>
+#include <ctype.h>
+#if defined(_WIN32) && !defined(__CYGWIN__)
+#include <windows.h>
+#endif
+
+#include <md5.h>
+
+#include "qtbc.h"
+#include <qregexp.h>
+#include <qfileinfo.h>
+#include <qdir.h>
+#include <qdatetime.h>
+#include <qcache.h>
+
+#include "util.h"
+#include "message.h"
+#include "classdef.h"
+#include "filedef.h"
+#include "doxygen.h"
+#include "outputlist.h"
+#include "defargs.h"
+#include "language.h"
+#include "config.h"
+#include "htmlhelp.h"
+#include "example.h"
+#include "version.h"
+#include "groupdef.h"
+#include "reflist.h"
+#include "pagedef.h"
+
+#if !defined(_WIN32) || defined(__CYGWIN__)
+#include <unistd.h>
+#include <stdlib.h>
+#include <sys/types.h>
+#include <sys/wait.h>
+#include <errno.h>
+extern char **environ;
+#endif
+
+#if defined(_MSC_VER) || defined(__BORLANDC__)
+#define popen _popen
+#define pclose _pclose
+#endif
+
+//------------------------------------------------------------------------
+
+// selects one of the name to sub-dir mapping algorithms that is used
+// to select a sub directory when CREATE_SUBDIRS is set to YES.
+
+#define ALGO_COUNT 1
+#define ALGO_CRC16 2
+#define ALGO_MD5   3
+    
+//#define MAP_ALGO ALGO_COUNT
+//#define MAP_ALGO ALGO_CRC16
+#define MAP_ALGO ALGO_MD5
+
+//------------------------------------------------------------------------
+// TextGeneratorOLImpl implementation
+//------------------------------------------------------------------------
+
+TextGeneratorOLImpl::TextGeneratorOLImpl(OutputDocInterface &od) : m_od(od) 
+{
+}
+
+void TextGeneratorOLImpl::writeString(const char *s,bool keepSpaces) const
+{ 
+  if (keepSpaces)
+  {
+    const char *p=s;
+    if (p)
+    {
+      char cs[2];
+      char c;
+      cs[1]='\0';
+      while ((c=*p++))
+      {
+        if (c==' ') m_od.writeNonBreakableSpace(1); 
+        else cs[0]=c,m_od.docify(cs);
+      }
+    }
+  }
+  else
+  {
+    m_od.docify(s); 
+  }
+}
+
+void TextGeneratorOLImpl::writeBreak() const
+{ 
+  m_od.pushGeneratorState();
+  m_od.disableAllBut(OutputGenerator::Html);
+  m_od.lineBreak();
+  m_od.popGeneratorState();
+}
+
+void TextGeneratorOLImpl::writeLink(const char *extRef,const char *file,
+                                    const char *anchor,const char *text
+                                   ) const
+{
+  m_od.writeObjectLink(extRef,file,anchor,text);
+}
+
+//------------------------------------------------------------------------
+//------------------------------------------------------------------------
+
+    
+/*! Implements an interruptable system call on Unix/Windows */
+int iSystem(const char *command,const char *args,bool isBatchFile)
+{
+  QTime time;
+  time.start();
+#if !defined(_WIN32) || defined(__CYGWIN__)
+  isBatchFile=isBatchFile;
+  /*! taken from the system() manpage on my Linux box */
+  int pid,status=0;
+
+  if (command==0) return 1;
+
+#ifdef _OS_SOLARIS // for Solaris we use vfork since it is more memory efficient
+
+  // on Solaris fork() duplicates the memory usage
+  // so we use vfork instead
+  
+  char buf[4096];
+  strcpy(buf,command);
+  strcat(buf," ");
+  strcat(buf,args);
+  
+  // spawn shell
+  if ((pid=vfork())<0)
+  {
+    status=-1;
+  }
+  else if (pid==0)
+  {
+     execl("/bin/sh","sh","-c",buf,(char*)0);
+     _exit(127);
+  }
+  else
+  {
+    while (waitpid(pid,&status,0 )<0)
+    {
+      if (errno!=EINTR)
+      {
+        status=-1;
+        break;
+      }
+    }
+  }
+  Doxygen::sysElapsedTime+=((double)time.elapsed())/1000.0;
+  return status;
+
+#else  // Other Unices just use fork
+
+  pid = fork();
+  if (pid==-1) return -1;
+  if (pid==0)
+  {
+    char buf[4096];
+    strcpy(buf,command);
+    strcat(buf," ");
+    strcat(buf,args);
+    const char * argv[4];
+    argv[0] = "sh";
+    argv[1] = "-c";
+    argv[2] = buf;
+    argv[3] = 0;
+    execve("/bin/sh",(char * const *)argv,environ);
+    exit(127);
+  }
+  for (;;)
+  {
+    if (waitpid(pid,&status,0)==-1)
+    {
+      if (errno!=EINTR) return -1;
+    }
+    else
+    {
+      Doxygen::sysElapsedTime+=((double)time.elapsed())/1000.0;
+      return status;
+    }
+  }
+#endif // _OS_SOLARIS
+
+#else // Win32 specific
+  if (isBatchFile)
+  {
+    QCString fullCmd = command;
+    fullCmd += " ";
+    fullCmd += args;
+    return system(fullCmd);
+  }
+  else
+  {
+    SHELLEXECUTEINFO sInfo = {
+      sizeof(SHELLEXECUTEINFO),   /* structure size */
+      SEE_MASK_NOCLOSEPROCESS,    /* leave the process running */
+      NULL,                       /* window handle */
+      NULL,                       /* action to perform: open */
+      command,                    /* file to execute */
+      args,                       /* argument list */ 
+      NULL,                       /* use current working dir */
+      SW_HIDE,                    /* minimize on start-up */
+      0,                          /* application instance handle */
+      NULL,                       /* ignored: id list */
+      NULL,                       /* ignored: class name */
+      NULL,                       /* ignored: key class */
+      0,                          /* ignored: hot key */
+      NULL,                       /* ignored: icon */
+      NULL                        /* resulting application handle */
+    };
+    if (!ShellExecuteEx(&sInfo))
+    {
+      return -1;
+    }
+    else if (sInfo.hProcess)      /* executable was launched, wait for it to finish */
+    {
+      WaitForSingleObject(sInfo.hProcess,INFINITE); 
+      CloseHandle(sInfo.hProcess);
+    }
+  }
+  Doxygen::sysElapsedTime+=((double)time.elapsed())/1000.0;
+  return 0;
+#endif
+
+}
+
+
+
+
+
+// an inheritance tree of depth of 100000 should be enough for everyone :-)
+const int maxInheritanceDepth = 100000; 
+
+bool isId(char c)
+{
+  return c=='_' || isalnum(c);
+}
+
+
+/*! 
+  Removes all anoymous scopes from string s
+  Possible examples:
+\verbatim
+   "bla::@10::blep"      => "bla::blep"
+   "bla::@10::@11::blep" => "bla::blep"
+   "@10::blep"           => "blep"
+   " @10::blep"          => "blep"
+   "@9::@10::blep"       => "blep"
+   "bla::@1"             => "bla"
+   "bla::@1::@2"         => "bla"
+   "bla @1"              => "bla"
+\endverbatim
+ */
+QCString removeAnonymousScopes(const QCString &s)
+{
+  QCString result;
+  if (s.isEmpty()) return result;
+  static QRegExp re("[ :]*@[0-9]+[: ]*");
+  int i,l,sl=s.length();
+  int p=0;
+  while ((i=re.match(s,p,&l))!=-1)
+  {
+    result+=s.mid(p,i-p);
+    int c=i;
+    bool b1=FALSE,b2=FALSE;
+    while (c<i+l && s.at(c)!='@') if (s.at(c++)==':') b1=TRUE;
+    c=i+l-1;
+    while (c>=i && s.at(c)!='@') if (s.at(c--)==':') b2=TRUE;
+    if (b1 && b2) 
+    { 
+      result+="::"; 
+    }
+    p=i+l;
+  }
+  result+=s.right(sl-p);
+  //printf("removeAnonymousScopes(`%s')=`%s'\n",s.data(),result.data());
+  return result;
+}
+
+// replace anonymous scopes with __anonymous__ 
+QCString replaceAnonymousScopes(const QCString &s)
+{
+  QCString result;
+  if (s.isEmpty()) return result;
+  static QRegExp re("@[0-9]+");
+  int i,l,sl=s.length();
+  int p=0;
+  while ((i=re.match(s,p,&l))!=-1)
+  {
+    result+=s.mid(p,i-p);
+    result+="__anonymous__";
+    p=i+l;
+  }
+  result+=s.right(sl-p);
+  //printf("replaceAnonymousScopes(`%s')=`%s'\n",s.data(),result.data());
+  return result;
+}
+
+
+// strip annonymous left hand side part of the scope
+QCString stripAnonymousNamespaceScope(const QCString &s)
+{
+  int i,p=0,l;
+  QCString newScope;
+  while ((i=getScopeFragment(s,p,&l))!=-1)
+  {
+    //printf("Scope fragment %s\n",s.mid(i,l).data());
+    if (Doxygen::namespaceSDict[s.left(i+l)]!=0)
+    {
+      if (s.at(i)!='@')
+      {
+        if (!newScope.isEmpty()) newScope+="::";
+        newScope+=s.mid(i,l);
+      }
+    }
+    else
+    {
+      if (!newScope.isEmpty()) newScope+="::";
+      newScope+=s.right(s.length()-i);
+      goto done;
+    }
+    p=i+l;
+  }
+done:
+  //printf("stripAnonymousNamespaceScope(`%s')=`%s'\n",s.data(),newScope.data());
+  return newScope;
+}
+
+void writePageRef(OutputDocInterface &od,const char *cn,const char *mn)
+{
+  od.pushGeneratorState();
+  
+  od.disable(OutputGenerator::Html);
+  od.disable(OutputGenerator::Man);
+  if (Config_getBool("PDF_HYPERLINKS")) od.disable(OutputGenerator::Latex);
+  if (Config_getBool("RTF_HYPERLINKS")) od.disable(OutputGenerator::RTF);
+  od.startPageRef();
+  od.docify(theTranslator->trPageAbbreviation());
+  od.endPageRef(cn,mn);
+
+  od.popGeneratorState();
+}
+
+/*! Generate a place holder for a position in a list. Used for
+ *  translators to be able to specify different elements orders
+ *  depending on whether text flows from left to right or visa versa.
+ */
+QCString generateMarker(int id)
+{
+  QCString result;
+  result.sprintf("@%d",id);
+  return result;
+}
+
+static QCString stripFromPath(const QCString &path,QStrList &l)
+{
+  const char *s=l.first();
+  while (s)
+  {
+    QCString prefix = s;
+    if (stricmp(path.left(prefix.length()),prefix)==0) // case insensitive compare
+    {
+      return path.right(path.length()-prefix.length());
+    }
+    s = l.next();
+  }
+  return path;
+}
+
+/*! strip part of \a path if it matches
+ *  one of the paths in the Config_getList("STRIP_FROM_PATH") list
+ */
+QCString stripFromPath(const QCString &path)
+{
+  return stripFromPath(path,Config_getList("STRIP_FROM_PATH"));
+}
+
+/*! strip part of \a path if it matches
+ *  one of the paths in the Config_getList("INCLUDE_PATH") list
+ */
+QCString stripFromIncludePath(const QCString &path)
+{
+  return stripFromPath(path,Config_getList("STRIP_FROM_INC_PATH"));
+}
+
+/*! try to determine if \a name is a source or a header file name by looking
+ * at the extension. A number of variations is allowed in both upper and 
+ * lower case) If anyone knows or uses another extension please let me know :-)
+ */
+int guessSection(const char *name)
+{
+  QCString n=((QCString)name).lower();
+  if (n.right(2)==".c"    || // source
+      n.right(3)==".cc"   ||
+      n.right(4)==".cxx"  ||
+      n.right(4)==".cpp"  ||
+      n.right(4)==".c++"  ||
+      n.right(5)==".java" ||
+      n.right(3)==".ii"   || // inline
+      n.right(4)==".ixx"  ||
+      n.right(4)==".ipp"  ||
+      n.right(4)==".i++"  ||
+      n.right(4)==".inl"
+     ) return Entry::SOURCE_SEC;
+  if (n.right(2)==".h"   || // header
+      n.right(3)==".hh"  ||
+      n.right(4)==".hxx" ||
+      n.right(4)==".hpp" ||
+      n.right(4)==".h++" ||
+      n.right(4)==".idl" ||
+      n.right(5)==".pidl"
+     ) return Entry::HEADER_SEC;
+  return 0;
+}
+
+QCString resolveTypeDef(Definition *context,const QCString &qualifiedName,
+                        Definition **typedefContext)
+{
+  //printf("<<resolveTypeDef(%s,%s)\n",
+  //          context ? context->name().data() : "<none>",qualifiedName.data());
+  QCString result;
+  if (qualifiedName.isEmpty()) return result;
+
+  Definition *mContext=context;
+  if (typedefContext) *typedefContext=context;
+
+  // see if the qualified name has a scope part
+  int scopeIndex = qualifiedName.findRev("::");
+  QCString resName=qualifiedName;
+  if (scopeIndex!=-1) // strip scope part for the name
+  {
+    resName=qualifiedName.right(qualifiedName.length()-scopeIndex-2);
+  }
+  MemberDef *md=0;
+  while (mContext && md==0)
+  {
+    // step 1: get the right scope
+    Definition *resScope=mContext;
+    if (scopeIndex!=-1) 
+    {
+      // split-off scope part
+      QCString resScopeName = qualifiedName.left(scopeIndex);
+      //printf("resScopeName=`%s'\n",resScopeName.data());
+
+      // look-up scope in context
+      int is,ps=0;
+      int l;
+      while ((is=getScopeFragment(resScopeName,ps,&l))!=-1)
+      {
+        QCString qualScopePart = resScopeName.mid(is,l);
+        QCString tmp = resolveTypeDef(mContext,qualScopePart);
+        if (!tmp.isEmpty()) qualScopePart=tmp;
+        resScope = resScope->findInnerCompound(qualScopePart);
+        //printf("qualScopePart=`%s' resScope=%p\n",qualScopePart.data(),resScope);
+        if (resScope==0) break;
+        ps=is+l;
+      }
+    }
+    //printf("resScope=%s\n",resScope?resScope->name().data():"<none>");
+    
+    // step 2: get the member
+    if (resScope) // no scope or scope found in the current context 
+    {
+      //printf("scope found: %s, look for typedef %s\n",
+      //     resScope->qualifiedName().data(),resName.data());
+      MemberNameSDict *mnd=0;
+      if (resScope->definitionType()==Definition::TypeClass)
+      {
+        mnd=&Doxygen::memberNameSDict;
+      }
+      else
+      {
+        mnd=&Doxygen::functionNameSDict;
+      }
+      MemberName *mn=mnd->find(resName);
+      if (mn)
+      {
+        MemberNameIterator mni(*mn);
+        MemberDef *tmd=0;
+        for (;(tmd=mni.current());++mni)
+        {
+          //printf("Found member %s resScope=%s outerScope=%s mContext=%p\n",
+          //    tmd->name().data(), resScope->name().data(), 
+          //    tmd->getOuterScope()->name().data(), mContext);
+          if (tmd->isTypedef() /*&& tmd->getOuterScope()==resScope*/)
+          {
+            // look if resScope is visible within tmd->getOuterScope()
+            Definition *d = tmd->getOuterScope();
+            while (d && d!=resScope) d=d->getOuterScope();
+            if (d)
+            {
+              md=tmd;
+            }
+          }
+        }
+      }
+    }
+    mContext=mContext->getOuterScope();
+  }
+
+  // step 3: get the member's type
+  if (md)
+  {
+    //printf(">>resolveTypeDef: Found typedef name `%s' in scope `%s' value=`%s'\n",
+    //    qualifiedName.data(),context->name().data(),md->typeString()
+    //    );
+    result=md->typeString();
+    if (typedefContext) *typedefContext=md->getOuterScope();
+  }
+  else
+  {
+    //printf(">>resolveTypeDef: Typedef `%s' not found in scope `%s'!\n",
+    //    qualifiedName.data(),context ? context->name().data() : "<global>");
+  }
+  return result;
+  
+}
+
+
+/*! Get a class definition given its name. 
+ *  Returns 0 if the class is not found.
+ */
+ClassDef *getClass(const char *name)
+{
+  if (name==0 || name[0]=='\0') return 0;
+  return Doxygen::classSDict.find(name);
+}
+
+NamespaceDef *getResolvedNamespace(const char *name)
+{
+  if (name==0 || name[0]=='\0') return 0;
+  QCString *subst = Doxygen::namespaceAliasDict[name];
+  if (subst)
+  {
+    int count=0; // recursion detection guard
+    QCString *newSubst;
+    while ((newSubst=Doxygen::namespaceAliasDict[*subst]) && count<10)
+    {
+      subst=newSubst;
+      count++;
+    }
+    if (count==10)
+    {
+      warn_cont("Warning: possible recursive namespace alias detected for %s!\n",name);
+    }
+    return Doxygen::namespaceSDict[subst->data()];
+  }
+  else
+  {
+    return Doxygen::namespaceSDict[name];
+  }
+}
+
+static QDict<MemberDef> g_resolvedTypedefs;
+static QDict<Definition> g_visitedNamespaces;
+
+// forward declaration
+ClassDef *getResolvedClassRec(Definition *scope,
+                              FileDef *fileScope,
+                              const char *n,
+                              MemberDef **pTypeDef,
+                              QCString *pTemplSpec
+                             );
+int isAccessibleFromWithExpScope(Definition *scope,FileDef *fileScope,Definition *item,
+                     const QCString &explicitScopePart);
+
+/*! Returns the class representing the value of the typedef represented by \a md
+ *  within file \a fileScope.
+ *
+ *  Example: typedef A T; will return the class representing A if it is a class.
+ * 
+ *  Example: typedef int T; will return 0, since "int" is not a class.
+ */
+ClassDef *newResolveTypedef(FileDef *fileScope,MemberDef *md,QCString *pTemplSpec)
+{
+  //printf("newResolveTypedef(md=%p,cachedVal=%p)\n",md,md->getCachedTypedefVal());
+  bool isCached = md->isTypedefValCached(); // value already cached
+  if (isCached)
+  {
+    //printf("Already cached %s->%s\n",
+    //    md->name().data(),
+    //    md->getCachedTypedefVal()?md->getCachedTypedefVal()->name().data():"<none>");
+    if (pTemplSpec) *pTemplSpec = md->getCachedTypedefTemplSpec();
+    return md->getCachedTypedefVal();
+  }
+  QCString qname = md->qualifiedName();
+  if (g_resolvedTypedefs.find(qname)) return 0; // typedef already done
+
+  g_resolvedTypedefs.insert(qname,md); // put on the trace list
+  
+  QCString type = md->typeString(); // get the "value" of the typedef
+  int ip=type.length()-1; // remove * and & at the end
+  while (ip>=0 && (type.at(ip)=='*' || type.at(ip)=='&' || type.at(ip)==' ')) 
+  {
+    ip--;
+  }
+  type=type.left(ip+1);
+  if (type.left(6)=="const ") // strip leading "const"
+  {
+    type=type.mid(6);
+  }
+  if (type.left(7)=="struct ") // strip leading "struct"
+  {
+    type=type.mid(7);
+  }
+  else if (type.left(6)=="union ") // or strip leading "union"
+  {
+    type=type.mid(6);
+  }
+  type=type.stripWhiteSpace(); // strip leading and trailing whitespace
+  MemberDef *memTypeDef = 0;
+  ClassDef  *result = getResolvedClassRec(md->getOuterScope(),
+                                  fileScope,type,&memTypeDef,0);
+  // if type is a typedef than return what it resolves to.
+  if (memTypeDef) return newResolveTypedef(fileScope,memTypeDef,pTemplSpec);
+  
+  //printf("type=%s result=%p\n",type.data(),result);
+  if (result==0)
+  {
+    // try unspecialized version if type is template
+    int si=type.findRev("::");
+    int i=type.find('<');
+    if (si==-1 && i!=-1) // typedef of a template => try the unspecialized version
+    {
+      *pTemplSpec = type.mid(i);
+      result = getResolvedClassRec(md->getOuterScope(),fileScope,type.left(i),0,0);
+    }
+    else if (si!=-1) // A::B
+    {
+      i=type.find('<',si);
+      if (i==-1) // Something like A<T>::B => lookup A::B
+      {
+        i=type.length();
+      }
+      else // Something like A<T>::B<S> => lookup A::B, spec=<S>
+      {
+        *pTemplSpec = type.mid(i);
+      }
+      result = getResolvedClassRec(md->getOuterScope(),fileScope,
+           stripTemplateSpecifiersFromScope(type.left(i),FALSE),0,0);
+    }
+  }
+
+  // remember computed value for next time
+  if (result && result->getDefFileName()!="<code>") 
+    // this check is needed to prevent that temporary classes that are 
+    // introduced while parsing code fragments are being cached here.
+  {
+    //printf("setting cached typedef %p in result %p\n",md,result);
+    //printf("==> %s (%s,%d)\n",result->name().data(),result->getDefFileName().data(),result->getDefLine());
+    if (pTemplSpec)
+    {
+      md->cacheTypedefVal(result,*pTemplSpec);
+    }
+    else
+    {
+      md->cacheTypedefVal(result,"");
+    }
+  }
+  
+  g_resolvedTypedefs.remove(qname); // remove from the trace list
+  
+  return result;
+}
+
+/*! Substitutes a simple unqualified \a name within \a scope. Returns the
+ *  value of the typedef or \a name if no typedef was found.
+ */
+QCString substTypedef(Definition *scope,FileDef *fileScope,const QCString &name)
+{
+  QCString result=name;
+  if (name.isEmpty()) return result;
+
+  // lookup scope fragment in the symbol map
+  DefinitionList *dl = Doxygen::symbolMap->find(name);
+  if (dl==0) return result; // no matches
+
+  // search for the best match
+  DefinitionListIterator dli(*dl);
+  Definition *d;
+  int minDistance=10000; // init at "infinite"
+  MemberDef *bestMatch=0;
+  for (dli.toFirst();(d=dli.current());++dli) // foreach definition
+  {
+    // only look at members
+    if (d->definitionType()==Definition::TypeMember)
+    {
+      // that are also typedefs
+      MemberDef *md = (MemberDef *)d;
+      if (md->isTypedef()) // d is a typedef
+      {
+        // test accessibility of typedef within scope.
+        int distance = isAccessibleFromWithExpScope(scope,fileScope,d,"");
+        if (distance!=-1 && distance<minDistance) 
+                   // definition is accessible and a better match
+        {
+          minDistance=distance;
+          bestMatch = md; 
+        }
+      }
+    }
+  }
+  if (bestMatch) result = bestMatch->typeString();
+  //printf("substTypedef(%s,%s)=%s\n",scope?scope->name().data():"<global>",
+  //                                  name.data(),result.data());
+  return result;
+}
+
+/*! Starting with scope \a start, the string \a path is interpreted as
+ *  a part of a qualified scope name (e.g. A::B::C), and the scope is 
+ *  searched. If found the scope definition is returned, otherwise 0 
+ *  is returned.
+ */
+static Definition *followPath(Definition *start,FileDef *fileScope,const QCString &path)
+{
+  int is,ps=0;
+  int l;
+  Definition *current=start;
+  // for each part of the explicit scope
+  while ((is=getScopeFragment(path,ps,&l))!=-1)
+  {
+    // try to resolve the part if it is a typedef
+    QCString qualScopePart = substTypedef(current,fileScope,path.mid(is,l));
+    current = current->findInnerCompound(qualScopePart);
+    if (current==0) break; // failed to follow the path
+    ps=is+l;
+  }
+  return current; // path could be followed
+}
+
+bool accessibleViaUsingClass(const SDict<Definition> *cl,
+                             FileDef *fileScope,
+                             Definition *item,
+                             const QCString &explicitScopePart=""
+                            )
+{
+  if (cl) // see if the class was imported via a using statement 
+  {
+    SDict<Definition>::Iterator cli(*cl);
+    Definition *ucd;
+    bool explicitScopePartEmpty = explicitScopePart.isEmpty();
+    for (cli.toFirst();(ucd=cli.current());++cli)
+    {
+      //printf("Trying via used class %s\n",ucd->name().data());
+      Definition *sc = explicitScopePartEmpty ? ucd : followPath(ucd,fileScope,explicitScopePart);
+      if (sc && sc==item) return TRUE; 
+      //printf("Try via used class done\n");
+    }
+  }
+  return FALSE;
+}
+
+bool accessibleViaUsingNamespace(const NamespaceSDict *nl,
+                                 FileDef *fileScope,
+                                 Definition *item,
+                                 const QCString &explicitScopePart="")
+{
+  if (nl) // check used namespaces for the class
+  {
+    NamespaceSDict::Iterator nli(*nl);
+    NamespaceDef *und;
+    for (nli.toFirst();(und=nli.current());++nli)
+    {
+      //printf("Trying via used namespace %s\n",und->name().data());
+      Definition *sc = explicitScopePart.isEmpty() ? und : followPath(und,fileScope,explicitScopePart);
+      if (sc && item->getOuterScope()==sc) return TRUE; 
+      //printf("Try via used namespace done\n");
+    }
+  }
+  return FALSE;
+}
+
+
+/* Returns the "distance" (=number of levels up) from item to scope, or -1
+ * if item in not inside scope. 
+ */
+int isAccessibleFrom(Definition *scope,FileDef *fileScope,Definition *item)
+{
+  //fprintf(stderr,"<isAccesibleFrom(scope=%s,item=%s itemScope=%s)\n",
+  //    scope->name().data(),item->name().data(),item->getOuterScope()->name().data());
+
+  int result=0; // assume we found it
+  int i;
+
+  if (item->getOuterScope()==scope) 
+  {
+    //fprintf(stderr,"> found it\n");
+  }
+  else if (scope==Doxygen::globalScope)
+  {
+    if (fileScope)
+    {
+      SDict<Definition> *cl = fileScope->getUsedClasses();
+      if (accessibleViaUsingClass(cl,fileScope,item)) 
+      {
+        //fprintf(stderr,"> found via used class\n");
+        goto done;
+      }
+      NamespaceSDict *nl = fileScope->getUsedNamespaces();
+      if (accessibleViaUsingNamespace(nl,fileScope,item)) 
+      {
+        //fprintf(stderr,"> found via used namespace\n");
+        goto done;
+      }
+    }
+    //fprintf(stderr,"> reached global scope\n");
+    result=-1; // not found in path to globalScope
+  }
+  else // keep searching
+  {
+    // check if scope is a namespace, which is using other classes and namespaces
+    if (scope->definitionType()==Definition::TypeNamespace)
+    {
+      NamespaceDef *nscope = (NamespaceDef*)scope;
+      SDict<Definition> *cl = nscope->getUsedClasses();
+      if (accessibleViaUsingClass(cl,fileScope,item)) 
+      {
+        //fprintf(stderr,"> found via used class\n");
+        goto done;
+      }
+      NamespaceSDict *nl = nscope->getUsedNamespaces();
+      if (accessibleViaUsingNamespace(nl,fileScope,item)) 
+      {
+        //fprintf(stderr,"> found via used namespace\n");
+        goto done;
+      }
+    }
+    // repeat for the parent scope
+    i=isAccessibleFrom(scope->getOuterScope(),fileScope,item);
+    //fprintf(stderr,"> result=%d\n",i);
+    result= (i==-1) ? -1 : i+1;
+  }
+done:
+  //Doxygen::lookupCache.insert(key,new int(result));
+  return result;
+}
+
+
+/* Returns the "distance" (=number of levels up) from item to scope, or -1
+ * if item in not in this scope. The explicitScopePart limits the search
+ * to scopes that match \a scope plus the explicit part.
+ */
+int isAccessibleFromWithExpScope(Definition *scope,FileDef *fileScope,Definition *item,
+                     const QCString &explicitScopePart)
+{
+  if (explicitScopePart.isEmpty())
+  {
+    // handle degenerate case where there is no explicit scope.
+    return isAccessibleFrom(scope,fileScope,item);
+  }
+  //printf("<isAccessibleFromWithExpScope(%s,%s,%s)\n",scope?scope->name().data():"<global>",
+  //                                      item?item->name().data():"<none>",
+  //                                      explicitScopePart.data());
+  int result=0; // assume we found it
+  Definition *newScope = followPath(scope,fileScope,explicitScopePart);
+  if (newScope)  // explicitScope is inside scope => newScope is the result
+  {
+    //printf("scope traversal successful %s<->%s!\n",item->getOuterScope()->name().data(),newScope->name().data());
+    if (item->getOuterScope()==newScope) 
+    {
+      //printf("> found it\n");
+    }
+    else 
+    {
+      int i=-1;
+      if (newScope->definitionType()==Definition::TypeNamespace)
+      {
+        g_visitedNamespaces.insert(newScope->name(),newScope);
+        // this part deals with the case where item is a class
+        // A::B::C but is explicit referenced as A::C, where B is imported
+        // in A via a using directive.
+        //printf("newScope is a namespace: %s!\n",newScope->name().data());
+        NamespaceDef *nscope = (NamespaceDef*)newScope;
+        SDict<Definition> *cl = nscope->getUsedClasses();
+        if (cl)
+        {
+          SDict<Definition>::Iterator cli(*cl);
+          Definition *cd;
+          for (cli.toFirst();(cd=cli.current());++cli)
+          {
+            i = isAccessibleFromWithExpScope(scope,fileScope,item,cd->name());
+            if (i!=-1)
+            {
+              //printf("> found via explicit scope of used class\n");
+              goto done;
+            }
+          }
+        }
+        NamespaceSDict *nl = nscope->getUsedNamespaces();
+        if (nl)
+        {
+          NamespaceSDict::Iterator nli(*nl);
+          NamespaceDef *nd;
+          for (nli.toFirst();(nd=nli.current());++nli)
+          {
+            if (g_visitedNamespaces.find(nd->name())==0)
+            {
+              i = isAccessibleFromWithExpScope(scope,fileScope,item,nd->name());
+              if (i!=-1)
+              {
+                //printf("> found via explicit scope of used namespace\n");
+                goto done;
+              }
+            }
+          }
+        }
+      }
+      // repeat for the parent scope
+      if (scope!=Doxygen::globalScope)
+      {
+        i = isAccessibleFromWithExpScope(scope->getOuterScope(),fileScope,
+                                         item,explicitScopePart);
+      }
+      //printf("> result=%d\n",i);
+      result = (i==-1) ? -1 : i+1;
+    }
+  }
+  else // failed to resolve explicitScope
+  {
+    //printf("failed to resolve: scope=%s\n",scope->name().data());
+    if (scope->definitionType()==Definition::TypeNamespace)
+    {
+      NamespaceDef *nscope = (NamespaceDef*)scope;
+      SDict<Definition> *cl = nscope->getUsedClasses();
+      if (accessibleViaUsingClass(cl,fileScope,item,explicitScopePart)) 
+      {
+        //printf("> found in used class\n");
+        goto done;
+      }
+      NamespaceSDict *nl = nscope->getUsedNamespaces();
+      if (accessibleViaUsingNamespace(nl,fileScope,item,explicitScopePart)) 
+      {
+        //printf("> found in used namespace\n");
+        goto done;
+      }
+    }
+    if (scope==Doxygen::globalScope)
+    {
+      if (fileScope)
+      {
+        SDict<Definition> *cl = fileScope->getUsedClasses();
+        if (accessibleViaUsingClass(cl,fileScope,item,explicitScopePart)) 
+        {
+          //printf("> found in used class\n");
+          goto done;
+        }
+        NamespaceSDict *nl = fileScope->getUsedNamespaces();
+        if (accessibleViaUsingNamespace(nl,fileScope,item,explicitScopePart)) 
+        {
+          //printf("> found in used namespace\n");
+          goto done;
+        }
+      }
+      //printf("> not found\n");
+      result=-1;
+    }
+    else // continue by looking into the parent scope
+    {
+      int i=isAccessibleFromWithExpScope(scope->getOuterScope(),fileScope,
+                                         item,explicitScopePart);
+      //printf("> result=%d\n",i);
+      result= (i==-1) ? -1 : i+1;
+    }
+  }
+done:
+  //Doxygen::lookupCache.insert(key,new int(result));
+  return result;
+}
+
+int computeQualifiedIndex(const QString &name)
+{
+  int i = name.find('<');
+  return name.findRev("::",i==-1 ? name.length() : i);
+}
+
+/* Find the fully qualified class name refered to by the input class
+ * or typedef name against the input scope.
+ * Loops through scope and each of its parent scopes looking for a
+ * match against the input name. Can recursively call itself when 
+ * resolving typedefs.
+ */
+ClassDef *getResolvedClassRec(Definition *scope,
+                              FileDef *fileScope,
+                              const char *n,
+                              MemberDef **pTypeDef,
+                              QCString *pTemplSpec
+                             )
+{
+  //printf("[getResolvedClassRec(%s,%s)\n",scope?scope->name().data():"<global>",n);
+  QCString name=n;
+  QCString explicitScopePart;
+
+  //int qualifierIndex = name.findRev("::"); // todo: deal with cases like A<B::C>
+  int qualifierIndex = computeQualifiedIndex(name);
+  //printf("name=%s qualifierIndex=%d\n",name.data(),qualifierIndex);
+  if (qualifierIndex!=-1) // qualified name
+  {
+    // split off the explicit scope part
+    explicitScopePart=name.left(qualifierIndex);
+    // todo: improve namespace alias substitution
+    replaceNamespaceAliases(explicitScopePart,explicitScopePart.length());
+    name=name.mid(qualifierIndex+2);
+  }
+
+  if (name.isEmpty()) 
+  {
+    //printf("] empty name\n");
+    return 0; // empty name
+  }
+
+  DefinitionList *dl = Doxygen::symbolMap->find(name);
+  //printf("Looking for symbol %s result=%p\n",name.data(),dl);
+  if (dl==0) 
+  {
+    // name is not a known symbol
+    return 0;
+  }
+
+  // Since it is often the case that the same name is searched in the same
+  // scope over an over again (especially for the linked source code generation)
+  // we use a cache to collect previous results. This is possible since the
+  // result of a lookup is deterministic. As the key we use the concatenated
+  // scope, the name to search for and the explicit scope prefix. The speedup
+  // achieved by this simple cache can be enormous.
+  QCString key=scope->name()+"+"+name+"+"+explicitScopePart;
+  LookupInfo *pval=Doxygen::lookupCache.find(key);
+  //printf("Searching for %s result=%p\n",key.data(),pval);
+  if (pval)
+  {
+    if (pTemplSpec) *pTemplSpec=pval->templSpec;
+    if (pTypeDef)   *pTypeDef=pval->typeDef;
+    //printf("] cachedMatch=%s\n",
+    //    pval->classDef?pval->classDef->name().data():"<none>");
+    //if (pTemplSpec) printf("templSpec=%s\n",pTemplSpec->data());
+    return pval->classDef; 
+  }
+  else // not found yet; we already add a 0 to avoid the possibility of 
+       // endless recursion.
+  {
+    Doxygen::lookupCache.insert(key,new LookupInfo);
+  }
+
+  ClassDef *bestMatch=0;
+
+  //printf(" found %d symbol with name %s\n",dl->count(),name.data());
+  // now we look int the list of Definitions and determine which one is the "best"
+  DefinitionListIterator dli(*dl);
+  Definition *d;
+  MemberDef *bestTypedef=0;
+  QCString bestTemplSpec;
+  int minDistance=10000; // init at "infinite"
+  int count=0;
+  for (dli.toFirst();(d=dli.current());++dli,++count) // foreach definition
+  {
+    //fprintf(stderr,"  found type %x name=%s (%d/%d)\n",
+    //       d->definitionType(),d->name().data(),count,dl->count());
+
+    // only look at classes and members
+    if (d->definitionType()==Definition::TypeClass ||
+        d->definitionType()==Definition::TypeMember)
+    {
+      g_visitedNamespaces.clear();
+      // test accessibility of definition within scope.
+      int distance = isAccessibleFromWithExpScope(scope,fileScope,d,explicitScopePart);
+      if (distance!=-1) // definition is accessible
+      {
+        // see if we are dealing with a class or a typedef
+        if (d->definitionType()==Definition::TypeClass) // d is a class
+        {
+          if (distance<minDistance) // found a definition that is "closer"
+          {
+            minDistance=distance;
+            bestMatch = (ClassDef *)d; 
+            bestTypedef = 0;
+            bestTemplSpec.resize(0);
+          }
+        }
+        else if (d->definitionType()==Definition::TypeMember)
+        {
+          MemberDef *md = (MemberDef *)d;
+          //printf("  member isTypedef()=%d\n",md->isTypedef());
+          if (md->isTypedef()) // d is a typedef
+          {
+            //printf("    found typedef!\n");
+
+            // we found a symbol at this distance, but if it didn't
+            // resolve to a class, we still have to make sure that
+            // something at a greater distance does not match, since
+            // that symbol is hidden by this one.
+            if (distance<minDistance)
+            {
+              QCString spec;
+              minDistance=distance;
+              bestMatch = newResolveTypedef(fileScope,md,&spec);
+              //printf("      bestTypeDef=%p spec=%s\n",md,spec.data());
+              bestTypedef = md;
+              bestTemplSpec = spec;
+            }
+          }
+        }
+      } // if definition accessible
+      else
+      {
+        //printf("  Not accessible!\n");
+      }
+    } // if definition is a class or member
+  } // foreach definition
+  if (pTypeDef) 
+  {
+    *pTypeDef = bestTypedef;
+  }
+  if (pTemplSpec)
+  {
+    *pTemplSpec = bestTemplSpec;
+  }
+
+  pval=Doxygen::lookupCache.find(key);
+  if (pval)
+  {
+    pval->classDef  = bestMatch;
+    pval->typeDef   = bestTypedef;
+    pval->templSpec = bestTemplSpec;
+  }
+  else
+  {
+    Doxygen::lookupCache.insert(key,new LookupInfo(bestMatch,bestTypedef,bestTemplSpec));
+  }
+  //printf("] bestMatch=%s distance=%d\n",
+  //    bestMatch?bestMatch->name().data():"<none>",minDistance);
+  //if (pTemplSpec) printf("templSpec=%s\n",pTemplSpec->data());
+  return bestMatch;
+}
+
+/* Find the fully qualified class name refered to by the input class
+ * or typedef name against the input scope.
+ * Loops through scope and each of its parent scopes looking for a
+ * match against the input name. 
+ */
+ClassDef *getResolvedClass(Definition *scope,
+                           FileDef *fileScope,
+                           const char *n,
+                           MemberDef **pTypeDef,
+                           QCString *pTemplSpec,
+                           bool mayBeUnlinkable
+                          )
+{
+  g_resolvedTypedefs.clear();
+  if (scope==0 ||
+      (scope->definitionType()!=Definition::TypeClass && 
+       scope->definitionType()!=Definition::TypeNamespace
+      )
+     )
+  {
+    scope=Doxygen::globalScope;
+  }
+  //printf("getResolvedClass(%s,%s)\n",scope?scope->name().data():"<global>",n);
+  ClassDef *result = getResolvedClassRec(scope,fileScope,n,pTypeDef,pTemplSpec);
+  if (!mayBeUnlinkable && result && !result->isLinkable()) 
+  {
+    result=0; // don't link to artifical/hidden classes
+  }
+  //printf("getResolvedClass(%s,%s)=%s\n",scope?scope->name().data():"<global>",
+  //                                  n,result?result->name().data():"<none>");
+  // 
+  return result;
+}
+
+//-------------------------------------------------------------------------
+//-------------------------------------------------------------------------
+//-------------------------------------------------------------------------
+//-------------------------------------------------------------------------
+
+static bool findOperator(const QCString &s,int i)
+{
+  int b = s.findRev("operator",i);
+  if (b==-1) return FALSE; // not found
+  b+=8;
+  while (b<i) // check if there are only spaces inbetween 
+              // the operator and the >
+  {
+    if (!isspace((uchar)s.at(b))) return FALSE;
+    b++;
+  }
+  return TRUE;
+}
+
+static const char constScope[] = { 'c', 'o', 'n', 's', 't', ':' };
+
+QCString removeRedundantWhiteSpace(const QCString &s)
+{
+  if (s.isEmpty()) return s;
+  QCString result;
+  uint i;
+  uint l=s.length();
+  uint csp=0;
+  for (i=0;i<l;i++)
+  {
+nextChar:
+    char c=s.at(i);
+    if (csp<6 && c==constScope[csp]) csp++; else csp=0;
+    if (c=='"') // quoted string
+    {
+      i++;
+      result+=c;
+      while (i<l)
+      {
+        char cc=s.at(i);
+        result+=cc;
+        if (cc=='\\') // escaped character
+        { result+=s.at(i+1); i+=2; }
+        else if (cc=='"') // end of string
+        { i++; goto nextChar; }
+        else // any other character
+        { i++; }
+      }
+    }
+    else if (i<l-2 && c=='<' &&  // current char is a <
+        (isId(s.at(i+1)) || isspace((uchar)s.at(i+1))) && // next char is an id char or space
+        (i<8 || !findOperator(s,i)) // string in front is not "operator"
+       )
+    {
+      result+="< "; // insert extra space for layouting (nested) templates
+    }
+    else if (i>0 && c=='>' && // current char is a >
+             (isId(s.at(i-1)) || isspace((uchar)s.at(i-1)) || s.at(i-1)=='*' || s.at(i-1)=='&') && // prev char is an id char or space
+             (i<8 || !findOperator(s,i)) // string in front is not "operator"
+            )
+    {
+      result+=" >"; // insert extra space for layouting (nested) templates
+    }
+    else if (i>0 && c==',' && !isspace((uchar)s.at(i-1))
+             && ((i<l-1 && isId(s.at(i+1)))
+                 || (i<l-2 && s.at(i+1)=='$' && isId(s.at(i+2)))  // for PHP
+                 || (i<l-3 && s.at(i+1)=='&' && s.at(i+2)=='$' && isId(s.at(i+3)))))  // for PHP
+    {
+      result+=", ";
+    }
+    else if (i>0 && 
+              ((isId(s.at(i)) && s.at(i-1)==')') || 
+               (s.at(i)=='\''  && s.at(i-1)==' ')
+              )
+            )
+    {
+      result+=' ';
+      result+=s.at(i);
+    }
+    else if (c=='t' && csp==5 && !(isId(s.at(i+1)) || s.at(i+1)==' ' || s.at(i+1)==')' || s.at(i+1)==',' || s.at(i+1)=='\0')) // prevent const ::A from being converted to const::A
+    {
+      result+="t ";
+      csp=0;
+    }
+    else if (c==':' && csp==6) // replace const::A by const ::A
+    {
+      result+=" :";
+      csp=0;
+    }
+    else if (!isspace((uchar)c) ||
+	      ( i>0 && i<l-1 && 
+                (isId(s.at(i-1)) || s.at(i-1)==')' || s.at(i-1)==',' || s.at(i-1)=='>' || s.at(i-1)==']')
+                 && (isId(s.at(i+1)) || (i<l-2 && s.at(i+1)=='$' && isId(s.at(i+2)))
+                     || (i<l-3 && s.at(i+1)=='&' && s.at(i+2)=='$' && isId(s.at(i+3))))
+              ) 
+            )
+    {
+      if (c=='*' || c=='&' || c=='@' || c=='$')
+      {  
+        uint rl=result.length();
+	if (rl>0 && (isId(result.at(rl-1)) || result.at(rl-1)=='>')) result+=' ';
+      }
+      result+=c;
+    }
+  }
+  //printf("removeRedundantWhiteSpace(`%s')=`%s'\n",s.data(),result.data());
+  return result;
+}  
+
+bool rightScopeMatch(const QCString &scope, const QCString &name)
+{
+  return (name==scope || // equal 
+           (scope.right(name.length())==name && // substring 
+           scope.at(scope.length()-name.length()-1)==':' // scope
+           ) 
+     );
+}
+
+bool leftScopeMatch(const QCString &scope, const QCString &name)
+{
+  return (name==scope || // equal 
+           (scope.left(name.length())==name && // substring 
+           scope.at(name.length())==':' // scope
+           ) 
+     );
+}
+
+
+void linkifyText(const TextGeneratorIntf &out,Definition *scope,
+                 FileDef *fileScope,const char *,
+                 const char *text, bool autoBreak,bool external,
+                 bool keepSpaces)
+{
+  //printf("`%s'\n",text);
+  static QRegExp regExp("[a-z_A-Z][a-z_A-Z0-9:]*");
+  QCString txtStr=text;
+  QCString scopeName;
+  int strLen = txtStr.length();
+  //printf("linkifyText scope=%s fileScope=%s strtxt=%s strlen=%d\n",
+  //    scope?scope->name().data():"<none>",
+  //    fileScope?fileScope->name().data():"<none>",
+  //    txtStr.data(),strLen);
+  int matchLen;
+  int index=0;
+  int newIndex;
+  int skipIndex=0;
+  int floatingIndex=0;
+  if (strLen==0) return;
+  // read a word from the text string
+  while ((newIndex=regExp.match(txtStr,index,&matchLen))!=-1)
+  {
+    // add non-word part to the result
+    floatingIndex+=newIndex-skipIndex;
+    bool insideString=FALSE; 
+    int i;
+    for (i=index;i<newIndex;i++) 
+    { 
+      if (txtStr.at(i)=='"') insideString=!insideString; 
+    }
+    
+    if (strLen>30 && floatingIndex>25 && autoBreak) // try to insert a split point
+    {
+      QCString splitText = txtStr.mid(skipIndex,newIndex-skipIndex);
+      int splitLength = splitText.length();
+      int i=splitText.find('<');
+      if (i==-1) i=splitText.find(',');
+      if (i==-1) i=splitText.find(' ');
+      if (i!=-1) // add a link-break at i in case of Html output
+      {
+        out.writeString(splitText.left(i+1),keepSpaces);
+        out.writeBreak();
+        out.writeString(splitText.right(splitLength-i-1),keepSpaces);
+      } 
+      else
+      {
+        out.writeString(splitText,keepSpaces); 
+      }
+      floatingIndex=splitLength-i-1;
+    }
+    else
+    {
+      //ol.docify(txtStr.mid(skipIndex,newIndex-skipIndex)); 
+      out.writeString(txtStr.mid(skipIndex,newIndex-skipIndex),keepSpaces); 
+    }
+    // get word from string
+    QCString word=txtStr.mid(newIndex,matchLen);
+    bool found=FALSE;
+    if (!insideString)
+    {
+      ClassDef     *cd=0;
+      FileDef      *fd=0;
+      MemberDef    *md=0;
+      NamespaceDef *nd=0;
+      GroupDef     *gd=0;
+
+      MemberDef *typeDef=0;
+      if ((cd=getResolvedClass(scope,fileScope,word,&typeDef))) 
+      {
+        // add link to the result
+        if (external ? cd->isLinkable() : cd->isLinkableInProject())
+        {
+          out.writeLink(cd->getReference(),cd->getOutputFileBase(),0,word);
+          found=TRUE;
+        }
+      }
+      else if (typeDef)
+      {
+        if (external ? typeDef->isLinkable() : typeDef->isLinkableInProject())
+        {
+          out.writeLink(typeDef->getReference(),
+              typeDef->getOutputFileBase(),
+              typeDef->anchor(),
+              word);
+          found=TRUE;
+        }
+      }
+
+      if (scope && 
+          (scope->definitionType()==Definition::TypeClass || 
+           scope->definitionType()==Definition::TypeNamespace
+          ) 
+         )
+      {
+        scopeName=scope->name();
+      }
+      //if (!found) printf("Trying to link %s in %s\n",word.data(),scName); 
+      if (!found && 
+          getDefs(scopeName,word,0,md,cd,fd,nd,gd) && 
+          (md->isTypedef() || md->isEnumerate() || 
+           md->isReference() || md->isVariable()
+          ) && 
+          (external ? md->isLinkable() : md->isLinkableInProject()) 
+         )
+      {
+        //printf("Found ref scope=%s\n",d?d->name().data():"<global>");
+        if ((external ? md->isLinkable() : md->isLinkableInProject()))
+        {
+          //ol.writeObjectLink(d->getReference(),d->getOutputFileBase(),
+          //                       md->anchor(),word);
+          out.writeLink(md->getReference(),md->getOutputFileBase(),
+              md->anchor(),word);
+          found=TRUE;
+        }
+      }
+    }
+
+    if (!found) // add word to the result
+    {
+      //ol.docify(word);
+      out.writeString(word,keepSpaces);
+    }
+    // set next start point in the string
+    //printf("index=%d/%d\n",index,txtStr.length());
+    skipIndex=index=newIndex+matchLen;
+    floatingIndex+=matchLen;
+  }
+  // add last part of the string to the result.
+  //ol.docify(txtStr.right(txtStr.length()-skipIndex));
+  out.writeString(txtStr.right(txtStr.length()-skipIndex),keepSpaces);
+}
+
+
+void writeExample(OutputList &ol,ExampleSDict *ed)
+{
+  QCString exampleLine=theTranslator->trWriteList(ed->count());
+ 
+  //bool latexEnabled = ol.isEnabled(OutputGenerator::Latex);
+  //bool manEnabled   = ol.isEnabled(OutputGenerator::Man);
+  //bool htmlEnabled  = ol.isEnabled(OutputGenerator::Html);
+  QRegExp marker("@[0-9]+");
+  int index=0,newIndex,matchLen;
+  // now replace all markers in inheritLine with links to the classes
+  while ((newIndex=marker.match(exampleLine,index,&matchLen))!=-1)
+  {
+    bool ok;
+    ol.parseText(exampleLine.mid(index,newIndex-index));
+    uint entryIndex = exampleLine.mid(newIndex+1,matchLen-1).toUInt(&ok);
+    Example *e=ed->at(entryIndex);
+    if (ok && e) 
+    {
+      ol.pushGeneratorState();
+      //if (latexEnabled) ol.disable(OutputGenerator::Latex);
+      ol.disable(OutputGenerator::Latex);
+      ol.disable(OutputGenerator::RTF);
+      // link for Html / man
+      ol.writeObjectLink(0,e->file,e->anchor,e->name);
+      ol.popGeneratorState();
+      
+      ol.pushGeneratorState();
+      //if (latexEnabled) ol.enable(OutputGenerator::Latex);
+      ol.disable(OutputGenerator::Man);
+      ol.disable(OutputGenerator::Html);
+      // link for Latex / pdf with anchor because the sources
+      // are not hyperlinked (not possible with a verbatim environment).
+      ol.writeObjectLink(0,e->file,0,e->name);
+      //if (manEnabled) ol.enable(OutputGenerator::Man);
+      //if (htmlEnabled) ol.enable(OutputGenerator::Html);
+      ol.popGeneratorState();
+    }
+    index=newIndex+matchLen;
+  } 
+  ol.parseText(exampleLine.right(exampleLine.length()-index));
+  ol.writeString(".");
+}
+
+
+QCString argListToString(ArgumentList *al)
+{
+  QCString result;
+  if (al==0) return result;
+  Argument *a=al->first();
+  result+="(";
+  while (a)
+  {
+    QCString type1 = a->type, type2;
+    int i=type1.find(")("); // hack to deal with function pointers
+    if (i!=-1)
+    {
+      type2=type1.mid(i);
+      type1=type1.left(i);
+    }
+    if (!a->attrib.isEmpty())
+    {
+      result+=a->attrib+" ";
+    }
+    if (!a->name.isEmpty() || !a->array.isEmpty())
+    {
+      result+= type1+" "+a->name+type2+a->array;
+    }
+    else
+    {
+      result+= type1+type2;
+    }
+    if (!a->defval.isEmpty())
+    {
+      result+="="+a->defval;
+    }
+    a = al->next();
+    if (a) result+=", "; 
+  }
+  result+=")";
+  if (al->constSpecifier) result+=" const";
+  if (al->volatileSpecifier) result+=" volatile";
+  return removeRedundantWhiteSpace(result);
+}
+
+QCString tempArgListToString(ArgumentList *al)
+{
+  QCString result;
+  if (al==0) return result;
+  result="<";
+  Argument *a=al->first();
+  while (a)
+  {
+    if (!a->name.isEmpty()) // add template argument name
+    {
+      result+=a->name;
+    }
+    else // extract name from type
+    {
+      int i=a->type.length()-1;
+      while (i>=0 && isId(a->type.at(i))) i--;
+      if (i>0)
+      {
+        result+=a->type.right(a->type.length()-i-1);
+      }
+    }
+    a=al->next();
+    if (a) result+=", ";
+  }
+  result+=">";
+  return removeRedundantWhiteSpace(result);
+}
+
+
+// compute the HTML anchors for a list of members
+void setAnchors(ClassDef *cd,char id,MemberList *ml,int groupId)
+{
+  int count=0;
+  MemberListIterator mli(*ml);
+  MemberDef *md;
+  for (;(md=mli.current());++mli)
+  {
+    if (!md->isReference())
+    {
+      QCString anchor;
+      if (groupId==-1)
+        anchor.sprintf("%c%d",id,count++);
+      else
+        anchor.sprintf("%c%d_%d",id,groupId,count++);
+      if (cd) anchor.prepend(escapeCharsInString(cd->name(),FALSE));
+      md->setAnchor(anchor);
+      //printf("setAnchors(): Member %s outputFileBase=%s anchor %s result %s\n",
+      //    md->name().data(),md->getOutputFileBase().data(),anchor.data(),md->anchor().data());
+    }
+  }
+}
+
+//----------------------------------------------------------------------------
+
+/*! takes the \a buf of the given lenght \a len and converts CR LF (DOS)
+ * or CR (MAC) line ending to LF (Unix).  Returns the length of the
+ * converted content (i.e. the same as \a len (Unix, MAC) or
+ * smaller (DOS).
+ */
+int filterCRLF(char *buf,int len)
+{
+  int src = 0;    // source index
+  int dest = 0;   // destination index
+  char c;         // current character
+
+  while (src<len)
+  {
+    c = buf[src++];            // Remember the processed character.
+    if (c == '\r')             // CR to be solved (MAC, DOS)
+    {
+      c = '\n';                // each CR to LF
+      if (src<len && buf[src] == '\n')
+        ++src;                 // skip LF just after CR (DOS) 
+    }
+    else if ( c == '\0' && src<len-1) // filter out internal \0 characters, as it will confuse the parser
+    {
+      c = ' ';                 // turn into a space
+    }
+    buf[dest++] = c;           // copy the (modified) character to dest
+  }
+  return dest;                 // length of the valid part of the buf
+}
+
+
+/*! looks for a filter for the file \a name.  Returns the name of the filter
+ *  if there is a match for the file name, otherwise an empty string.
+ */
+QCString getFileFilter(const char* name)
+{
+  // sanity check
+  if (name==0) return "";
+
+  // first look for filter pattern list
+  QStrList& filterList = Config_getList("FILTER_PATTERNS");
+
+  if (filterList.isEmpty()) 
+  {
+    // use INPUT_FILTER instead (For all files)
+    return Config_getString("INPUT_FILTER");
+  }
+
+  // compare the file name to the filter pattern list
+  QStrListIterator sli(filterList);
+  char* filterStr;
+  for(sli.toFirst(); (filterStr = sli.current()); ++sli)
+  {
+    QCString fs = filterStr;
+    int i_equals=fs.find('=');
+
+    if (i_equals!=-1)
+    {
+      QCString filterPattern = fs.left(i_equals);
+
+#if defined(_WIN32) || defined(_OS_MAC_) // windows or mac
+      QRegExp fpat(filterPattern,FALSE,TRUE); // case insensitive match
+#else // unix
+      QRegExp fpat(filterPattern,TRUE,TRUE); // case sensitive match
+#endif
+
+      if (fpat.match(name)!=-1) 
+      {
+        // found a match!
+        QCString filterName = fs.mid(i_equals+1);
+        return filterName;
+      }
+    }
+  }
+
+  // no match
+  return "";
+}
+
+/*! reads a file with name \a name and returns it as a string. If \a filter
+ *  is TRUE the file will be filtered by any user specified input filter.
+ *  If \a name is "-" the string will be read from standard input. 
+ */
+QCString fileToString(const char *name,bool filter)
+{
+  if (name==0 || name[0]==0) return 0;
+  QFile f;
+
+  bool fileOpened=FALSE;
+  if (name[0]=='-' && name[1]==0) // read from stdin
+  {
+    fileOpened=f.open(IO_ReadOnly,stdin);
+    if (fileOpened)
+    {
+      const int bSize=4096;
+      QCString contents(bSize);
+      int totalSize=0;
+      int size;
+      while ((size=f.readBlock(contents.data()+totalSize,bSize))==bSize)
+      {
+        totalSize+=bSize;
+        contents.resize(totalSize+bSize); 
+      }
+      totalSize = filterCRLF(contents.data(),totalSize+size)+2;
+      contents.resize(totalSize);
+      contents.at(totalSize-2)='\n'; // to help the scanner
+      contents.at(totalSize-1)='\0';
+      return contents;
+    }
+  }
+  else // read from file
+  {
+    QFileInfo fi(name);
+    if (!fi.exists() || !fi.isFile())
+    {
+      err("Error: file `%s' not found\n",name);
+      return "";
+    }
+    QCString filterName = getFileFilter(name);
+    if (filterName.isEmpty() || !filter)
+    {
+      f.setName(name);
+      fileOpened=f.open(IO_ReadOnly);
+      if (fileOpened)
+      {
+        int fsize=f.size();
+        QCString contents(fsize+2);
+        f.readBlock(contents.data(),fsize);
+        if (fsize==0 || contents[fsize-1]=='\n') 
+          contents[fsize]='\0';
+        else
+          contents[fsize]='\n'; // to help the scanner
+        contents[fsize+1]='\0';
+        f.close();
+        int newSize = filterCRLF(contents.data(),fsize+2);
+        if (newSize!=fsize+2) 
+        {
+          contents.resize(newSize);
+        }
+        return contents;
+      }
+    }
+    else // filter the input
+    {
+      QCString cmd=filterName+" \""+name+"\"";
+      FILE *f=popen(cmd,"r");
+      if (!f)
+      {
+        err("Error: could not execute filter %s\n",filterName.data());
+        return "";
+      }
+      const int bSize=4096;
+      QCString contents(bSize);
+      int totalSize=0;
+      int size;
+      while ((size=fread(contents.data()+totalSize,1,bSize,f))==bSize)
+      {
+        totalSize+=bSize;
+        contents.resize(totalSize+bSize); 
+      }
+      totalSize = filterCRLF(contents.data(),totalSize+size)+2;
+      contents.resize(totalSize);
+      contents.at(totalSize-2)='\n'; // to help the scanner
+      contents.at(totalSize-1)='\0';
+      pclose(f);
+      return contents;
+    }
+  }
+  if (!fileOpened)  
+  {
+    err("Error: cannot open file `%s' for reading\n",name);
+  }
+  return "";
+}
+
+QCString dateToString(bool includeTime)
+{
+  if (includeTime)
+  {
+    return convertToQCString(QDateTime::currentDateTime().toString());
+  }
+  else
+  {
+    const QDate &d=QDate::currentDate();
+    QCString result;
+    result.sprintf("%d %s %d",
+        d.day(),
+        convertToQCString(d.monthName(d.month())).data(),
+        d.year());
+    return result;
+  }
+  //QDate date=dt.date();
+  //QTime time=dt.time();
+  //QCString dtString;
+  //dtString.sprintf("%02d:%02d, %04d/%02d/%02d",
+  //    time.hour(),time.minute(),date.year(),date.month(),date.day());
+  //return dtString;
+}
+
+QCString yearToString()
+{
+  const QDate &d=QDate::currentDate();
+  QCString result;
+  result.sprintf("%d", d.year());
+  return result;
+}
+
+
+//----------------------------------------------------------------------
+// recursive function that returns the number of branches in the 
+// inheritance tree that the base class `bcd' is below the class `cd'
+
+int minClassDistance(ClassDef *cd,ClassDef *bcd,int level)
+{
+  if (bcd->categoryOf()) // use class that is being extended in case of 
+                         // an Objective-C category
+  {
+    bcd=bcd->categoryOf();
+  }
+  if (cd==bcd) return level; 
+  if (level==256)
+  {
+    err("Error: Internal inconsistency: found class %s seem to have a recursive "
+        "inheritance relation! Please send a bug report to dimitri@stack.nl\n",cd->name().data());
+    return -1;
+  }
+  BaseClassListIterator bcli(*cd->baseClasses());
+  int m=maxInheritanceDepth; 
+  for ( ; bcli.current() ; ++bcli)
+  {
+    //printf("class %s base class %s\n",cd->name().data(),bcli.current()->classDef->name().data());
+    int mc=minClassDistance(bcli.current()->classDef,bcd,level+1);
+    if (mc<m) m=mc;
+    if (m<0) break;
+  }
+  return m;
+}
+
+//static void printArgList(ArgumentList *al)
+//{
+//  if (al==0) return;
+//  ArgumentListIterator ali(*al);
+//  Argument *a;
+//  printf("(");
+//  for (;(a=ali.current());++ali)
+//  {
+//    printf("t=`%s' n=`%s' v=`%s' ",a->type.data(),!a->name.isEmpty()>0?a->name.data():"",!a->defval.isEmpty()>0?a->defval.data():""); 
+//  }
+//  printf(")");
+//}
+
+// strip any template specifiers that follow className in string s
+static QCString trimTemplateSpecifiers(
+     const QCString &namespaceName,
+     const QCString &className,
+     const QCString &s
+)
+{
+  //printf("trimTemplateSpecifiers(%s,%s,%s)\n",namespaceName.data(),className.data(),s.data());
+  QCString scopeName=mergeScopes(namespaceName,className);
+  ClassDef *cd=getClass(scopeName);
+  if (cd==0) return s; // should not happen, but guard anyway.
+
+  QCString result=s;
+
+  int i=className.length()-1;
+  if (i>=0 && className.at(i)=='>') // template specialization
+  {
+    // replace unspecialized occurrences in s, with their specialized versions.
+    int count=1;
+    int cl=i+1;
+    while (i>=0)
+    {
+      char c=className.at(i);
+      if (c=='>') count++,i--;
+      else if (c=='<') { count--; if (count==0) break; }
+      else i--;
+    }
+    QCString unspecClassName=className.left(i);
+    int l=i;
+    int p=0;
+    while ((i=result.find(unspecClassName,p))!=-1)
+    {
+      if (result.at(i+l)!='<') // unspecialized version
+      {
+        result=result.left(i)+className+result.right(result.length()-i-l);
+        l=cl;
+      }
+      p=i+l;
+    }
+  }
+
+  //printf("result after specialization: %s\n",result.data());
+  
+  QCString qualName=cd->qualifiedNameWithTemplateParameters();
+  //printf("QualifiedName = %s\n",qualName.data());
+  // We strip the template arguments following className (if any)
+  if (!qualName.isEmpty()) // there is a class name
+  {
+    int is,ps=0;
+    int p=0,l,i;
+
+    while ((is=getScopeFragment(qualName,ps,&l))!=-1)
+    {
+      QCString qualNamePart = qualName.right(qualName.length()-is);
+      //printf("qualNamePart=%s\n",qualNamePart.data());
+      while ((i=result.find(qualNamePart,p))!=-1)
+      {
+        int ql=qualNamePart.length();
+        result=result.left(i)+cd->name()+result.right(result.length()-i-ql);
+        p=i+cd->name().length();
+      }
+      ps=is+l;
+    }
+  }
+  //printf("result=%s\n",result.data());
+    
+  return result;
+}
+
+/*!
+ * @param pattern pattern to look for
+ * @param s string to search in
+ * @param p position to start
+ * @param len resulting pattern length
+ * @returns position on which string is found, or -1 if not found
+ */
+static int findScopePattern(const QCString &pattern,const QCString &s,
+                            int p,int *len)
+{
+  int sl=s.length();
+  int pl=pattern.length();
+  int sp=0; 
+  *len=0;
+  while (p<sl)
+  {
+    sp=p; // start of match
+    int pp=0; // pattern position
+    while (p<sl && pp<pl)
+    {
+      if (s.at(p)=='<') // skip template arguments while matching
+      {
+        int bc=1;
+        //printf("skipping pos=%d c=%c\n",p,s.at(p));
+        p++;
+        while (p<sl)
+        {
+          if (s.at(p)=='<') bc++;
+          else if (s.at(p)=='>') 
+          {
+            bc--;
+            if (bc==0) 
+            {
+              p++;
+              break;
+            }
+          }
+          //printf("skipping pos=%d c=%c\n",p,s.at(p));
+          p++;
+        }
+      }
+      else if (s.at(p)==pattern.at(pp))
+      {
+        //printf("match at position p=%d pp=%d c=%c\n",p,pp,s.at(p));
+        p++;
+        pp++;
+      }
+      else // no match
+      {
+        //printf("restarting at %d c=%c pat=%s\n",p,s.at(p),pattern.data());
+        p=sp+1;
+        break;
+      }
+    }
+    if (pp==pl) // whole pattern matches
+    {
+      *len=p-sp;
+      return sp;
+    }
+  }
+  return -1;
+}
+  
+static QCString trimScope(const QCString &name,const QCString &s)
+{
+  int scopeOffset=name.length();
+  QCString result=s;
+  do // for each scope
+  {
+    QCString tmp;
+    QCString scope=name.left(scopeOffset)+"::";
+    //printf("Trying with scope=`%s'\n",scope.data());
+    
+    int i,p=0,l;
+    while ((i=findScopePattern(scope,result,p,&l))!=-1) // for each occurrence
+    {
+      tmp+=result.mid(p,i-p); // add part before pattern
+      p=i+l;
+    }
+    tmp+=result.right(result.length()-p); // add trailing part
+
+    scopeOffset=name.findRev("::",scopeOffset-1);
+    result = tmp;
+  } while (scopeOffset>0);   
+  //printf("trimScope(name=%s,scope=%s)=%s\n",name.data(),s.data(),result.data());
+  return result;
+}
+
+void trimBaseClassScope(BaseClassList *bcl,QCString &s,int level=0)
+{
+  //printf("trimBaseClassScope level=%d `%s'\n",level,s.data());
+  BaseClassListIterator bcli(*bcl);
+  BaseClassDef *bcd;
+  for (;(bcd=bcli.current());++bcli)
+  {
+    ClassDef *cd=bcd->classDef;
+    //printf("Trying class %s\n",cd->name().data());
+    int spos=s.find(cd->name()+"::");
+    if (spos!=-1)
+    {
+      s = s.left(spos)+s.right(
+                       s.length()-spos-cd->name().length()-2
+                     );
+    }
+    //printf("base class `%s'\n",cd->name().data());
+    if (cd->baseClasses()->count()>0)
+      trimBaseClassScope(cd->baseClasses(),s,level+1); 
+  }
+}
+
+/*! if either t1 or t2 contains a namespace scope, then remove that
+ *  scope. If neither or both have a namespace scope, t1 and t2 remain
+ *  unchanged.
+ */
+static void trimNamespaceScope(QCString &t1,QCString &t2,const QCString &nsName)
+{
+  int p1=t1.length();
+  int p2=t2.length();
+  for (;;)
+  {
+    int i1=p1==0 ? -1 : t1.findRev("::",p1);
+    int i2=p2==0 ? -1 : t2.findRev("::",p2);
+    if (i1==-1 && i2==-1)
+    {
+      return;
+    }
+    if (i1!=-1 && i2==-1) // only t1 has a scope
+    {
+      QCString scope=t1.left(i1);
+      replaceNamespaceAliases(scope,i1);
+      
+      int so=nsName.length();
+      do
+      {
+        QCString fullScope=nsName.left(so);
+        if (!fullScope.isEmpty() && !scope.isEmpty()) fullScope+="::";
+        fullScope+=scope;
+        if (!fullScope.isEmpty() && Doxygen::namespaceSDict[fullScope]!=0) // scope is a namespace
+        {
+          t1 = t1.right(t1.length()-i1-2);
+          return;
+        }
+        if (so==0)
+        {
+          so=-1;
+        }
+        else if ((so=nsName.findRev("::",so-1))==-1)
+        {
+          so=0;
+        }
+      }
+      while (so>=0);
+    }
+    else if (i1==-1 && i2!=-1) // only t2 has a scope
+    {
+      QCString scope=t2.left(i2);
+      replaceNamespaceAliases(scope,i2);
+
+      int so=nsName.length();
+      do
+      {
+        QCString fullScope=nsName.left(so);
+        if (!fullScope.isEmpty() && !scope.isEmpty()) fullScope+="::";
+        fullScope+=scope;
+        if (!fullScope.isEmpty() && Doxygen::namespaceSDict[fullScope]!=0) // scope is a namespace
+        {
+          t2 = t2.right(t2.length()-i2-2);
+          return;
+        }
+        if (so==0)
+        {
+          so=-1;
+        }
+        else if ((so=nsName.findRev("::",so-1))==-1)
+        {
+          so=0;
+        }
+      }
+      while (so>=0);
+    }
+    p1 = QMAX(i1-2,0);
+    p2 = QMAX(i2-2,0);
+  }
+}
+
+/*! According to the C++ spec and Ivan Vecerina:
+
+    Parameter declarations  that differ only in the presence or absence
+    of const and/or volatile are equivalent.
+
+    So the following example, show what is stripped by this routine
+    for const. The same is done for volatile.
+
+    \code
+       const T param     ->   T param          // not relevant
+       const T& param    ->   const T& param   // const needed               
+       T* const param    ->   T* param         // not relevant                   
+       const T* param    ->   const T* param   // const needed
+    \endcode
+ */
+void stripIrrelevantConstVolatile(QCString &s)
+{
+  //printf("stripIrrelevantConstVolatile(%s)=",s.data());
+  int i;
+  if (s=="const")    { s.resize(0); return; }
+  if (s=="volatile") { s.resize(0); return; }
+
+  // strip occurrences of const
+  int constLen=5+1;
+  i = s.find("const ");
+  if (i==-1 && s.right(5)=="const") { i=s.length()-5;constLen=5; }
+  while (i!=-1) 
+  {
+    // no & or * after the const
+    int i1=s.find('*',i+constLen);
+    int i2=s.find('&',i+constLen);
+    if (i1==-1 && i2==-1)
+    {
+      s=s.left(i)+s.right(s.length()-i-constLen); 
+      i-=constLen;
+    }
+    else if ((i1!=-1 && i<i1) || (i2!=-1 && i<i2)) // const before * or &
+    {
+      // move const to front
+      s=(QCString)"const "+s.left(i)+s.right(s.length()-i-constLen);
+    }
+    i = s.find("const ",i+constLen);
+  }
+
+  // strip occurrences of volatile
+  int volatileLen=8+1;
+  i = s.find("volatile ");
+  if (i==-1 && s.right(8)=="volatile") { i=s.length()-8;constLen=8; }
+  while (i!=-1) 
+  {
+    // no & or * after the volatile
+    int i1=s.find('*',i+volatileLen);
+    int i2=s.find('&',i+volatileLen);
+    if (i1==-1 && i2==-1)
+    {
+      s=s.left(i)+s.right(s.length()-i-volatileLen); 
+      i-=volatileLen;
+    }
+    else if ((i1!=-1 && i<i1) || (i2!=-1 && i<i2)) // volatile before * or &
+    {
+      // move volatile to front
+      s=(QCString)"volatile "+s.left(i)+s.right(s.length()-i-volatileLen);
+    }
+    i = s.find("volatile ",i+volatileLen);
+  }
+  //printf("%s\n",s.data());
+}
+
+
+// a bit of debug support for matchArguments
+#define MATCH
+#define NOMATCH
+//#define MATCH printf("Match at line %d\n",__LINE__);
+//#define NOMATCH printf("Nomatch at line %d\n",__LINE__);
+
+static bool matchArgument(const Argument *srcA,const Argument *dstA,
+                   const QCString &className,
+                   const QCString &namespaceName,
+                   NamespaceSDict *usingNamespaces,
+                   SDict<Definition> *usingClasses)
+{
+  //printf("match argument start %s:%s <-> %s:%s using nsp=%p class=%p\n",
+  //    srcA->type.data(),srcA->name.data(),
+  //    dstA->type.data(),dstA->name.data(),
+  //    usingNamespaces,
+  //    usingClasses);
+
+  // TODO: resolve any typedefs names that are part of srcA->type
+  //       before matching. This should use className and namespaceName
+  //       and usingNamespaces and usingClass to determine which typedefs
+  //       are in-scope, so it will not be very efficient :-(
+
+  QCString srcAType=trimTemplateSpecifiers(namespaceName,className,srcA->type);
+  QCString dstAType=trimTemplateSpecifiers(namespaceName,className,dstA->type);
+  if (srcAType.left(6)=="class ") srcAType=srcAType.right(srcAType.length()-6);
+  if (dstAType.left(6)=="class ") dstAType=dstAType.right(dstAType.length()-6);
+  
+  // allow distingishing "const A" from "const B" even though 
+  // from a syntactic point of view they would be two names of the same 
+  // type "const". This is not fool prove ofcourse, but should at least 
+  // catch the most common cases.
+  if ((srcAType=="const" || srcAType=="volatile") && !srcA->name.isEmpty())
+  {
+    srcAType+=" ";
+    srcAType+=srcA->name;
+  } 
+  if ((dstAType=="const" || dstAType=="volatile") && !dstA->name.isEmpty())
+  {
+    dstAType+=" ";
+    dstAType+=dstA->name;
+  }
+  if (srcA->name=="const" || srcA->name=="volatile")
+  {
+    srcAType+=srcA->name;
+  }
+  if (dstA->name=="const" || dstA->name=="volatile")
+  {
+    dstAType+=dstA->name;
+  }
+      
+  stripIrrelevantConstVolatile(srcAType);
+  stripIrrelevantConstVolatile(dstAType);
+
+  // strip typename keyword
+  if (strncmp(srcAType,"typename ",9)==0)
+  {
+    srcAType = srcAType.right(srcAType.length()-9); 
+  }
+  if (strncmp(dstAType,"typename ",9)==0)
+  {
+    dstAType = dstAType.right(dstAType.length()-9); 
+  }
+  
+
+  srcAType = removeRedundantWhiteSpace(srcAType);
+  dstAType = removeRedundantWhiteSpace(dstAType);
+
+  //srcAType=stripTemplateSpecifiersFromScope(srcAType,FALSE);
+  //dstAType=stripTemplateSpecifiersFromScope(dstAType,FALSE);
+
+  //printf("srcA=%s:%s dstA=%s:%s\n",srcAType.data(),srcA->name.data(),
+  //      dstAType.data(),dstA->name.data());
+
+  if (srcA->array!=dstA->array) // nomatch for char[] against char
+  {
+    NOMATCH
+    return FALSE;
+  }
+  if (srcAType!=dstAType) // check if the argument only differs on name 
+  {
+
+    // remove a namespace scope that is only in one type 
+    // (assuming a using statement was used)
+    trimNamespaceScope(srcAType,dstAType,namespaceName);
+  
+    //QCString srcScope;
+    //QCString dstScope;
+
+    // strip redundant scope specifiers
+    if (!className.isEmpty())
+    {
+      srcAType=trimScope(className,srcAType);
+      dstAType=trimScope(className,dstAType);
+      //printf("trimScope: `%s' <=> `%s'\n",srcAType.data(),dstAType.data());
+      ClassDef *cd;
+      if (!namespaceName.isEmpty())
+        cd=getClass(namespaceName+"::"+className);
+      else
+        cd=getClass(className);
+      if (cd && cd->baseClasses()->count()>0)
+      {
+        trimBaseClassScope(cd->baseClasses(),srcAType); 
+        trimBaseClassScope(cd->baseClasses(),dstAType); 
+      }
+      //printf("trimBaseClassScope: `%s' <=> `%s'\n",srcAType.data(),dstAType.data());
+    }
+    if (!namespaceName.isEmpty())
+    {
+      srcAType=trimScope(namespaceName,srcAType);
+      dstAType=trimScope(namespaceName,dstAType);
+    }
+    if (usingNamespaces && usingNamespaces->count()>0)
+    {
+      NamespaceSDict::Iterator nli(*usingNamespaces);
+      NamespaceDef *nd;
+      for (;(nd=nli.current());++nli)
+      {
+        srcAType=trimScope(nd->name(),srcAType);
+        dstAType=trimScope(nd->name(),dstAType);
+      }
+    }
+    if (usingClasses && usingClasses->count()>0)
+    {
+      SDict<Definition>::Iterator cli(*usingClasses);
+      Definition *cd;
+      for (;(cd=cli.current());++cli)
+      {
+        srcAType=trimScope(cd->name(),srcAType);
+        dstAType=trimScope(cd->name(),dstAType);
+      }
+    }
+
+    //printf("2. srcA=%s:%s dstA=%s:%s\n",srcAType.data(),srcA->name.data(),
+    //    dstAType.data(),dstA->name.data());
+    
+    if (!srcA->name.isEmpty() && !dstA->type.isEmpty() &&
+        (srcAType+" "+srcA->name)==dstAType)
+    {
+      MATCH
+      return TRUE;
+    }
+    else if (!dstA->name.isEmpty() && !srcA->type.isEmpty() &&
+        (dstAType+" "+dstA->name)==srcAType)
+    {
+      MATCH
+      return TRUE;
+    }
+    
+
+    uint srcPos=0,dstPos=0; 
+    bool equal=TRUE;
+    while (srcPos<srcAType.length() && dstPos<dstAType.length() && equal)
+    {
+      equal=srcAType.at(srcPos)==dstAType.at(dstPos);
+      if (equal) srcPos++,dstPos++; 
+    }
+    uint srcATypeLen=srcAType.length();
+    uint dstATypeLen=dstAType.length();
+    if (srcPos<srcATypeLen && dstPos<dstATypeLen)
+    {
+      // if nothing matches or the match ends in the middle or at the
+      // end of a string then there is no match
+      if (srcPos==0 || dstPos==0) 
+      {
+        NOMATCH
+        return FALSE;
+      }
+      if (isId(srcAType.at(srcPos)) && isId(dstAType.at(dstPos)))
+      {
+        //printf("partial match srcPos=%d dstPos=%d!\n",srcPos,dstPos);
+        // check if a name if already found -> if no then there is no match
+        if (!srcA->name.isEmpty() || !dstA->name.isEmpty()) 
+        {
+          NOMATCH
+          return FALSE;
+        }
+        // types only
+        while (srcPos<srcATypeLen && isId(srcAType.at(srcPos))) srcPos++;
+        while (dstPos<dstATypeLen && isId(dstAType.at(dstPos))) dstPos++;
+        if (srcPos<srcATypeLen || 
+            dstPos<dstATypeLen ||
+            (srcPos==srcATypeLen && dstPos==dstATypeLen)
+           ) 
+        {
+          NOMATCH
+          return FALSE;
+        }
+      }
+      else
+      {
+        // otherwise we assume that a name starts at the current position.
+        while (srcPos<srcATypeLen && isId(srcAType.at(srcPos))) srcPos++;
+        while (dstPos<dstATypeLen && isId(dstAType.at(dstPos))) dstPos++;
+
+        // if nothing more follows for both types then we assume we have
+        // found a match. Note that now `signed int' and `signed' match, but
+        // seeing that int is not a name can only be done by looking at the
+        // semantics.
+
+        if (srcPos!=srcATypeLen || dstPos!=dstATypeLen) 
+        { 
+          NOMATCH
+          return FALSE; 
+        }
+      }
+    }
+    else if (dstPos<dstAType.length())
+    {
+      if (!isspace((uchar)dstAType.at(dstPos))) // maybe the names differ
+      {
+        if (!dstA->name.isEmpty()) // dst has its name separated from its type
+        {
+          NOMATCH
+          return FALSE;
+        }
+        while (dstPos<dstAType.length() && isId(dstAType.at(dstPos))) dstPos++;
+        if (dstPos!=dstAType.length()) 
+        {
+          NOMATCH
+          return FALSE; // more than a difference in name -> no match
+        }
+      }
+      else  // maybe dst has a name while src has not
+      {
+        dstPos++;
+        while (dstPos<dstAType.length() && isId(dstAType.at(dstPos))) dstPos++;
+        if (dstPos!=dstAType.length() || !srcA->name.isEmpty()) 
+        {
+          NOMATCH
+          return FALSE; // nope not a name -> no match
+        }
+      }
+    }
+    else if (srcPos<srcAType.length())
+    {
+      if (!isspace((uchar)srcAType.at(srcPos))) // maybe the names differ
+      {
+        if (!srcA->name.isEmpty()) // src has its name separated from its type
+        {
+          NOMATCH
+          return FALSE;
+        }
+        while (srcPos<srcAType.length() && isId(srcAType.at(srcPos))) srcPos++;
+        if (srcPos!=srcAType.length()) 
+        {
+          NOMATCH
+          return FALSE; // more than a difference in name -> no match
+        }
+      }
+      else // maybe src has a name while dst has not
+      {
+        srcPos++;
+        while (srcPos<srcAType.length() && isId(srcAType.at(srcPos))) srcPos++;
+        if (srcPos!=srcAType.length() || !dstA->name.isEmpty()) 
+        {
+          NOMATCH
+          return FALSE; // nope not a name -> no match
+        }
+      }
+    }
+  }
+  MATCH
+  return TRUE;
+}
+
+
+/*!
+ * Matches the arguments list srcAl with the argument list dstAl
+ * Returns TRUE if the argument lists are equal. Two argument list are 
+ * considered equal if the number of arguments is equal and the types of all 
+ * arguments are equal. Furthermore the const and volatile specifiers 
+ * stored in the list should be equal.
+ */
+bool matchArguments(ArgumentList *srcAl,ArgumentList *dstAl,
+                    const char *cl,const char *ns,bool checkCV,
+                    NamespaceSDict *usingNamespaces,
+                    SDict<Definition> *usingClasses)
+{
+  QCString className=cl;
+  QCString namespaceName=ns;
+
+  // strip template specialization from class name if present
+  //int til=className.find('<'),tir=className.find('>');
+  //if (til!=-1 && tir!=-1 && tir>til) 
+  //{
+  //  className=className.left(til)+className.right(className.length()-tir-1);
+  //}
+
+  //printf("matchArguments(%s,%s) className=%s namespaceName=%s checkCV=%d usingNamespaces=%d usingClasses=%d\n",
+  //    srcAl ? argListToString(srcAl).data() : "",
+  //    dstAl ? argListToString(dstAl).data() : "",
+  //    cl,ns,checkCV,
+  //    usingNamespaces?usingNamespaces->count():0,
+  //    usingClasses?usingClasses->count():0
+  //    );
+
+  if (srcAl==0 || dstAl==0)
+  {
+    bool match = srcAl==dstAl; // at least one of the members is not a function
+    if (match)
+    {
+      MATCH
+      return TRUE;
+    }
+    else
+    {
+      NOMATCH
+      return FALSE;
+    }
+  }
+  
+  // handle special case with void argument
+  if ( srcAl->count()==0 && dstAl->count()==1 && 
+       dstAl->getFirst()->type=="void" )
+  { // special case for finding match between func() and func(void)
+    Argument *a=new Argument;
+    a->type = "void";
+    srcAl->append(a);
+    MATCH
+    return TRUE;
+  }
+  if ( dstAl->count()==0 && srcAl->count()==1 &&
+       srcAl->getFirst()->type=="void" )
+  { // special case for finding match between func(void) and func()
+    Argument *a=new Argument;
+    a->type = "void";
+    dstAl->append(a);
+    MATCH
+    return TRUE;
+  }
+  
+  if (srcAl->count() != dstAl->count())
+  {
+    NOMATCH
+    return FALSE; // different number of arguments -> no match
+  }
+
+  if (checkCV)
+  {
+    if (srcAl->constSpecifier != dstAl->constSpecifier) 
+    {
+      NOMATCH
+      return FALSE; // one member is const, the other not -> no match
+    }
+    if (srcAl->volatileSpecifier != dstAl->volatileSpecifier)
+    {
+      NOMATCH
+      return FALSE; // one member is volatile, the other not -> no match
+    }
+  }
+
+  // so far the argument list could match, so we need to compare the types of
+  // all arguments.
+  ArgumentListIterator srcAli(*srcAl),dstAli(*dstAl);
+  Argument *srcA,*dstA;
+  for (;(srcA=srcAli.current(),dstA=dstAli.current());++srcAli,++dstAli)
+  { 
+    if (!matchArgument(srcA,dstA,className,namespaceName,
+          usingNamespaces,usingClasses))
+    {
+      NOMATCH
+      return FALSE;
+    }
+  }
+  MATCH
+  return TRUE; // all arguments match 
+}
+
+// merges the initializer of two argument lists
+// pre:  the types of the arguments in the list should match.
+void mergeArguments(ArgumentList *srcAl,ArgumentList *dstAl,bool forceNameOverwrite)
+{
+  //printf("mergeArguments `%s', `%s'\n",
+  //    argListToString(srcAl).data(),argListToString(dstAl).data());
+
+  if (srcAl==0 || dstAl==0 || srcAl->count()!=dstAl->count())
+  {
+    return; // invalid argument lists -> do not merge
+  }
+
+  ArgumentListIterator srcAli(*srcAl),dstAli(*dstAl);
+  Argument *srcA,*dstA;
+  for (;(srcA=srcAli.current(),dstA=dstAli.current());++srcAli,++dstAli)
+  {
+    if (srcA->defval.isEmpty() && !dstA->defval.isEmpty())
+    {
+      //printf("Defval changing `%s'->`%s'\n",srcA->defval.data(),dstA->defval.data());
+      srcA->defval=dstA->defval.copy();
+    }
+    else if (!srcA->defval.isEmpty() && dstA->defval.isEmpty())
+    {
+      //printf("Defval changing `%s'->`%s'\n",dstA->defval.data(),srcA->defval.data());
+      dstA->defval=srcA->defval.copy();
+    }
+    if (srcA->type==dstA->type)
+    {
+      if (srcA->name.isEmpty() && !dstA->name.isEmpty())
+      {
+        //printf("type: `%s':=`%s'\n",srcA->type.data(),dstA->type.data());
+        //printf("name: `%s':=`%s'\n",srcA->name.data(),dstA->name.data());
+        srcA->type = dstA->type.copy();
+        srcA->name = dstA->name.copy();
+      }
+      else if (!srcA->name.isEmpty() && dstA->name.isEmpty())
+      {
+        //printf("type: `%s':=`%s'\n",dstA->type.data(),srcA->type.data());
+        //printf("name: `%s':=`%s'\n",dstA->name.data(),srcA->name.data());
+        dstA->type = srcA->type.copy();
+        dstA->name = dstA->name.copy();
+      }
+      else if (!srcA->name.isEmpty() && !dstA->name.isEmpty())
+      {
+        if (forceNameOverwrite)
+        {
+          srcA->name = dstA->name.copy();
+        }
+        else
+        {
+          if (srcA->docs.isEmpty() && !dstA->docs.isEmpty())
+          {
+            srcA->name = dstA->name.copy();
+          }
+          else if (!srcA->docs.isEmpty() && dstA->docs.isEmpty())
+          {
+            dstA->name = srcA->name.copy();
+          }
+        }
+      }
+    }
+    else
+    {
+      //printf("merging %s:%s <-> %s:%s\n",srcA->type.data(),srcA->name.data(),dstA->type.data(),dstA->name.data());
+      if (srcA->type+" "+srcA->name==dstA->type) // "unsigned long:int" <-> "unsigned long int:bla"
+      {
+        srcA->type+=" "+srcA->name;
+        srcA->name=dstA->name;
+      }
+      else if (dstA->type+" "+dstA->name==srcA->type) // "unsigned long int bla" <-> "unsigned long int"
+      {
+        dstA->type+=" "+dstA->name;
+        dstA->name=srcA->name;
+      }
+      else if (srcA->name.isEmpty() && !dstA->name.isEmpty())
+      {
+        srcA->name = dstA->name;
+      }
+      else if (dstA->name.isEmpty() && !srcA->name.isEmpty())
+      {
+        dstA->name = srcA->name;
+      }
+    }
+    int i1=srcA->type.find("::"),
+        i2=dstA->type.find("::"),
+        j1=srcA->type.length()-i1-2,
+        j2=dstA->type.length()-i2-2;
+    if (i1!=-1 && i2==-1 && srcA->type.right(j1)==dstA->type)
+    {
+      //printf("type: `%s':=`%s'\n",dstA->type.data(),srcA->type.data());
+      //printf("name: `%s':=`%s'\n",dstA->name.data(),srcA->name.data());
+      dstA->type = srcA->type.left(i1+2)+dstA->type;
+      dstA->name = dstA->name.copy();
+    }
+    else if (i1==-1 && i2!=-1 && dstA->type.right(j2)==srcA->type)
+    {
+      //printf("type: `%s':=`%s'\n",srcA->type.data(),dstA->type.data());
+      //printf("name: `%s':=`%s'\n",dstA->name.data(),srcA->name.data());
+      srcA->type = dstA->type.left(i2+2)+srcA->type;
+      srcA->name = dstA->name.copy();
+    }
+    if (srcA->docs.isEmpty() && !dstA->docs.isEmpty())
+    {
+      srcA->docs = dstA->docs.copy();
+    }
+    else if (dstA->docs.isEmpty() && !srcA->docs.isEmpty())
+    {
+      dstA->docs = srcA->docs.copy();
+    }
+  }
+  //printf("result mergeArguments `%s', `%s'\n",
+  //    argListToString(srcAl).data(),argListToString(dstAl).data());
+}
+
+/*!
+ * Searches for a member definition given its name `memberName' as a string.
+ * memberName may also include a (partial) scope to indicate the scope
+ * in which the member is located.
+ *
+ * The parameter `scName' is a string representing the name of the scope in 
+ * which the link was found.
+ *
+ * In case of a function args contains a string representation of the 
+ * argument list. Passing 0 means the member has no arguments. 
+ * Passing "()" means any argument list will do, but "()" is preferred.
+ *
+ * The function returns TRUE if the member is known and documented or
+ * FALSE if it is not.
+ * If TRUE is returned parameter `md' contains a pointer to the member 
+ * definition. Furthermore exactly one of the parameter `cd', `nd', or `fd' 
+ * will be non-zero:
+ *   - if `cd' is non zero, the member was found in a class pointed to by cd.
+ *   - if `nd' is non zero, the member was found in a namespace pointed to by nd.
+ *   - if `fd' is non zero, the member was found in the global namespace of
+ *     file fd.
+ */
+bool getDefs(const QCString &scName,const QCString &memberName, 
+             const char *args,
+             MemberDef *&md, 
+             ClassDef *&cd, FileDef *&fd, NamespaceDef *&nd, GroupDef *&gd,
+             bool forceEmptyScope,
+             FileDef *currentFile,
+             bool checkCV
+            )
+{
+  fd=0, md=0, cd=0, nd=0, gd=0;
+  if (memberName.isEmpty()) return FALSE; /* empty name => nothing to link */
+
+  QCString scopeName=scName;
+  //printf("Search for name=%s args=%s in scope=%s\n",
+  //          memberName.data(),args,scopeName.data());
+  
+  int is,im=0,pm=0;
+  // strip common part of the scope from the scopeName
+  while ((is=scopeName.findRev("::"))!=-1 && 
+         (im=memberName.find("::",pm))!=-1 &&
+         (scopeName.right(scopeName.length()-is-2)==memberName.mid(pm,im-pm))
+        )
+  {
+    scopeName=scopeName.left(is); 
+    pm=im+2;
+  }
+  //printf("result after scope corrections scope=%s name=%s\n",
+  //          scopeName.data(),memberName.data());
+  
+  QCString mName=memberName;
+  QCString mScope;
+  if (memberName.left(9)!="operator " && // treat operator conversion methods
+                                         // as a special case
+      (im=memberName.findRev("::"))!=-1
+     )
+  {
+    mScope=memberName.left(im); 
+    mName=memberName.right(memberName.length()-im-2);
+  }
+  
+  // handle special the case where both scope name and member scope are equal
+  if (mScope==scopeName) scopeName.resize(0);
+
+  //printf("mScope=`%s' mName=`%s'\n",mScope.data(),mName.data());
+  
+  MemberName *mn = Doxygen::memberNameSDict[mName];
+  if (!forceEmptyScope && mn && !(scopeName.isEmpty() && mScope.isEmpty()))
+  {
+    //printf("  >member name found\n");
+    int scopeOffset=scopeName.length();
+    do
+    {
+      QCString className = scopeName.left(scopeOffset);
+      if (!className.isEmpty() && !mScope.isEmpty())
+      {
+        className+="::"+mScope;
+      }
+      else if (!mScope.isEmpty())
+      {
+        className=mScope.copy();
+      }
+      //printf("Trying class scope %s\n",className.data());
+
+      ClassDef *fcd=0;
+      // todo: fill in correct fileScope!
+      if ((fcd=getResolvedClass(Doxygen::globalScope,0,className)) &&  // is it a documented class
+           fcd->isLinkable() 
+         )
+      {
+        //printf("  Found fcd=%p\n",fcd);
+        MemberListIterator mmli(*mn);
+        MemberDef *mmd;
+        int mdist=maxInheritanceDepth; 
+        ArgumentList *argList=0;
+        if (args)
+        {
+          argList=new ArgumentList;
+          stringToArgumentList(args,argList);
+        }
+        for (mmli.toFirst();(mmd=mmli.current());++mmli)
+        {
+          if (mmd->isLinkable())
+          {
+            bool match=args==0 || 
+              matchArguments(mmd->argumentList(),argList,className,0,checkCV); 
+            //printf("match=%d\n",match);
+            if (match)
+            {
+              ClassDef *mcd=mmd->getClassDef();
+              int m=minClassDistance(fcd,mcd);
+              if (m<mdist && mcd->isLinkable())
+              {
+                mdist=m;
+                cd=mcd;
+                md=mmd;
+              }
+            }
+          }
+        }
+        if (argList)
+        {
+          delete argList; argList=0;
+        }
+        if (mdist==maxInheritanceDepth && args && strcmp(args,"()")==0)
+          // no exact match found, but if args="()" an arbitrary member will do
+        {
+          //printf("  >Searching for arbitrary member\n");
+          for (mmli.toFirst();(mmd=mmli.current());++mmli)
+          {
+            if (mmd->isLinkable())
+            {
+              ClassDef *mcd=mmd->getClassDef();
+              //printf("  >Class %s found\n",mcd->name().data());
+              int m=minClassDistance(fcd,mcd);
+              if (m<mdist && mcd->isLinkable())
+              {
+                //printf("Class distance %d\n",m);
+                mdist=m;
+                cd=mcd;
+                md=mmd;
+              }
+            }
+          }
+        }
+        //printf("  >Succes=%d\n",mdist<maxInheritanceDepth);
+        if (mdist<maxInheritanceDepth) 
+        {
+          gd=md->getGroupDef();
+          if (gd) cd=0;
+          return TRUE; /* found match */
+        }
+      } 
+      /* go to the parent scope */
+      
+      if (scopeOffset==0)
+      {
+        scopeOffset=-1;
+      }
+      else if ((scopeOffset=scopeName.findRev("::",scopeOffset-1))==-1)
+      {
+        scopeOffset=0;
+      }
+    } while (scopeOffset>=0);
+    
+    // unknown or undocumented scope 
+  }
+
+  // maybe an namespace, file or group member ?
+  //printf("Testing for global function scopeName=`%s' mScope=`%s' :: mName=`%s'\n",
+  //              scopeName.data(),mScope.data(),mName.data());
+  if ((mn=Doxygen::functionNameSDict[mName])) // name is known
+  {
+    //printf("  >function name found\n");
+    NamespaceDef *fnd=0;
+    int scopeOffset=scopeName.length();
+    do
+    {
+      QCString namespaceName = scopeName.left(scopeOffset);
+      if (!namespaceName.isEmpty() && !mScope.isEmpty())
+      {
+        namespaceName+="::"+mScope;
+      }
+      else if (!mScope.isEmpty())
+      {
+        namespaceName=mScope.copy();
+      }
+      //printf("Trying namespace %s\n",namespaceName.data());
+      if (!namespaceName.isEmpty() && 
+          (fnd=Doxygen::namespaceSDict[namespaceName]) &&
+          fnd->isLinkable()
+         )
+      {
+        //printf("Function inside existing namespace `%s'\n",namespaceName.data());
+        bool found=FALSE;
+        MemberListIterator mmli(*mn);
+        MemberDef *mmd;
+        for (mmli.toFirst();((mmd=mmli.current()) && !found);++mmli)
+        {
+          //printf("mmd->getNamespaceDef()=%p fnd=%p\n",
+          //    mmd->getNamespaceDef(),fnd);
+          if (mmd->getNamespaceDef()==fnd && mmd->isLinkable())
+          { // namespace is found
+            bool match=TRUE;
+            ArgumentList *argList=0;
+            if (args)
+            {
+              argList=new ArgumentList;
+              stringToArgumentList(args,argList);
+              match=matchArguments(mmd->argumentList(),argList,0,
+                  namespaceName,checkCV); 
+            }
+            if (match)
+            {
+              nd=fnd;
+              md=mmd;
+              found=TRUE;
+            }
+            if (args)
+            {
+              delete argList; argList=0;
+            }
+          }
+        }
+        if (!found && args && !strcmp(args,"()")) 
+          // no exact match found, but if args="()" an arbitrary 
+          // member will do
+        {
+          for (mmli.toFirst();((mmd=mmli.current()) && !found);++mmli)
+          {
+            if (mmd->getNamespaceDef()==fnd && mmd->isLinkable())
+            {
+              nd=fnd;
+              md=mmd;
+              found=TRUE;
+            }
+          }
+        }
+        if (found) 
+        {
+          gd=md->getGroupDef();
+          if (gd && gd->isLinkable()) nd=0; else gd=0;
+          return TRUE;
+        }
+      }
+      if (scopeOffset==0)
+      {
+        scopeOffset=-1;
+      }
+      else if ((scopeOffset=scopeName.findRev("::",scopeOffset-1))==-1)
+      {
+        scopeOffset=0;
+      }
+    } while (scopeOffset>=0);
+      //else // no scope => global function
+      {
+        QList<MemberDef> members;
+        
+        //printf("  Function with global scope name `%s' args=`%s'\n",memberName.data(),args);
+        MemberListIterator mli(*mn);
+        for (mli.toFirst();(md=mli.current());++mli)
+        {
+          if (md->isLinkable())
+          {
+            fd=md->getFileDef();
+            gd=md->getGroupDef();
+            //printf("  md->name()=`%s' md->args=`%s' fd=%p gd=%p\n",
+            //    md->name().data(),args,fd,gd);
+            if (
+                (gd && gd->isLinkable()) || (fd && fd->isLinkable()) 
+               )
+            {
+              //printf("fd=%p gd=%p inGroup=`%d' args=`%s'\n",fd,gd,inGroup,args);
+              bool match=TRUE;
+              ArgumentList *argList=0;
+              if (args && !md->isDefine())
+              {
+                argList=new ArgumentList;
+                stringToArgumentList(args,argList);
+                match=matchArguments(md->argumentList(),argList,0,0,checkCV); 
+                delete argList; argList=0;
+              }
+              if (match) 
+              {
+                //printf("Found match!\n");
+                members.append(md);
+              }
+            }
+          }
+        }
+        if (members.count()!=1 && args && !strcmp(args,"()"))
+        {
+          // no exact match found, but if args="()" an arbitrary 
+          // member will do
+          md=mn->last();
+          while (md && md->isLinkable())
+          {
+            //printf("Found member `%s'\n",md->name().data());
+            //printf("member is linkable md->name()=`%s'\n",md->name().data());
+            fd=md->getFileDef();
+            gd=md->getGroupDef();
+            if (
+                (gd && gd->isLinkable()) || (fd && fd->isLinkable()) 
+               )
+            {
+              members.append(md);
+            }
+            md=mn->prev();
+          }
+        }
+        //printf("found %d candidate members\n",members.count());
+        if (members.count()==1 || currentFile!=0)
+        {
+          md=members.first();
+        }
+        else if (members.count()>1)
+        {
+          //printf("Found more than one matching member!\n");
+          // use some C scoping rules to determine the correct link
+          // 1. member in current file
+          // 2. non-static member in different file
+          if (currentFile==0)
+          {
+            bool ambig;
+            currentFile = findFileDef(Doxygen::inputNameDict,0/*namespaceName*/,ambig);
+          }
+          MemberDef *bmd = 0;
+          for (md=members.first(); md; md=members.next())
+          {
+            if (md->getFileDef() == currentFile)
+            {
+              bmd = 0;
+              break;
+            }
+            if (!(md->isStatic()) || Config_getBool("EXTRACT_STATIC")) bmd = md;     
+          }
+          if (bmd) md=bmd;
+        }
+        if (md && !md->isLinkable()) md=0; // ignore things we cannot link to
+        if (md) // found a matching global member
+        {
+          fd=md->getFileDef();
+          gd=md->getGroupDef();
+          //printf("fd=%p gd=%p gd->isLinkable()=%d\n",fd,gd,gd->isLinkable());
+          if (gd && gd->isLinkable()) fd=0; else gd=0;
+          return TRUE;
+        }
+      }
+  }
+  
+  // no nothing found
+  return FALSE;
+}
+
+/*!
+ * Searches for a scope definition given its name as a string via parameter
+ * `scope'. 
+ *
+ * The parameter `docScope' is a string representing the name of the scope in 
+ * which the `scope' string was found.
+ *
+ * The function returns TRUE if the scope is known and documented or
+ * FALSE if it is not.
+ * If TRUE is returned exactly one of the parameter `cd', `nd' 
+ * will be non-zero:
+ *   - if `cd' is non zero, the scope was a class pointed to by cd.
+ *   - if `nd' is non zero, the scope was a namespace pointed to by nd.
+ */
+bool getScopeDefs(const char *docScope,const char *scope,
+                         ClassDef *&cd, NamespaceDef *&nd)
+{
+  cd=0;nd=0;
+
+  QCString scopeName=scope;
+  //printf("getScopeDefs: docScope=`%s' scope=`%s'\n",docScope,scope);
+  if (scopeName.isEmpty()) return FALSE;
+
+  bool explicitGlobalScope=FALSE;
+  if (scopeName.at(0)==':' && scopeName.at(1)==':')
+  {
+    scopeName=scopeName.right(scopeName.length()-2);  
+    explicitGlobalScope=TRUE;
+  }
+  
+  QCString docScopeName=docScope;
+  int scopeOffset=explicitGlobalScope ? 0 : docScopeName.length();
+
+  do // for each possible docScope (from largest to and including empty)
+  {
+    QCString fullName=scopeName.copy();
+    if (scopeOffset>0) fullName.prepend(docScopeName.left(scopeOffset)+"::");
+    
+    if ((cd=getClass(fullName)) && cd->isLinkable())
+    {
+      return TRUE; // class link written => quit 
+    }
+    else if ((nd=Doxygen::namespaceSDict[fullName]) && nd->isLinkable())
+    {
+      return TRUE; // namespace link written => quit 
+    }
+    if (scopeOffset==0)
+    {
+      scopeOffset=-1;
+    }
+    else if ((scopeOffset=docScopeName.findRev("::",scopeOffset-1))==-1)
+    {
+      scopeOffset=0;
+    }
+  } while (scopeOffset>=0);
+  
+  return FALSE;
+}
+
+static bool isLowerCase(QCString &s)
+{
+  char *p=s.data();
+  int c;
+  while ((c=*p++)) if (!islower(c)) return FALSE;
+  return TRUE; 
+}
+
+
+
+/*! Returns an object to reference to given its name and context 
+ *  @post return value TRUE implies *resContext!=0 or *resMember!=0
+ */
+bool resolveRef(/* in */  const char *scName,
+                /* in */  const char *name,
+                /* in */  bool inSeeBlock,
+                /* out */ Definition **resContext,
+                /* out */ MemberDef  **resMember
+               )
+{
+  //printf("resolveRef(scName=%s,name=%s,inSeeBlock=%d)\n",scName,name,inSeeBlock);
+  
+  QCString tsName = name;
+  bool memberScopeFirst = tsName.find('#')!=-1;
+  QCString fullName = substitute(tsName,"#","::");
+  fullName = removeRedundantWhiteSpace(substitute(fullName,".","::"));
+  
+  int bracePos=fullName.findRev('('); // reverse is needed for operator()(...)
+  int endNamePos=bracePos!=-1 ? bracePos : fullName.length();
+  int scopePos=fullName.findRev("::",endNamePos);
+
+  // default result values
+  *resContext=0;
+  *resMember=0;
+
+  if (bracePos==-1) // simple name
+  {
+    ClassDef *cd=0;
+    NamespaceDef *nd=0;
+
+    if (!inSeeBlock && scopePos==-1 && isLowerCase(tsName))
+    { // link to lower case only name => do not try to autolink 
+      return FALSE;
+    }
+
+    //printf("scName=%s name=%s\n",scName,fullName.data());
+    
+    // check if this is a class or namespace reference
+    if (scName!=fullName && getScopeDefs(scName,fullName,cd,nd))
+    {
+      if (cd) // scope matches that of a class
+      {
+        *resContext = cd;
+      }
+      else // scope matches that of a namespace
+      {
+        ASSERT(nd!=0);
+        *resContext = nd;
+      }
+      return TRUE;
+    }
+    else if (scName==fullName || (!inSeeBlock && scopePos==-1)) // nothing to link => output plain text
+    {
+      return FALSE;
+    }
+    // continue search...
+  }
+  
+  //printf("scopeContext=%s scopeUser=%s\n",scopeContext.data(),scopeUser.data());
+
+  // extract userscope+name
+  QCString nameStr=fullName.left(endNamePos);
+
+  // extract arguments
+  QCString argsStr;
+  if (bracePos!=-1) argsStr=fullName.right(fullName.length()-bracePos);
+  
+  // strip template specifier
+  // TODO: match against the correct partial template instantiation 
+  int templPos=nameStr.find('<');
+  if (templPos!=-1 && nameStr.find("operator")==-1)
+  {
+    int endTemplPos=nameStr.findRev('>');
+    nameStr=nameStr.left(templPos)+nameStr.right(nameStr.length()-endTemplPos-1);
+  }
+
+  QCString scopeStr=scName;
+
+  MemberDef    *md = 0;
+  ClassDef     *cd = 0;
+  FileDef      *fd = 0;
+  NamespaceDef *nd = 0;
+  GroupDef     *gd = 0;
+
+  // check if nameStr is a member or global.
+  //printf("getDefs(scope=%s,name=%s,args=%s)\n",scopeStr.data(),nameStr.data(),argsStr.data());
+  if (getDefs(scopeStr,nameStr,argsStr,
+              md,cd,fd,nd,gd,
+              scopePos==0 && !memberScopeFirst,
+              0,
+              TRUE
+             )
+     )
+  {
+    //printf("after getDefs md=%p cd=%p fd=%p nd=%p gd=%p\n",md,cd,fd,nd,gd);
+    if      (md) { *resMember=md; *resContext=md; }
+    else if (cd) *resContext=cd;
+    else if (nd) *resContext=nd;
+    else if (fd) *resContext=fd;
+    else if (gd) *resContext=gd;
+    else         { *resContext=0; *resMember=0; return FALSE; }
+    //printf("member=%s (md=%p) anchor=%s linkable()=%d context=%s\n",
+    //    md->name().data(),md,md->anchor().data(),md->isLinkable(),(*resContext)->name().data());
+    return TRUE;
+  }
+  else if (inSeeBlock && !nameStr.isEmpty() && (gd=Doxygen::groupSDict[nameStr]))
+  { // group link
+    *resContext=gd;
+    return TRUE;
+  }
+  else if (tsName.find('.')!=-1) // maybe a link to a file
+  {
+    bool ambig;
+    fd=findFileDef(Doxygen::inputNameDict,tsName,ambig);
+    if (fd && !ambig)
+    {
+      *resContext=fd;
+      return TRUE;
+    }
+  }
+
+  return FALSE;
+}
+
+QCString linkToText(const char *link,bool isFileName)
+{
+  QCString result=link;
+  if (!result.isEmpty())
+  {
+    // replace # by ::
+    result=substitute(result,"#","::");
+    // replace . by ::
+    if (!isFileName) result=substitute(result,".","::");
+    // strip leading :: prefix if present
+    if (result.at(0)==':' && result.at(1)==':')
+    {
+      result=result.right(result.length()-2);
+    }
+    if (Config_getBool("OPTIMIZE_OUTPUT_JAVA"))
+    {
+      result=substitute(result,"::",".");
+    }
+  }
+  return result;
+}
+
+/*!
+ * generate a reference to a class, namespace or member.
+ * `scName' is the name of the scope that contains the documentation 
+ * string that is returned.
+ * `name' is the name that we want to link to.
+ * `name' may have five formats:
+ *    1) "ScopeName"
+ *    2) "memberName()"    one of the (overloaded) function or define 
+ *                         with name memberName.
+ *    3) "memberName(...)" a specific (overloaded) function or define 
+ *                         with name memberName
+ *    4) "::name           a global variable or define
+ *    4) "#memberName      member variable, global variable or define
+ *    5) ("ScopeName::")+"memberName()" 
+ *    6) ("ScopeName::")+"memberName(...)" 
+ *    7) ("ScopeName::")+"memberName" 
+ * instead of :: the # symbol may also be used.
+ */
+
+bool generateRef(OutputDocInterface &od,const char *scName,
+                 const char *name,bool inSeeBlock,const char *rt)
+{
+  //printf("generateRef(scName=%s,name=%s,rt=%s)\n",scName,name,rt);
+  
+  Definition *compound;
+  MemberDef *md;
+
+  // create default link text
+  QCString linkText = linkToText(rt,FALSE);
+
+  if (resolveRef(scName,name,inSeeBlock,&compound,&md))
+  {
+    if (md && md->isLinkable()) // link to member
+    {
+      od.writeObjectLink(md->getReference(),
+                         md->getOutputFileBase(),
+                         md->anchor(),linkText);
+      // generate the page reference (for LaTeX)
+      if (!md->isReference())
+      {
+        writePageRef(od,md->getOutputFileBase(),md->anchor());
+      }
+      return TRUE;
+    }
+    else if (compound && compound->isLinkable()) // link to compound
+    {
+      if (rt==0 && compound->definitionType()==Definition::TypeGroup)
+      {
+        linkText=((GroupDef *)compound)->groupTitle();
+      }
+      if (compound && compound->definitionType()==Definition::TypeFile)
+      {
+        linkText=linkToText(rt,TRUE);
+      }
+      od.writeObjectLink(compound->getReference(),
+                         compound->getOutputFileBase(),
+                         0,linkText);
+      if (!compound->isReference())
+      {
+        writePageRef(od,compound->getOutputFileBase(),0);
+      }
+      return TRUE;
+    }
+  }
+  od.docify(linkText);
+  return FALSE;
+}
+
+bool resolveLink(/* in */ const char *scName,
+                 /* in */ const char *lr,
+                 /* in */ bool inSeeBlock,
+                 /* out */ Definition **resContext,
+                 /* out */ QCString &resAnchor
+                )
+{
+  *resContext=0;
+  
+  QCString linkRef=lr;
+  FileDef  *fd;
+  GroupDef *gd;
+  PageDef  *pd;
+  ClassDef *cd;
+  NamespaceDef *nd;
+  bool ambig;
+  if (linkRef.isEmpty()) // no reference name!
+  {
+    return FALSE;
+  }
+  else if ((pd=Doxygen::pageSDict->find(linkRef))) // link to a page
+  {
+    GroupDef *gd = pd->getGroupDef();
+    if (gd)
+    {
+      SectionInfo *si=0;
+      if (!pd->name().isEmpty()) si=Doxygen::sectionDict[pd->name()];
+      *resContext=gd;
+      if (si) resAnchor = si->label;
+    }
+    else
+    {
+      *resContext=pd;
+    }
+    return TRUE;
+  }
+  else if ((pd=Doxygen::exampleSDict->find(linkRef))) // link to an example
+  {
+    *resContext=pd;
+    return TRUE;
+  }
+  else if ((gd=Doxygen::groupSDict[linkRef])) // link to a group
+  {
+    *resContext=gd;
+    return TRUE;
+  }
+  else if ((fd=findFileDef(Doxygen::inputNameDict,linkRef,ambig)) // file link
+      && fd->isLinkable())
+  {
+    *resContext=fd;
+    return TRUE;
+  }
+  else if ((cd=getClass(linkRef)))
+  {
+    *resContext=cd;
+    return TRUE;
+  }
+  else if ((nd=Doxygen::namespaceSDict.find(linkRef)))
+  {
+    *resContext=nd;
+    return TRUE;
+  }
+  else // probably a member reference
+  {
+    MemberDef *md;
+    bool res = resolveRef(scName,lr,inSeeBlock,resContext,&md);
+    if (md) resAnchor=md->anchor();
+    return res;
+  }
+}
+
+
+//----------------------------------------------------------------------
+// General function that generates the HTML code for a reference to some
+// file, class or member from text `lr' within the context of class `clName'. 
+// This link has the text 'lt' (if not 0), otherwise `lr' is used as a
+// basis for the link's text.
+// returns TRUE if a link could be generated.
+
+bool generateLink(OutputDocInterface &od,const char *clName,
+                     const char *lr,bool inSeeBlock,const char *lt)
+{
+  //printf("generateLink(clName=%s,lr=%s,lr=%s)\n",clName,lr,lt);
+  Definition *compound;
+  //PageDef *pageDef=0;
+  QCString anchor,linkText=linkToText(lt,FALSE);
+  //printf("generateLink linkText=%s\n",linkText.data());
+  if (resolveLink(clName,lr,inSeeBlock,&compound,anchor))
+  {
+    if (compound) // link to compound
+    {
+      if (lt==0 && anchor.isEmpty() &&                      /* compound link */
+          compound->definitionType()==Definition::TypeGroup /* is group */ 
+         )
+      {
+        linkText=((GroupDef *)compound)->groupTitle(); // use group's title as link
+      }
+      else if (compound->definitionType()==Definition::TypeFile)
+      {
+        linkText=linkToText(lt,TRUE); 
+      }
+      od.writeObjectLink(compound->getReference(),
+                         compound->getOutputFileBase(),anchor,linkText);
+      if (!compound->isReference())
+      {
+        writePageRef(od,compound->getOutputFileBase(),anchor);
+      }
+    }
+    else
+    {
+      err("%s:%d: Internal error: resolveLink successful but no compound found!\n",__FILE__,__LINE__);
+    }
+    return TRUE;
+  }
+  else // link could not be found
+  {
+    od.docify(linkText);
+    return FALSE;
+  }
+}
+
+void generateFileRef(OutputDocInterface &od,const char *name,const char *text)
+{
+  //printf("generateFileRef(%s,%s)\n",name,text);
+  QCString linkText = text ? text : name;
+  //FileInfo *fi;
+  FileDef *fd;
+  bool ambig;
+  if ((fd=findFileDef(Doxygen::inputNameDict,name,ambig)) && 
+      fd->isLinkable()) 
+    // link to documented input file
+    od.writeObjectLink(fd->getReference(),fd->getOutputFileBase(),0,linkText);
+  else
+    od.docify(linkText); 
+}
+
+//----------------------------------------------------------------------
+
+#if 0
+QCString substituteClassNames(const QCString &s)
+{
+  int i=0,l,p;
+  QCString result;
+  if (s.isEmpty()) return result;
+  QRegExp r("[a-z_A-Z][a-z_A-Z0-9]*");
+  while ((p=r.match(s,i,&l))!=-1)
+  {
+    QCString *subst;
+    if (p>i) result+=s.mid(i,p-i);
+    if ((subst=substituteDict[s.mid(p,l)]))
+    {
+      result+=*subst;
+    }
+    else
+    {
+      result+=s.mid(p,l);
+    }
+    i=p+l;
+  }
+  result+=s.mid(i,s.length()-i);
+  return result;
+}
+#endif
+
+//----------------------------------------------------------------------
+// substitute all occurences of `src' in `s' by `dst'
+
+QCString substitute(const char *s,const char *src,const char *dst)
+{
+  // TODO: optimize by using strstr() instead of find
+  QCString input=s;
+  QCString output;
+  int i=0,p;
+  while ((p=input.find(src,i))!=-1)
+  {
+    output+=input.mid(i,p-i);
+    output+=dst;
+    i=p+strlen(src);
+  }
+  output+=input.mid(i,input.length()-i);
+  return output;
+}
+
+//----------------------------------------------------------------------
+
+FileDef *findFileDef(const FileNameDict *fnDict,const char *n,bool &ambig)
+{
+  ambig=FALSE;
+  QCString name=convertToQCString(QDir::cleanDirPath(n));
+  QCString path;
+  if (name.isEmpty()) return 0;
+  int slashPos=QMAX(name.findRev('/'),name.findRev('\\'));
+  if (slashPos!=-1)
+  {
+    path=name.left(slashPos+1);
+    name=name.right(name.length()-slashPos-1); 
+  }
+  //printf("findFileDef path=`%s' name=`%s'\n",path.data(),name.data());
+  if (name.isEmpty()) return 0;
+  FileName *fn;
+  if ((fn=(*fnDict)[name]))
+  {
+    if (fn->count()==1)
+    {
+      FileDef *fd = fn->getFirst();
+      if (path.isEmpty() || fd->getPath().right(path.length())==path)
+      {
+        return fd;
+      }
+    }
+    else // file name alone is ambigious
+    {
+      int count=0;
+      FileNameIterator fni(*fn);
+      FileDef *fd;
+      FileDef *lastMatch=0;
+      for (fni.toFirst();(fd=fni.current());++fni)
+      {
+        if (path.isEmpty() || fd->getPath().right(path.length())==path) 
+        { 
+          count++; 
+          lastMatch=fd; 
+        }
+      }
+      ambig=(count>1);
+      return lastMatch;
+    }
+  }
+  return 0;
+}
+
+//----------------------------------------------------------------------
+
+QCString showFileDefMatches(const FileNameDict *fnDict,const char *n)
+{
+  QCString result;
+  QCString name=n;
+  QCString path;
+  int slashPos=QMAX(name.findRev('/'),name.findRev('\\'));
+  if (slashPos!=-1)
+  {
+    path=name.left(slashPos+1);
+    name=name.right(name.length()-slashPos-1); 
+  }
+  FileName *fn;
+  if ((fn=(*fnDict)[name]))
+  {
+    FileNameIterator fni(*fn);
+    FileDef *fd;
+    for (fni.toFirst();(fd=fni.current());++fni)
+    {
+      if (path.isEmpty() || fd->getPath().right(path.length())==path)
+      {
+        result+="   "+fd->absFilePath()+"\n";
+      }
+    }
+  }
+  return result;
+}
+
+//----------------------------------------------------------------------
+
+QCString substituteKeywords(const QCString &s,const char *title,const QCString &relPath)
+{
+  QCString result = s.copy();
+  if (title) result = substitute(result,"$title",title);
+  result = substitute(result,"$datetime",dateToString(TRUE));
+  result = substitute(result,"$date",dateToString(FALSE));
+  result = substitute(result,"$year",yearToString());
+  result = substitute(result,"$doxygenversion",versionString);
+  result = substitute(result,"$projectname",Config_getString("PROJECT_NAME"));
+  result = substitute(result,"$projectnumber",Config_getString("PROJECT_NUMBER"));
+  result = substitute(result,"$relpath$",relPath);
+  return result;
+}
+    
+//----------------------------------------------------------------------
+
+/*! Returns the character index within \a name of the first prefix
+ *  in Config_getList("IGNORE_PREFIX") that matches \a name at the left hand side,
+ *  or zero if no match was found
+ */ 
+int getPrefixIndex(const QCString &name)
+{
+  if (name.isEmpty()) return 0;
+  QStrList &sl = Config_getList("IGNORE_PREFIX");
+  char *s = sl.first();
+  while (s)
+  {
+    const char *ps=s;
+    const char *pd=name.data();
+    int i=0;
+    while (*ps!=0 && *pd!=0 && *ps==*pd) ps++,pd++,i++;
+    if (*ps==0 && *pd!=0)
+    {
+      return i;
+    }
+    s = sl.next();
+  }
+  return 0;
+}
+
+//----------------------------------------------------------------------------
+
+static void initBaseClassHierarchy(BaseClassList *bcl)
+{
+  BaseClassListIterator bcli(*bcl);
+  for ( ; bcli.current(); ++bcli)
+  {
+    ClassDef *cd=bcli.current()->classDef;
+    if (cd->baseClasses()->count()==0) // no base classes => new root
+    {
+      initBaseClassHierarchy(cd->baseClasses());
+    }
+    cd->visited=FALSE;
+  }
+}
+
+//----------------------------------------------------------------------------
+
+void initClassHierarchy(ClassSDict *cl)
+{
+  ClassSDict::Iterator cli(*cl);
+  ClassDef *cd;
+  for ( ; (cd=cli.current()); ++cli)
+  {
+    cd->visited=FALSE;
+    initBaseClassHierarchy(cd->baseClasses());
+  }
+}
+
+//----------------------------------------------------------------------------
+
+bool hasVisibleRoot(BaseClassList *bcl)
+{
+  BaseClassListIterator bcli(*bcl);
+  for ( ; bcli.current(); ++bcli)
+  {
+    ClassDef *cd=bcli.current()->classDef;
+    if (cd->isVisibleInHierarchy()) return TRUE;
+    hasVisibleRoot(cd->baseClasses());
+  }
+  return FALSE;
+}
+
+//----------------------------------------------------------------------
+
+QCString escapeCharsInString(const char *name,bool allowDots)
+{
+  static bool caseSenseNames = Config_getBool("CASE_SENSE_NAMES");
+  QCString result;
+  char c;
+  const char *p=name;
+  while ((c=*p++)!=0)
+  {
+    switch(c)
+    {
+      case '_': result+="__"; break;
+      case '-': result+="-";  break;
+      case ':': result+="_1"; break;
+      case '/': result+="_2"; break;
+      case '<': result+="_3"; break;
+      case '>': result+="_4"; break;
+      case '*': result+="_5"; break;
+      case '&': result+="_6"; break;
+      case '|': result+="_7"; break;
+      case '.': if (allowDots) result+="."; else result+="_8"; break;
+      case '!': result+="_9"; break;
+      case ',': result+="_00"; break;
+      case ' ': result+="_01"; break;
+      default: 
+        if (caseSenseNames || !isupper(c))
+        {
+          result+=c;
+        }
+        else
+        {
+          result+="_";
+          result+=tolower(c); 
+        }
+        break;
+    }
+  }
+  return result;
+}
+
+/*! This function determines the file name on disk of an item
+ *  given its name, which could be a class name with template 
+ *  arguments, so special characters need to be escaped.
+ */
+QCString convertNameToFile(const char *name,bool allowDots)
+{
+  static bool shortNames = Config_getBool("SHORT_NAMES");
+  static bool createSubdirs = Config_getBool("CREATE_SUBDIRS");
+  QCString result;
+  if (shortNames)
+  {
+    static QDict<void> usedNames(10007);
+    static int count=1;
+
+    void *value=usedNames.find(name);
+    int num;
+    if (value==0)
+    {
+      usedNames.insert(name,(void *)count);
+      num = count++;
+    }
+    else
+    {
+      num = *(int*)&value;
+    }
+    result.sprintf("a%05d",num); 
+  }
+  else // long names
+  {
+    result=escapeCharsInString(name,allowDots);
+  }
+  if (createSubdirs)
+  {
+    int l1Dir=0,l2Dir=0;
+
+#if MAP_ALGO==ALGO_COUNT 
+    // old algorithm, has the problem that after regeneration the
+    // output can be located in a different dir.
+    if (Doxygen::htmlDirMap==0) 
+    {
+      Doxygen::htmlDirMap=new QDict<int>(100003);
+      Doxygen::htmlDirMap->setAutoDelete(TRUE);
+    }
+    static int curDirNum=0;
+    int *dirNum = Doxygen::htmlDirMap->find(result);
+    if (dirNum==0) // new name
+    {
+      Doxygen::htmlDirMap->insert(result,new int(curDirNum)); 
+      l1Dir = (curDirNum)&0xf;    // bits 0-3
+      l2Dir = (curDirNum>>4)&0xff; // bits 4-11
+      curDirNum++;
+    }
+    else // existing name
+    {
+      l1Dir = (*dirNum)&0xf;       // bits 0-3
+      l2Dir = ((*dirNum)>>4)&0xff; // bits 4-11
+    }
+#elif MAP_ALGO==ALGO_CRC16
+    // second algorithm based on CRC-16 checksum
+    int dirNum = qChecksum(result,result.length());
+    l1Dir = dirNum&0xf;
+    l2Dir = (dirNum>>4)&0xff;
+#elif MAP_ALGO==ALGO_MD5
+    // third algorithm based on MD5 hash
+    uchar md5_sig[16];
+    MD5Buffer((const unsigned char *)result.data(),result.length(),md5_sig);
+    l1Dir = md5_sig[14]&0xf;
+    l2Dir = md5_sig[15];
+#endif
+    result.prepend(QCString().sprintf("d%x/d%02x/",l1Dir,l2Dir));
+  }
+  return result;
+}
+
+QCString relativePathToRoot(const char *name)
+{
+  QCString result;
+  if (Config_getBool("CREATE_SUBDIRS"))
+  {
+    if (name==0)
+    {
+      return REL_PATH_TO_ROOT;
+    }
+    else
+    {
+      QCString n = name;
+      int i = n.findRev('/');
+      if (i!=-1)
+      {
+        result=REL_PATH_TO_ROOT;
+      }
+    }
+  }
+  return result;
+}
+
+void createSubDirs(QDir &d)
+{
+  if (Config_getBool("CREATE_SUBDIRS"))
+  {
+    // create 4096 subdirectories
+    int l1,l2;
+    for (l1=0;l1<16;l1++)
+    {
+      d.mkdir(QString().sprintf("d%x",l1));
+      for (l2=0;l2<256;l2++)
+      {
+        d.mkdir(QString().sprintf("d%x/d%02x",l1,l2));
+      }
+    }
+  }
+}
+
+/*! Input is a scopeName, output is the scopename split into a
+ *  namespace part (as large as possible) and a classname part.
+ */
+void extractNamespaceName(const QCString &scopeName,
+                          QCString &className,QCString &namespaceName,
+                          bool allowEmptyClass)
+{
+  int i,p;
+  QCString clName=scopeName;
+  NamespaceDef *nd = 0;
+  if (!clName.isEmpty() && (nd=getResolvedNamespace(clName)) && getClass(clName)==0)
+  { // the whole name is a namespace (and not a class)
+    namespaceName=nd->name().copy();
+    className.resize(0);
+    goto done;
+  }
+  p=clName.length()-2;
+  while (p>=0 && (i=clName.findRev("::",p))!=-1) 
+    // see if the first part is a namespace (and not a class)
+  {
+    //printf("Trying %s\n",clName.left(i).data());
+    if (i>0 && (nd=getResolvedNamespace(clName.left(i))) && getClass(clName.left(i))==0)
+    {
+      //printf("found!\n");
+      namespaceName=nd->name().copy();
+      className=clName.right(clName.length()-i-2);
+      goto done;
+    } 
+    p=i-2; // try a smaller piece of the scope
+  }
+  //printf("not found!\n");
+
+  // not found, so we just have to guess.
+  className=scopeName.copy();
+  namespaceName.resize(0);
+
+done:
+  if (className.isEmpty() && !namespaceName.isEmpty() && !allowEmptyClass)
+  {
+    // class and namespace with the same name, correct to return the class.
+    className=namespaceName.copy();
+    namespaceName.resize(0);
+  }
+  //printf("extractNamespace `%s' => `%s|%s'\n",scopeName.data(),
+  //       className.data(),namespaceName.data());
+  return;
+}
+
+QCString insertTemplateSpecifierInScope(const QCString &scope,const QCString &templ)
+{
+  QCString result=scope.copy();
+  if (!templ.isEmpty() && scope.find('<')==-1)
+  {
+    int si,pi=0;
+    ClassDef *cd=0;
+    while (
+            (si=scope.find("::",pi))!=-1 && !getClass(scope.left(si)+templ) && 
+            ((cd=getClass(scope.left(si)))==0 || cd->templateArguments()==0) 
+          ) 
+    { 
+      //printf("Tried `%s'\n",(scope.left(si)+templ).data()); 
+      pi=si+2; 
+    }
+    if (si==-1) // not nested => append template specifier
+    {
+      result+=templ; 
+    }
+    else // nested => insert template specifier before after first class name
+    {
+      result=scope.left(si) + templ + scope.right(scope.length()-si);
+    }
+  }
+  //printf("insertTemplateSpecifierInScope(`%s',`%s')=%s\n",
+  //    scope.data(),templ.data(),result.data());
+  return result;
+}
+
+/*! Strips the scope from a name. Examples: A::B will return A
+ *  and A<T>::B<N::C<D> > will return A<T>.
+ *  \todo deal with cases like A< s<<2 >::B
+ */
+QCString stripScope(const char *name)
+{
+  QCString result = name;
+  int l=result.length();
+  int p=l-1;
+  bool done;
+  int count;
+
+  while (p>=0)
+  {
+    char c=result.at(p);
+    switch (c)
+    {
+      case ':': 
+        //printf("stripScope(%s)=%s\n",name,result.right(l-p-1).data());
+        return result.right(l-p-1);
+      case '>':
+        count=1;
+        done=FALSE;
+        //printf("pos < = %d\n",p);
+        p--;
+        while (p>=0 && !done)
+        {
+          c=result.at(p--);
+          switch (c)
+          {
+            case '>': count++; break;
+            case '<': count--; if (count<=0) done=TRUE; break;
+            default: 
+              //printf("c=%c count=%d\n",c,count);
+              break;
+          }
+        }
+        //printf("pos > = %d\n",p+1);
+        break;
+      default:
+        p--;
+    }
+  }
+  //printf("stripScope(%s)=%s\n",name,name);
+  return name;
+  
+}
+
+/*! Convert nibble (range 0..15) to hex char */
+//static char nibbleToHex(int n)
+//{
+//  return (n < 10) ? ('0'+n) : ('a'+n-10);
+//}
+
+/*! Converts a string to an XML-encoded string */
+QCString convertToXML(const char *s)
+{
+  QCString result;
+  if (s==0) return result;
+  const char *p=s;
+  char c;
+  while ((c=*p++))
+  {
+    switch (c)
+    {
+      case '<':  result+="&lt;";   break;
+      case '>':  result+="&gt;";   break;
+      case '&':  result+="&amp;";  break;
+      case '\'': result+="&apos;"; break; 
+      case '"':  result+="&quot;"; break;
+      default:   
+        //if (c<0) 
+        //{       <- this doesn't work for languages that use
+        //           characters with codes beyond 255
+        //  result+=(QCString)"&#x" + 
+        //          nibbleToHex((((uchar)c)>>4)&0xf)+
+        //          nibbleToHex(c&0xf)+";";
+        //}
+        //else 
+        //{
+          result+=c;        
+        //}
+        break;
+    }
+  }
+  return result;
+}
+
+/*! Converts a string to a HTML-encoded string */
+QCString convertToHtml(const char *s)
+{
+  return convertToXML(s);
+}
+
+/*! Returns the standard string that is generated when the \\overload
+ * command is used.
+ */
+const char *getOverloadDocs()
+{
+  return "This is an overloaded member function, "
+         "provided for convenience. It differs from the above "
+         "function only in what argument(s) it accepts.";
+}
+      
+void addMembersToMemberGroup(MemberList *ml,
+                             MemberGroupSDict *memberGroupSDict,
+                             Definition *context)
+{
+  ASSERT(context!=0);
+  //printf("addMemberToMemberGroup()\n");
+  MemberListIterator mli(*ml);
+  MemberDef *md;
+  uint index;
+  for (index=0;(md=mli.current());)
+  {
+    if (md->isEnumerate()) // insert enum value of this enum into groups
+    {
+      QList<MemberDef> *fmdl=md->enumFieldList();
+      if (fmdl)
+      {
+        MemberDef *fmd=fmdl->first();
+        while (fmd)
+        {
+          int groupId=fmd->getMemberGroupId();
+          if (groupId!=-1)
+          {
+            MemberGroupInfo *info = Doxygen::memGrpInfoDict[groupId];
+            //QCString *pGrpHeader = Doxygen::memberHeaderDict[groupId];
+            //QCString *pDocs      = Doxygen::memberDocDict[groupId];
+            if (info)
+            {
+              MemberGroup *mg = memberGroupSDict->find(groupId);
+              if (mg==0)
+              {
+                mg = new MemberGroup(
+                       context,
+                       groupId,
+                       info->header,
+                       info->doc,
+                       info->docFile
+                      );
+                memberGroupSDict->append(groupId,mg);
+              }
+              mg->insertMember(fmd); // insert in member group
+              fmd->setMemberGroup(mg);
+            }
+          }
+          fmd=fmdl->next();
+        }
+      }
+    }
+    int groupId=md->getMemberGroupId();
+    if (groupId!=-1)
+    {
+      MemberGroupInfo *info = Doxygen::memGrpInfoDict[groupId];
+      //QCString *pGrpHeader = Doxygen::memberHeaderDict[groupId];
+      //QCString *pDocs      = Doxygen::memberDocDict[groupId];
+      if (info)
+      {
+        MemberGroup *mg = memberGroupSDict->find(groupId);
+        if (mg==0)
+        {
+          mg = new MemberGroup(
+                  context,
+                  groupId,
+                  info->header,
+                  info->doc,
+                  info->docFile
+                 );
+          memberGroupSDict->append(groupId,mg);
+        }
+        md = ml->take(index); // remove from member list
+        mg->insertMember(md); // insert in member group
+        md->setMemberGroup(mg);
+        continue;
+      }
+    }
+    ++mli;++index;
+  }
+}
+
+/*! Extracts a (sub-)string from \a type starting at \a pos that
+ *  could form a class. When TRUE is returned the result is the 
+ *  class \a name and a template argument list \a templSpec.
+ */
+bool extractClassNameFromType(const QCString &type,int &pos,QCString &name,QCString &templSpec)
+{
+  static const QRegExp re("[a-z_A-Z][a-z_A-Z0-9:]*");
+  name.resize(0);
+  templSpec.resize(0);
+  int i,l;
+  int typeLen=type.length();
+  if (typeLen>0)
+  {
+    if ((i=re.match(type,pos,&l))!=-1) // for each class name in the type
+    {
+      int ts=i+l;
+      int te=ts;
+      int tl=0;
+      while (type.at(ts)==' ' && ts<typeLen) ts++,tl++; // skip any whitespace
+      if (type.at(ts)=='<') // assume template instance
+      {
+        // locate end of template
+        te=ts+1;
+        int brCount=1;
+        while (te<typeLen && brCount!=0)
+        {
+          if (type.at(te)=='<') 
+          {
+            if (te<typeLen-1 && type.at(te+1)=='<') te++; else brCount++;
+          }
+          if (type.at(te)=='>') 
+          {
+            if (te<typeLen-1 && type.at(te+1)=='>') te++; else brCount--;
+          }
+          te++;
+        }
+      }
+      if (te>ts) templSpec = type.mid(ts,te-ts),tl+=te-ts;
+      name = type.mid(i,l);
+      pos=i+l+tl;
+      //printf("extractClassNameFromType([in] type=%s,[out] pos=%d,[out] name=%s,[out] templ=%s)=TRUE\n",
+      //    type.data(),pos,name.data(),templSpec.data());
+      return TRUE;
+    }
+  }
+  //printf("extractClassNameFromType([in] type=%s,[out] pos=%d,[out] name=%s,[out] templ=%s)=FALSE\n",
+  //       type.data(),pos,name.data(),templSpec.data());
+  return FALSE;
+}
+
+/*! Substitutes any occurrence of a formal argument from argument list
+ *  \a formalArgs in \a name by the corresponding actual argument in
+ *  argument list \a actualArgs. The result after substitution
+ *  is returned as a string. The argument \a name is used to
+ *  prevent recursive substitution.
+ */
+QCString substituteTemplateArgumentsInString(
+       const QCString &name,
+       ArgumentList *formalArgs,
+       ArgumentList *actualArgs)
+{
+  //printf("substituteTemplateArgumentsInString(name=%s formal=%s actualArg=%s)\n",
+  //    name.data(),argListToString(formalArgs).data(),argListToString(actualArgs).data());
+  if (formalArgs==0) return name;
+  QCString result;
+  static QRegExp re("[a-z_A-Z][a-z_A-Z0-9]*");
+  int p=0,l,i;
+  // for each identifier in the base class name (e.g. B<T> -> B and T)
+  while ((i=re.match(name,p,&l))!=-1)
+  {
+    result += name.mid(p,i-p);
+    QCString n = name.mid(i,l);
+    ArgumentListIterator formAli(*formalArgs);
+    Argument *formArg;
+    Argument *actArg=actualArgs->first();
+
+    // if n is a template argument, then we substitute it
+    // for its template instance argument.
+    bool found=FALSE;
+    for (formAli.toFirst();
+        (formArg=formAli.current()) && !found;
+        ++formAli,actArg=actualArgs->next()
+        )
+    {
+      //printf("n=%s formArg->type=%s formArg->name=%s\n",
+      //    n.data(),formArg->type.data(),formArg->name.data());
+      if (formArg->type=="class" || formArg->type=="typename")
+      {
+        if (formArg->name==n && actArg && !actArg->type.isEmpty()) // base class is a template argument
+        {
+          // replace formal argument with the actual argument of the instance
+          result += actArg->type+" "; 
+          found=TRUE;
+        }
+        else if (formArg->name==n && actArg==0 && !formArg->defval.isEmpty() &&
+                 formArg->defval!=name /* to prevent recursion */
+                )
+        {
+          result += substituteTemplateArgumentsInString(formArg->defval,formalArgs,actualArgs)+" ";
+          found=TRUE;
+        }
+      }
+    }
+    if (!found) result += n;
+    p=i+l;
+  }
+  result+=name.right(name.length()-p);
+  //printf("      Inheritance relation %s -> %s\n",
+  //    name.data(),result.data());
+  return result;
+}
+
+
+/*! Makes a deep copy of argument list \a src. Will allocate memory, that
+ *  is owned by the caller. 
+ */
+ArgumentList *copyArgumentList(const ArgumentList *src)
+{
+  ASSERT(src!=0);
+  ArgumentList *dst = new ArgumentList;
+  dst->setAutoDelete(TRUE);
+  ArgumentListIterator tali(*src);
+  Argument *a;
+  for (;(a=tali.current());++tali)
+  {
+    dst->append(new Argument(*a));
+  }
+  dst->constSpecifier    = src->constSpecifier;
+  dst->volatileSpecifier = src->volatileSpecifier;
+  dst->pureSpecifier     = src->pureSpecifier;
+  return dst;
+}
+
+/*! Makes a deep copy of the list of argument lists \a srcLists. 
+ *  Will allocate memory, that is owned by the caller.
+ */
+QList<ArgumentList> *copyArgumentLists(const QList<ArgumentList> *srcLists)
+{
+  ASSERT(srcLists!=0);
+  QList<ArgumentList> *dstLists = new QList<ArgumentList>;
+  dstLists->setAutoDelete(TRUE);
+  QListIterator<ArgumentList> sli(*srcLists);
+  ArgumentList *sl;
+  for (;(sl=sli.current());++sli)
+  {
+    dstLists->append(copyArgumentList(sl));
+  }
+  return dstLists;
+}
+
+/*! Strips template specifiers from scope \a fullName, except those 
+ *  that make up specialized classes. The switch \a parentOnly 
+ *  determines whether or not a template "at the end" of a scope 
+ *  should be considered, e.g. with \a parentOnly is \c TRUE, A<T>::B<S> will 
+ *  try to strip \<T\> and not \<S\>, while \a parentOnly is \c FALSE will 
+ *  strip both unless A<T> or B<S> are specialized template classes. 
+ */
+QCString stripTemplateSpecifiersFromScope(const QCString &fullName,
+                                          bool parentOnly)
+{
+  QCString result;
+  int p=0;
+  int l=fullName.length();
+  int i=fullName.find('<');
+  while (i!=-1)
+  {
+    //printf("1:result+=%s\n",fullName.mid(p,i-p).data());
+    int e=i+1;
+    bool done=FALSE;
+    int count=1;
+    while (e<l && !done)
+    {
+      char c=fullName.at(e++);
+      if (c=='<') 
+      {
+        count++;
+      }
+      else if (c=='>') 
+      {
+        count--;
+        done = count==0;
+      }
+    }
+    int si= fullName.find("::",e);
+
+    if (parentOnly && si==-1) break; 
+       // we only do the parent scope, so we stop here if needed
+
+    result+=fullName.mid(p,i-p);
+    //printf("  trying %s\n",(result+fullName.mid(i,e-i)).data());
+    if (getClass(result+fullName.mid(i,e-i))!=0) 
+    {
+      result+=fullName.mid(i,e-i);
+      //printf("2:result+=%s\n",fullName.mid(i,e-i-1).data());
+    }
+    p=e;
+    i=fullName.find('<',p);
+  }
+  result+=fullName.right(l-p);
+  //printf("3:result+=%s\n",fullName.right(l-p).data());
+  return result;
+}
+
+/*! Merges two scope parts together. The parts may (partially) overlap.
+ *  Example1: \c A::B and \c B::C will result in \c A::B::C <br>
+ *  Example2: \c A and \c B will be \c A::B <br>
+ *  Example3: \c A::B and B will be \c A::B
+ *  
+ *  @param leftScope the left hand part of the scope.
+ *  @param rightScope the right hand part of the scope.
+ *  @returns the merged scope. 
+ */
+QCString mergeScopes(const QCString &leftScope,const QCString &rightScope)
+{
+  // case leftScope=="A" rightScope=="A::B" => result = "A::B"
+  if (leftScopeMatch(rightScope,leftScope)) return rightScope;
+  QCString result;
+  int i=0,p=leftScope.length();
+
+  // case leftScope=="A::B" rightScope=="B::C" => result = "A::B::C"
+  // case leftScope=="A::B" rightScope=="B" => result = "A::B"
+  bool found=FALSE;
+  while ((i=leftScope.findRev("::",p))!=-1)
+  {
+    if (leftScopeMatch(rightScope,leftScope.right(leftScope.length()-i-2)))
+    {
+      result = leftScope.left(i+2)+rightScope;
+      found=TRUE;
+    }
+    p=i-1;
+  }
+  if (found) return result;
+
+  // case leftScope=="A" rightScope=="B" => result = "A::B"
+  result=leftScope.copy();
+  if (!result.isEmpty() && !rightScope.isEmpty()) result+="::";
+  result+=rightScope;
+  return result;
+}
+
+/*! Returns a fragment from scope \a s, starting at position \a p.
+ *
+ *  @param s the scope name as a string.
+ *  @param p the start position (0 is the first).
+ *  @param l the resulting length of the fragment.
+ *  @returns the location of the fragment, or -1 if non is found.
+ */
+int getScopeFragment(const QCString &s,int p,int *l)
+{
+  int sl=s.length();
+  int sp=p;
+  int count=0;
+  bool done;
+  if (sp>=sl) return -1;
+  while (sp<sl)
+  {
+    char c=s.at(sp);
+    if (c==':') sp++,p++; else break;
+  }
+  while (sp<sl)
+  {
+    char c=s.at(sp);
+    switch (c)
+    {
+      case ':': // found next part
+        goto found;
+      case '<': // skip template specifier
+        count=1;sp++;
+        done=FALSE;
+        while (sp<sl && !done)
+        {
+          // TODO: deal with << and >> operators!
+          char c=s.at(sp++);
+          switch(c)
+          {
+            case '<': count++; break;
+            case '>': count--; if (count==0) done=TRUE; break;
+            default: break;
+          }
+        }
+        break;
+      default:
+        sp++;
+        break;
+    }
+  }
+found:
+  *l=sp-p;
+  //printf("getScopeFragment(%s,%d)=%s\n",s.data(),p,s.mid(p,*l).data());
+  return p;
+}
+
+//----------------------------------------------------------------------------
+
+PageDef *addRelatedPage(const char *name,const QCString &ptitle,
+                           const QCString &doc,
+                           QList<SectionInfo> * /*anchors*/,
+                           const char *fileName,int startLine,
+                           const QList<ListItemInfo> *sli,
+                           GroupDef *gd,
+                           TagInfo *tagInfo
+                          )
+{
+  PageDef *pd=0;
+  //printf("addRelatedPage(name=%s gd=%p)\n",name,gd);
+  if ((pd=Doxygen::pageSDict->find(name)) && !tagInfo)
+  {
+    // append documentation block to the page.
+    pd->setDocumentation(pd->documentation()+"\n\n"+doc,fileName,startLine);
+    //printf("Adding page docs `%s' pi=%p name=%s\n",doc.data(),pi,name);
+  }
+  else // new page
+  {
+    QCString baseName=name;
+    if (baseName.right(4)==".tex") 
+      baseName=baseName.left(baseName.length()-4);
+    else if (baseName.right(Doxygen::htmlFileExtension.length())==Doxygen::htmlFileExtension)
+      baseName=baseName.left(baseName.length()-Doxygen::htmlFileExtension.length());
+    
+    QCString title=ptitle.stripWhiteSpace();
+    pd=new PageDef(fileName,startLine,baseName,doc,title);
+
+    pd->setRefItems(sli);
+
+    if (tagInfo)
+    {
+      pd->setReference(tagInfo->tagName);
+    }
+
+    QCString pageName;
+    if (Config_getBool("CASE_SENSE_NAMES"))
+      pageName=pd->name();
+    else
+      pageName=pd->name().lower();
+    pd->setFileName(pageName);
+
+    //printf("Appending page `%s'\n",baseName.data());
+    Doxygen::pageSDict->append(baseName,pd);
+
+    if (gd) gd->addPage(pd);
+    
+    if (!pd->title().isEmpty())
+    {
+      //outputList->writeTitle(pi->name,pi->title);
+
+      // a page name is a label as well!
+      QCString file;
+      if (gd)
+      {
+        file=gd->getOutputFileBase();
+      }
+      else if (pd->getGroupDef())
+      {
+        file=pd->getGroupDef()->getOutputFileBase().copy();
+      }
+      else
+      {
+        file=pageName;
+      }
+      SectionInfo *si=new SectionInfo(
+          file,pd->name(),pd->title(),SectionInfo::Page,pd->getReference());
+      //printf("si->label=`%s' si->definition=%s si->fileName=`%s'\n",
+      //      si->label.data(),si->definition?si->definition->name().data():"<none>",
+      //      si->fileName.data());
+      //printf("  SectionInfo: sec=%p sec->fileName=%s\n",si,si->fileName.data());
+      //printf("Adding section key=%s si->fileName=%s\n",pageName.data(),si->fileName.data());
+      Doxygen::sectionDict.insert(pageName,si);
+    }
+  }
+  return pd;
+}
+
+//----------------------------------------------------------------------------
+
+void addRefItem(const QList<ListItemInfo> *sli,
+                const char *prefix,
+                const char *name,const char *title,const char *args)
+{
+  //printf("addRefItem(%s,%s,%s,%s)\n",prefix,name,title,args);
+  if (sli)
+  {
+    QListIterator<ListItemInfo> slii(*sli);
+    ListItemInfo *lii;
+    for (slii.toFirst();(lii=slii.current());++slii)
+    {
+      RefList *refList = Doxygen::xrefLists->find(lii->type);
+      if (refList && 
+          (
+           // either not a built-in list or the list is enabled
+           (lii->type!="todo"       || Config_getBool("GENERATE_TODOLIST")) && 
+           (lii->type!="test"       || Config_getBool("GENERATE_TESTLIST")) && 
+           (lii->type!="bug"        || Config_getBool("GENERATE_BUGLIST"))  && 
+           (lii->type!="deprecated" || Config_getBool("GENERATE_DEPRECATEDLIST"))
+          ) 
+         )
+      {
+        RefItem *item = refList->getRefItem(lii->itemId);
+        ASSERT(item!=0);
+        if (item->written) return;
+        //printf("anchor=%s\n",item->listAnchor.data());
+
+        QCString doc(1000);
+        doc =  "\\anchor ";
+        doc += item->listAnchor;
+        doc += " <dl><dt>";
+        doc += prefix;
+        doc += " \\_internalref ";
+        doc += name;
+        doc += " \"";
+        doc += title;
+        doc += "\"";
+        if (args) doc += args;
+        doc += "</dt>\n<dd>";
+        doc += item->text;
+        doc += "</dd></dl>\n";
+        addRelatedPage(refList->listName(),refList->pageTitle(),doc,0,refList->listName(),1,0,0,0);
+        item->written=TRUE;
+      }
+    }
+  }
+}
+
+void addGroupListToTitle(OutputList &ol,Definition *d)
+{
+  if (d->partOfGroups()) // write list of group to which this definition belongs
+  {
+    ol.pushGeneratorState();
+    ol.disableAllBut(OutputGenerator::Html);
+    ol.lineBreak();
+    ol.startSmall();
+    ol.docify("[");
+    GroupListIterator gli(*d->partOfGroups());
+    GroupDef *gd;
+    bool first=TRUE;
+    for (gli.toFirst();(gd=gli.current());++gli)
+    {
+      if (!first) { ol.docify(","); ol.writeNonBreakableSpace(1); } else first=FALSE; 
+      ol.writeObjectLink(gd->getReference(),
+                         gd->getOutputFileBase(),0,gd->groupTitle());
+    }
+    ol.docify("]");
+    ol.endSmall();
+    ol.popGeneratorState();
+  }
+}
+
+/*!
+ * Function converts Latin1 character to latex string representin the same
+ * character.
+ */
+static void latin1ToLatex(QTextStream &t,unsigned char c)
+{
+  switch (c)
+  {
+    // the Latin-1 characters
+    case 161: t << "!`";            break;
+    case 181: t << "$\\mu$";        break;
+    case 191: t << "?`";            break;
+    case 192: t << "\\`{A}";        break;
+    case 193: t << "\\'{A}";        break;
+    case 194: t << "\\^{A}";        break;
+    case 195: t << "\\~{A}";        break;
+    case 196: t << "\\\"{A}";       break;
+    case 197: t << "\\AA{}";        break;
+    case 198: t << "\\AE{}";        break;
+    case 199: t << "\\c{C}";        break;
+    case 200: t << "\\`{E}";        break;
+    case 201: t << "\\'{E}";        break;
+    case 202: t << "\\^{E}";        break;
+    case 203: t << "\\\"{E}";       break;
+    case 204: t << "\\`{I}";        break;
+    case 205: t << "\\'{I}";        break;
+    case 206: t << "\\^{I}";        break;
+    case 207: t << "\\\"{I}";       break;
+    case 208: t << "D ";            break; // anyone know the real code?
+    case 209: t << "\\~{N}";        break;
+    case 210: t << "\\`{O}";        break;
+    case 211: t << "\\'{O}";        break;
+    case 212: t << "\\^{O}";        break;
+    case 213: t << "\\~{O}";        break;
+    case 214: t << "\\\"{O}";       break;
+    case 215: t << "$\\times$";     break;
+    case 216: t << "\\O";           break;
+    case 217: t << "\\`{U}";        break;
+    case 218: t << "\\'{U}";        break;
+    case 219: t << "\\^{U}";        break;
+    case 220: t << "\\\"{U}";       break;
+    case 221: t << "\\'{Y}";        break;
+    case 223: t << "\\ss{}";        break; 
+    case 224: t << "\\`{a}";        break;
+    case 225: t << "\\'{a}";        break;
+    case 226: t << "\\^{a}";        break;
+    case 227: t << "\\~{a}";        break;
+    case 228: t << "\\\"{a}";       break;
+    case 229: t << "\\aa{}";        break;
+    case 230: t << "\\ae{}";        break;
+    case 231: t << "\\c{c}";        break;
+    case 232: t << "\\`{e}";        break;
+    case 233: t << "\\'{e}";        break;
+    case 234: t << "\\^{e}";        break;
+    case 235: t << "\\\"{e}";       break;
+    case 236: t << "\\`{\\i}";      break;
+    case 237: t << "\\'{\\i}";      break;
+    case 238: t << "\\^{\\i}";      break;
+    case 239: t << "\\\"{\\i}";     break;
+    case 241: t << "\\~{n}";        break;
+    case 242: t << "\\`{o}";        break;
+    case 243: t << "\\'{o}";        break;
+    case 244: t << "\\^{o}";        break;
+    case 245: t << "\\~{o}";        break;
+    case 246: t << "\\\"{o}";       break;
+    case 248: t << "\\o{}";         break;
+    case 249: t << "\\`{u}";        break;
+    case 250: t << "\\'{u}";        break;
+    case 251: t << "\\^{u}";        break;
+    case 252: t << "\\\"{u}";       break;
+    case 253: t << "\\'{y}";        break;
+    case 255: t << "\\\"{y}";       break;           
+    default: t << c;
+  }
+}
+
+/*!
+ * Function converts Latin2 character to latex string representin the same
+ * character.
+ */
+static void latin2ToLatex(QTextStream &t,unsigned char c)
+{
+  switch (c)
+  {
+    case 0xA1: t << "\\k{A}";   break;
+    case 0xA2: t << c;          break;
+    case 0xA3: t << "\\L{}";    break;
+    case 0xA4: t << c;          break;
+    case 0xA5: t << c;          break;
+    case 0xA6: t << "\\'{S}";   break;
+    case 0xA7: t << c;          break;
+    case 0xA8: t << c;          break;
+    case 0xA9: t << "\\v{S}";   break;
+    case 0xAA: t << "\\c{S}";   break;
+    case 0xAB: t << "\\v{T}";   break;
+    case 0xAC: t << "\\'{Z}";   break;
+    case 0xAD: t << c;          break;
+    case 0xAE: t << "\\v{Z}";   break;
+    case 0xAF: t << "\\.{Z}";   break;
+
+    case 0xB0: t << c;          break;
+    case 0xB1: t << "\\k{a}";   break;
+    case 0xB2: t << c;          break;
+    case 0xB3: t << "\\l{}";    break;
+    case 0xB4: t << c;          break;
+    case 0xB5: t << c;          break;
+    case 0xB6: t << "\\'{s}";   break;
+    case 0xB7: t << c;          break;
+    case 0xB8: t << c;          break;
+    case 0xB9: t << "\\v{s}";   break;
+    case 0xBA: t << "\\c{s}";   break;
+    case 0xBB: t << "\\v{t}";   break;
+    case 0xBC: t << "\\'{z}";   break;
+    case 0xBD: t << c;          break;
+    case 0xBE: t << "\\v{z}";   break;
+    case 0xBF: t << "\\.{z}";   break;
+
+    case 0xC0: t << "\\'{R}";   break;
+    case 0xC1: t << "\\'{A}";   break;
+    case 0xC2: t << "\\^{A}";   break;
+    case 0xC3: t << "\\u{A}";   break;
+    case 0xC4: t << "\\\"{A}";  break;
+    case 0xC5: t << "\\'{L}";   break;
+    case 0xC6: t << "\\'{C}";   break;
+    case 0xC7: t << "\\c{C}";   break;
+    case 0xC8: t << "\\v{C}";   break;
+    case 0xC9: t << "\\'{E}";   break;
+    case 0xCA: t << "\\k{E}";   break;
+    case 0xCB: t << "\\\"{E}";  break;
+    case 0xCC: t << "\\v{E}";   break;
+    case 0xCD: t << "\\'{I}";   break;
+    case 0xCE: t << "\\^{I}";   break;
+    case 0xCF: t << "\\v{D}";   break;
+
+    case 0xD0: t << "\\bar{D}"; break;
+    case 0xD1: t << "\\'{N}";   break;
+    case 0xD2: t << "\\v{N}";   break;
+    case 0xD3: t << "\\'{O}";   break;
+    case 0xD4: t << "\\^{O}";   break;
+    case 0xD5: t << "\\H{O}";   break;
+    case 0xD6: t << "\\\"{O}";  break;
+    case 0xD7: t << c;          break;
+    case 0xD8: t << "\\v{R}";   break;
+    case 0xD9: t << c;          break;
+    case 0xDA: t << "\\'{U}";   break;
+    case 0xDB: t << "\\H{U}";   break;
+    case 0xDC: t << "\\\"{U}";  break;
+    case 0xDD: t << "\\'{Y}";   break;
+    case 0xDE: t << "\\c{T}";   break;
+    case 0xDF: t << "\\ss";     break;
+
+    case 0xE0: t << "\\'{r}";   break;
+    case 0xE1: t << "\\'{a}";   break;
+    case 0xE2: t << "\\^{a}";   break;
+    case 0xE3: t << c;          break;
+    case 0xE4: t << "\\\"{a}";  break;
+    case 0xE5: t << "\\'{l}";   break;
+    case 0xE6: t << "\\'{c}";   break;
+    case 0xE7: t << "\\c{c}";   break;
+    case 0xE8: t << "\\v{c}";   break;
+    case 0xE9: t << "\\'{e}";   break;
+    case 0xEA: t << "\\k{e}";   break;
+    case 0xEB: t << "\\\"{e}";  break;
+    case 0xEC: t << "\\v{e}";   break;
+    case 0xED: t << "\\'{\\i}"; break;
+    case 0xEE: t << "\\^{\\i}"; break;
+    case 0xEF: t << "\\v{d}";   break;
+
+    case 0xF0: t << "\\bar{d}"; break;
+    case 0xF1: t << "\\'{n}";   break;
+    case 0xF2: t << "\\v{n}";   break;
+    case 0xF3: t << "\\'{o}";   break;
+    case 0xF4: t << "\\^{o}";   break;
+    case 0xF5: t << "\\H{o}";   break;
+    case 0xF6: t << "\\\"{o}";  break;
+    case 0xF7: t << c;          break;
+    case 0xF8: t << "\\v{r}";   break;
+    case 0xF9: t << c;          break;
+    case 0xFA: t << "\\'{u}";   break;
+    case 0xFB: t << "\\H{u}";   break;
+    case 0xFC: t << "\\\"{u}";  break;
+    case 0xFD: t << "\\'{y}";   break;
+    case 0xFE: t << c;          break;
+    case 0xFF: t << c;          break;
+
+    default: t << c;
+  }
+}
+
+void filterLatexString(QTextStream &t,const char *str,
+                       bool insideTabbing,bool insidePre,bool insideItem)
+{
+  static bool isCzech         = theTranslator->idLanguage()=="czech";
+  static bool isJapanese      = theTranslator->idLanguage()=="japanese" ||
+                                theTranslator->idLanguage()=="japanese-en";
+  static bool isKorean        = theTranslator->idLanguage()=="korean" ||
+	  							theTranslator->idLanguage()=="korean-en";
+  static bool isRussian       = theTranslator->idLanguage()=="russian";
+  static bool isUkrainian     = theTranslator->idLanguage()=="ukrainian";
+  static bool isChinese       = theTranslator->idLanguage()=="chinese" || 
+                                theTranslator->idLanguage()=="chinese-traditional";
+  static bool isLatin2        = theTranslator->idLanguageCharset()=="iso-8859-2";
+  static bool isGreek         = theTranslator->idLanguage()=="greek";
+  //printf("filterLatexString(%s)\n",str);
+  if (str)
+  {
+    const unsigned char *p=(const unsigned char *)str;
+    unsigned char c;
+    unsigned char pc='\0';
+    while (*p)
+    {
+      c=*p++;
+
+      if (insidePre)
+      {
+        switch(c)
+        {
+          case '\\': t << "\\(\\backslash\\)"; break;
+          case '{':  t << "\\{"; break;
+          case '}':  t << "\\}"; break;
+          case '_':  t << "\\_"; break;
+          default: 
+            {
+              // Some languages use wide characters
+              if (c>=128 && (isJapanese || isKorean || isChinese))
+              { 
+                t << (char)c;
+                if (*p)  
+                {
+                  c = *p++;
+                  t << (char)c;
+                }
+              }
+              else
+              {
+                t << (char)c; 
+              }
+              break;
+            }
+        }
+      }
+      else
+      {
+        switch(c)
+        {
+          case '#':  t << "\\#";           break;
+          case '$':  t << "\\$";           break;
+          case '%':  t << "\\%";           break;
+          case '^':  t << "$^\\wedge$";    break;
+          case '&':  t << "\\&";           break;
+          case '*':  t << "$\\ast$";       break;
+          case '_':  t << "\\_"; 
+                     if (!insideTabbing) t << "\\-";  
+                     break;
+          case '{':  t << "\\{";           break;
+          case '}':  t << "\\}";           break;
+          case '<':  t << "$<$";           break;
+          case '>':  t << "$>$";           break;
+          case '|':  t << "$|$";           break;
+          case '~':  t << "$\\sim$";       break;
+          case '[':  if (Config_getBool("PDF_HYPERLINKS") || insideItem) 
+                       t << "\\mbox{[}"; 
+                     else
+                       t << "[";
+                     break;
+          case ']':  if (pc=='[') t << "$\\,$";
+                     if (Config_getBool("PDF_HYPERLINKS") || insideItem)
+                       t << "\\mbox{]}";
+                     else
+                       t << "]";             
+                     break;
+          case '-':  if (*p=='>') 
+                       { t << " $\\rightarrow$ "; p++; }
+                     else
+                     { t << (char)c; }
+                     break;
+          case '\\': if (*p=='<') 
+                     { t << "$<$"; p++; }
+                     else if (*p=='>')
+                     { t << "$>$"; p++; } 
+                     else  
+                     { t << "$\\backslash$"; }
+                     break;           
+          case '"':  { t << "\\char`\\\"{}"; }
+                     break;
+
+          default:   
+            {
+               // Some languages use wide characters
+               if (isJapanese || isKorean || isChinese)
+               { 
+                 if (c>=128) 
+                 {
+                   t << (char)c;
+                   if (*p)  
+                   {
+                     c = *p++;
+                     t << (char)c;
+                   }
+                 }
+                 else // ascii char => see if we can insert a hypenation hint
+                 {
+                   if (isupper(c) && islower(pc) && !insideTabbing) t << "\\-";
+                   t << (char)c;    
+                 } 
+               }
+               else if (isCzech || isRussian || isUkrainian)
+               {
+                 if (c>=128)
+                 {
+                   t << (char)c;
+                 }
+                 else // ascii char => see if we can insert a hypenation hint
+                 {
+                   if (isupper(c) && islower(pc) && !insideTabbing) t << "\\-";
+                   t << (char)c;
+                 }
+               }
+               else if (isGreek)
+               {
+                 if (c<128)
+                 {
+                   t << "\\textlatin{" << (char)c << "}";
+                 }
+                 else
+                 {
+                   t << (char)c;
+                 }
+               }
+               else if (isLatin2)
+               {
+                 if (c>=128)
+                 {
+                   latin2ToLatex(t,c);
+                 }
+                 else
+                 { 
+                   // see if we can insert an hyphenation hint
+                   if (isupper(c) && islower(pc) && !insideTabbing) t << "\\-";
+                   t << (char)c;
+                 }
+               }
+               else // another language => assume latin1 charset
+               {
+                 if (c>=128)
+                 {
+                   latin1ToLatex(t,c);
+                 }
+                 else
+                 { 
+                   // see if we can insert an hyphenation hint
+                   if (isupper(c) && islower(pc) && !insideTabbing) t << "\\-";
+                   t << (char)c;
+                 }
+               }
+            }
+        }
+      }
+      pc = c;
+    }
+  }
+}
+
+
+QCString rtfFormatBmkStr(const char *name)
+{
+  static QCString g_nextTag( "AAAAAAAAAA" );
+  static QDict<QCString> g_tagDict( 5003 );
+
+  g_tagDict.setAutoDelete(TRUE);
+
+  // To overcome the 40-character tag limitation, we
+  // substitute a short arbitrary string for the name
+  // supplied, and keep track of the correspondence
+  // between names and strings.
+  QCString key( name );
+  QCString* tag = g_tagDict.find( key );
+  if ( !tag )
+  {
+     // This particular name has not yet been added
+     // to the list. Add it, associating it with the
+     // next tag value, and increment the next tag.
+     tag = new QCString( g_nextTag.copy() ); // Make sure to use a deep copy!
+     g_tagDict.insert( key, tag );
+
+     // This is the increment part
+     char* nxtTag = g_nextTag.data() + g_nextTag.length() - 1;
+     for ( unsigned int i = 0; i < g_nextTag.length(); ++i, --nxtTag )
+     {
+         if ( ( ++(*nxtTag) ) > 'Z' )
+         {
+            *nxtTag = 'A';
+         }
+         else
+         {
+            // Since there was no carry, we can stop now
+            break;
+         }
+     }
+  }
+  
+  return *tag;
+}
+
+QCString stripExtension(const char *fName)
+{
+  QCString result=fName;
+  if (result.right(Doxygen::htmlFileExtension.length())==Doxygen::htmlFileExtension)
+  {
+    result=result.left(result.length()-Doxygen::htmlFileExtension.length());
+  }
+  return result;
+}
+
+
+void replaceNamespaceAliases(QCString &scope,int i)
+{
+  //printf("replaceNamespaceAliases(%s,%d)\n",scope.data(),i);
+  while (i>0)
+  {
+    QCString *s = Doxygen::namespaceAliasDict[scope.left(i)];
+    if (s)
+    {
+      scope=*s+scope.right(scope.length()-i);
+      i=s->length();
+    }
+    i=scope.findRev("::",i-1);
+  }
+  //printf("replaceNamespaceAliases() result=%s\n",scope.data());
+}
+
+QCString stripPath(const char *s)
+{
+  QCString result=s;
+  int i=result.findRev('/');
+  if (i!=-1)
+  {
+    result=result.mid(i+1);
+  }
+  return result;
+}
