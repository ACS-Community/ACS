2007-02-02 B. Jeram

I patched lokiSmallObj.h because there was confilcti with RTAI.
The problem was that CS is used as a template parameter where methods
of class AllocatorSingleton are defined, but CS is defined somewhere
in RTAI code and CS is than replaced with that number.
I renamed CS to chunkSize - the name that it is used in class template parameter.

2007-02-02 B. Jeram

New version of loki 0.1.5 was put in the acs loki module.
There was problem at application exit. The problem due to clash
between ACE and loki was solved by patching: lokiSingleton.cpp

-------------------------------------------------------------------------------------------------------------

Last update: Novmber 16, 2005

Directions:

To use Loki, simply extract the files from the archive, 
give your compiler access to their include path:

- if you have a standard conforming compiler use "loki/include/loki" 
  or "loki/include" for "#include <loki/HeaderFile.h>" usage

- if you have a non-conforming compiler use "loki/include/noncc/loki" 
  or "loki/include/noncc" for "#include <loki/HeaderFile.h>" usage. 
  The noncc files are declared as 'deprecated' and will be removed in
  future. They are also not updated with the new features of Loki 
  and bugfixes (unless YOU do it).


If you use the small object allocator directly or indirectly 
(through the Functor class) you must add src/SmallObj.cpp to your 
project/makefile.

If you use Singletons with longevity you must add 
src/Singleton.cpp to your project/makefile.

If you use OrderedStatic.h with you must add 
src/OrderedSataic.cpp to your project/makefile.

Or use the library generated by make.msvc.bat, make.mingw.bat,
or make.


Compatibility:

Supported Compilers:
Gcc v3.4
Gcc v4.0
Gcc v4.1
Microsoft Visual C++ v7.1
Microsoft Visual C++ v8.0

by special noncc files:
Borland C++ Builder v6.0
Microsoft Visual C++ v6.0
Microsoft Visual C++ v7.0
see also readme.txt files


Mostly Supported:
CodeWarrior 6.0

CodeWarrior has a problem with the Conversion template (see TypeManip.h) 
and, though it compiles it, it doesn't provide correct results. 
Consequently, the DerivedToFront algorithm in Typelist.h does not function. 
This affects the static dispatcher in Multimethods.h. As a fix, you must 
order the types (putting the most derived ones in the front) when providing 
the typelist argument to StaticDispatcher.



More info:

Andrei's page  : http://erdani.org 
Soureforge page: http://sourceforge.net/projects/loki-lib/

--------------------------------------------------------------------------------------

A. Caproni 13/04/2004

The files into the include directory are extracted from loki.zip
(more precisely from the Reference directory of the archive).
They are renamed with the prefix loki to avoid name clashes (Singleton.h
is an example).

The include directives of each file are also changed according to the
renamed files.

To use loki: 
1. include the .h files
2. link the loki library (generated by make)

---------------------------------------------------------------------------------------

Last update: June 20, 2001

Directions:

To use Loki, simply extract the files from the archive, give your compiler access to their path, and include them appropriately in your code via #include.

If you use the small object allocator directly or indirectly (through the Functor class) you must add SmallObj.cpp to your project/makefile.

If you use Singletons with longevity you must add Singleton.cpp to your project/makefile.

Compatibility:

Loki has been tested with Metrowerks CodeWarrior Pro 6 under Windows. CodeWarrior has a problem with the Conversion template (see TypeManip.h) and, though it compiles it, it doesn't provide correct results. Consequently, the DerivedToFront algorithm in Typelist.h does not function. This affects the static dispatcher in Multimethods.h. As a fix, you must order the types (putting the most derived ones in the front) when providing the typelist argument to StaticDispatcher.

Also, Loki has been ported to gcc 2.95.3 by Nick Thurn.


More info:

http://moderncppdesign.com

------------------------------------------
