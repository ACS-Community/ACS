<?xml version="1.0" encoding="UTF-8"?>
<!--
 (c) Copyright, Real-Time Innovations, $Date: 2011/11/14 09:48:44 $.
 All rights reserved.
 No duplications, whole or partial, manual or electronic, may be made
 without express written permission.  Any such copies, or
 revisions thereof, must display this notice unaltered.
 This code contains trade secrets of Real-Time Innovations, Inc.
-->

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           elementFormDefault="qualified"
           attributeFormDefault="unqualified">

    
    <!-- =================================================================== -->
    <!-- Simple Types                                                        -->
    <!-- =================================================================== -->
    <xs:simpleType name="boolean">
        <xs:annotation>
            <xs:documentation>
                &lt;xs:boolean&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:boolean"/>
    </xs:simpleType>

    <xs:simpleType name="string">
        <xs:annotation>
            <xs:documentation>
                &lt;xs:string&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string"/>
    </xs:simpleType>

    <xs:simpleType name="integer">
        <xs:annotation>
            <xs:documentation>
                &lt;xs:integer&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:integer"/>
    </xs:simpleType>

    <xs:simpleType name="nonNegativeInteger">
        <xs:annotation>
            <xs:documentation>
                &lt;xs:nonNegativeInteger&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:nonNegativeInteger"/>
    </xs:simpleType>

    <xs:simpleType name="positiveInteger">
        <xs:annotation>
            <xs:documentation>
                &lt;xs:positiveInteger&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:positiveInteger"/>
    </xs:simpleType>

    <xs:simpleType name="byteData">
        <xs:annotation>
            <xs:documentation>
                &lt;xs:string&gt;
            </xs:documentation>
            <xs:documentation>
                Uses a byte-oriented encoding wich successive bytes separates by comma and each byte represented
                either using a decimal or hexadecimal notation. White space is allowed between bytes.
                For example:
                34, 44, 56,0x44,127,0xf3,
                44,233,122, 122, 44, 222
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <!--
            The regular expression is pretty hairy, so here's an explaination.
            The general form is:

                (\s)*(PATTERN)(\s)*(,(\s)*(PATTERN)(\s)*)*

            In other words, it's a (numeric) pattern, surrounded by
            whitespace. It must appear at least once; if it appears more than
            once, subsequent appearances must be preceded by a comma.

            The numeric pattern is is either a decimal or hexadecimal number:

                (DEC)|(HEX)

            A decimal number takes the form of 1-3 decimal digits, where the
            first digit in a 3-digit number can be no greater than 2. Note
            that this pattern has a loophole in that it allows a value like
            285; closing that loophole with a regular expression was deemed
            unimportant relative to the complication of the pattern it would
            entail.

                [0-2]?[0-9]?[0-9]

            A hexadecimal number is comprised of a zero, a letter 'X', and
            either one or two hexedecimal digits:

                0[xX][0-9a-fA-F]?[0-9a-fA-F]
            -->
            <xs:pattern value="(\s)*(([0-2]?[0-9]?[0-9])|(0[xX][0-9a-fA-F]?[0-9a-fA-F]))(\s)*(,(\s)*(([0-2]?[0-9]?[0-9])|(0[xX][0-9a-fA-F]?[0-9a-fA-F]))(\s)*)*"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="elementName">
        <xs:annotation>
            <xs:documentation>
                &lt;xs:string&gt;
            </xs:documentation>
            <xs:documentation>
                Name that uniquely identifies this element.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>
            <xs:pattern value="([a-zA-Z0-9_])+"/>
            <!-- <xs:pattern value="^((::)?([a-zA-Z0-9])+(::([a-zA-Z0-9])+)*)$"/> -->
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="elementBaseName">
        <xs:annotation>
            <xs:documentation>
                &lt;xs:string&gt;
            </xs:documentation>
            <xs:documentation>
                A QoS Profile can inherit its values from other QoS Profiles described in the XML file
                using this attribute.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>
            <xs:pattern value="((::)?[a-zA-Z0-9_])+"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="entityName">
        <xs:annotation>
            <xs:documentation>
                &lt;xs:string&gt;
            </xs:documentation>
            <xs:documentation>
                It can only be 255 characters in length.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:maxLength value="255"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="roleName">
        <xs:annotation>
            <xs:documentation>
                &lt;xs:string&gt;
            </xs:documentation>
            <xs:documentation>
                It can only be 255 characters in length.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:maxLength value="255"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="propertyName">
        <xs:annotation>
            <xs:documentation>
                &lt;xs:string&gt;
            </xs:documentation>
            <xs:documentation>
                The name of the Property.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>
            <xs:pattern value="([a-zA-Z0-9_.])+"/>
            <!-- <xs:pattern value="^((::)?([a-zA-Z0-9])+(::([a-zA-Z0-9])+)*)$"/> -->
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="topicNameFilter">
        <xs:annotation>
            <xs:documentation>
                &lt;xs:string&gt;
            </xs:documentation>
            <xs:documentation>
                RTI Data Distribution Service will select a QoS based on the evaluation of this filter expression on the topic name.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>
            <xs:pattern value="([a-zA-Z0-9/*_])+"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="destinationOrderKind">
        <xs:annotation>
            <xs:documentation>
                &lt;BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS|BY_SOURCE_TIMESTAMP_DESTINATIONORDER_QOS&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>
            <xs:enumeration value="BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS"/>
            <xs:enumeration value="BY_SOURCE_TIMESTAMP_DESTINATIONORDER_QOS"/>
        </xs:restriction>
    </xs:simpleType>

        <xs:simpleType name="transportMulticastQosPolicyKind">
        <xs:annotation>
            <xs:documentation>
                &lt;AUTOMATIC_TRANSPORT_MULTICAST_QOS|UNICAST_ONLY_TRANSPORT_MULTICAST_QOS&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>
            <xs:enumeration value="AUTOMATIC_TRANSPORT_MULTICAST_QOS"/>
            <xs:enumeration value="UNICAST_ONLY_TRANSPORT_MULTICAST_QOS"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="durabilityKind">
        <xs:annotation>
            <xs:documentation>
                &lt;VOLATILE_DURABILITY_QOS|TRANSIENT_LOCAL_DURABILITY_QOS|TRANSIENT_DURABILITY_QOS|PERSISTENT_DURABILITY_QOS&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>
            <xs:enumeration value="VOLATILE_DURABILITY_QOS"/>
            <xs:enumeration value="TRANSIENT_LOCAL_DURABILITY_QOS"/>
            <xs:enumeration value="TRANSIENT_DURABILITY_QOS"/>
            <xs:enumeration value="PERSISTENT_DURABILITY_QOS"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="historyKind">
        <xs:annotation>
            <xs:documentation>
                &lt;KEEP_LAST_HISTORY_QOS|KEEP_ALL_HISTORY_QOS&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>
            <xs:enumeration value="KEEP_LAST_HISTORY_QOS"/>
            <xs:enumeration value="KEEP_ALL_HISTORY_QOS"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="livelinessKind">
        <xs:annotation>
            <xs:documentation>
                &lt;AUTOMATIC_LIVELINESS_QOS|MANUAL_BY_PARTICIPANT_LIVELINESS_QOS|MANUAL_BY_TOPIC_LIVELINESS_QOS&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>
            <xs:enumeration value="AUTOMATIC_LIVELINESS_QOS"/>
            <xs:enumeration value="MANUAL_BY_PARTICIPANT_LIVELINESS_QOS"/>
            <xs:enumeration value="MANUAL_BY_TOPIC_LIVELINESS_QOS"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="presentationAccessScopeKind">
        <xs:annotation>
            <xs:documentation>
                &lt;INSTANCE_PRESENTATION_QOS|TOPIC_PRESENTATION_QOS|GROUP_PRESENTATION_QOS&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>
            <xs:enumeration value="INSTANCE_PRESENTATION_QOS"/>
            <xs:enumeration value="TOPIC_PRESENTATION_QOS"/>
            <xs:enumeration value="GROUP_PRESENTATION_QOS"/>            
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="subscriberPresentationAccessScopeKind">
        <xs:annotation>
            <xs:documentation>
                &lt;INSTANCE_PRESENTATION_QOS|TOPIC_PRESENTATION_QOS|GROUP_PRESENTATION_QOS|HIGHEST_OFFERED_PRESENTATION_QOS&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>
            <xs:enumeration value="INSTANCE_PRESENTATION_QOS"/>
            <xs:enumeration value="TOPIC_PRESENTATION_QOS"/>
            <xs:enumeration value="GROUP_PRESENTATION_QOS"/>
            <xs:enumeration value="HIGHEST_OFFERED_PRESENTATION_QOS"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="reliabilityKind">
        <xs:annotation>
            <xs:documentation>
                &lt;BEST_EFFORT_RELIABILITY_QOS|RELIABLE_RELIABILITY_QOS&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>
            <xs:enumeration value="BEST_EFFORT_RELIABILITY_QOS"/>
            <xs:enumeration value="RELIABLE_RELIABILITY_QOS"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="ownershipKind">
        <xs:annotation>
            <xs:documentation>
                &lt;SHARED_OWNERSHIP_QOS|EXCLUSIVE_OWNERSHIP_QOS&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>
            <xs:enumeration value="SHARED_OWNERSHIP_QOS"/>
            <xs:enumeration value="EXCLUSIVE_OWNERSHIP_QOS"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="dataWriterResourceLimitsInstanceReplacementKind">
        <xs:annotation>
            <xs:documentation>
                &lt;UNREGISTERED_INSTANCE_REPLACEMENT|ALIVE_INSTANCE_REPLACEMENT|DISPOSED_INSTANCE_REPLACEMENT|ALIVE_THEN_DISPOSED_INSTANCE_REPLACEMENT|DISPOSED_THEN_ALIVE_INSTANCE_REPLACEMENT|ALIVE_OR_DISPOSED_INSTANCE_REPLACEMENT&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>
            <xs:enumeration value="UNREGISTERED_INSTANCE_REPLACEMENT"/>
            <xs:enumeration value="ALIVE_INSTANCE_REPLACEMENT"/>
            <xs:enumeration value="DISPOSED_INSTANCE_REPLACEMENT"/>
            <xs:enumeration value="ALIVE_THEN_DISPOSED_INSTANCE_REPLACEMENT"/>
            <xs:enumeration value="DISPOSED_THEN_ALIVE_INSTANCE_REPLACEMENT"/>
            <xs:enumeration value="ALIVE_OR_DISPOSED_INSTANCE_REPLACEMENT"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- RTI extension -->
    <xs:simpleType name="integer_RTPS_AUTO_ID">
        <xs:annotation>
            <xs:documentation>
                &lt;RTPS_AUTO_ID|xs:string&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <!--<xs:pattern value="(RTPS_AUTO_ID|[1-9]+)?"/>-->
        </xs:restriction>
    </xs:simpleType>

    <!-- RTI extension -->
    <xs:simpleType name="inetAddress">
        <xs:annotation>
            <xs:documentation>
                A valid IP address
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <!--<xs:pattern value="^((([0-9a-fA-F]{4}|0)(:([0-9a-fA-F]{4}|0)){7})|((\d{1,3}\.){3}\d{1,3}))$"/>-->
        </xs:restriction>
    </xs:simpleType>

    <!-- RTI extension -->
    <xs:simpleType name="publishModeKind">
        <xs:annotation>
            <xs:documentation>
                &lt;SYNCHRONOUS_PUBLISH_MODE_QOS|ASYNCHRONOUS_PUBLISH_MODE_QOS&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>
            <xs:enumeration value="SYNCHRONOUS_PUBLISH_MODE_QOS"/>
            <xs:enumeration value="ASYNCHRONOUS_PUBLISH_MODE_QOS"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- RTI extension -->
    <xs:simpleType name="refilterKind">
        <xs:annotation>
            <xs:documentation>
                &lt;NONE_REFILTER_QOS|ALL_REFILTER_QOS|ON_DEMAND_REFILTER_QOS&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>
            <xs:enumeration value="NONE_REFILTER_QOS"/>
            <xs:enumeration value="ALL_REFILTER_QOS"/>
            <xs:enumeration value="ON_DEMAND_REFILTER_QOS"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- RTI extension -->
    <xs:simpleType name="remoteParticipantPurgeKind">
        <xs:annotation>
            <xs:documentation>
                &lt;LIVELINESS_BASED_REMOTE_PARTICIPANT_PURGE|NO_REMOTE_PARTICIPANT_PURGE&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>
            <xs:enumeration value="LIVELINESS_BASED_REMOTE_PARTICIPANT_PURGE"/>
            <xs:enumeration value="NO_REMOTE_PARTICIPANT_PURGE"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- RTI extension -->
    <xs:simpleType name="transportBuiltinKindMask">
        <xs:annotation>
            <xs:documentation>
                &lt;UDPv4|UDPv6|SHMEM|MASK_DEFAULT|MASK_NONE|MASK_ALL&gt; [|&lt;UDPv4|UDPv6|SHMEM&gt;| ... ]
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>

            <xs:enumeration value="MASK_DEFAULT"/>
            <xs:enumeration value="MASK_NONE"/>
            <xs:enumeration value="MASK_ALL"/>

            <xs:enumeration value="UDPv4 | SHMEM"/>

            <xs:enumeration value="UDPv4"/>
            <xs:enumeration value="UDPv6"/>
            <xs:enumeration value="SHMEM"/>

            <xs:enumeration value="UDPv6 | SHMEM"/>
            <xs:enumeration value="UDPv4 | UDPv6"/>

            <xs:enumeration value="UDPv4 | UDPv6 | SHMEM"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- RTI extension -->
    <xs:simpleType name="WireProtocolQosPolicyAutoKind">
        <xs:annotation>
            <xs:documentation>
                &lt;RTPS_AUTO_ID_FROM_IP|RTPS_AUTO_ID_FROM_MAC&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>

            <xs:enumeration value="RTPS_AUTO_ID_FROM_IP"/>
            <xs:enumeration value="RTPS_AUTO_ID_FROM_MAC"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- RTI extension -->
    <xs:simpleType name="rtpsReservedPortKindMask">
        <xs:annotation>
            <xs:documentation>
                &lt;MASK_DEFAULT|MASK_NONE|MASK_ALL|BUILTIN_UNICAST|BUILTIN_MULTICAST|USER_UNICAST|USER_MULTICAST&gt; [|&lt;BUILTIN_UNICAST|BUILTIN_MULTICAST|USER_UNICAST|USER_MULTICAST&gt;| ... ]
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>

            <xs:enumeration value="MASK_DEFAULT"/>
            <xs:enumeration value="MASK_NONE"/>
            <xs:enumeration value="MASK_ALL"/>

            <xs:enumeration value="BUILTIN_UNICAST"/>
            <xs:enumeration value="BUILTIN_MULTICAST"/>
            <xs:enumeration value="USER_UNICAST"/>
            <xs:enumeration value="USER_MULTICAST"/>

            <xs:enumeration value="BUILTIN_UNICAST | BUILTIN_MULTICAST"/>
            <xs:enumeration value="BUILTIN_UNICAST | USER_UNICAST"/>
            <xs:enumeration value="BUILTIN_UNICAST | USER_MULTICAST"/>

            <xs:enumeration value="BUILTIN_MULTICAST | USER_UNICAST"/>
            <xs:enumeration value="BUILTIN_MULTICAST | USER_MULTICAST"/>

            <xs:enumeration value="USER_UNICAST | USER_MULTICAST"/>

            <xs:enumeration value="BUILTIN_UNICAST | BUILTIN_MULTICAST | USER_UNICAST"/>
            <xs:enumeration value="BUILTIN_UNICAST | BUILTIN_MULTICAST | USER_MULTICAST"/>
            <xs:enumeration value="BUILTIN_MULTICAST | USER_UNICAST | USER_MULTICAST"/>

            <xs:enumeration value="BUILTIN_UNICAST | BUILTIN_MULTICAST | USER_MULTICAST | USER_MULTICAST"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- RTI extension -->
    <xs:simpleType name="threadKindMask">
        <xs:annotation>
            <xs:documentation>
                &lt;MASK_DEFAULT|FLOATING_POINT|STDIO|REALTIME_PRIORITY|PRIORITY_ENFORCE&gt; [|&lt;FLOATING_POINT|STDIO|REALTIME_PRIORITY|PRIORITY_ENFORCE&gt;| ... ]
            </xs:documentation>
        </xs:annotation>

        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>

            <xs:enumeration value="MASK_DEFAULT"/>

            <xs:enumeration value="STDIO"/>
            <xs:enumeration value="FLOATING_POINT"/>
            <xs:enumeration value="REALTIME_PRIORITY"/>
            <xs:enumeration value="PRIORITY_ENFORCE"/>

            <xs:enumeration value="STDIO | FLOATING_POINT"/>
            <xs:enumeration value="STDIO | REALTIME_PRIORITY"/>
            <xs:enumeration value="STDIO | PRIORITY_ENFORCE"/>

            <xs:enumeration value="FLOATING_POINT | REALTIME_PRIORITY"/>
            <xs:enumeration value="FLOATING_POINT | PRIORITY_ENFORCE"/>

            <xs:enumeration value="REALTIME_PRIORITY | PRIORITY_ENFORCE"/>

            <xs:enumeration value="STDIO | FLOATING_POINT | REALTIME_PRIORITY"/>
            <xs:enumeration value="STDIO | FLOATING_POINT | PRIORITY_ENFORCE"/>
            <xs:enumeration value="STDIO | REALTIME_PRIORITY | PRIORITY_ENFORCE"/>
            <xs:enumeration value="FLOATING_POINT | REALTIME_PRIORITY | PRIORITY_ENFORCE"/>

            <xs:enumeration value="STDIO | FLOATING_POINT | REALTIME_PRIORITY | PRIORITY_ENFORCE"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- RTI extension -->
    <xs:simpleType name="discoveryPluginKindMask">
        <xs:annotation>
            <xs:documentation>
                &lt;SDP|EDS|SPDP|SEDP|MASK_NONE|MASK_ALL|MASK_DEFAULT&gt; [|&lt;SDP|EDS|SPDP|SEDP&gt;| ... ]
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>
            <xs:enumeration value="MASK_DEFAULT"/>
            <xs:enumeration value="MASK_NONE"/>
            <xs:enumeration value="MASK_ALL"/>

            <xs:enumeration value="SDP"/>
            <xs:enumeration value="EDS"/>
            <xs:enumeration value="SDP|EDS"/>

            <xs:enumeration value="SPDP"/>
            <xs:enumeration value="SEDP"/>
            <xs:enumeration value="EDS|SPDP"/>
            <xs:enumeration value="EDS|SEDP"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="nonNegativeInteger_UNLIMITED">
        <xs:annotation>
            <xs:documentation>
                &lt;LENGTH_UNLIMITED|xs:nonNegativeInteger&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>
            <xs:pattern value="LENGTH_UNLIMITED|(\+?[0-9]+)"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="nonNegativeInteger_Duration_SEC">
        <xs:annotation>
            <xs:documentation>
                &lt;DURATION_INFINITE_SEC|DURATION_ZERO_SEC|xs:nonNegativeInteger&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <!-- RTI extension DURATION_ZERO_SEC -->
            <xs:whiteSpace value="collapse"/>
            <xs:pattern value="(\+?[0-9]+)|DURATION_INFINITE_SEC|DURATION_ZERO_SEC"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="nonNegativeInteger_Duration_NSEC">
        <xs:annotation>
            <xs:documentation>
                &lt;DURATION_INFINITE_NSEC|DURATION_ZERO_NSEC|xs:nonNegativeInteger&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <!-- RTI extension DURATION_ZERO_NSEC -->
            <xs:whiteSpace value="collapse"/>
            <xs:pattern value="(\+?[0-9]+)|DURATION_INFINITE_NSEC|DURATION_ZERO_NSEC"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="nonNegativeInteger_DurationAuto_SEC">
        <xs:annotation>
            <xs:documentation>
                &lt;DURATION_INFINITE_SEC|DURATION_ZERO_SEC|DURATION_AUTO_SEC|xs:nonNegativeInteger&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <!-- RTI extension DURATION_ZERO_SEC -->
            <xs:whiteSpace value="collapse"/>
            <xs:pattern value="(\+?[0-9]+)|DURATION_INFINITE_SEC|DURATION_ZERO_SEC|DURATION_AUTO_SEC"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="nonNegativeInteger_DurationAuto_NSEC">
        <xs:annotation>
            <xs:documentation>
                &lt;DURATION_INFINITE_NSEC|DURATION_ZERO_NSEC|DURATION_AUTO_NSEC|xs:nonNegativeInteger&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <!-- RTI extension DURATION_ZERO_NSEC -->
            <xs:whiteSpace value="collapse"/>
            <xs:pattern value="(\+?[0-9]+)|DURATION_INFINITE_NSEC|DURATION_ZERO_NSEC|DURATION_AUTO_NSEC"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="positiveInteger_UNLIMITED">
        <xs:annotation>
            <xs:documentation>
                &lt;LENGTH_UNLIMITED|xs:positiveInteger&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>
            <xs:pattern value="(LENGTH_UNLIMITED|[1-9]([0-9])*)?"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- RTI extension -->
    <xs:simpleType name="positiveInteger_UNLIMITED_AUTO_MAX_TOTAL_INSTANCES">
        <xs:annotation>
            <xs:documentation>
                &lt;AUTO_MAX_TOTAL_INSTANCES|xs:positiveInteger&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>
            <xs:pattern value="(AUTO_MAX_TOTAL_INSTANCES|[1-9]([0-9])*)?"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- RTI extension -->
    <xs:simpleType name="positiveInteger_THREAD_PRIORITY_DEFAULT">
        <xs:annotation>
            <xs:documentation>
                &lt;THREAD_PRIORITY_DEFAULT|THREAD_PRIORITY_BELOW_NORMAL|THREAD_PRIORITY_LOW|THREAD_PRIORITY_NORMAL|THREAD_PRIORITY_ABOVE_NORMAL|THREAD_PRIORITY_HIGH|xs:positiveInteger&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>
            <xs:pattern value="(THREAD_PRIORITY_DEFAULT|THREAD_PRIORITY_BELOW_NORMAL|THREAD_PRIORITY_LOW|THREAD_PRIORITY_NORMAL|THREAD_PRIORITY_ABOVE_NORMAL|THREAD_PRIORITY_HIGH|([0-9])*)?"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- RTI extension -->
    <xs:simpleType name="positiveInteger_THREAD_STACK_SIZE_DEFAULT">
        <xs:annotation>
            <xs:documentation>
                &lt;THREAD_STACK_SIZE_DEFAULT|xs:positiveInteger&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>
            <xs:pattern value="(THREAD_STACK_SIZE_DEFAULT|[1-9]([0-9])*)?"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="string_GUID_AUTO">
        <xs:annotation>
            <xs:documentation>
                &lt;GUID_AUTO|xs:string&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string"/>
    </xs:simpleType>

    <xs:simpleType name="string_FLOW_CONTROLLER_NAME">
        <xs:annotation>
            <xs:documentation>
                &lt;DEFAULT_FLOW_CONTROLLER_NAME|FIXED_RATE_FLOW_CONTROLLER_NAME|ON_DEMAND_FLOW_CONTROLLER_NAME|xs:string&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string"/>
    </xs:simpleType>

    <!-- RTI extension -->
    <xs:simpleType name="unsignedShort_ENCAPSULATION">
        <xs:annotation>
            <xs:documentation>
                &lt;ENCAPSULATION_ID_CDR_LE|ENCAPSULATION_ID_CDR_BE|ENCAPSULATION_ID_CDR_NATIVE|xs:unsignedShort&gt;
                &lt;METP_ENCAPSULATION_ID_SHMEM_LE|METP_ENCAPSULATION_ID_SHMEM_BE|METP_ENCAPSULATION_ID_SHMEM|xs:unsignedShort&gt;
                &lt;METP_ENCAPSULATION_ID_IB_RDMA_READ_LE|METP_ENCAPSULATION_ID_IB_RDMA_READ_BE|METP_ENCAPSULATION_ID_IB_RDMA_READ|xs:unsignedShort&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <!-- RTI extension unsignedShort_ENCAPSULATION -->
            <xs:whiteSpace value="collapse"/>
            <xs:pattern value="(\+?[0-9]+)|ENCAPSULATION_ID_CDR_LE|ENCAPSULATION_ID_CDR_BE|ENCAPSULATION_ID_CDR_NATIVE"/>
            <xs:pattern value="(\+?[0-9]+)|METP_ENCAPSULATION_ID_SHMEM_LE|METP_ENCAPSULATION_ID_SHMEM_BE|METP_ENCAPSULATION_ID_SHMEM"/>       
	    <xs:pattern value="(\+?[0-9]+)|METP_ENCAPSULATION_ID_IB_RDMA_LE|METP_ENCAPSULATION_ID_IB_RDMA_BE|METP_ENCAPSULATION_ID_IB_RDMA_READ"/>
        </xs:restriction>
    </xs:simpleType>

	<!-- RTI extension -->
	<xs:simpleType name="integer_SEQUENCE_NUMBER">
		<xs:annotation>
			<xs:documentation>
				TODO
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:whiteSpace value="collapse"/>
			<xs:pattern value="(AUTO_SEQUENCE_NUMBER|[1-9]([0-9])*)"/>
		</xs:restriction>
	</xs:simpleType>
        
      <!-- RTI extension -->
       <xs:simpleType name="loggingVerbosity">
           <xs:annotation>
               <xs:documentation>
                   &lt;SILENT|ERROR|WARNING|LOCAL|REMOTE|ALL&gt;
               </xs:documentation>
           </xs:annotation>
           <xs:restriction base="xs:string">
               <xs:whiteSpace value="collapse"/>
               <xs:enumeration value="SILENT"/>
               <xs:enumeration value="ERROR"/>
               <xs:enumeration value="WARNING"/>
               <xs:enumeration value="LOCAL"/>
               <xs:enumeration value="REMOTE"/>
               <xs:enumeration value="ALL"/>
           </xs:restriction>
       </xs:simpleType>

       <!-- RTI extension -->
        <xs:simpleType name="loggingCategory">
            <xs:annotation>
                <xs:documentation>
                    &lt;PLATFORM|COMMUNICATION|DATABASE|ENTITIES|API|ALL&gt;
                </xs:documentation>
            </xs:annotation>
            <xs:restriction base="xs:string">
                <xs:whiteSpace value="collapse"/>
                <xs:enumeration value="PLATFORM"/>
                <xs:enumeration value="COMMUNICATION"/>
                <xs:enumeration value="DATABASE"/>
                <xs:enumeration value="ENTITIES"/>
                <xs:enumeration value="API"/>
                <xs:enumeration value="ALL"/>
            </xs:restriction>
        </xs:simpleType>

        <!-- RTI extension -->
         <xs:simpleType name="loggingPrintFormat">
             <xs:annotation>
                 <xs:documentation>
                     &lt;DEFAULT|TIMESTAMPED|VERBOSE|VERBOSE_TIMESTAMPED|DEBUG|MINIMAL|MAXIMAL&gt;
                 </xs:documentation>
             </xs:annotation>
             <xs:restriction base="xs:string">
                 <xs:whiteSpace value="collapse"/>
                 <xs:enumeration value="DEFAULT"/>
                 <xs:enumeration value="TIMESTAMPED"/>
                 <xs:enumeration value="VERBOSE"/>
                 <xs:enumeration value="VERBOSE_TIMESTAMPED"/>
                 <xs:enumeration value="DEBUG"/>
                 <xs:enumeration value="MINIMAL"/>
                 <xs:enumeration value="MAXIMAL"/>
             </xs:restriction>
         </xs:simpleType>

    <!-- ================================================================= -->
    <!-- Complex Types                                                     -->
    <!-- ================================================================= -->

    <xs:complexType name="duration">
        <xs:annotation>
            <xs:documentation>
                Time specified in seconds and nanoseconds
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="sec"
                        type="nonNegativeInteger_Duration_SEC"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="nanosec"
                        type="nonNegativeInteger_Duration_NSEC"
                        minOccurs="0"
                        maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <xs:complexType name="durationAuto">
        <xs:annotation>
            <xs:documentation>
                Time specified in seconds and nanoseconds
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="sec"
                        type="nonNegativeInteger_DurationAuto_SEC"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="nanosec"
                        type="nonNegativeInteger_DurationAuto_NSEC"
                        minOccurs="0"
                        maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <xs:complexType name="stringSeq">
        <xs:annotation>
            <xs:documentation>
                Declares a sequence of elements, which correspond to different xs:string.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="element" type="string" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>	

	<!-- RTI extension -->
	<xs:complexType name="sequenceNumber">
		<xs:annotation>
			<xs:documentation>
				Sequence number specified in high and low, or as a 64-bit decimal value
			</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:sequence>
				<xs:element name="high"
							type="integer"
							minOccurs="0"
							maxOccurs="1"/>
				<xs:element name="low"
							type="positiveInteger"
							minOccurs="0"
							maxOccurs="1"/>
			</xs:sequence>
			<xs:element name ="value"
						type="integer_SEQUENCE_NUMBER"
						minOccurs="0"
						maxOccurs="1"/>
		</xs:choice>
	</xs:complexType>    

    <!-- RTI extension -->
    <xs:complexType name="allocationSettings">
        <xs:annotation>
            <xs:documentation>
                Resource allocation settings.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="initial_count"
                        type="nonNegativeInteger"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="max_count"
                        type="positiveInteger_UNLIMITED"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="incremental_count"
                        type="integer"
                        minOccurs="0"
                        maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="inetAddressSeq">
        <xs:annotation>
            <xs:documentation>
                A sequence of elements with valid IP addresses.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="element" type="inetAddress" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="rtpsWellKnownPorts">
        <xs:annotation>
            <xs:documentation>
                RTPS well-known port mapping configuration.
                RTI Data Distribution Service uses the RTPS wire protocol.
                The discovery protocols defined by RTPS rely on well-known ports to initiate discovery.
                These well-known ports define the multicast and unicast ports on which a Participant will listen for discovery
                metatraffic from other Participants.
                The discovery metatraffic contains all the information required to establish the presence of remote DDS entities in the network.
                The well-known ports are defined by RTPS in terms of port mapping expressions with several tunable parameters,
                which allow the user to customize what network ports are used by the middleware.
                In order for all Participants in a system to correctly
                discover each other, it is important that they all use the
                same port mapping expressions.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="port_base"
                        type="positiveInteger"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="domain_id_gain"
                        type="positiveInteger"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="participant_id_gain"
                        type="positiveInteger"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="builtin_multicast_port_offset"
                        type="nonNegativeInteger"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="builtin_unicast_port_offset"
                        type="nonNegativeInteger"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="user_multicast_port_offset"
                        type="nonNegativeInteger"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="user_unicast_port_offset"
                        type="nonNegativeInteger"
                        minOccurs="0"
                        maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="rtpsReliableReaderProtocol">
        <xs:annotation>
            <xs:documentation>
                QoS related to reliable reader protocol defined in RTPS.
                It is used to configure a reliable reader according to the
                RTPS protocol.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="min_heartbeat_response_delay"
                        type="duration"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="max_heartbeat_response_delay"
                        type="duration"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="heartbeat_suppression_duration"
                        type="duration"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="nack_period"
                        type="duration"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="receive_window_size"
                        type="positiveInteger"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="round_trip_time"
                        type="duration"
                        minOccurs="0"
                        maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="rtpsReliableWriterProtocol">
        <xs:annotation>
            <xs:documentation>
                QoS related to the reliable writer protocol defined in RTPS.
                It is used to configure a reliable writer according to RTPS protocol.
                The reliability protocol settings are applied to batches instead of individual data samples when batching is enabled.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="low_watermark"
                        type="nonNegativeInteger"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="high_watermark"
                        type="positiveInteger_UNLIMITED"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="heartbeat_period"
                        type="duration"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="fast_heartbeat_period"
                        type="duration"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="late_joiner_heartbeat_period"
                        type="duration"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="virtual_heartbeat_period"
                        type="durationAuto"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="samples_per_virtual_heartbeat"
                        type="positiveInteger_UNLIMITED"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="max_heartbeat_retries"
                        type="positiveInteger_UNLIMITED"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="inactivate_nonprogressing_readers"
                        type="boolean"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="heartbeats_per_max_samples"
                        type="nonNegativeInteger"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="min_nack_response_delay"
                        type="duration"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="max_nack_response_delay"
                        type="duration"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="nack_suppression_duration"
                        type="duration"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="max_bytes_per_nack_response"
                        type="positiveInteger_UNLIMITED"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="disable_positive_acks_min_sample_keep_duration"
                        type="duration"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="disable_positive_acks_max_sample_keep_duration"
                        type="duration"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="disable_positive_acks_enable_adaptive_sample_keep_duration"
                        type="boolean"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="disable_positive_acks_decrease_sample_keep_duration_factor"
                        type="positiveInteger"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="disable_positive_acks_increase_sample_keep_duration_factor"
                        type="positiveInteger"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="min_send_window_size"
                        type="positiveInteger_UNLIMITED"
                        minOccurs="0"
                        maxOccurs="1"/>
             <xs:element name="max_send_window_size"
                        type="positiveInteger_UNLIMITED"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="send_window_update_period"
                        type="duration"
                        minOccurs="0"
                        maxOccurs="1"/>
             <xs:element name="send_window_increase_factor"
                        type="positiveInteger_UNLIMITED"
                        minOccurs="0"
                        maxOccurs="1"/>
             <xs:element name="send_window_decrease_factor"
                        type="positiveInteger_UNLIMITED"
                        minOccurs="0"
                        maxOccurs="1"/>
             <xs:element name="enable_multicast_periodic_heartbeat"
                        type="boolean"
                        minOccurs="0"
                        maxOccurs="1"/>
             <xs:element name="multicast_resend_threshold"
                        type="positiveInteger_UNLIMITED"
                        minOccurs="0"
                        maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="virtualGuid">
        <xs:annotation>
            <xs:documentation>
                The virtual GUID (Global Unique Identifier).
                The virtual GUID is used to uniquely identify different incarnations of the same DataReader.
                The association between a DataReader and its persisted state is done using the virtual GUID.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="value" type="string_GUID_AUTO" minOccurs="0"/>
        </xs:all>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="nonNegativeIntegerSeq">
        <xs:annotation>
            <xs:documentation>
                A sequence of elements of non-negative integers
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="element" type="nonNegativeInteger" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:simpleType name="threadSettingsCpuRotation">
        <xs:annotation>
            <xs:documentation>
                &lt;THREAD_SETTINGS_CPU_NO_ROTATION|THREAD_SETTINGS_CPU_RR_ROTATION&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:whiteSpace value="collapse"/>
            <xs:enumeration value="THREAD_SETTINGS_CPU_NO_ROTATION"/>
            <xs:enumeration value="THREAD_SETTINGS_CPU_RR_ROTATION"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- RTI extension -->
    <xs:complexType name="threadSettings">
        <xs:annotation>
            <xs:documentation>
                The properties of a thread of execution.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="mask"
                        type="threadKindMask"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="priority"
                        type="positiveInteger_THREAD_PRIORITY_DEFAULT"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="stack_size"
                        type="positiveInteger_THREAD_STACK_SIZE_DEFAULT"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="cpu_list"
                        type="nonNegativeIntegerSeq"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="cpu_rotation"
                        type="threadSettingsCpuRotation"
                        minOccurs="0"
                        maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="transportUnicastSettings">
        <xs:annotation>
            <xs:documentation>
                Type representing a list of unicast locators.
                A unicast locator specifies a transport class, a unicast address, and a unicast port number on which messages can be received by an entity.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="transports"
                        type="stringSeq"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="receive_port"
                        type="nonNegativeInteger"
                        minOccurs="0"
                        maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <xs:complexType name="transportMulticastMappingFunction">
        <xs:annotation>
            <xs:documentation>
                Type representing a function defined into an external library.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="dll"
                        type="string"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="function_name"
                        type="string"
                        minOccurs="0"
                        maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="transportMulticastMapping">
        <xs:annotation>
            <xs:documentation>
                Type representing a list of addresses associeted with a topic expression.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="addresses"
                        type="string"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="topic_expression"
                        type="string"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="mapping_function"
                        type="transportMulticastMappingFunction"
                        minOccurs="0"
                        maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="transportUnicastSettingsSeq">
        <xs:annotation>
            <xs:documentation>
                Declares a sequence of elements, which correspond to different TransportUnicastSettings_t
                entities.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="element" type="transportUnicastSettings" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="transportMulticastMappingSeq">
        <xs:annotation>
            <xs:documentation>
                Declares a sequence of elements, which correspond to different TransportMulticast_t
                entities.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="element" type="transportMulticastMapping" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="transportMulticastSettings">
        <xs:annotation>
            <xs:documentation>
                Type representing a list of multicast locators.
                A multicast locator specifies a transport class, a multicast address, and a multicast port number on which messages can be received by an entity.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="transports"
                        type="stringSeq"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="receive_address"
                        type="inetAddress"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="receive_port"
                        type="nonNegativeInteger"
                        minOccurs="0"
                        maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="transportMulticastSettingsSeq">
        <xs:annotation>
            <xs:documentation>
                Declares a sequence of elements, which correspond to different TransportMulticastSettings_t
                entities.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="element" type="transportMulticastSettings" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="channelSettings">
        <xs:annotation>
            <xs:documentation>
                Type used to configure the properties of a channel.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="multicast_settings"
                        type="transportMulticastSettingsSeq"
                        minOccurs="1"
                        maxOccurs="1"/>
            <xs:element name="filter_expression"
                        type="string"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="priority"
                        type="integer"
                        minOccurs="0"
                        maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="channelSettingsSeq">
        <xs:annotation>
            <xs:documentation>
                Declares a sequence of elements, which correspond to different ChannelSettings_t
                entities.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="element" type="channelSettings" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="propertyValue">
        <xs:annotation>
            <xs:documentation>
                Properties are name/value pairs objects.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="name"
                        type="propertyName"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="value"
                        type="string"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="propagate"
                        type="boolean"
                        minOccurs="0"
                        maxOccurs="1"/>
        </xs:sequence>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="propertyValueSeq">
        <xs:annotation>
            <xs:documentation>
                Declares a sequence of elements, which correspond to different Property_t
                entities.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="element" type="propertyValue" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="encapsulationIdSeq">
        <xs:annotation>
            <xs:documentation>
                Declares a sequence of encapsulations.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="element" type="unsignedShort_ENCAPSULATION" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="transportEncapsulationSettings">
        <xs:annotation>
            <xs:documentation>
                Type representing a list of transport encapsulations associated to a set of transports.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="transports"
                        type="stringSeq"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="encapsulations"
                        type="encapsulationIdSeq"
                        minOccurs="0"
                        maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <!-- RTI Extension -->    
    <xs:complexType name="transportEncapsulationSettingsSeq">
        <xs:annotation>
            <xs:documentation>
                Declares a sequence of elements, which correspond to different TransportEncapsulationSettings_t
                entities.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="element" type="transportEncapsulationSettings" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="endpointGroup">
        <xs:annotation>
            <xs:documentation>
                Endpoint groups are identified by a role_name and a quorum_count.                
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="role_name"
                        type="string"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="quorum_count"
                        type="positiveInteger_UNLIMITED"
                        minOccurs="0"
                        maxOccurs="1"/>
        </xs:sequence>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="endpointGroupSeq">
        <xs:annotation>
            <xs:documentation>
                Declares a sequence of elements, which correspond to different EndpointGroup_t
                entities.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="element" type="endpointGroup" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <!-- =================================================================== -->
    <!-- QoS Policies                                                        -->
    <!-- =================================================================== -->
    <xs:complexType name="deadlineQosPolicy">
        <xs:annotation>
            <xs:documentation>
                On a DataWriter, this QoS policy states the maximum period in
                which the application
                expects to call write() on the DataWriter, thus publishing a new sample. The application
                may call write() faster than the rate set by this QoS policy.
                On a DataReader, this QoS policy states the maximum period in
                which the application
                expects to receive new values for the Topic. The application may receive data faster than
                the rate set by this QoS policy.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="period" type="duration" minOccurs="0" maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <xs:complexType name="destinationOrderQosPolicy">
        <xs:annotation>
            <xs:documentation>
                This policy controls how each subscriber resolves the final value of a data instance that
                is written by multiple DataWriters.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="kind"
                        type="destinationOrderKind"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="source_timestamp_tolerance"
                        type="duration"
                        minOccurs="0"
                        maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <xs:complexType name="durabilityQosPolicy">
        <xs:annotation>
            <xs:documentation>
                The Durability QoS policy controls whether or not, and how,
                published samples are
                stored by the DataWriter application for DataReaders that are found after the samples
                were initially written.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="kind"
                        type="durabilityKind"
                        default="VOLATILE_DURABILITY_QOS"
                        minOccurs="0"
                        maxOccurs="1"/>
            <!-- RTI extension -->
            <xs:element name="direct_communication"
                        type="boolean"
                        minOccurs="0"
                        maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <xs:complexType name="durabilityServiceQosPolicy">
        <xs:annotation>
            <xs:documentation>
                This QoS policy is only used if the DURABILITY QoS policy is
                PERSISTENT or TRANSIENT
                and you are using RTI Persistence Service, an optional product which may be
                purchased separately.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="service_cleanup_delay"
                        type="duration"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="history_kind"
                        type="historyKind"
                        default="KEEP_LAST_HISTORY_QOS"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="history_depth"
                        type="positiveInteger"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="max_samples"
                        type="positiveInteger_UNLIMITED"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="max_instances"
                        type="positiveInteger_UNLIMITED"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="max_samples_per_instance"
                        type="positiveInteger_UNLIMITED"
                        minOccurs="0"
                        maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <xs:complexType name="entityFactoryQosPolicy">
        <xs:annotation>
            <xs:documentation>
                The Entity Factory QoS policy is a mechanism whereby a user can indicate whether entities
                should be automatically enabled upon creation by their factory or whether
                enabling should be deferred to a later time of the user's own choosing.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="autoenable_created_entities" type="boolean" default="true" minOccurs="0"/>
        </xs:all>
    </xs:complexType>

    <xs:complexType name="groupDataQosPolicy">
        <xs:annotation>
            <xs:documentation>
                This QoS policy provides an area where your application can
                store additional information
                related to the Publisher and Subscriber. This information is passed between applications
                during discovery using built-in topics.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="value" type="byteData" minOccurs="0"/>
        </xs:all>
    </xs:complexType>

    <xs:complexType name="historyQosPolicy">
        <xs:annotation>
            <xs:documentation>
                This QoS policy configures the number of samples that RTI
                Data Distribution Service will
                store locally for DataWriters and DataReaders.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="kind"
                        type="historyKind"
                        default="KEEP_LAST_HISTORY_QOS"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="depth"
                        type="positiveInteger"
                        default="1"
                        minOccurs="0"
                        maxOccurs="1"/>
            <!-- RTI extension -->
            <xs:element name="refilter"
                        type="refilterKind"
                        default="NONE_REFILTER_QOS"
                        minOccurs="0"
                        maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <xs:complexType name="latencyBudgetQosPolicy">
        <xs:annotation>
            <xs:documentation>
                This QoS policy is used to suggest the maximum acceptable delay that is acceptable
                between when data is written and when data is received.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="duration" type="duration" minOccurs="0"/>
        </xs:all>
    </xs:complexType>

    <xs:complexType name="lifespanQosPolicy">
        <xs:annotation>
            <xs:documentation>
                The purpose of this QoS is to avoid delivering stale data to the application. Each data
                sample written by a DataWriter has an associated expiration time, beyond which the
                data should not be delivered to any application. Once the sample expires, the data will
                be removed from the DataReader caches, as well as from the transient and persistent
                information caches.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="duration" type="duration" minOccurs="0"/>
        </xs:all>
    </xs:complexType>

    <xs:complexType name="livelinessQosPolicy">
        <xs:annotation>
            <xs:documentation>
                The LIVELINESS QoS policy specifies how RTI Data Distribution
                Service determines
                whether a DataWriter is "alive". A DataWriter's liveliness is used in combination with
                the OWNERSHIP QoS policy to maintain ownership of an instance
                (note that the DEADLINE QoS policy
                is also used to change ownership when a DataWriter is still alive)
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="kind"
                        type="livelinessKind"
                        default="AUTOMATIC_LIVELINESS_QOS"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="lease_duration"
                        type="duration"
                        minOccurs="0"
                        maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <xs:complexType name="ownershipQosPolicy">
        <xs:annotation>
            <xs:documentation>
                The OWNERSHIP QoS policy specifies whether a DataReader will
                see changes to an
                instance of a Topic from multiple DataWriters. For non-keyed Topics, there is only one
                instance of the Topic.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="kind" type="ownershipKind" minOccurs="0"/>
        </xs:all>
    </xs:complexType>

    <xs:complexType name="ownershipStrengthQosPolicy">
        <xs:annotation>
            <xs:documentation>
                The OWNERSHIP_STRENGTH QoS policy is used to rank DataWriters
                of the same
                instance of a Topic, so that RTI Data Distribution Service can decide which DataWriter will
                have ownership of the instance when the OWNERSHIP QoS policy
                (Section 6.5.13) is set
                to EXCLUSIVE.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="value" type="nonNegativeInteger" minOccurs="0"/>
        </xs:all>
    </xs:complexType>

    <xs:complexType name="partitionQosPolicy">
        <xs:annotation>
            <xs:documentation>
                The PARTITION QoS provides another way to control which DataWriters will match
                and thus communicate with which DataReaders. It can be used to prevent DataWriters
                and DataReaders that would have otherwise matched with the same Topic and compatible
                QoS policies from talking to each other. Much in the same way
                that only applications
                within the same DDS domain will communicate with each other, only DataWriters and
                DataReaders that belong to the same partition can talk to each other.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="name"
                        type="stringSeq"
                        minOccurs="0"
                        maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <xs:complexType name="presentationQosPolicy">
        <xs:annotation>
            <xs:documentation>
                Since data samples are sent independently over networks that may deliver packets out
                of order, the PRESENTATION QoS policy allows you to control
                how a Subscriber sorts
                and orders the received samples in the DataReader's queue.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="access_scope"
                        type="presentationAccessScopeKind"
                        default="INSTANCE_PRESENTATION_QOS"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="coherent_access"
                        type="boolean"
                        default="false"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="ordered_access"
                        type="boolean"
                        default="false"
                        minOccurs="0"
                        maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <xs:complexType name="subscriberPresentationQosPolicy">
        <xs:annotation>
            <xs:documentation>
                Since data samples are sent independently over networks that may deliver packets out
                of order, the PRESENTATION QoS policy allows you to control
                how a Subscriber sorts
                and orders the received samples in the DataReader's queue.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="access_scope"
                        type="subscriberPresentationAccessScopeKind"
                        default="INSTANCE_PRESENTATION_QOS"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="coherent_access"
                        type="boolean"
                        default="false"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="ordered_access"
                        type="boolean"
                        default="false"
                        minOccurs="0"
                        maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <xs:complexType name="readerDataLifecycleQosPolicy">
        <xs:annotation>
            <xs:documentation>
                This policy controls the behavior of the DataReader with regards to the lifecycle of the
                data instances it manages, that is, the data instances that have been received and for
                which the DataReader maintains some internal resources.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="autopurge_nowriter_samples_delay" type="duration" minOccurs="0"/>
            <xs:element name="autopurge_disposed_samples_delay" type="duration" minOccurs="0"/>
        </xs:all>
    </xs:complexType>

    <xs:complexType name="reliabilityQosPolicy">
        <xs:annotation>
            <xs:documentation>
                This RELIABILITY QoS policy determines whether or not data
                published by a
                DataWriter will be reliably delivered by RTI Data Distribution Service to matching
                DataReaders.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="kind"
                        type="reliabilityKind"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="max_blocking_time"
                        type="duration"
                        minOccurs="0"
                        maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <xs:complexType name="publishModeQosPolicy">
        <xs:annotation>
            <xs:documentation>
                This QoS policy determines the DataWriter's publishing mode,
                either asynchronous or synchronous.
                The publishing mode controls whether data is written synchronously in the context of
                the user thread when calling write(), or asynchronously in the context of a separate
                thread internal to RTI Data Distribution Service.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element maxOccurs="1" minOccurs="0" name="kind" type="publishModeKind" default="SYNCHRONOUS_PUBLISH_MODE_QOS" />
            <xs:element maxOccurs="1" minOccurs="0" name="flow_controller_name" type="string_FLOW_CONTROLLER_NAME" default="DEFAULT_FLOW_CONTROLLER_NAME" />
            <xs:element maxOccurs="1" minOccurs="0" name="priority" type="integer" />
        </xs:all>
    </xs:complexType>

    <xs:complexType name="resourceLimitsQosPolicy">
        <xs:annotation>
            <xs:documentation>
                The RESOURCE_LIMITS QoS policy controls the memory resources
                that RTI Data Distribution
                Service allocates and uses for DataWriter or DataReader. One of the most important
                fields is max_samples, which sets the size and causes memory to be allocated for the
                send or receive queues.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="max_samples"
                        type="positiveInteger_UNLIMITED"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="max_instances"
                        type="positiveInteger_UNLIMITED"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="max_samples_per_instance"
                        type="positiveInteger_UNLIMITED"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="initial_samples"
                        type="positiveInteger"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="initial_instances"
                        type="positiveInteger"
                        minOccurs="0"
                        maxOccurs="1"/>
            <xs:element name="instance_hash_buckets"
                        type="positiveInteger"
                        minOccurs="0"
                        maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <xs:complexType name="timeBasedFilterQosPolicy">
        <xs:annotation>
            <xs:documentation>
                This TIME_BASED_FILTER QoS policy allows you to specify that
                data should not be delivered more than once per-specified
                period for each data instance, regardless of how fast
                DataWriters are publishing new samples of the data instance.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="minimum_separation" type="duration" minOccurs="0"/>
        </xs:all>
    </xs:complexType>

    <xs:complexType name="topicDataQosPolicy">
        <xs:annotation>
            <xs:documentation>
                This QoS policy provides an area where your application can
                store additional information
                related to the Topic. This information is passed between applications during discovery
                using built-in topics.
                How this information is used will be up to user code. RTI Data Distribution Service does
                not do anything with the information stored as TOPIC_DATA except to pass it to other
                applications.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="value" type="byteData" minOccurs="0"/>
        </xs:all>
    </xs:complexType>

    <xs:complexType name="transportPriorityQosPolicy">
        <xs:annotation>
            <xs:documentation>
                The TRANSPORT_PRIORITY QoS policy allows the user application
                to take advantage
                of transports that are capable of sending messages with different priorities.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="value" type="nonNegativeInteger" minOccurs="0"/>
        </xs:all>
    </xs:complexType>

    <xs:complexType name="userDataQosPolicy">
        <xs:annotation>
            <xs:documentation>
                This QoS policy provides an area where your application can
                store additional information
                related to a DomainParticipant, DataWriter, or DataReader. This information is passed
                between applications during discovery using built-in-topics. How this information is used
                will be up to user code.
                RTI Data Distribution Service does not do anything with the information stored as
                USER_DATA except to pass it to other applications.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="value" type="byteData" minOccurs="0"/>
        </xs:all>
    </xs:complexType>

    <xs:complexType name="writerDataLifecycleQosPolicy">
        <xs:annotation>
            <xs:documentation>
                This QoS policy determines if the DataWriter will dispose an instance when it is unregistered.
                When a DataWriter unregisters an instance, it means that this particular DataWriter has
                no more information/data on this instance. When an instance is disposed, it means that
                the instance is "dead"-there will no more information/data from any DataWriter on
                this instance.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="autodispose_unregistered_instances" type="boolean" default="true" minOccurs="0"/>
            <xs:element name="autopurge_unregistered_instances_delay" type="duration" minOccurs="0"/>
        </xs:all>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="typeSupportQosPolicy">
        <xs:annotation>
            <xs:documentation>
                &lt;&lt;RTI Extension&gt;&gt;
            </xs:documentation>
        </xs:annotation>
        <!--        <xs:all>
            <xs:element name="plugin_data" type="string" minOccurs="0"/>
        </xs:all>
        -->
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="dataReaderResourceLimitsQosPolicy">
        <xs:annotation>
            <xs:documentation>
                &lt;&lt;RTI Extension&gt;&gt;
                Resource limits that apply only to DataReader instances.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <!-- RTI extensions -->
            <xs:element name="max_remote_writers" type="positiveInteger_UNLIMITED" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_remote_writers_per_instance" type="positiveInteger_UNLIMITED" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_remote_writers_per_sample" type="positiveInteger_UNLIMITED" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_remote_virtual_writers" type="positiveInteger_UNLIMITED" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_remote_virtual_writers_per_instance" type="positiveInteger_UNLIMITED" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_samples_per_remote_writer" type="positiveInteger_UNLIMITED" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_samples_per_read" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_infos" type="positiveInteger_UNLIMITED" minOccurs="0" maxOccurs="1"/>
            <xs:element name="initial_remote_writers" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="initial_remote_writers_per_instance" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="initial_remote_virtual_writers" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="initial_remote_virtual_writers_per_instance" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="initial_infos" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="disable_fragmentation_support" type="boolean" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_fragmented_samples" type="positiveInteger_UNLIMITED" minOccurs="0" maxOccurs="1"/>
            <xs:element name="initial_fragmented_samples" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_fragmented_samples_per_remote_writer" type="positiveInteger_UNLIMITED" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_fragments_per_sample" type="positiveInteger_UNLIMITED" minOccurs="0" maxOccurs="1"/>
            <xs:element name="dynamically_allocate_fragmented_samples" type="boolean" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_total_instances" type="positiveInteger_UNLIMITED_AUTO_MAX_TOTAL_INSTANCES" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_query_condition_filters" type="positiveInteger" minOccurs="0" maxOccurs="1"/>

            <!-- RTI extensions built-in readers -->
            <xs:element name="initial_outstanding_reads" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_outstanding_reads" type="positiveInteger_UNLIMITED" minOccurs="0" maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="dataWriterResourceLimitsQosPolicy">
        <xs:annotation>
            <xs:documentation>
                &lt;&lt;RTI Extension&gt;&gt;
                Resource limits that apply only to DataWriter instances.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="initial_concurrent_blocking_threads" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_concurrent_blocking_threads" type="positiveInteger_UNLIMITED" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_remote_reader_filters" type="nonNegativeInteger_UNLIMITED" minOccurs="0" maxOccurs="1"/>
            <xs:element name="initial_batches" type="nonNegativeInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_batches" type="nonNegativeInteger_UNLIMITED" minOccurs="0" maxOccurs="1"/>
            <xs:element name="instance_replacement" type="dataWriterResourceLimitsInstanceReplacementKind" minOccurs="0" maxOccurs="1"/>
            <xs:element name="replace_empty_instances" type="boolean" minOccurs="0" maxOccurs="1"/>
            <xs:element name="autoregister_instances" type="boolean" minOccurs="0" maxOccurs="1"/>
            <xs:element name="initial_virtual_writers" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_virtual_writers" type="positiveInteger_UNLIMITED" minOccurs="0" maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="multiChannelQosPolicy">
        <xs:annotation>
            <xs:documentation>
                &lt;&lt;RTI Extension&gt;&gt;
                This QoS policy is used to partition the data published by a
                DataWriter across multiple
                channels . A channel is defined by a filter expression and a sequence of multicast locators.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="channels" type="channelSettingsSeq" minOccurs="0" maxOccurs="1"/>
            <xs:element name="filter_name" type="elementName" minOccurs="0" maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="propertyQosPolicy">
        <xs:annotation>
            <xs:documentation>
                &lt;&lt;RTI Extension&gt;&gt;
                The PROPERTY QoS policy can be used to associate a set of
                properties in the form of
                (name,value) pairs with a DataReader, DataWriter, or DomainParticipant. This is similar to
                the USER_DATA QoS policy, except this policy uses
                (name, value) pairs, and you can
                select whether or not a particular pair should be propagated
                (included in the built-in topic).
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="value" type="propertyValueSeq" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="entityNameQosPolicy">
        <xs:annotation>
            <xs:documentation>
                &lt;&lt;RTI Extension&gt;&gt;
                The purpose of this QoS is to allow the user to attach naming information to created
                Entity objects.
                It can only be 255 characters in length.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="name" type="entityName" minOccurs="0"/>
            <xs:element name="role_name" type="roleName" minOccurs="0"/>
        </xs:all>
    </xs:complexType>

    <xs:complexType name="dataReaderProtocolQosPolicy">
        <xs:annotation>
            <xs:documentation>
                &lt;&lt;RTI Extension&gt;&gt;
                Protocol that applies only to DataReader instances.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="virtual_guid" type="virtualGuid" minOccurs="0" maxOccurs="1"/>
            <xs:element name="rtps_object_id" type="integer_RTPS_AUTO_ID" minOccurs="0" maxOccurs="1"/>
            <xs:element name="expects_inline_qos" type="boolean" minOccurs="0" maxOccurs="1"/>
            <xs:element name="disable_positive_acks" type="boolean" minOccurs="0" maxOccurs="1"/>
            <xs:element name="propagate_dispose_of_unregistered_instances" type="boolean" minOccurs="0" maxOccurs="1"/>
            <xs:element name="rtps_reliable_reader" type="rtpsReliableReaderProtocol" minOccurs="0" maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="availabilityQosPolicy">
        <xs:annotation>
            <xs:documentation>
                &lt;&lt;RTI Extension&gt;&gt;
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="max_data_availability_waiting_time" type="durationAuto" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_endpoint_availability_waiting_time" type="durationAuto" minOccurs="0" maxOccurs="1"/>
            <xs:element name="required_matched_endpoint_groups" type="endpointGroupSeq" minOccurs="0" maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="dataWriterProtocolQosPolicy">
        <xs:annotation>
            <xs:documentation>
                &lt;&lt;RTI Extension&gt;&gt;
                Protocol that applies only to DataWriter instances.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="virtual_guid" type="virtualGuid" minOccurs="0" maxOccurs="1"/>
            <xs:element name="rtps_object_id" type="integer_RTPS_AUTO_ID" minOccurs="0" maxOccurs="1"/>
            <xs:element name="disable_positive_acks" type="boolean" minOccurs="0" maxOccurs="1"/>
            <xs:element name="disable_inline_keyhash" type="boolean" minOccurs="0" maxOccurs="1"/>
            <xs:element name="serialize_key_with_dispose" type="boolean" minOccurs="0" maxOccurs="1"/>
            <xs:element name="push_on_write" type="boolean" default="true" minOccurs="0" maxOccurs="1"/>
            <xs:element name="rtps_reliable_writer" type="rtpsReliableWriterProtocol" minOccurs="0" maxOccurs="1"/>
            <!--<xs:element name="initial_virtual_sequence_number" type="sequenceNumber" minOccurs="0" maxOccurs="1"/>-->
        </xs:all>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="dataWriterBatchQosPolicy">
        <xs:annotation>
            <xs:documentation>
                &lt;&lt;RTI Extension&gt;&gt;
                This QoS policy can be used to decrease the amount of
                communication overhead associated
                with the transmission and (in the case of reliable communication) acknowledgement
                of small samples in order to increase throughput.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="enable" type="boolean" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_data_bytes" type="nonNegativeInteger_UNLIMITED" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_meta_data_bytes" type="nonNegativeInteger_UNLIMITED" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_samples" type="nonNegativeInteger_UNLIMITED" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_flush_delay" type="duration" minOccurs="0" maxOccurs="1"/>
            <xs:element name="source_timestamp_resolution" type="duration" minOccurs="0" maxOccurs="1"/>
            <xs:element name="thread_safe_write" type="boolean" minOccurs="0" maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="discoveryQosPolicy">
        <xs:annotation>
            <xs:documentation>
                &lt;&lt;RTI Extension&gt;&gt;
                The DISCOVERY QoS configures how DomainParticipants discover each other on the
                network.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="enabled_transports" type="stringSeq" minOccurs="0" maxOccurs="1"/>
            <xs:element name="multicast_receive_addresses" type="inetAddressSeq" minOccurs="0" maxOccurs="1"/>
            <xs:element name="metatraffic_transport_priority" type="nonNegativeInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="initial_peers" type="stringSeq" minOccurs="0" maxOccurs="1"/>
            <xs:element name="accept_unknown_peers" type="boolean" minOccurs="0" maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="discoveryConfigQosPolicy">
        <xs:annotation>
            <xs:documentation>
                &lt;&lt;RTI Extension&gt;&gt;
                The DISCOVERY_CONFIG QoS policy is used to tune the discovery
                process. It controls
                how often to send discovery packets, how to determine when participants are alive or
                dead, and resources used by the discovery mechanism.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="participant_liveliness_lease_duration" type="duration" minOccurs="0" maxOccurs="1"/>
            <xs:element name="participant_liveliness_assert_period" type="duration" minOccurs="0" maxOccurs="1"/>
            <xs:element name="remote_participant_purge_kind" type="remoteParticipantPurgeKind" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_liveliness_loss_detection_period" type="duration" minOccurs="0" maxOccurs="1"/>
            <xs:element name="initial_participant_announcements" type="nonNegativeInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="min_initial_participant_announcement_period" type="duration" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_initial_participant_announcement_period" type="duration" minOccurs="0" maxOccurs="1"/>
            <xs:element name="participant_reader_resource_limits" type="builtinTopicReaderResourceLimits" minOccurs="0" maxOccurs="1"/>
            <xs:element name="publication_reader" type="rtpsReliableReaderProtocol" minOccurs="0" maxOccurs="1"/>
            <xs:element name="publication_reader_resource_limits" type="builtinTopicReaderResourceLimits" minOccurs="0" maxOccurs="1"/>
            <xs:element name="subscription_reader" type="rtpsReliableReaderProtocol" minOccurs="0" maxOccurs="1"/>
            <xs:element name="subscription_reader_resource_limits" type="builtinTopicReaderResourceLimits" minOccurs="0" maxOccurs="1"/>
            <xs:element name="publication_writer" type="rtpsReliableWriterProtocol" minOccurs="0" maxOccurs="1"/>
            <xs:element name="publication_writer_data_lifecycle" type="writerDataLifecycleQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="subscription_writer" type="rtpsReliableWriterProtocol" minOccurs="0" maxOccurs="1"/>
            <xs:element name="subscription_writer_data_lifecycle" type="writerDataLifecycleQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="builtin_discovery_plugins" type="discoveryPluginKindMask" minOccurs="0" maxOccurs="1"/>
            <xs:element name="participant_message_reader" type="rtpsReliableReaderProtocol" minOccurs="0" maxOccurs="1"/>
            <xs:element name="participant_message_writer" type="rtpsReliableWriterProtocol" minOccurs="0" maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="domainParticipantResourceLimitsQosPolicy">
        <xs:annotation>
            <xs:documentation>
                &lt;&lt;RTI Extension&gt;&gt;
                The DOMAIN_PARTICIPANT_RESOURCE_LIMITS QoS policy configures
                the
                resources used by a DomainParticipant. Many of these resources are used by the internal
                RTI Data Distribution Service database to store information about locally and remotely
                created DDS Entities. Some of the parameters configure the data structures used to
                search through the database efficiently. Finally, there are parameters that limit the sizes
                of variable-length data fields.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="local_writer_allocation" type="allocationSettings" minOccurs="0" maxOccurs="1"/>
            <xs:element name="local_reader_allocation" type="allocationSettings" minOccurs="0" maxOccurs="1"/>
            <xs:element name="local_publisher_allocation" type="allocationSettings" minOccurs="0" maxOccurs="1"/>
            <xs:element name="local_subscriber_allocation" type="allocationSettings" minOccurs="0" maxOccurs="1"/>
            <xs:element name="local_topic_allocation" type="allocationSettings" minOccurs="0" maxOccurs="1"/>
            <xs:element name="remote_writer_allocation" type="allocationSettings" minOccurs="0" maxOccurs="1"/>
            <xs:element name="remote_reader_allocation" type="allocationSettings" minOccurs="0" maxOccurs="1"/>
            <xs:element name="remote_participant_allocation" type="allocationSettings" minOccurs="0" maxOccurs="1"/>
            <xs:element name="matching_writer_reader_pair_allocation" type="allocationSettings" minOccurs="0" maxOccurs="1"/>
            <xs:element name="matching_reader_writer_pair_allocation" type="allocationSettings" minOccurs="0" maxOccurs="1"/>
            <xs:element name="ignored_entity_allocation" type="allocationSettings" minOccurs="0" maxOccurs="1"/>
            <xs:element name="content_filtered_topic_allocation" type="allocationSettings" minOccurs="0" maxOccurs="1"/>
            <xs:element name="content_filter_allocation" type="allocationSettings" minOccurs="0" maxOccurs="1"/>
            <xs:element name="read_condition_allocation" type="allocationSettings" minOccurs="0" maxOccurs="1"/>
            <xs:element name="query_condition_allocation" type="allocationSettings" minOccurs="0" maxOccurs="1"/>
            <xs:element name="outstanding_asynchronous_sample_allocation" type="allocationSettings" minOccurs="0" maxOccurs="1"/>
            <xs:element name="flow_controller_allocation" type="allocationSettings" minOccurs="0" maxOccurs="1"/>
            <xs:element name="local_writer_hash_buckets" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="local_reader_hash_buckets" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="local_publisher_hash_buckets" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="local_subscriber_hash_buckets" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="local_topic_hash_buckets" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="remote_writer_hash_buckets" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="remote_reader_hash_buckets" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="remote_participant_hash_buckets" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="matching_writer_reader_pair_hash_buckets" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="matching_reader_writer_pair_hash_buckets" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="ignored_entity_hash_buckets" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="content_filtered_topic_hash_buckets" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="content_filter_hash_buckets" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="flow_controller_hash_buckets" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_gather_destinations" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="participant_user_data_max_length" type="nonNegativeInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="topic_data_max_length" type="nonNegativeInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="publisher_group_data_max_length" type="nonNegativeInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="subscriber_group_data_max_length" type="nonNegativeInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="writer_user_data_max_length" type="nonNegativeInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="reader_user_data_max_length" type="nonNegativeInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_partitions" type="nonNegativeInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_partition_cumulative_characters" type="nonNegativeInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="type_code_max_serialized_length" type="nonNegativeInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="contentfilter_property_max_length" type="nonNegativeInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="participant_property_list_max_length" type="nonNegativeInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="participant_property_string_max_length" type="nonNegativeInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="writer_property_list_max_length" type="nonNegativeInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="writer_property_string_max_length" type="nonNegativeInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="reader_property_list_max_length" type="nonNegativeInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="reader_property_string_max_length" type="nonNegativeInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="channel_seq_max_length" type="nonNegativeInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="channel_filter_expression_max_length" type="nonNegativeInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_endpoint_groups" type="nonNegativeInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_endpoint_group_cumulative_characters" type="nonNegativeInteger" minOccurs="0" maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="domainParticipantWireProtocolQosPolicy">
        <xs:annotation>
            <xs:documentation>
                &lt;&lt;RTI Extension&gt;&gt;
                The WIRE_PROTOCOL QoS policy configures some Real-Time
                Publish Subscribe
                (RTPS) protocol-related properties for the DomainParticipant. The open RTPS protocol is
                used by RTI Data Distribution Service to format and interpret messages between Domain-
                Participants.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="participant_id" type="integer" minOccurs="0" maxOccurs="1"/>
	    
            <xs:element name="rtps_auto_id_kind" type="WireProtocolQosPolicyAutoKind" minOccurs="0" maxOccurs="1"/>
            <xs:element name="rtps_host_id" type="integer_RTPS_AUTO_ID" minOccurs="0" maxOccurs="1"/>
            <xs:element name="rtps_app_id" type="integer_RTPS_AUTO_ID" minOccurs="0" maxOccurs="1"/>
            <xs:element name="rtps_instance_id" type="integer_RTPS_AUTO_ID" minOccurs="0" maxOccurs="1"/>
            <xs:element name="rtps_well_known_ports" type="rtpsWellKnownPorts" minOccurs="0" maxOccurs="1"/>
            <xs:element name="rtps_reserved_port_mask" type="rtpsReservedPortKindMask" minOccurs="0" maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="eventQosPolicy">
        <xs:annotation>
            <xs:documentation>
                &lt;&lt;RTI Extension&gt;&gt;
                The EVENT QoS policy configures the internal RTI Data
                Distribution Service Event thread.
                The purpose of the Event thread is described in Event Thread.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="thread" type="threadSettings" minOccurs="0" maxOccurs="1"/>
            <xs:element name="initial_count" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_count" type="positiveInteger_UNLIMITED" minOccurs="0" maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="receiverPoolQosPolicy">
        <xs:annotation>
            <xs:documentation>
                &lt;&lt;RTI Extension&gt;&gt;
                The RECEIVER_POOL QoS policy configures the internal RTI Data
                Distribution Service
                thread used to process the data received from a transport.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="thread" type="threadSettings" minOccurs="0" maxOccurs="1"/>
            <xs:element name="buffer_size" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="buffer_alignment" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="builtinTopicReaderResourceLimits">
        <xs:annotation>
            <xs:documentation>
                &lt;&lt;RTI Extension&gt;&gt;
                Built-in topic reader's resource limits.
                Defines the resources that can be used for a built-in-topic data reader.
                A built-in topic data reader subscribes reliably to built-in topics containing
                declarations of new entities or updates to existing entities in the domain.
                Keys are used to differentiate among entities of the same type.
                RTI Data Distribution Service assigns a unique key to each entity in a domain.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="initial_samples" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_samples" type="positiveInteger_UNLIMITED" minOccurs="0" maxOccurs="1"/>
            <xs:element name="initial_infos" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_infos" type="positiveInteger_UNLIMITED" minOccurs="0" maxOccurs="1"/>
            <xs:element name="initial_outstanding_reads" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_outstanding_reads" type="positiveInteger_UNLIMITED" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_samples_per_read" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="asynchronousPublisherQosPolicy">
        <xs:annotation>
            <xs:documentation>
                &lt;&lt;RTI Extension&gt;&gt;
                This QoS policy is used to enable or disable asynchronous
                publishing and asynchronous
                batch flushing for the Publisher.
                If enabled, the Publisher will spawn two threads, one for asynchronous publishing and
                one for asynchronous batch flushing.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="disable_asynchronous_write" type="boolean" default="false" minOccurs="0" maxOccurs="1"/>
            <xs:element name="thread" type="threadSettings" minOccurs="0" maxOccurs="1"/>
            <xs:element name="disable_asynchronous_batch" type="boolean" default="false" minOccurs="0" maxOccurs="1"/>
            <xs:element name="asynchronous_batch_thread" type="threadSettings" minOccurs="0" maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="databaseQosPolicy">
        <xs:annotation>
            <xs:documentation>
                &lt;&lt;RTI Extension&gt;&gt;
                The DATABASE QoS policy configures the internal "database"
                (thread and data structures)
                used by RTI Data Distribution Service to hold information about locally created
                DDS entities and remote entities that are discovered through the discovery process.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="thread" type="threadSettings" minOccurs="0" maxOccurs="1"/>
            <xs:element name="shutdown_timeout" type="duration" minOccurs="0" maxOccurs="1"/>
            <xs:element name="cleanup_period" type="duration" minOccurs="0" maxOccurs="1"/>
            <xs:element name="shutdown_cleanup_period" type="duration" minOccurs="0" maxOccurs="1"/>
            <xs:element name="initial_records" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_skiplist_level" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="table_allocation_block_size" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="initial_weak_references" type="positiveInteger" minOccurs="0" maxOccurs="1"/>
            <xs:element name="max_weak_references" type="positiveInteger_UNLIMITED" minOccurs="0" maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="exclusiveAreaQosPolicy">
        <xs:annotation>
            <xs:documentation>
                &lt;&lt;RTI Extension&gt;&gt;
                This QoS policy controls the creation and use of Exclusive
                Areas. An exclusive area (EA)
                is a mutex with built-in deadlock protection when multiple EAs are in use. It is used to
                provide mutual exclusion among different threads of execution. Multiple EAs allow
                greater concurrency by the internal and user threads when executing RTI Data Distribution
                Service code.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="use_shared_exclusive_area" type="boolean" default="false" minOccurs="0"/>
        </xs:all>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="transportBuiltinQosPolicy">
        <xs:annotation>
            <xs:documentation>
                &lt;&lt;RTI Extension&gt;&gt;
                The TRANSPORT_BUILTIN QoS policy specifies which built-in
                transports can be used
                by the DomainParticipant. RTI Data Distribution Service provides two built-in transports,
                UDPv4 and shared memory. UDPv4 uses the IPv4 UDP protocol to send and receive
                messages. The shared memory transport uses system shared memory for inter-process
                communications.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="mask" type="transportBuiltinKindMask" minOccurs="0"/>
        </xs:all>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="transportSelectionQosPolicy">
        <xs:annotation>
            <xs:documentation>
                &lt;&lt;RTI Extension&gt;&gt;
                The TRANSPORT_SELECTION QoS policy allows you to select the
                transports that have
                been installed with the DomainParticipant to be used by the DataWriter or DataReader.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="enabled_transports" type="stringSeq" minOccurs="0"/>
        </xs:all>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="transportUnicastQosPolicy">
        <xs:annotation>
            <xs:documentation>
                &lt;&lt;RTI Extension&gt;&gt;
                The TRANSPORT_UNICAST QoS policy allows you to specify
                unicast network
                addresses to be used by DomainParticipant, DataWriters and DataReaders for receiving
                messages. DomainParticipants receive messages to support the discovery process.
                DataWriters may receive ACK/NACK messages to support the reliable protocol.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="value" type="transportUnicastSettingsSeq" minOccurs="0"/>
        </xs:all>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="transportMulticastMappingQosPolicy">
        <xs:annotation>
            <xs:documentation>
                &lt;&lt;RTI Extension&gt;&gt;
                The MULTICAST_MAPPING QoS policy allows you to specify
                a list of multicast addresses
                to be used by DataReaders for receiving
                messages. The address is choosed using the topicname.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="value" type="transportMulticastMappingSeq" minOccurs="0"/>
        </xs:all>
    </xs:complexType>


    <!-- RTI extension -->
    <xs:complexType name="transportMulticastQosPolicy">
        <xs:annotation>
            <xs:documentation>
                &lt;&lt;RTI Extension&gt;&gt;
                This QoS policy allows you to specify network multicast
                addresses to be used by
                DataWriters when sending data samples to this DataReader.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="value" type="transportMulticastSettingsSeq" minOccurs="0"/>
            <xs:element name="kind" type="transportMulticastQosPolicyKind" minOccurs="0"/>
        </xs:all>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="transportEncapsulationQosPolicy">
        <xs:annotation>
            <xs:documentation>
                &lt;&lt;RTI Extension&gt;&gt;
                This QoS policy allows you to associate encapsulation formats
                to transport destinations.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="value" type="transportEncapsulationSettingsSeq" minOccurs="0"/>
        </xs:all>
    </xs:complexType>

    <!-- RTI extension -->
    <xs:complexType name="loggingQosPolicy">
        <xs:annotation>
            <xs:documentation>
                &lt;&lt;RTI Extension&gt;&gt;
                The Logging QoS policy configures the NDDS Config Logger.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="verbosity" type="loggingVerbosity" minOccurs="0" maxOccurs="1"/>
            <xs:element name="category" type="loggingCategory" minOccurs="0" maxOccurs="1"/>
            <xs:element name="print_format" type="loggingPrintFormat" minOccurs="0" maxOccurs="1"/>
            <xs:element name="output_file" type="string" minOccurs="0" maxOccurs="1"/>
        </xs:all>
    </xs:complexType>

    <!-- =================================================================== -->
    <!-- QoS                                                                 -->
    <!-- =================================================================== -->

    <xs:complexType name="domainparticipantQos">
        <xs:annotation>
            <xs:documentation>
                QoS policies related to DomainParticipants.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="user_data" type="userDataQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="entity_factory" type="entityFactoryQosPolicy" minOccurs="0" maxOccurs="1"/>

            <!-- RTI extensions -->
            <xs:element name="transport_builtin" type="transportBuiltinQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="default_unicast" type="transportUnicastQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="multicast_mapping" type="transportMulticastMappingQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="discovery" type="discoveryQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="property" type="propertyQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="participant_name" type="entityNameQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="wire_protocol" type="domainParticipantWireProtocolQosPolicy" minOccurs="0" maxOccurs="1"/>
            <!--<xs:element name="type_support" type="typeSupportQosPolicy" minOccurs="0" maxOccurs="1"/>-->
            <xs:element name="resource_limits" type="domainParticipantResourceLimitsQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="event" type="eventQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="receiver_pool" type="receiverPoolQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="database" type="databaseQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="discovery_config" type="discoveryConfigQosPolicy" minOccurs="0" maxOccurs="1"/>
        </xs:all>

        <xs:attribute name="base_name" type="elementBaseName"/>
    </xs:complexType>

    <xs:complexType name="domainparticipantfactoryQos">
        <xs:annotation>
            <xs:documentation>
                QoS policies related to DomainParticipantFactory.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <!-- RTI extensions -->
            <xs:element name="logging" type="loggingQosPolicy" minOccurs="0" maxOccurs="1"/>
        </xs:all>

        <xs:attribute name="base_name" type="elementBaseName"/>
    </xs:complexType>

    <xs:complexType name="publisherQos">
        <xs:annotation>
            <xs:documentation>
                QoS policies related to Publishers.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="presentation" type="presentationQosPolicy" minOccurs="0"/>
            <xs:element name="partition" type="partitionQosPolicy" minOccurs="0"/>
            <xs:element name="group_data" type="groupDataQosPolicy" minOccurs="0"/>
            <xs:element name="entity_factory" type="entityFactoryQosPolicy" minOccurs="0"/>

            <!-- RTI extensions -->
            <xs:element name="asynchronous_publisher" type="asynchronousPublisherQosPolicy" minOccurs="0"/>
            <xs:element name="exclusive_area" type="exclusiveAreaQosPolicy" minOccurs="0"/>
        </xs:all>

        <xs:attribute name="base_name" type="elementBaseName"/>
    </xs:complexType>

    <xs:complexType name="subscriberQos">
        <xs:annotation>
            <xs:documentation>
                QoS policies related to Subscribers.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="presentation" type="subscriberPresentationQosPolicy" minOccurs="0"/>
            <xs:element name="partition" type="partitionQosPolicy" minOccurs="0"/>
            <xs:element name="group_data" type="groupDataQosPolicy" minOccurs="0"/>
            <xs:element name="entity_factory" type="entityFactoryQosPolicy" minOccurs="0"/>

            <!-- RTI extensions -->
            <xs:element name="exclusive_area" type="exclusiveAreaQosPolicy" minOccurs="0"/>
        </xs:all>

        <xs:attribute name="base_name" type="elementBaseName"/>
    </xs:complexType>

    <xs:complexType name="topicQos">
        <xs:annotation>
            <xs:documentation>
                QoS policies related to Topics.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="topic_data" type="topicDataQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="durability" type="durabilityQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="durability_service" type="durabilityServiceQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="deadline" type="deadlineQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="latency_budget" type="latencyBudgetQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="liveliness" type="livelinessQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="reliability" type="reliabilityQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="destination_order" type="destinationOrderQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="history" type="historyQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="resource_limits" type="resourceLimitsQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="transport_priority" type="transportPriorityQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="lifespan" type="lifespanQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="ownership" type="ownershipQosPolicy" minOccurs="0" maxOccurs="1"/>
        </xs:all>

        <xs:attribute name="base_name" type="elementBaseName"/>
        <xs:attribute name="topic_filter" type="topicNameFilter"/>
    </xs:complexType>

    <xs:complexType name="datareaderQos">
        <xs:annotation>
            <xs:documentation>
                QoS policies related to DataReaders.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="durability" type="durabilityQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="deadline" type="deadlineQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="latency_budget" type="latencyBudgetQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="liveliness" type="livelinessQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="reliability" type="reliabilityQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="destination_order" type="destinationOrderQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="history" type="historyQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="resource_limits" type="resourceLimitsQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="user_data" type="userDataQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="ownership" type="ownershipQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="time_based_filter" type="timeBasedFilterQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="reader_data_lifecycle" type="readerDataLifecycleQosPolicy" minOccurs="0" maxOccurs="1"/>

            <!-- RTI extensions -->
            <xs:element name="reader_resource_limits" type="dataReaderResourceLimitsQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="protocol" type="dataReaderProtocolQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="transport_selection" type="transportSelectionQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="unicast" type="transportUnicastQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="multicast" type="transportMulticastQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="property" type="propertyQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="multi_channel" type="multiChannelQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="encapsulation" type="transportEncapsulationQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="availability" type="availabilityQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="subscription_name" type="entityNameQosPolicy" minOccurs="0" maxOccurs="1"/>
            <!--<xs:element name="type_support" type="typeSupportQosPolicy" minOccurs="0" maxOccurs="1"/>            -->
        </xs:all>

        <xs:attribute name="base_name" type="elementBaseName"/>
        <xs:attribute name="topic_filter" type="topicNameFilter"/>
    </xs:complexType>

    <xs:complexType name="datawriterQos">
        <xs:annotation>
            <xs:documentation>
                QoS policies related to DataWriters.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="durability" type="durabilityQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="durability_service" type="durabilityServiceQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="deadline" type="deadlineQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="latency_budget" type="latencyBudgetQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="liveliness" type="livelinessQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="reliability" type="reliabilityQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="destination_order" type="destinationOrderQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="history" type="historyQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="resource_limits" type="resourceLimitsQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="transport_priority" type="transportPriorityQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="lifespan" type="lifespanQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="user_data" type="userDataQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="ownership" type="ownershipQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="ownership_strength" type="ownershipStrengthQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="writer_data_lifecycle" type="writerDataLifecycleQosPolicy" minOccurs="0" maxOccurs="1"/>

            <!-- RTI extensions -->
            <xs:element name="writer_resource_limits" type="dataWriterResourceLimitsQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="protocol" type="dataWriterProtocolQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="transport_selection" type="transportSelectionQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="unicast" type="transportUnicastQosPolicy" minOccurs="0" maxOccurs="1"/>
            <!--<xs:element name="type_support" type="typeSupportQosPolicy" minOccurs="0" maxOccurs="1"/>-->
            <xs:element name="publish_mode" type="publishModeQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="property" type="propertyQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="batch" type="dataWriterBatchQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="multi_channel" type="multiChannelQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="publication_name" type="entityNameQosPolicy" minOccurs="0" maxOccurs="1"/>
            <xs:element name="encapsulation" type="transportEncapsulationQosPolicy" minOccurs="0" maxOccurs="1"/>
        </xs:all>

        <xs:attribute name="base_name" type="elementBaseName"/>
        <xs:attribute name="topic_filter" type="topicNameFilter"/>
    </xs:complexType>


    <!-- =================================================================== -->
    <!-- QoS Profiles: Children of qos_profiles                              -->
    <!-- =================================================================== -->

    <xs:complexType name="domainparticipantQosProfileChild">
        <xs:annotation>
            <xs:documentation>
                This profile groups the QoS policies related to DomainParticipants.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="domainparticipantQos">
                <xs:attribute name="name" type="elementName"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="domainparticipantfactoryQosProfileChild">
        <xs:annotation>
            <xs:documentation>
                This profile groups the QoS policies related to DomainParticipantFactory.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="domainparticipantfactoryQos">
                <xs:attribute name="name" type="elementName"/>
             </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="topicQosProfileChild">
        <xs:annotation>
            <xs:documentation>
                This profile groups the QoS policies related to Topics.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="topicQos">
                <xs:attribute name="name" type="elementName"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="publisherQosProfileChild">
        <xs:annotation>
            <xs:documentation>
                This profile groups the QoS policies related to Publishers.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="publisherQos">
                <xs:attribute name="name" type="elementName"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="subscriberQosProfileChild">
        <xs:annotation>
            <xs:documentation>
                This profile groups the QoS policies related to Subscribers.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="subscriberQos">
                <xs:attribute name="name" type="elementName"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="datawriterQosProfileChild">
        <xs:annotation>
            <xs:documentation>
                This profile groups the QoS policies related to DataWriters.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="datawriterQos">
                <xs:attribute name="name" type="elementName"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="datareaderQosProfileChild">
        <xs:annotation>
            <xs:documentation>
                This profile groups the QoS policies related to DataReaders.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="datareaderQos">
                <xs:attribute name="name" type="elementName"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>


    <!-- =================================================================== -->
    <!-- QoS Profiles                                                        -->
    <!-- =================================================================== -->

    <xs:complexType name="domainparticipantQosProfile">
        <xs:annotation>
            <xs:documentation>
                This profile groups the QoS policies related to DomainParticipants.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="domainparticipantQos">
                <xs:attribute name="name" type="elementName" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="domainparticipantfactoryQosProfile">
        <xs:annotation>
            <xs:documentation>
                This profile groups the QoS policies related to DomainParticipantFactory.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="domainparticipantfactoryQos">
                <xs:attribute name="name" type="elementName" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="topicQosProfile">
        <xs:annotation>
            <xs:documentation>
                This profile groups the QoS policies related to Topics.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="topicQos">
                <xs:attribute name="name" type="elementName" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="publisherQosProfile">
        <xs:annotation>
            <xs:documentation>
                This profile groups the QoS policies related to Publishers.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="publisherQos">
                <xs:attribute name="name" type="elementName" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="subscriberQosProfile">
        <xs:annotation>
            <xs:documentation>
                This profile groups the QoS policies related to Subscribers.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="subscriberQos">
                <xs:attribute name="name" type="elementName" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="datawriterQosProfile">
        <xs:annotation>
            <xs:documentation>
                This profile groups the QoS policies related to DataWriters.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="datawriterQos">
                <xs:attribute name="name" type="elementName" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="datareaderQosProfile">
        <xs:annotation>
            <xs:documentation>
                This profile groups the QoS policies related to DataReaders.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="datareaderQos">
                <xs:attribute name="name" type="elementName" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="qosProfile">
        <xs:annotation>
            <xs:documentation>
                A QoS profile groups a set of related QoS.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:choice maxOccurs="unbounded">
                <xs:element name="datareader_qos" type="datareaderQosProfileChild" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="datawriter_qos" type="datawriterQosProfileChild" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="topic_qos" type="topicQosProfileChild" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="participant_qos" type="domainparticipantQosProfileChild" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="participant_factory_qos" type="domainparticipantfactoryQosProfileChild" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="publisher_qos" type="publisherQosProfileChild" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="subscriber_qos" type="subscriberQosProfileChild" minOccurs="0" maxOccurs="unbounded"/>
            </xs:choice>
        </xs:sequence>
        <xs:attribute name="name" type="elementName" use="required"/>
        <xs:attribute name="base_name" type="elementBaseName"/>
        <xs:attribute name="is_default_qos" type="boolean"/>
        <xs:attribute name="is_default_factory_profile" type="boolean"/>
    </xs:complexType>

    <xs:complexType name="qosLibrary">
        <xs:annotation>
            <xs:documentation>
                The Qos Library provides a way to group a set of related QoS under a namespace.
                The Qos inside a library are further organized into Qos Profiles.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:choice maxOccurs="unbounded">
                <xs:element name="qos_profile" type="qosProfile" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="datareader_qos" type="datareaderQosProfile" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="datawriter_qos" type="datawriterQosProfile" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="topic_qos" type="topicQosProfile" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="participant_qos" type="domainparticipantQosProfile" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="participant_factory_qos" type="domainparticipantfactoryQosProfile" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="publisher_qos" type="publisherQosProfile" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="subscriber_qos" type="subscriberQosProfile" minOccurs="0" maxOccurs="unbounded"/>
                <!-- RTI extensions -->
                <!--<xs:element name="reader_qos" type="datareaderQos" minOccurs="0" maxOccurs="unbounded"/>-->
                <!--<xs:element name="writer_qos" type="datawriterQos" minOccurs="0" maxOccurs="unbounded"/>-->
            </xs:choice>
        </xs:sequence>
        <xs:attribute name="name" type="elementName" use="required"/>
    </xs:complexType>


    <xs:element name="dds">
        <xs:complexType>
            <xs:sequence>
                <xs:choice maxOccurs="unbounded">
                    <xs:element name="qos_library" type="qosLibrary" minOccurs="0" maxOccurs="unbounded"/>
                </xs:choice>
            </xs:sequence>
            <xs:attribute name="version" type="xs:string" fixed="4.5e"/>
        </xs:complexType>
    </xs:element>
</xs:schema>
