«REM»
	ALMA - Atacama Large Millimiter Array
	(c) European Southern Observatory, 2002
	Copyright by ESO (in the framework of the ALMA collaboration),
	All rights reserved
	
	This library is free software; you can redistribute it and/or
	modify it under the terms of the GNU Lesser General Public
	License as published by the Free Software Foundation; either
	version 2.1 of the License, or (at your option) any later version.
	
	This library is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	Lesser General Public License for more details.
	 
	You should have received a copy of the GNU Lesser General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place, Suite 330, Boston,
	MA 02111-1307  USA
«ENDREM» 

«IMPORT uml»
«EXTENSION alma::acs::sm::templates::util»


«DEFINE Root FOR uml::State»
	«FILE "alma/ACS/"+this.containingStateMachine().name+"Impl/statemachine/" + name + "State.java"-»
package alma.ACS.«this.containingStateMachine().name»Impl.statemachine;
    
import alma.acs.genfw.runtime.sm.AcsSimpleState;
import alma.acs.genfw.runtime.sm.AcsState;
		«IF !parentState().isTopState()»
import alma.acs.logging.AcsLogger;
		«ENDIF»
		«IF doActivity != null-»
import alma.acs.genfw.runtime.sm.AcsDoActivity;
import alma.acs.genfw.runtime.sm.AcsStateActionException;
		«ENDIF-»
    
public class «name»State extends «parentState().name»SubStateAbstract implements AcsSimpleState
{
		«IF doActivity != null-»
	private AcsDoActivity m_doActivity;
		«ENDIF-»
	
		«EXPAND StateConstructor::StateConstructor-»
    
	public String stateName() 
	{
		return "«name.toUpperCase()»";
	}

	/**
	 * @see alma.acs.genfw.runtime.sm.AcsState#getStateHierarchy()
	 */
	public AcsState[] getStateHierarchy() 
	{
		return new AcsState[] {this};
	}

	public void activate(String eventName) 
	{
		synchronized (m_superContext) {
		«IF parentState().isTopState()-»
		m_context.setSubstate(this, eventName);
		«ELSE-»
		m_«parentState().name.toLowerCase()»Context.setSubstate(this, eventName);
		«ENDIF-»
		}
	}
	
    public void entry() 
    {
		«IF doActivity != null-»
      // perform do/ action asynchronously
      if (m_doActivity == null) {
        // todo : get error state from a new stereotype (instead of name "Error")
        m_doActivity = new AcsDoActivity("«name»", m_superContext.m_state«outgoing.get(0).target.name», m_superContext.m_stateError, logger, m_superContext.getSharedActivityExecutor() ) {
          public void runActions() throws AcsStateActionException 
          {
			«EXPAND ActionMethodCall FOR doActivity-»
          }
        };
      }
      m_doActivity.execute();
		«ENDIF-»
	}

	public void exit()
	{
		«IF doActivity != null-»
      m_doActivity.terminateActions();
		«ENDIF-»
	}
    
	// events handled by this state:
		«IF parentState().isTopState()»
			«EXPAND ConcreteEventMethod2 FOREACH outgoing»
		«ELSE»
			«EXPAND ConcreteEventMethod FOREACH outgoing»
		«ENDIF»
		
    
}    
	«ENDFILE»
«ENDDEFINE»

«DEFINE ActionMethodCall FOR Behavior»
		m_superContext.«name»();
«ENDDEFINE»

«DEFINE ConcreteEventMethod FOR Transition»
	«IF !trigger.isEmpty-»
	public void «getSignalName(this)»() {    
		«IF effect != null-»
			«EXPAND ActionMethodCall FOR effect-»
		«ENDIF-»
		m_superContext.m_state«target.name».activate("«getSignalName(this)»");
	}
	«ENDIF-»
«ENDDEFINE»

«DEFINE ConcreteEventMethod2 FOR Transition»
	«IF !trigger.isEmpty-»
	public void «getSignalName(this)»() {    
		«IF effect != null-»
			«EXPAND ActionMethodCall FOR effect-»
		«ENDIF-»
		m_context.setSubstate(m_superContext.m_state«target.name», "«getSignalName(this)»");
	}
	«ENDIF-»
«ENDDEFINE»