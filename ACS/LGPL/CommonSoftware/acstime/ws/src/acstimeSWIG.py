# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _acstimeSWIG
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


TCEqualTo = _acstimeSWIG.TCEqualTo
TCLessThan = _acstimeSWIG.TCLessThan
TCGreaterThan = _acstimeSWIG.TCGreaterThan
TCIndeterminate = _acstimeSWIG.TCIndeterminate
TSArray = _acstimeSWIG.TSArray
TSTAI = _acstimeSWIG.TSTAI
TSUTC = _acstimeSWIG.TSUTC
class Duration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Duration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Duration, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _acstimeSWIG.Duration_value_set
    __swig_getmethods__["value"] = _acstimeSWIG.Duration_value_get
    if _newclass:value = _swig_property(_acstimeSWIG.Duration_value_get, _acstimeSWIG.Duration_value_set)
    def __init__(self, *args): 
        this = _acstimeSWIG.new_Duration(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _acstimeSWIG.delete_Duration
    __del__ = lambda self : None;
Duration_swigregister = _acstimeSWIG.Duration_swigregister
Duration_swigregister(Duration)

class Epoch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Epoch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Epoch, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _acstimeSWIG.Epoch_value_set
    __swig_getmethods__["value"] = _acstimeSWIG.Epoch_value_get
    if _newclass:value = _swig_property(_acstimeSWIG.Epoch_value_get, _acstimeSWIG.Epoch_value_set)
    def __init__(self, *args): 
        this = _acstimeSWIG.new_Epoch(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _acstimeSWIG.delete_Epoch
    __del__ = lambda self : None;
Epoch_swigregister = _acstimeSWIG.Epoch_swigregister
Epoch_swigregister(Epoch)

class TimeUtil(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeUtil, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeUtil, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _acstimeSWIG.new_TimeUtil(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _acstimeSWIG.delete_TimeUtil
    __del__ = lambda self : None;
TimeUtil_swigregister = _acstimeSWIG.TimeUtil_swigregister
TimeUtil_swigregister(TimeUtil)

class DurationHelper(TimeUtil):
    __swig_setmethods__ = {}
    for _s in [TimeUtil]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DurationHelper, name, value)
    __swig_getmethods__ = {}
    for _s in [TimeUtil]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DurationHelper, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _acstimeSWIG.new_DurationHelper(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _acstimeSWIG.delete_DurationHelper
    __del__ = lambda self : None;
    def value(*args): return _acstimeSWIG.DurationHelper_value(*args)
    def positive(*args): return _acstimeSWIG.DurationHelper_positive(*args)
    def day(*args): return _acstimeSWIG.DurationHelper_day(*args)
    def hour(*args): return _acstimeSWIG.DurationHelper_hour(*args)
    def minute(*args): return _acstimeSWIG.DurationHelper_minute(*args)
    def second(*args): return _acstimeSWIG.DurationHelper_second(*args)
    def microSecond(*args): return _acstimeSWIG.DurationHelper_microSecond(*args)
    def normalize(*args): return _acstimeSWIG.DurationHelper_normalize(*args)
    def reset(*args): return _acstimeSWIG.DurationHelper_reset(*args)
    def compare(*args): return _acstimeSWIG.DurationHelper_compare(*args)
    def add(*args): return _acstimeSWIG.DurationHelper_add(*args)
    def __iadd__(*args): return _acstimeSWIG.DurationHelper___iadd__(*args)
    def subtract(*args): return _acstimeSWIG.DurationHelper_subtract(*args)
    def __isub__(*args): return _acstimeSWIG.DurationHelper___isub__(*args)
    def modulo(*args): return _acstimeSWIG.DurationHelper_modulo(*args)
    def __imod__(*args): return _acstimeSWIG.DurationHelper___imod__(*args)
    def multiply(*args): return _acstimeSWIG.DurationHelper_multiply(*args)
    def __imul__(*args): return _acstimeSWIG.DurationHelper___imul__(*args)
    def divide(*args): return _acstimeSWIG.DurationHelper_divide(*args)
    def __idiv__(*args): return _acstimeSWIG.DurationHelper___idiv__(*args)
    def toString(*args): return _acstimeSWIG.DurationHelper_toString(*args)
    def fromString(*args): return _acstimeSWIG.DurationHelper_fromString(*args)
DurationHelper_swigregister = _acstimeSWIG.DurationHelper_swigregister
DurationHelper_swigregister(DurationHelper)

class EpochHelper(TimeUtil):
    __swig_setmethods__ = {}
    for _s in [TimeUtil]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EpochHelper, name, value)
    __swig_getmethods__ = {}
    for _s in [TimeUtil]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EpochHelper, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _acstimeSWIG.new_EpochHelper(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _acstimeSWIG.delete_EpochHelper
    __del__ = lambda self : None;
    def value(*args): return _acstimeSWIG.EpochHelper_value(*args)
    def year(*args): return _acstimeSWIG.EpochHelper_year(*args)
    def month(*args): return _acstimeSWIG.EpochHelper_month(*args)
    def day(*args): return _acstimeSWIG.EpochHelper_day(*args)
    def dayOfYear(*args): return _acstimeSWIG.EpochHelper_dayOfYear(*args)
    def dayOfWeek(*args): return _acstimeSWIG.EpochHelper_dayOfWeek(*args)
    def hour(*args): return _acstimeSWIG.EpochHelper_hour(*args)
    def minute(*args): return _acstimeSWIG.EpochHelper_minute(*args)
    def second(*args): return _acstimeSWIG.EpochHelper_second(*args)
    def microSecond(*args): return _acstimeSWIG.EpochHelper_microSecond(*args)
    def normalize(*args): return _acstimeSWIG.EpochHelper_normalize(*args)
    def reset(*args): return _acstimeSWIG.EpochHelper_reset(*args)
    def compare(*args): return _acstimeSWIG.EpochHelper_compare(*args)
    def add(*args): return _acstimeSWIG.EpochHelper_add(*args)
    def subtract(*args): return _acstimeSWIG.EpochHelper_subtract(*args)
    def difference(*args): return _acstimeSWIG.EpochHelper_difference(*args)
    def toUTCdate(*args): return _acstimeSWIG.EpochHelper_toUTCdate(*args)
    def toJulianYear(*args): return _acstimeSWIG.EpochHelper_toJulianYear(*args)
    def toString(*args): return _acstimeSWIG.EpochHelper_toString(*args)
    def fromString(*args): return _acstimeSWIG.EpochHelper_fromString(*args)
EpochHelper_swigregister = _acstimeSWIG.EpochHelper_swigregister
EpochHelper_swigregister(EpochHelper)



