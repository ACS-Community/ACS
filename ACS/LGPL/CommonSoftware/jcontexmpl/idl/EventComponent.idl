/*
 *    ALMA - Atacama Large Millimiter Array
 *    (c) European Southern Observatory, 2002
 *    Copyright by ESO (in the framework of the ALMA collaboration),
 *    All rights reserved
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 2.1 of the License, or (at your option) any later version.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston, 
 *    MA 02111-1307  USA
 */
#ifndef _EVENTCOMPONENT_IDL_
#define _EVENTCOMPONENT_IDL_

#include <acscomponent.idl>
#include <ACSErrTypeCommon.idl>
#include <acsexmplFridge.idl>

#pragma prefix "alma"

module demo
{
    /**
     *
     */
    interface SupplierComp : ACS::ACSComponent
    {
        /**
         * Sends 'temperatureDataBlockEvent' events on the 'fridge' channel 
         * (event and channel defined in module acsexmpl).
         */
        void sendEvents (in short numEvents) 
        	raises (ACSErrTypeCommon::CouldntPerformActionEx);
        	
        /**
         * Sends the given sequence of 'NestedFridgeEvent's on the 'fridge' channel.
         * This method used an IDL event struct that is defined inside the IDL interface,
         * to probe namespace/package issues.
         */
        void sendEventsSpecial (in FRIDGE::FridgeControl::NestedFridgeEventSeq eventData) 
        	raises (ACSErrTypeCommon::CouldntPerformActionEx);        	
    };


    /**
     *
     */
    interface ConsumerComp : ACS::ACSComponent
    {
    };

    interface NCReceiver : ACS::ACSComponent
    {
    };

    interface NCPublisher : ACS::ACSComponent
    {
        void publish(in string name)
        	raises (ACSErrTypeCommon::CouldntPerformActionEx);        	
    };

};
#endif
