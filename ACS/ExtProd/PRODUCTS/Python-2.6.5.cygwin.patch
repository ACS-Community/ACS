diff -Naur Python-2.6.5_old//Include/py_curses.h Python-2.6.5/Include/py_curses.h
--- Python-2.6.5_old//Include/py_curses.h	2009-09-06 17:23:05.000000000 -0400
+++ Python-2.6.5/Include/py_curses.h	2010-11-18 15:25:12.484375000 -0300
@@ -44,6 +44,10 @@
 #endif
 #endif
 
+#ifdef __CYGWIN__
+#define NCURSES_INTERNALS
+#endif
+
 #ifdef HAVE_NCURSES_H
 #include <ncurses.h>
 #else
diff -Naur Python-2.6.5_old//Include/pyerrors.h Python-2.6.5/Include/pyerrors.h
--- Python-2.6.5_old//Include/pyerrors.h	2008-06-09 00:58:54.000000000 -0400
+++ Python-2.6.5/Include/pyerrors.h	2010-11-18 15:27:13.218750000 -0300
@@ -232,7 +232,7 @@
 PyAPI_FUNC(void) PyErr_SetInterrupt(void);
 
 /* In signalmodule.c */
-int PySignal_SetWakeupFd(int fd);
+PyAPI_FUNC(int) PySignal_SetWakeupFd(int fd);
 
 /* Support for adding program text to SyntaxErrors */
 PyAPI_FUNC(void) PyErr_SyntaxLocation(const char *, int);
diff -Naur Python-2.6.5_old//Lib/ctypes/util.py Python-2.6.5/Lib/ctypes/util.py
--- Python-2.6.5_old//Lib/ctypes/util.py	2009-05-05 14:59:30.000000000 -0400
+++ Python-2.6.5/Lib/ctypes/util.py	2010-11-18 15:19:55.703125000 -0300
@@ -84,6 +84,20 @@
                 continue
         return None
 
+elif sys.platform == "cygwin":
+    def find_library(name):
+        for libdir in ['/usr/lib', '/usr/local/lib']:
+            for libext in ['lib%s.dll.a' % name, 'lib%s.a' % name]:
+                implib = os.path.join(libdir, libext)
+                if not os.path.exists(implib):
+                    continue
+                cmd = "dlltool -I " + implib + " 2>/dev/null"
+                res = os.popen(cmd).read().replace("\n","")
+                if not res:
+                    continue
+                return res
+        return None
+
 elif os.name == "posix":
     # Andreas Degert's find functions, using gcc, /sbin/ldconfig, objdump
     import re, tempfile, errno
@@ -232,6 +246,10 @@
             print cdll.LoadLibrary("libcrypto.dylib")
             print cdll.LoadLibrary("libSystem.dylib")
             print cdll.LoadLibrary("System.framework/System")
+        elif sys.platform == "cygwin":
+            print cdll.LoadLibrary("cygbz2-1.dll") 
+            print find_library("crypt")
+            print cdll.LoadLibrary("cygcrypt-0.dll") 
         else:
             print cdll.LoadLibrary("libm.so")
             print cdll.LoadLibrary("libcrypt.so")
#diff -Naur Python-2.6.5_old//Makefile.pre.in Python-2.6.5/Makefile.pre.in
#--- Python-2.6.5_old//Makefile.pre.in	2009-12-24 11:19:38.000000000 -0300
#+++ Python-2.6.5/Makefile.pre.in	2010-11-18 15:27:42.656250000 -0300
#@@ -910,7 +910,7 @@
# 	mkdir $(srcdir)/Lib/$(PLATDIR)
# 	cp $(srcdir)/Lib/plat-generic/regen $(srcdir)/Lib/$(PLATDIR)/regen
# 	export PATH; PATH="`pwd`:$$PATH"; \
#-	export PYTHONPATH; PYTHONPATH="`pwd`/Lib"; \
#+	export PYTHONPATH; PYTHONPATH="$(srcdir)/Lib"; \
# 	export DYLD_FRAMEWORK_PATH; DYLD_FRAMEWORK_PATH="`pwd`"; \
# 	export EXE; EXE="$(BUILDEXE)"; \
# 	cd $(srcdir)/Lib/$(PLATDIR); $(RUNSHARED) ./regen
#@@ -1005,7 +1005,7 @@
# 	   	--prefix=$(prefix) \
# 		--install-scripts=$(BINDIR) \
# 		--install-platlib=$(DESTSHARED) \
#-		--root=/$(DESTDIR)
#+		--root=$(DESTDIR)
# 
# # Here are a couple of targets for MacOSX again, to install a full
# # framework-based Python. frameworkinstall installs everything, the
#@@ -1085,7 +1085,7 @@
# 	./$(BUILDPYTHON) $(srcdir)/Tools/scripts/setup.py install \
# 	--prefix=$(prefix) \
# 	--install-scripts=$(BINDIR) \
#-	--root=/$(DESTDIR)
#+	--root=$(DESTDIR)
# 
# # Build the toplevel Makefile
# Makefile.pre: Makefile.pre.in config.status
diff -Naur Python-2.6.5_old//Modules/_ssl.c Python-2.6.5/Modules/_ssl.c
--- Python-2.6.5_old//Modules/_ssl.c	2010-03-03 09:34:43.000000000 -0300
+++ Python-2.6.5/Modules/_ssl.c	2010-11-18 15:26:35.578125000 -0300
@@ -15,6 +15,10 @@
 
 #include "Python.h"
 
+#ifdef __CYGWIN__
+#undef WITH_THREAD
+#endif
+
 #ifdef WITH_THREAD
 #include "pythread.h"
 #define PySSL_BEGIN_ALLOW_THREADS { \
diff -Naur Python-2.6.5_old//setup.py Python-2.6.5/setup.py
--- Python-2.6.5_old//setup.py	2010-03-08 04:08:25.000000000 -0300
+++ Python-2.6.5/setup.py	2010-11-18 15:28:02.156250000 -0300
@@ -405,7 +405,7 @@
 
         # Check for MacOS X, which doesn't need libm.a at all
         math_libs = ['m']
-        if platform in ['darwin', 'beos', 'mac']:
+        if platform in ['darwin', 'beos', 'mac', 'cygwin']:
             math_libs = []
 
         # XXX Omitted modules: gl, pure, dl, SGI-specific modules
@@ -1013,11 +1013,13 @@
             missing.append('bsddb185')
 
         # The standard Unix dbm module:
-        if platform not in ['cygwin']:
+        if platform not in ['win32']:
             if find_file("ndbm.h", inc_dirs, []) is not None:
                 # Some systems have -lndbm, others don't
                 if self.compiler.find_library_file(lib_dirs, 'ndbm'):
                     ndbm_libs = ['ndbm']
+                elif self.compiler.find_library_file(lib_dirs, 'gdbm_compat'):
+                    ndbm_libs = ['gdbm_compat']
                 else:
                     ndbm_libs = []
                 exts.append( Extension('dbm', ['dbmmodule.c'],
@@ -1200,18 +1202,15 @@
         #
         # More information on Expat can be found at www.libexpat.org.
         #
-        expatinc = os.path.join(os.getcwd(), srcdir, 'Modules', 'expat')
-        define_macros = [
-            ('HAVE_EXPAT_CONFIG_H', '1'),
-        ]
+        # Use system expat
+        expatinc = '/usr/include'
+        define_macros = []
 
         exts.append(Extension('pyexpat',
                               define_macros = define_macros,
                               include_dirs = [expatinc],
+                              libraries = ['expat'],
                               sources = ['pyexpat.c',
-                                         'expat/xmlparse.c',
-                                         'expat/xmlrole.c',
-                                         'expat/xmltok.c',
                                          ],
                               ))
 
@@ -1223,6 +1222,7 @@
             exts.append(Extension('_elementtree',
                                   define_macros = define_macros,
                                   include_dirs = [expatinc],
+                                  libraries = ['expat'],
                                   sources = ['_elementtree.c'],
                                   ))
         else:
@@ -1600,6 +1600,8 @@
         if platform == 'sunos5':
             include_dirs.append('/usr/openwin/include')
             added_lib_dirs.append('/usr/openwin/lib')
+        elif platform == 'cygwin':
+            include_dirs.append('/usr/include')
         elif os.path.exists('/usr/X11R6/include'):
             include_dirs.append('/usr/X11R6/include')
             added_lib_dirs.append('/usr/X11R6/lib64')
@@ -1783,6 +1785,11 @@
         if not '--with-system-ffi' in sysconfig.get_config_var("CONFIG_ARGS"):
             return
 
+        if sys.platform == 'cygwin':
+            # provided by GCC
+            ext.libraries.append('ffi')
+            self.use_system_libffi = True
+
         if sys.platform == 'darwin':
             # OS X 10.5 comes with libffi.dylib; the include files are
             # in /usr/include/ffi
